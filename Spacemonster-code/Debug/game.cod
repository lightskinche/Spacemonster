; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\game.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__186FF47F_stat@h DB 01H
__8C55BF2C_SDL_stdinc@h DB 01H
__A594C705_SDL_endian@h DB 01H
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__6853117E_SDL_rect@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__AA8A7083_game@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_GAME_WaveInit
PUBLIC	_GAME_AddEnemies
PUBLIC	_GAME_HandleEnemies
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_09NOIJFDFO@added?5?$CFd?6@		; `string'
PUBLIC	??_C@_0M@KDJLAENM@exotic?5shop@			; `string'
PUBLIC	??_C@_0M@KCFKOELE@normal?5shop@			; `string'
PUBLIC	??_C@_06BENPFJFP@Wave?3?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0M@JGOKHPLJ@reserve?3?$CFd?6@		; `string'
PUBLIC	__real@3e000000
PUBLIC	__real@3e333333
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@447a0000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__puts:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__rand:PROC
EXTRN	_strcat:PROC
EXTRN	__imp__clock:PROC
EXTRN	_TTF_RenderText_Blended:PROC
EXTRN	_CreateTexture2D:PROC
EXTRN	_LIST_AddElement:PROC
EXTRN	_LIST_At:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_glad_glBindTexture:DWORD
EXTRN	_window_height:DWORD
EXTRN	_delta_time:DWORD
EXTRN	_overtime_bell_rung:DWORD
EXTRN	_wave_text:DWORD
EXTRN	_font_1:DWORD
EXTRN	_white:DWORD
EXTRN	_reserve:DWORD
EXTRN	_wave_num:WORD
EXTRN	_wave:DWORD
EXTRN	_active_en:DWORD
EXTRN	_enemy_counter:DWORD
EXTRN	_texture:BYTE
EXTRN	_enemies:QWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
?timer@?1??GAME_AddEnemies@@9@9 DD 01H DUP (?)		; `GAME_AddEnemies'::`2'::timer
?time_withoutreserve@?1??GAME_AddEnemies@@9@9 DD 01H DUP (?) ; `GAME_AddEnemies'::`2'::time_withoutreserve
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3e333333
CONST	SEGMENT
__real@3e333333 DD 03e333333r			; 0.175
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0M@JGOKHPLJ@reserve?3?$CFd?6@
CONST	SEGMENT
??_C@_0M@JGOKHPLJ@reserve?3?$CFd?6@ DB 'reserve:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BENPFJFP@Wave?3?$AA@
CONST	SEGMENT
??_C@_06BENPFJFP@Wave?3?$AA@ DB 'Wave:', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCFKOELE@normal?5shop@
CONST	SEGMENT
??_C@_0M@KCFKOELE@normal?5shop@ DB 'normal shop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDJLAENM@exotic?5shop@
CONST	SEGMENT
??_C@_0M@KDJLAENM@exotic?5shop@ DB 'exotic shop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NOIJFDFO@added?5?$CFd?6@
CONST	SEGMENT
??_C@_09NOIJFDFO@added?5?$CFd?6@ DB 'added %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@ DB 'reserve is %d', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\game.c
;	COMDAT _GAME_HandleEnemies
_TEXT	SEGMENT
_sprite$1 = -32						; size = 4
_tmp_enemy$2 = -20					; size = 4
_i$3 = -8						; size = 4
_list$ = 8						; size = 4
_GAME_HandleEnemies PROC				; COMDAT

; 61   : void GAME_HandleEnemies(const linkedList* const list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AA8A7083_game@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   : 	for (int i = 0; i < list->count; ++i) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@GAME_Handl
$LN2@GAME_Handl:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@GAME_Handl:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _i$3[ebp]
  00040	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00043	7d 38		 jge	 SHORT $LN3@GAME_Handl

; 63   : 		enemy* tmp_enemy = LIST_At(&enemies, i);

  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET _enemies
  0004e	e8 00 00 00 00	 call	 _LIST_At
  00053	83 c4 08	 add	 esp, 8
  00056	89 45 ec	 mov	 DWORD PTR _tmp_enemy$2[ebp], eax

; 64   : 		if (tmp_enemy) {

  00059	83 7d ec 00	 cmp	 DWORD PTR _tmp_enemy$2[ebp], 0
  0005d	74 1c		 je	 SHORT $LN5@GAME_Handl

; 65   : 			text_quad* sprite = &tmp_enemy->sprite;

  0005f	8b 45 ec	 mov	 eax, DWORD PTR _tmp_enemy$2[ebp]
  00062	89 45 e0	 mov	 DWORD PTR _sprite$1[ebp], eax

; 66   : 			sprite->x = sprite->x - delta_time;

  00065	8b 45 e0	 mov	 eax, DWORD PTR _sprite$1[ebp]
  00068	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0006c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR _delta_time
  00074	8b 4d e0	 mov	 ecx, DWORD PTR _sprite$1[ebp]
  00077	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
$LN5@GAME_Handl:

; 67   : 		}
; 68   : 	}

  0007b	eb b4		 jmp	 SHORT $LN2@GAME_Handl
$LN3@GAME_Handl:

; 69   : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_GAME_HandleEnemies ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\game.c
;	COMDAT _GAME_AddEnemies
_TEXT	SEGMENT
tv211 = -316						; size = 8
tv207 = -308						; size = 4
tv202 = -304						; size = 8
tv199 = -296						; size = 4
tv237 = -292						; size = 4
tv188 = -288						; size = 8
tv184 = -280						; size = 4
_tmp_enemy$1 = -80					; size = 4
_tmp_text_quad$2 = -68					; size = 28
_tmp_bitshift$3 = -32					; size = 4
_tmp$4 = -20						; size = 4
_time$ = -8						; size = 4
_GAME_AddEnemies PROC					; COMDAT

; 30   : void GAME_AddEnemies(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00012	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AA8A7083_game@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 31   : 	static float timer = 0;
; 32   : 	static time_withoutreserve = 0;
; 33   : 	clock_t time = clock() + 1000;

  00028	8b f4		 mov	 esi, esp
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  0003c	89 45 f8	 mov	 DWORD PTR _time$[ebp], eax

; 34   : 	time /= CLOCKS_PER_SEC;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _time$[ebp]
  00042	99		 cdq
  00043	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00048	f7 f9		 idiv	 ecx
  0004a	89 45 f8	 mov	 DWORD PTR _time$[ebp], eax

; 35   : 	if ((timer <= 0 && (!(time % (9 - enemy_counter)))) && reserve > 0) {

  0004d	0f 57 c0	 xorps	 xmm0, xmm0
  00050	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9
  00057	0f 82 28 02 00
	00		 jb	 $LN2@GAME_AddEn
  0005d	b9 09 00 00 00	 mov	 ecx, 9
  00062	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _enemy_counter
  00068	8b 45 f8	 mov	 eax, DWORD PTR _time$[ebp]
  0006b	33 d2		 xor	 edx, edx
  0006d	f7 f1		 div	 ecx
  0006f	85 d2		 test	 edx, edx
  00071	0f 85 0e 02 00
	00		 jne	 $LN2@GAME_AddEn
  00077	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reserve, 0
  0007e	0f 8e 01 02 00
	00		 jle	 $LN2@GAME_AddEn
$ADDEN$14:

; 36   : 	ADDEN:
; 37   : 		timer = 1000; //so that it doesn't place 500 enemys every 9 - enemy_count seconds

  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  0008c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9, xmm0

; 38   : 		unsigned int tmp = 0;

  00094	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _tmp$4[ebp], 0

; 39   : 		if ((enemy_counter - 1) != 0)

  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR _enemy_counter
  000a0	83 e8 01	 sub	 eax, 1
  000a3	74 1f		 je	 SHORT $LN4@GAME_AddEn

; 40   : 			tmp = rand() % (enemy_counter - 1);

  000a5	8b f4		 mov	 esi, esp
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _enemy_counter
  000ba	83 e9 01	 sub	 ecx, 1
  000bd	33 d2		 xor	 edx, edx
  000bf	f7 f1		 div	 ecx
  000c1	89 55 ec	 mov	 DWORD PTR _tmp$4[ebp], edx
$LN4@GAME_AddEn:

; 41   : 		unsigned int tmp_bitshift = FEDERATION_SCOUT << tmp;

  000c4	b8 01 00 00 00	 mov	 eax, 1
  000c9	8b 4d ec	 mov	 ecx, DWORD PTR _tmp$4[ebp]
  000cc	d3 e0		 shl	 eax, cl
  000ce	89 45 e0	 mov	 DWORD PTR _tmp_bitshift$3[ebp], eax

; 42   : 		if (!(active_en & tmp_bitshift))

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR _active_en
  000d6	23 45 e0	 and	 eax, DWORD PTR _tmp_bitshift$3[ebp]
  000d9	75 0d		 jne	 SHORT $LN5@GAME_AddEn

; 43   : 			tmp_bitshift = CIVILIAN_RANCHER << tmp;

  000db	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  000e0	8b 4d ec	 mov	 ecx, DWORD PTR _tmp$4[ebp]
  000e3	d3 e0		 shl	 eax, cl
  000e5	89 45 e0	 mov	 DWORD PTR _tmp_bitshift$3[ebp], eax
$LN5@GAME_AddEn:

; 44   : 
; 45   : 		text_quad tmp_text_quad = { 0.9,PIXEL_TO_NDCY((float)(rand() % window_height), window_height),0.175,0.125,texture[3],0,0 }; //texture width and height not relevant... yet

  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000f0	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_text_quad$2[ebp], xmm0
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR _window_height
  000fa	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv184[ebp], eax
  00100	f2 0f 2a 85 e8
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv184[ebp]
  00108	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv184[ebp]
  0010e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00111	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0011a	f2 0f 11 85 e0
	fe ff ff	 movsd	 QWORD PTR tv188[ebp], xmm0
  00122	f2 0f 5a 85 e0
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv188[ebp]
  0012a	8b f4		 mov	 esi, esp
  0012c	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR tv237[ebp], xmm0
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0013a	3b f4		 cmp	 esi, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	33 d2		 xor	 edx, edx
  00143	f7 35 00 00 00
	00		 div	 DWORD PTR _window_height
  00149	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv199[ebp], edx
  0014f	f2 0f 2a 85 d8
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv199[ebp]
  00157	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR tv199[ebp]
  0015d	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00160	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  00169	f2 0f 11 85 d0
	fe ff ff	 movsd	 QWORD PTR tv202[ebp], xmm0
  00171	f2 0f 5a 85 d0
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv202[ebp]
  00179	f3 0f 10 8d dc
	fe ff ff	 movss	 xmm1, DWORD PTR tv237[ebp]
  00181	f3 0f 5c c8	 subss	 xmm1, xmm0
  00185	a1 00 00 00 00	 mov	 eax, DWORD PTR _window_height
  0018a	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv207[ebp], eax
  00190	f2 0f 2a 85 cc
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv207[ebp]
  00198	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv207[ebp]
  0019e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001a1	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  001aa	f2 0f 11 85 c4
	fe ff ff	 movsd	 QWORD PTR tv211[ebp], xmm0
  001b2	f2 0f 5a 85 c4
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv211[ebp]
  001ba	f3 0f 5e c8	 divss	 xmm1, xmm0
  001be	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  001c6	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  001ce	f3 0f 11 4d c0	 movss	 DWORD PTR _tmp_text_quad$2[ebp+4], xmm1
  001d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e333333
  001db	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_text_quad$2[ebp+8], xmm0
  001e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e000000
  001e8	f3 0f 11 45 c8	 movss	 DWORD PTR _tmp_text_quad$2[ebp+12], xmm0
  001ed	b8 04 00 00 00	 mov	 eax, 4
  001f2	6b c8 03	 imul	 ecx, eax, 3
  001f5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  001fb	89 55 cc	 mov	 DWORD PTR _tmp_text_quad$2[ebp+16], edx
  001fe	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _tmp_text_quad$2[ebp+20], 0
  00205	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _tmp_text_quad$2[ebp+24], 0

; 46   : 		enemy* tmp_enemy = calloc(1, sizeof(enemy));

  0020c	8b f4		 mov	 esi, esp
  0020e	6a 28		 push	 40			; 00000028H
  00210	6a 01		 push	 1
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00218	83 c4 08	 add	 esp, 8
  0021b	3b f4		 cmp	 esi, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00222	89 45 b0	 mov	 DWORD PTR _tmp_enemy$1[ebp], eax

; 47   : 		tmp_enemy->sprite = tmp_text_quad, tmp_enemy->health = 20 * tmp_bitshift, tmp_enemy->score = 10 * tmp_bitshift * 3, tmp_enemy->id = tmp_bitshift;

  00225	b9 07 00 00 00	 mov	 ecx, 7
  0022a	8d 75 bc	 lea	 esi, DWORD PTR _tmp_text_quad$2[ebp]
  0022d	8b 7d b0	 mov	 edi, DWORD PTR _tmp_enemy$1[ebp]
  00230	f3 a5		 rep movsd
  00232	6b 45 e0 14	 imul	 eax, DWORD PTR _tmp_bitshift$3[ebp], 20
  00236	8b 4d b0	 mov	 ecx, DWORD PTR _tmp_enemy$1[ebp]
  00239	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0023c	6b 55 e0 0a	 imul	 edx, DWORD PTR _tmp_bitshift$3[ebp], 10
  00240	6b c2 03	 imul	 eax, edx, 3
  00243	8b 4d b0	 mov	 ecx, DWORD PTR _tmp_enemy$1[ebp]
  00246	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00249	8b 55 b0	 mov	 edx, DWORD PTR _tmp_enemy$1[ebp]
  0024c	8b 45 e0	 mov	 eax, DWORD PTR _tmp_bitshift$3[ebp]
  0024f	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 48   : 		LIST_AddElement(&enemies, tmp_enemy);

  00252	8b 45 b0	 mov	 eax, DWORD PTR _tmp_enemy$1[ebp]
  00255	50		 push	 eax
  00256	68 00 00 00 00	 push	 OFFSET _enemies
  0025b	e8 00 00 00 00	 call	 _LIST_AddElement
  00260	83 c4 08	 add	 esp, 8

; 49   : 		reserve -= tmp_bitshift;

  00263	a1 00 00 00 00	 mov	 eax, DWORD PTR _reserve
  00268	2b 45 e0	 sub	 eax, DWORD PTR _tmp_bitshift$3[ebp]
  0026b	a3 00 00 00 00	 mov	 DWORD PTR _reserve, eax

; 50   : 		printf("reserve:%d\n", reserve);

  00270	a1 00 00 00 00	 mov	 eax, DWORD PTR _reserve
  00275	50		 push	 eax
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JGOKHPLJ@reserve?3?$CFd?6@
  0027b	e8 00 00 00 00	 call	 _printf
  00280	83 c4 08	 add	 esp, 8

; 51   : 	}

  00283	eb 45		 jmp	 SHORT $LN8@GAME_AddEn
$LN2@GAME_AddEn:

; 52   : 	else if (time_withoutreserve >= 100 && !(time % 1) && timer <= 0) {

  00285	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR ?time_withoutreserve@?1??GAME_AddEnemies@@9@9, 100 ; 00000064H
  0028c	7c 26		 jl	 SHORT $LN6@GAME_AddEn
  0028e	8b 45 f8	 mov	 eax, DWORD PTR _time$[ebp]
  00291	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00296	79 05		 jns	 SHORT $LN13@GAME_AddEn
  00298	48		 dec	 eax
  00299	83 c8 ff	 or	 eax, -1
  0029c	40		 inc	 eax
$LN13@GAME_AddEn:
  0029d	85 c0		 test	 eax, eax
  0029f	75 13		 jne	 SHORT $LN6@GAME_AddEn
  002a1	0f 57 c0	 xorps	 xmm0, xmm0
  002a4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9
  002ab	72 07		 jb	 SHORT $LN6@GAME_AddEn

; 53   : 		goto ADDEN;

  002ad	e9 d2 fd ff ff	 jmp	 $ADDEN$14

; 54   : 	}

  002b2	eb 16		 jmp	 SHORT $LN8@GAME_AddEn
$LN6@GAME_AddEn:

; 55   : 	else if (reserve <= 0) {

  002b4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reserve, 0
  002bb	7f 0d		 jg	 SHORT $LN8@GAME_AddEn

; 56   : 		time_withoutreserve = time_withoutreserve + 1;

  002bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?time_withoutreserve@?1??GAME_AddEnemies@@9@9
  002c2	83 c0 01	 add	 eax, 1
  002c5	a3 00 00 00 00	 mov	 DWORD PTR ?time_withoutreserve@?1??GAME_AddEnemies@@9@9, eax
$LN8@GAME_AddEn:

; 57   : 	}
; 58   : 
; 59   : 	--timer;

  002ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9
  002d2	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  002da	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9, xmm0

; 60   : }

  002e2	52		 push	 edx
  002e3	8b cd		 mov	 ecx, ebp
  002e5	50		 push	 eax
  002e6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@GAME_AddEn
  002ec	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002f1	58		 pop	 eax
  002f2	5a		 pop	 edx
  002f3	5f		 pop	 edi
  002f4	5e		 pop	 esi
  002f5	5b		 pop	 ebx
  002f6	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  002fc	3b ec		 cmp	 ebp, esp
  002fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00303	8b e5		 mov	 esp, ebp
  00305	5d		 pop	 ebp
  00306	c3		 ret	 0
  00307	90		 npad	 1
$LN12@GAME_AddEn:
  00308	01 00 00 00	 DD	 1
  0030c	00 00 00 00	 DD	 $LN11@GAME_AddEn
$LN11@GAME_AddEn:
  00310	bc ff ff ff	 DD	 -68			; ffffffbcH
  00314	1c 00 00 00	 DD	 28			; 0000001cH
  00318	00 00 00 00	 DD	 $LN10@GAME_AddEn
$LN10@GAME_AddEn:
  0031c	74		 DB	 116			; 00000074H
  0031d	6d		 DB	 109			; 0000006dH
  0031e	70		 DB	 112			; 00000070H
  0031f	5f		 DB	 95			; 0000005fH
  00320	74		 DB	 116			; 00000074H
  00321	65		 DB	 101			; 00000065H
  00322	78		 DB	 120			; 00000078H
  00323	74		 DB	 116			; 00000074H
  00324	5f		 DB	 95			; 0000005fH
  00325	71		 DB	 113			; 00000071H
  00326	75		 DB	 117			; 00000075H
  00327	61		 DB	 97			; 00000061H
  00328	64		 DB	 100			; 00000064H
  00329	00		 DB	 0
_GAME_AddEnemies ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\game.c
;	COMDAT _GAME_WaveInit
_TEXT	SEGMENT
_tmp_buffer$ = -28					; size = 8
_tmp$1 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_GAME_WaveInit PROC					; COMDAT

; 3    : void GAME_WaveInit(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __AA8A7083_game@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4    : 	reserve = wave * 20;

  00032	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _wave, 20
  00039	a3 00 00 00 00	 mov	 DWORD PTR _reserve, eax

; 5    : 	overtime_bell_rung = false;

  0003e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _overtime_bell_rung, 0

; 6    : 	printf("reserve is %d\n", reserve);

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR _reserve
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@
  00053	e8 00 00 00 00	 call	 _printf
  00058	83 c4 08	 add	 esp, 8

; 7    : 	if (!(wave % 3)) { // reforcement round

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00060	33 d2		 xor	 edx, edx
  00062	b9 03 00 00 00	 mov	 ecx, 3
  00067	f7 f1		 div	 ecx
  00069	85 d2		 test	 edx, edx
  0006b	0f 85 b7 00 00
	00		 jne	 $LN2@GAME_WaveI

; 8    : 		unsigned int tmp = rand() % 2;

  00071	8b f4		 mov	 esi, esp
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00085	79 05		 jns	 SHORT $LN12@GAME_WaveI
  00087	48		 dec	 eax
  00088	83 c8 fe	 or	 eax, -2			; fffffffeH
  0008b	40		 inc	 eax
$LN12@GAME_WaveI:
  0008c	89 45 f4	 mov	 DWORD PTR _tmp$1[ebp], eax

; 9    : 		//can add federation ship or civilian ship based on chance, players should hope for civilian ships
; 10   : 		if (tmp)

  0008f	83 7d f4 00	 cmp	 DWORD PTR _tmp$1[ebp], 0
  00093	74 44		 je	 SHORT $LN3@GAME_WaveI

; 11   : 			active_en = FEDERATION_SCOUT << (wave / 3), printf("added %d\n", FEDERATION_SCOUT << (wave / 3));

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  0009a	33 d2		 xor	 edx, edx
  0009c	b9 03 00 00 00	 mov	 ecx, 3
  000a1	f7 f1		 div	 ecx
  000a3	ba 01 00 00 00	 mov	 edx, 1
  000a8	8b c8		 mov	 ecx, eax
  000aa	d3 e2		 shl	 edx, cl
  000ac	89 15 00 00 00
	00		 mov	 DWORD PTR _active_en, edx
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000b7	33 d2		 xor	 edx, edx
  000b9	b9 03 00 00 00	 mov	 ecx, 3
  000be	f7 f1		 div	 ecx
  000c0	ba 01 00 00 00	 mov	 edx, 1
  000c5	8b c8		 mov	 ecx, eax
  000c7	d3 e2		 shl	 edx, cl
  000c9	52		 push	 edx
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_09NOIJFDFO@added?5?$CFd?6@
  000cf	e8 00 00 00 00	 call	 _printf
  000d4	83 c4 08	 add	 esp, 8
  000d7	eb 42		 jmp	 SHORT $LN4@GAME_WaveI
$LN3@GAME_WaveI:

; 12   : 		else
; 13   : 			active_en = FEDERATION_FLAGSHIP << (wave / 3), printf("added %d\n", FEDERATION_FLAGSHIP << (wave / 3)); //the next bit shift will make it a civilian rancher

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000de	33 d2		 xor	 edx, edx
  000e0	b9 03 00 00 00	 mov	 ecx, 3
  000e5	f7 f1		 div	 ecx
  000e7	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000ec	8b c8		 mov	 ecx, eax
  000ee	d3 e2		 shl	 edx, cl
  000f0	89 15 00 00 00
	00		 mov	 DWORD PTR _active_en, edx
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000fb	33 d2		 xor	 edx, edx
  000fd	b9 03 00 00 00	 mov	 ecx, 3
  00102	f7 f1		 div	 ecx
  00104	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00109	8b c8		 mov	 ecx, eax
  0010b	d3 e2		 shl	 edx, cl
  0010d	52		 push	 edx
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_09NOIJFDFO@added?5?$CFd?6@
  00113	e8 00 00 00 00	 call	 _printf
  00118	83 c4 08	 add	 esp, 8
$LN4@GAME_WaveI:

; 14   : 		enemy_counter++;

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR _enemy_counter
  00120	83 c0 01	 add	 eax, 1
  00123	a3 00 00 00 00	 mov	 DWORD PTR _enemy_counter, eax
$LN2@GAME_WaveI:

; 15   : 	}
; 16   : 	if (!(wave % 5)) { //exotic shop appears every 5 waves

  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  0012d	33 d2		 xor	 edx, edx
  0012f	b9 05 00 00 00	 mov	 ecx, 5
  00134	f7 f1		 div	 ecx
  00136	85 d2		 test	 edx, edx
  00138	75 19		 jne	 SHORT $LN5@GAME_WaveI

; 17   : 		puts("exotic shop");

  0013a	8b f4		 mov	 esi, esp
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KDJLAENM@exotic?5shop@
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00147	83 c4 04	 add	 esp, 4
  0014a	3b f4		 cmp	 esi, esp
  0014c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 18   : 	}

  00151	eb 20		 jmp	 SHORT $LN6@GAME_WaveI
$LN5@GAME_WaveI:

; 19   : 	else if (wave > 1) { //opens the normal shop, makes sure that it opens it after you complete the first wave 

  00153	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _wave, 1
  0015a	76 17		 jbe	 SHORT $LN6@GAME_WaveI

; 20   : 		puts("normal shop");

  0015c	8b f4		 mov	 esi, esp
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KCFKOELE@normal?5shop@
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00169	83 c4 04	 add	 esp, 4
  0016c	3b f4		 cmp	 esi, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@GAME_WaveI:

; 21   : 	}
; 22   : 	//update the wave counter onscreen
; 23   : 	char tmp_buffer[8] = "Wave:\0";

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06BENPFJFP@Wave?3?$AA@
  00178	89 45 e4	 mov	 DWORD PTR _tmp_buffer$[ebp], eax
  0017b	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06BENPFJFP@Wave?3?$AA@+4
  00182	66 89 4d e8	 mov	 WORD PTR _tmp_buffer$[ebp+4], cx
  00186	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06BENPFJFP@Wave?3?$AA@+6
  0018c	88 55 ea	 mov	 BYTE PTR _tmp_buffer$[ebp+6], dl
  0018f	33 c0		 xor	 eax, eax
  00191	88 45 eb	 mov	 BYTE PTR _tmp_buffer$[ebp+7], al

; 24   : 	sprintf(wave_num, "%d", wave);

  00194	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00199	50		 push	 eax
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0019f	68 00 00 00 00	 push	 OFFSET _wave_num
  001a4	e8 00 00 00 00	 call	 _sprintf
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 25   : 	strcat(tmp_buffer, wave_num);

  001ac	68 00 00 00 00	 push	 OFFSET _wave_num
  001b1	8d 45 e4	 lea	 eax, DWORD PTR _tmp_buffer$[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _strcat
  001ba	83 c4 08	 add	 esp, 8

; 26   : 	wave_text = TTF_RenderText_Blended(font_1, tmp_buffer, white);

  001bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  001c2	50		 push	 eax
  001c3	8d 4d e4	 lea	 ecx, DWORD PTR _tmp_buffer$[ebp]
  001c6	51		 push	 ecx
  001c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _font_1
  001cd	52		 push	 edx
  001ce	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d6	a3 00 00 00 00	 mov	 DWORD PTR _wave_text, eax

; 27   : 	glBindTexture(GL_TEXTURE_2D, texture[4]);

  001db	b8 04 00 00 00	 mov	 eax, 4
  001e0	c1 e0 02	 shl	 eax, 2
  001e3	8b f4		 mov	 esi, esp
  001e5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  001eb	51		 push	 ecx
  001ec	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  001f7	3b f4		 cmp	 esi, esp
  001f9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 28   : 	CreateTexture2D(wave_text, GL_RGBA, true, NULL, NULL);

  001fe	6a 00		 push	 0
  00200	6a 00		 push	 0
  00202	6a 01		 push	 1
  00204	68 08 19 00 00	 push	 6408			; 00001908H
  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave_text
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 _CreateTexture2D
  00214	83 c4 14	 add	 esp, 20			; 00000014H

; 29   : }

  00217	52		 push	 edx
  00218	8b cd		 mov	 ecx, ebp
  0021a	50		 push	 eax
  0021b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@GAME_WaveI
  00221	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00226	58		 pop	 eax
  00227	5a		 pop	 edx
  00228	5f		 pop	 edi
  00229	5e		 pop	 esi
  0022a	5b		 pop	 ebx
  0022b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022e	33 cd		 xor	 ecx, ebp
  00230	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00235	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0023b	3b ec		 cmp	 ebp, esp
  0023d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00242	8b e5		 mov	 esp, ebp
  00244	5d		 pop	 ebp
  00245	c3		 ret	 0
  00246	66 90		 npad	 2
$LN11@GAME_WaveI:
  00248	01 00 00 00	 DD	 1
  0024c	00 00 00 00	 DD	 $LN10@GAME_WaveI
$LN10@GAME_WaveI:
  00250	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00254	08 00 00 00	 DD	 8
  00258	00 00 00 00	 DD	 $LN9@GAME_WaveI
$LN9@GAME_WaveI:
  0025c	74		 DB	 116			; 00000074H
  0025d	6d		 DB	 109			; 0000006dH
  0025e	70		 DB	 112			; 00000070H
  0025f	5f		 DB	 95			; 0000005fH
  00260	62		 DB	 98			; 00000062H
  00261	75		 DB	 117			; 00000075H
  00262	66		 DB	 102			; 00000066H
  00263	66		 DB	 102			; 00000066H
  00264	65		 DB	 101			; 00000065H
  00265	72		 DB	 114			; 00000072H
  00266	00		 DB	 0
_GAME_WaveInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vsprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00028	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00033	52		 push	 edx
  00034	6a ff		 push	 -1
  00036	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __vsnprintf_l
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	83 ca 01	 or	 edx, 1
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	50		 push	 eax
  0004c	52		 push	 edx
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00053	83 c4 1c	 add	 esp, 28			; 0000001cH
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00060	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00064	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  00066	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00070	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00072	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  00075	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0007b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
