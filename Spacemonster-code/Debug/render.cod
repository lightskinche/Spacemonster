; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\render.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__186FF47F_stat@h DB 01H
__8C55BF2C_SDL_stdinc@h DB 01H
__A594C705_SDL_endian@h DB 01H
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__6853117E_SDL_rect@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__2888D4F6_render@c DB 01H
msvcjmc	ENDS
PUBLIC	_RENDER_TexturedQuad
PUBLIC	_RENDER_TexturedQuadSheet
PUBLIC	_RENDER_Quad
PUBLIC	_RENDER_List
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f800000
PUBLIC	__real@bf800000
EXTRN	_LIST_At:PROC
EXTRN	_LIST_RemoveAt:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_glad_glDrawArrays:DWORD
EXTRN	_glad_glBindTexture:DWORD
EXTRN	_glad_glBufferSubData:DWORD
EXTRN	_glad_glUseProgram:DWORD
EXTRN	_shader_texturedobj:DWORD
EXTRN	_shader_colored:DWORD
EXTRN	_enemies:QWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\render.c
;	COMDAT _RENDER_List
_TEXT	SEGMENT
_sprite$1 = -32						; size = 4
_tmp_enemy$2 = -20					; size = 4
_i$3 = -8						; size = 4
_list$ = 8						; size = 4
_RENDER_List PROC					; COMDAT

; 3    : void RENDER_List(linkedList* const list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2888D4F6_render@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4    : 	for (int i = 0; i < list->count; ++i) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@RENDER_Lis
$LN2@RENDER_Lis:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@RENDER_Lis:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _i$3[ebp]
  00040	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00043	0f 8d 9b 00 00
	00		 jge	 $LN3@RENDER_Lis

; 5    : 		enemy* tmp_enemy = LIST_At(&enemies, i);

  00049	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET _enemies
  00052	e8 00 00 00 00	 call	 _LIST_At
  00057	83 c4 08	 add	 esp, 8
  0005a	89 45 ec	 mov	 DWORD PTR _tmp_enemy$2[ebp], eax

; 6    : 		if (tmp_enemy) {

  0005d	83 7d ec 00	 cmp	 DWORD PTR _tmp_enemy$2[ebp], 0
  00061	74 7c		 je	 SHORT $LN6@RENDER_Lis

; 7    : 			text_quad* sprite = &tmp_enemy->sprite;

  00063	8b 45 ec	 mov	 eax, DWORD PTR _tmp_enemy$2[ebp]
  00066	89 45 e0	 mov	 DWORD PTR _sprite$1[ebp], eax

; 8    : 			RENDER_TexturedQuad(tmp_enemy->sprite, 1, 1, 1, false);

  00069	6a 00		 push	 0
  0006b	51		 push	 ecx
  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00079	51		 push	 ecx
  0007a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00082	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00087	51		 push	 ecx
  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	8b 75 ec	 mov	 esi, DWORD PTR _tmp_enemy$2[ebp]
  00098	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0009b	b9 07 00 00 00	 mov	 ecx, 7
  000a0	8b fc		 mov	 edi, esp
  000a2	f3 a5		 rep movsd
  000a4	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  000a9	83 c4 2c	 add	 esp, 44			; 0000002cH

; 9    : 			if (tmp_enemy->sprite.x + tmp_enemy->sprite.w < -1) {//remove any enimies that are out of bounds

  000ac	8b 45 ec	 mov	 eax, DWORD PTR _tmp_enemy$2[ebp]
  000af	8b 4d ec	 mov	 ecx, DWORD PTR _tmp_enemy$2[ebp]
  000b2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b6	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  000bb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  000c3	0f 2f c8	 comiss	 xmm1, xmm0
  000c6	76 17		 jbe	 SHORT $LN6@RENDER_Lis

; 10   : 				LIST_RemoveAt(list, i, 1);

  000c8	6a 01		 push	 1
  000ca	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 _LIST_RemoveAt
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 11   : 				continue;

  000da	e9 52 ff ff ff	 jmp	 $LN2@RENDER_Lis
$LN6@RENDER_Lis:

; 12   : 			}
; 13   : 		}
; 14   : 	}

  000df	e9 4d ff ff ff	 jmp	 $LN2@RENDER_Lis
$LN3@RENDER_Lis:

; 15   : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_RENDER_List ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\render.c
;	COMDAT _RENDER_Quad
_TEXT	SEGMENT
_tmp_vertexes$ = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 16
_r$ = 24						; size = 4
_g$ = 28						; size = 4
_b$ = 32						; size = 4
_RENDER_Quad PROC					; COMDAT

; 57   : void RENDER_Quad(quad target, float r, float g, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 84 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-380]
  00012	b9 5f 00 00 00	 mov	 ecx, 95			; 0000005fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __2888D4F6_render@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 58   : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 59   : 	float tmp_vertexes[32] = { x,y,0,r,g,b,0,0, x + w,y,0,r,g,b,1,0, x + w,y - h,0,r,g,b,1,1, x,y - h,0,r,g,b,0,1 };

  0005a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0005f	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp], xmm0
  00067	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0006c	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+4], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+8], xmm0
  0007f	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  00084	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+12], xmm0
  0008c	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00091	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+16], xmm0
  00099	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  0009e	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+20], xmm0
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+24], xmm0
  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+28], xmm0
  000bc	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000c1	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  000c6	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+32], xmm0
  000ce	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d3	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+36], xmm0
  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+40], xmm0
  000e6	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  000eb	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+44], xmm0
  000f3	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  000f8	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+48], xmm0
  00100	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  00105	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+52], xmm0
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00115	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$[ebp+56], xmm0
  0011a	0f 57 c0	 xorps	 xmm0, xmm0
  0011d	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$[ebp+60], xmm0
  00122	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00127	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0012c	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$[ebp+64], xmm0
  00131	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00136	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0013b	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$[ebp+68], xmm0
  00140	0f 57 c0	 xorps	 xmm0, xmm0
  00143	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$[ebp+72], xmm0
  00148	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  0014d	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$[ebp+76], xmm0
  00152	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00157	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$[ebp+80], xmm0
  0015c	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  00161	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$[ebp+84], xmm0
  00166	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016e	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$[ebp+88], xmm0
  00173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0017b	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$[ebp+92], xmm0
  00180	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00185	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$[ebp+96], xmm0
  0018a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0018f	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00194	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$[ebp+100], xmm0
  00199	0f 57 c0	 xorps	 xmm0, xmm0
  0019c	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$[ebp+104], xmm0
  001a1	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  001a6	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$[ebp+108], xmm0
  001ab	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  001b0	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$[ebp+112], xmm0
  001b5	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  001ba	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$[ebp+116], xmm0
  001bf	0f 57 c0	 xorps	 xmm0, xmm0
  001c2	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$[ebp+120], xmm0
  001c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cf	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$[ebp+124], xmm0

; 60   : 	glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001d4	8b f4		 mov	 esi, esp
  001d6	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$[ebp]
  001dc	50		 push	 eax
  001dd	68 80 00 00 00	 push	 128			; 00000080H
  001e2	6a 00		 push	 0
  001e4	68 92 88 00 00	 push	 34962			; 00008892H
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  001ef	3b f4		 cmp	 esi, esp
  001f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 61   : 	glUseProgram(shader_colored);

  001f6	8b f4		 mov	 esi, esp
  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  001fd	50		 push	 eax
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 62   : 	glDrawArrays(GL_QUADS, 0, 4);

  0020b	8b f4		 mov	 esi, esp
  0020d	6a 04		 push	 4
  0020f	6a 00		 push	 0
  00211	6a 07		 push	 7
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00219	3b f4		 cmp	 esi, esp
  0021b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 63   : }

  00220	52		 push	 edx
  00221	8b cd		 mov	 ecx, ebp
  00223	50		 push	 eax
  00224	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@RENDER_Qua
  0022a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0022f	58		 pop	 eax
  00230	5a		 pop	 edx
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	5b		 pop	 ebx
  00234	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00237	33 cd		 xor	 ecx, ebp
  00239	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023e	81 c4 7c 01 00
	00		 add	 esp, 380		; 0000017cH
  00244	3b ec		 cmp	 ebp, esp
  00246	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
  0024f	90		 npad	 1
$LN5@RENDER_Qua:
  00250	01 00 00 00	 DD	 1
  00254	00 00 00 00	 DD	 $LN4@RENDER_Qua
$LN4@RENDER_Qua:
  00258	48 ff ff ff	 DD	 -184			; ffffff48H
  0025c	80 00 00 00	 DD	 128			; 00000080H
  00260	00 00 00 00	 DD	 $LN3@RENDER_Qua
$LN3@RENDER_Qua:
  00264	74		 DB	 116			; 00000074H
  00265	6d		 DB	 109			; 0000006dH
  00266	70		 DB	 112			; 00000070H
  00267	5f		 DB	 95			; 0000005fH
  00268	76		 DB	 118			; 00000076H
  00269	65		 DB	 101			; 00000065H
  0026a	72		 DB	 114			; 00000072H
  0026b	74		 DB	 116			; 00000074H
  0026c	65		 DB	 101			; 00000065H
  0026d	78		 DB	 120			; 00000078H
  0026e	65		 DB	 101			; 00000065H
  0026f	73		 DB	 115			; 00000073H
  00270	00		 DB	 0
_RENDER_Quad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\render.c
;	COMDAT _RENDER_TexturedQuadSheet
_TEXT	SEGMENT
_tmp_vertexes$1 = -368					; size = 128
_tmp_vertexes$2 = -232					; size = 128
_texth$ = -96						; size = 4
_texty$ = -84						; size = 4
_textw$ = -72						; size = 4
_textx$ = -60						; size = 4
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 28
_source_rect$ = 36					; size = 16
_r$ = 52						; size = 4
_g$ = 56						; size = 4
_b$ = 60						; size = 4
_normalized$ = 64					; size = 4
_reverse_rendering$ = 68				; size = 4
_RENDER_TexturedQuadSheet PROC				; COMDAT

; 33   : void RENDER_TexturedQuadSheet(text_quad target, quad source_rect, float r, float g, float b, SDL_bool normalized, SDL_bool reverse_rendering) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 02 00
	00		 sub	 esp, 564		; 00000234H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd cc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-564]
  00012	b9 8d 00 00 00	 mov	 ecx, 141		; 0000008dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __2888D4F6_render@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 34   : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 35   : 	float textx, textw;
; 36   : 	float texty, texth;
; 37   : 	if (normalized)

  0005a	83 7d 40 00	 cmp	 DWORD PTR _normalized$[ebp], 0
  0005e	74 2a		 je	 SHORT $LN2@RENDER_Tex

; 38   : 		textx = source_rect.x, texty = source_rect.y, textw = source_rect.w, texth = source_rect.h;

  00060	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  00065	f3 0f 11 45 c4	 movss	 DWORD PTR _textx$[ebp], xmm0
  0006a	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  0006f	f3 0f 11 45 ac	 movss	 DWORD PTR _texty$[ebp], xmm0
  00074	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _source_rect$[ebp+8]
  00079	f3 0f 11 45 b8	 movss	 DWORD PTR _textw$[ebp], xmm0
  0007e	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _source_rect$[ebp+12]
  00083	f3 0f 11 45 a0	 movss	 DWORD PTR _texth$[ebp], xmm0
  00088	eb 44		 jmp	 SHORT $LN3@RENDER_Tex
$LN2@RENDER_Tex:

; 39   : 	else
; 40   : 		textx = source_rect.x / target.texw, texty = source_rect.y / target.texh, textw = (source_rect.w - 1) / target.texw, texth = source_rect.h / target.texh;

  0008a	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  0008f	f3 0f 5e 45 1c	 divss	 xmm0, DWORD PTR _target$[ebp+20]
  00094	f3 0f 11 45 c4	 movss	 DWORD PTR _textx$[ebp], xmm0
  00099	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  0009e	f3 0f 5e 45 20	 divss	 xmm0, DWORD PTR _target$[ebp+24]
  000a3	f3 0f 11 45 ac	 movss	 DWORD PTR _texty$[ebp], xmm0
  000a8	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _source_rect$[ebp+8]
  000ad	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000b5	f3 0f 5e 45 1c	 divss	 xmm0, DWORD PTR _target$[ebp+20]
  000ba	f3 0f 11 45 b8	 movss	 DWORD PTR _textw$[ebp], xmm0
  000bf	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _source_rect$[ebp+12]
  000c4	f3 0f 5e 45 20	 divss	 xmm0, DWORD PTR _target$[ebp+24]
  000c9	f3 0f 11 45 a0	 movss	 DWORD PTR _texth$[ebp], xmm0
$LN3@RENDER_Tex:

; 41   : 	if (reverse_rendering) {

  000ce	83 7d 44 00	 cmp	 DWORD PTR _reverse_rendering$[ebp], 0
  000d2	0f 84 17 02 00
	00		 je	 $LN4@RENDER_Tex

; 42   : 		float tmp_vertexes[32] = { x + w,y,0,r,g,b,textx,texty, x,y,0,r,g,b,textx + textw,texty, x,y - h,0,r,g,b,textx + textw,textx + texth, x + w,y - h,0,r,g,b,textx,textx + texth };

  000d8	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000dd	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  000e2	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp], xmm0
  000ea	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000ef	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+4], xmm0
  000f7	0f 57 c0	 xorps	 xmm0, xmm0
  000fa	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+8], xmm0
  00102	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00107	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+12], xmm0
  0010f	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00114	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+16], xmm0
  0011c	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00121	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+20], xmm0
  00129	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0012e	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+24], xmm0
  00136	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  0013b	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+28], xmm0
  00143	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00148	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+32], xmm0
  00150	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00155	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+36], xmm0
  0015d	0f 57 c0	 xorps	 xmm0, xmm0
  00160	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+40], xmm0
  00168	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  0016d	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+44], xmm0
  00175	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0017a	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+48], xmm0
  00182	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00187	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+52], xmm0
  0018f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00194	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  00199	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+56], xmm0
  001a1	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  001a6	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+60], xmm0
  001ae	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  001b3	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+64], xmm0
  001bb	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  001c0	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  001c5	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+68], xmm0
  001cd	0f 57 c0	 xorps	 xmm0, xmm0
  001d0	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+72], xmm0
  001d8	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  001dd	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+76], xmm0
  001e5	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  001ea	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+80], xmm0
  001f2	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  001f7	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+84], xmm0
  001ff	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00204	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  00209	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+88], xmm0
  00211	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00216	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  0021b	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+92], xmm0
  00223	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00228	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0022d	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+96], xmm0
  00235	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0023a	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0023f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+100], xmm0
  00247	0f 57 c0	 xorps	 xmm0, xmm0
  0024a	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$2[ebp+104], xmm0
  0024f	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00254	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$2[ebp+108], xmm0
  00259	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0025e	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$2[ebp+112], xmm0
  00263	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00268	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+116], xmm0
  0026d	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00272	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$2[ebp+120], xmm0
  00277	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0027c	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  00281	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$2[ebp+124], xmm0

; 43   : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  00286	8b f4		 mov	 esi, esp
  00288	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$2[ebp]
  0028e	50		 push	 eax
  0028f	68 80 00 00 00	 push	 128			; 00000080H
  00294	6a 00		 push	 0
  00296	68 92 88 00 00	 push	 34962			; 00008892H
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  002a1	3b f4		 cmp	 esi, esp
  002a3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 44   : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  002a8	8b f4		 mov	 esi, esp
  002aa	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  002ad	50		 push	 eax
  002ae	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002b3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  002b9	3b f4		 cmp	 esi, esp
  002bb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 45   : 		glUseProgram(shader_texturedobj);

  002c0	8b f4		 mov	 esi, esp
  002c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  002c7	50		 push	 eax
  002c8	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  002ce	3b f4		 cmp	 esi, esp
  002d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 46   : 		glDrawArrays(GL_QUADS, 0, 4);

  002d5	8b f4		 mov	 esi, esp
  002d7	6a 04		 push	 4
  002d9	6a 00		 push	 0
  002db	6a 07		 push	 7
  002dd	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  002e3	3b f4		 cmp	 esi, esp
  002e5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 47   : 	}

  002ea	e9 24 02 00 00	 jmp	 $LN5@RENDER_Tex
$LN4@RENDER_Tex:

; 48   : 	else {
; 49   : 		//this is so unreadable, definitly clean this up later
; 50   : 		float tmp_vertexes[32] = { x,y,0,r,g,b,textx,texty, x + w,y,0,r,g,b,textx + textw,source_rect.y, x + w,y - h,0,r,g,b,textx + textw,texty + texth, x,y - h,0,r,g,b,textx,texty + texth };

  002ef	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  002f4	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp], xmm0
  002fc	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00301	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+4], xmm0
  00309	0f 57 c0	 xorps	 xmm0, xmm0
  0030c	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+8], xmm0
  00314	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00319	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+12], xmm0
  00321	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00326	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+16], xmm0
  0032e	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00333	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+20], xmm0
  0033b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00340	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+24], xmm0
  00348	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  0034d	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+28], xmm0
  00355	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0035a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0035f	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+32], xmm0
  00367	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0036c	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+36], xmm0
  00374	0f 57 c0	 xorps	 xmm0, xmm0
  00377	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+40], xmm0
  0037f	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00384	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+44], xmm0
  0038c	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00391	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+48], xmm0
  00399	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0039e	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+52], xmm0
  003a6	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  003ab	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  003b0	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+56], xmm0
  003b8	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  003bd	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+60], xmm0
  003c5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  003ca	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  003cf	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+64], xmm0
  003d7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  003dc	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  003e1	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+68], xmm0
  003e9	0f 57 c0	 xorps	 xmm0, xmm0
  003ec	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+72], xmm0
  003f4	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  003f9	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+76], xmm0
  00401	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00406	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+80], xmm0
  0040e	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00413	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+84], xmm0
  0041b	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00420	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  00425	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+88], xmm0
  0042d	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  00432	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  00437	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+92], xmm0
  0043f	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00444	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+96], xmm0
  0044c	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00451	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00456	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+100], xmm0
  0045e	0f 57 c0	 xorps	 xmm0, xmm0
  00461	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+104], xmm0
  00469	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  0046e	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+108], xmm0
  00476	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0047b	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+112], xmm0
  00483	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00488	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+116], xmm0
  00490	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00495	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+120], xmm0
  0049d	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  004a2	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  004a7	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+124], xmm0

; 51   : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  004af	8b f4		 mov	 esi, esp
  004b1	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$1[ebp]
  004b7	50		 push	 eax
  004b8	68 80 00 00 00	 push	 128			; 00000080H
  004bd	6a 00		 push	 0
  004bf	68 92 88 00 00	 push	 34962			; 00008892H
  004c4	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  004ca	3b f4		 cmp	 esi, esp
  004cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 52   : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  004d1	8b f4		 mov	 esi, esp
  004d3	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  004d6	50		 push	 eax
  004d7	68 e1 0d 00 00	 push	 3553			; 00000de1H
  004dc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  004e2	3b f4		 cmp	 esi, esp
  004e4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 53   : 		glUseProgram(shader_texturedobj);

  004e9	8b f4		 mov	 esi, esp
  004eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  004f0	50		 push	 eax
  004f1	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  004f7	3b f4		 cmp	 esi, esp
  004f9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 54   : 		glDrawArrays(GL_QUADS, 0, 4);

  004fe	8b f4		 mov	 esi, esp
  00500	6a 04		 push	 4
  00502	6a 00		 push	 0
  00504	6a 07		 push	 7
  00506	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  0050c	3b f4		 cmp	 esi, esp
  0050e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@RENDER_Tex:

; 55   : 	}
; 56   : }

  00513	52		 push	 edx
  00514	8b cd		 mov	 ecx, ebp
  00516	50		 push	 eax
  00517	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@RENDER_Tex
  0051d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00522	58		 pop	 eax
  00523	5a		 pop	 edx
  00524	5f		 pop	 edi
  00525	5e		 pop	 esi
  00526	5b		 pop	 ebx
  00527	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0052a	33 cd		 xor	 ecx, ebp
  0052c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00531	81 c4 34 02 00
	00		 add	 esp, 564		; 00000234H
  00537	3b ec		 cmp	 ebp, esp
  00539	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0053e	8b e5		 mov	 esp, ebp
  00540	5d		 pop	 ebp
  00541	c3		 ret	 0
  00542	66 90		 npad	 2
$LN10@RENDER_Tex:
  00544	02 00 00 00	 DD	 2
  00548	00 00 00 00	 DD	 $LN9@RENDER_Tex
$LN9@RENDER_Tex:
  0054c	18 ff ff ff	 DD	 -232			; ffffff18H
  00550	80 00 00 00	 DD	 128			; 00000080H
  00554	00 00 00 00	 DD	 $LN7@RENDER_Tex
  00558	90 fe ff ff	 DD	 -368			; fffffe90H
  0055c	80 00 00 00	 DD	 128			; 00000080H
  00560	00 00 00 00	 DD	 $LN8@RENDER_Tex
$LN8@RENDER_Tex:
  00564	74		 DB	 116			; 00000074H
  00565	6d		 DB	 109			; 0000006dH
  00566	70		 DB	 112			; 00000070H
  00567	5f		 DB	 95			; 0000005fH
  00568	76		 DB	 118			; 00000076H
  00569	65		 DB	 101			; 00000065H
  0056a	72		 DB	 114			; 00000072H
  0056b	74		 DB	 116			; 00000074H
  0056c	65		 DB	 101			; 00000065H
  0056d	78		 DB	 120			; 00000078H
  0056e	65		 DB	 101			; 00000065H
  0056f	73		 DB	 115			; 00000073H
  00570	00		 DB	 0
$LN7@RENDER_Tex:
  00571	74		 DB	 116			; 00000074H
  00572	6d		 DB	 109			; 0000006dH
  00573	70		 DB	 112			; 00000070H
  00574	5f		 DB	 95			; 0000005fH
  00575	76		 DB	 118			; 00000076H
  00576	65		 DB	 101			; 00000065H
  00577	72		 DB	 114			; 00000072H
  00578	74		 DB	 116			; 00000074H
  00579	65		 DB	 101			; 00000065H
  0057a	78		 DB	 120			; 00000078H
  0057b	65		 DB	 101			; 00000065H
  0057c	73		 DB	 115			; 00000073H
  0057d	00		 DB	 0
_RENDER_TexturedQuadSheet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\render.c
;	COMDAT _RENDER_TexturedQuad
_TEXT	SEGMENT
_tmp_vertexes$1 = -320					; size = 128
_tmp_vertexes$2 = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 28
_r$ = 36						; size = 4
_g$ = 40						; size = 4
_b$ = 44						; size = 4
_reverse_rendering$ = 48				; size = 4
_RENDER_TexturedQuad PROC				; COMDAT

; 16   : void RENDER_TexturedQuad(text_quad target, float r, float g, float b, SDL_bool reverse_rendering) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-516]
  00012	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __2888D4F6_render@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 17   : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 18   : 	if (reverse_rendering) {

  0005a	83 7d 30 00	 cmp	 DWORD PTR _reverse_rendering$[ebp], 0
  0005e	0f 84 e3 01 00
	00		 je	 $LN2@RENDER_Tex

; 19   : 		float tmp_vertexes[32] = { x + w,y,0,r,g,b,0,0, x,y,0,r,g,b,1,0, x,y - h,0,r,g,b,1,1, x + w,y - h,0,r,g,b,0,1 };

  00064	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0006e	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp], xmm0
  00076	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0007b	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+4], xmm0
  00083	0f 57 c0	 xorps	 xmm0, xmm0
  00086	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+8], xmm0
  0008e	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00093	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+12], xmm0
  0009b	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  000a0	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+16], xmm0
  000a8	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  000ad	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+20], xmm0
  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+24], xmm0
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+28], xmm0
  000cb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000d0	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+32], xmm0
  000d8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000dd	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+36], xmm0
  000e5	0f 57 c0	 xorps	 xmm0, xmm0
  000e8	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+40], xmm0
  000f0	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  000f5	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+44], xmm0
  000fd	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  00102	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+48], xmm0
  0010a	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0010f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+52], xmm0
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011f	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$2[ebp+56], xmm0
  00124	0f 57 c0	 xorps	 xmm0, xmm0
  00127	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$2[ebp+60], xmm0
  0012c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00131	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$2[ebp+64], xmm0
  00136	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0013b	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00140	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+68], xmm0
  00145	0f 57 c0	 xorps	 xmm0, xmm0
  00148	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$2[ebp+72], xmm0
  0014d	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00152	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$2[ebp+76], xmm0
  00157	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  0015c	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$2[ebp+80], xmm0
  00161	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00166	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+84], xmm0
  0016b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00173	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+88], xmm0
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00180	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+92], xmm0
  00185	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0018a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0018f	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+96], xmm0
  00194	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00199	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0019e	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$2[ebp+100], xmm0
  001a3	0f 57 c0	 xorps	 xmm0, xmm0
  001a6	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+104], xmm0
  001ab	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  001b0	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+108], xmm0
  001b5	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  001ba	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+112], xmm0
  001bf	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  001c4	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$2[ebp+116], xmm0
  001c9	0f 57 c0	 xorps	 xmm0, xmm0
  001cc	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+120], xmm0
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001d9	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+124], xmm0

; 20   : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001de	8b f4		 mov	 esi, esp
  001e0	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$2[ebp]
  001e6	50		 push	 eax
  001e7	68 80 00 00 00	 push	 128			; 00000080H
  001ec	6a 00		 push	 0
  001ee	68 92 88 00 00	 push	 34962			; 00008892H
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  001f9	3b f4		 cmp	 esi, esp
  001fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 21   : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00200	8b f4		 mov	 esi, esp
  00202	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  00205	50		 push	 eax
  00206	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00211	3b f4		 cmp	 esi, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 22   : 		glUseProgram(shader_texturedobj);

  00218	8b f4		 mov	 esi, esp
  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0021f	50		 push	 eax
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 23   : 		glDrawArrays(GL_QUADS, 0, 4);

  0022d	8b f4		 mov	 esi, esp
  0022f	6a 04		 push	 4
  00231	6a 00		 push	 0
  00233	6a 07		 push	 7
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  0023b	3b f4		 cmp	 esi, esp
  0023d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 24   : 	}

  00242	e9 14 02 00 00	 jmp	 $LN3@RENDER_Tex
$LN2@RENDER_Tex:

; 25   : 	else {
; 26   : 		float tmp_vertexes[32] = { x,y,0,r,g,b,0,0, x + w,y,0,r,g,b,1,0, x + w,y - h,0,r,g,b,1,1, x,y - h,0,r,g,b,0,1 };

  00247	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0024c	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp], xmm0
  00254	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00259	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+4], xmm0
  00261	0f 57 c0	 xorps	 xmm0, xmm0
  00264	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+8], xmm0
  0026c	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00271	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+12], xmm0
  00279	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  0027e	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+16], xmm0
  00286	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0028b	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+20], xmm0
  00293	0f 57 c0	 xorps	 xmm0, xmm0
  00296	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+24], xmm0
  0029e	0f 57 c0	 xorps	 xmm0, xmm0
  002a1	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+28], xmm0
  002a9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  002ae	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  002b3	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+32], xmm0
  002bb	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  002c0	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+36], xmm0
  002c8	0f 57 c0	 xorps	 xmm0, xmm0
  002cb	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+40], xmm0
  002d3	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  002d8	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+44], xmm0
  002e0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  002e5	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+48], xmm0
  002ed	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  002f2	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+52], xmm0
  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00302	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+56], xmm0
  0030a	0f 57 c0	 xorps	 xmm0, xmm0
  0030d	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+60], xmm0
  00315	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0031a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0031f	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+64], xmm0
  00327	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0032c	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00331	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+68], xmm0
  00339	0f 57 c0	 xorps	 xmm0, xmm0
  0033c	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+72], xmm0
  00344	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00349	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+76], xmm0
  00351	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  00356	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+80], xmm0
  0035e	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00363	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+84], xmm0
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00373	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+88], xmm0
  0037b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00383	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+92], xmm0
  0038b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00390	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+96], xmm0
  00398	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0039d	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  003a2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+100], xmm0
  003aa	0f 57 c0	 xorps	 xmm0, xmm0
  003ad	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+104], xmm0
  003b5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  003ba	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+108], xmm0
  003c2	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  003c7	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+112], xmm0
  003cf	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  003d4	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+116], xmm0
  003dc	0f 57 c0	 xorps	 xmm0, xmm0
  003df	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+120], xmm0
  003e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ef	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+124], xmm0

; 27   : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  003f7	8b f4		 mov	 esi, esp
  003f9	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$1[ebp]
  003ff	50		 push	 eax
  00400	68 80 00 00 00	 push	 128			; 00000080H
  00405	6a 00		 push	 0
  00407	68 92 88 00 00	 push	 34962			; 00008892H
  0040c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00412	3b f4		 cmp	 esi, esp
  00414	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 28   : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00419	8b f4		 mov	 esi, esp
  0041b	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  0041e	50		 push	 eax
  0041f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00424	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0042a	3b f4		 cmp	 esi, esp
  0042c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 29   : 		glUseProgram(shader_texturedobj);

  00431	8b f4		 mov	 esi, esp
  00433	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00438	50		 push	 eax
  00439	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  0043f	3b f4		 cmp	 esi, esp
  00441	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 30   : 		glDrawArrays(GL_QUADS, 0, 4);

  00446	8b f4		 mov	 esi, esp
  00448	6a 04		 push	 4
  0044a	6a 00		 push	 0
  0044c	6a 07		 push	 7
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00454	3b f4		 cmp	 esi, esp
  00456	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@RENDER_Tex:

; 31   : 	}
; 32   : }

  0045b	52		 push	 edx
  0045c	8b cd		 mov	 ecx, ebp
  0045e	50		 push	 eax
  0045f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RENDER_Tex
  00465	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0046a	58		 pop	 eax
  0046b	5a		 pop	 edx
  0046c	5f		 pop	 edi
  0046d	5e		 pop	 esi
  0046e	5b		 pop	 ebx
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00472	33 cd		 xor	 ecx, ebp
  00474	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00479	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  0047f	3b ec		 cmp	 ebp, esp
  00481	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00486	8b e5		 mov	 esp, ebp
  00488	5d		 pop	 ebp
  00489	c3		 ret	 0
  0048a	66 90		 npad	 2
$LN8@RENDER_Tex:
  0048c	02 00 00 00	 DD	 2
  00490	00 00 00 00	 DD	 $LN7@RENDER_Tex
$LN7@RENDER_Tex:
  00494	48 ff ff ff	 DD	 -184			; ffffff48H
  00498	80 00 00 00	 DD	 128			; 00000080H
  0049c	00 00 00 00	 DD	 $LN5@RENDER_Tex
  004a0	c0 fe ff ff	 DD	 -320			; fffffec0H
  004a4	80 00 00 00	 DD	 128			; 00000080H
  004a8	00 00 00 00	 DD	 $LN6@RENDER_Tex
$LN6@RENDER_Tex:
  004ac	74		 DB	 116			; 00000074H
  004ad	6d		 DB	 109			; 0000006dH
  004ae	70		 DB	 112			; 00000070H
  004af	5f		 DB	 95			; 0000005fH
  004b0	76		 DB	 118			; 00000076H
  004b1	65		 DB	 101			; 00000065H
  004b2	72		 DB	 114			; 00000072H
  004b3	74		 DB	 116			; 00000074H
  004b4	65		 DB	 101			; 00000065H
  004b5	78		 DB	 120			; 00000078H
  004b6	65		 DB	 101			; 00000065H
  004b7	73		 DB	 115			; 00000073H
  004b8	00		 DB	 0
$LN5@RENDER_Tex:
  004b9	74		 DB	 116			; 00000074H
  004ba	6d		 DB	 109			; 0000006dH
  004bb	70		 DB	 112			; 00000070H
  004bc	5f		 DB	 95			; 0000005fH
  004bd	76		 DB	 118			; 00000076H
  004be	65		 DB	 101			; 00000065H
  004bf	72		 DB	 114			; 00000072H
  004c0	74		 DB	 116			; 00000074H
  004c1	65		 DB	 101			; 00000065H
  004c2	78		 DB	 120			; 00000078H
  004c3	65		 DB	 101			; 00000065H
  004c4	73		 DB	 115			; 00000073H
  004c5	00		 DB	 0
_RENDER_TexturedQuad ENDP
_TEXT	ENDS
END
