; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\bezier.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__8936EC80_bezier@c DB 01H
msvcjmc	ENDS
PUBLIC	_fabsf
PUBLIC	_glm_min
PUBLIC	_glm_max
PUBLIC	_glm_clamp
PUBLIC	_glm_clamp_zo
PUBLIC	_glm_bezier
PUBLIC	_glm_hermite
PUBLIC	_glm_decasteljau
PUBLIC	_glmc_bezier
PUBLIC	_glmc_hermite
PUBLIC	_glmc_decasteljau
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@1e3ce508
PUBLIC	__real@3089705f
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40400000
PUBLIC	__real@447a0000
EXTRN	_fabs:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3089705f
CONST	SEGMENT
__real@3089705f DD 03089705fr			; 1e-09
CONST	ENDS
;	COMDAT __real@1e3ce508
CONST	SEGMENT
__real@1e3ce508 DD 01e3ce508r			; 1e-20
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\bezier.c
;	COMDAT _glmc_decasteljau
_TEXT	SEGMENT
_prm$ = 8						; size = 4
_p0$ = 12						; size = 4
_c0$ = 16						; size = 4
_c1$ = 20						; size = 4
_p1$ = 24						; size = 4
_glmc_decasteljau PROC					; COMDAT

; 25   : glmc_decasteljau(float prm, float p0, float c0, float c1, float p1) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8936EC80_bezier@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   return glm_decasteljau(prm, p0, c0, c1, p1);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _p1$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _c1$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _c0$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _p0$[ebp]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	51		 push	 ecx
  00055	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _prm$[ebp]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _glm_decasteljau
  00064	83 c4 14	 add	 esp, 20			; 00000014H

; 27   : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_glmc_decasteljau ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\bezier.c
;	COMDAT _glmc_hermite
_TEXT	SEGMENT
_s$ = 8							; size = 4
_p0$ = 12						; size = 4
_t0$ = 16						; size = 4
_t1$ = 20						; size = 4
_p1$ = 24						; size = 4
_glmc_hermite PROC					; COMDAT

; 19   : glmc_hermite(float s, float p0, float t0, float t1, float p1) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8936EC80_bezier@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   return glm_hermite(s, p0, t0, t1, p1);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _p1$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _t1$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t0$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _p0$[ebp]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	51		 push	 ecx
  00055	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _glm_hermite
  00064	83 c4 14	 add	 esp, 20			; 00000014H

; 21   : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_glmc_hermite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\bezier.c
;	COMDAT _glmc_bezier
_TEXT	SEGMENT
_s$ = 8							; size = 4
_p0$ = 12						; size = 4
_c0$ = 16						; size = 4
_c1$ = 20						; size = 4
_p1$ = 24						; size = 4
_glmc_bezier PROC					; COMDAT

; 13   : glmc_bezier(float s, float p0, float c0, float c1, float p1) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8936EC80_bezier@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   return glm_bezier(s, p0, c0, c1, p1);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _p1$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _c1$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _c0$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _p0$[ebp]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	51		 push	 ecx
  00055	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _glm_bezier
  00064	83 c4 14	 add	 esp, 20			; 00000014H

; 15   : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_glmc_bezier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\bezier.h
;	COMDAT _glm_decasteljau
_TEXT	SEGMENT
tv164 = -304						; size = 4
_i$ = -104						; size = 4
_f$ = -92						; size = 4
_e$ = -80						; size = 4
_d$ = -68						; size = 4
_c$ = -56						; size = 4
_b$ = -44						; size = 4
_a$ = -32						; size = 4
_v$ = -20						; size = 4
_u$ = -8						; size = 4
_prm$ = 8						; size = 4
_p0$ = 12						; size = 4
_c0$ = 16						; size = 4
_c1$ = 20						; size = 4
_p1$ = 24						; size = 4
_glm_decasteljau PROC					; COMDAT

; 111  : glm_decasteljau(float prm, float p0, float c0, float c1, float p1) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00012	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __45F73C3A_bezier@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 112  :   float u, v, a, b, c, d, e, f;
; 113  :   int   i;
; 114  : 
; 115  :   if (prm - p0 < CGLM_DECASTEL_SMALL)

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _prm$[ebp]
  0002d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _p0$[ebp]
  00032	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@1e3ce508
  0003a	0f 2f c8	 comiss	 xmm1, xmm0
  0003d	76 07		 jbe	 SHORT $LN5@glm_decast

; 116  :     return 0.0f;

  0003f	d9 ee		 fldz
  00041	e9 d5 01 00 00	 jmp	 $LN1@glm_decast
$LN5@glm_decast:

; 117  : 
; 118  :   if (p1 - prm < CGLM_DECASTEL_SMALL)

  00046	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _p1$[ebp]
  0004b	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _prm$[ebp]
  00050	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@1e3ce508
  00058	0f 2f c8	 comiss	 xmm1, xmm0
  0005b	76 07		 jbe	 SHORT $LN6@glm_decast

; 119  :     return 1.0f;

  0005d	d9 e8		 fld1
  0005f	e9 b7 01 00 00	 jmp	 $LN1@glm_decast
$LN6@glm_decast:

; 120  : 
; 121  :   u  = 0.0f;

  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 45 f8	 movss	 DWORD PTR _u$[ebp], xmm0

; 122  :   v  = 1.0f;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp], xmm0

; 123  : 
; 124  :   for (i = 0; i < CGLM_DECASTEL_MAX; i++) {

  00079	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00080	eb 09		 jmp	 SHORT $LN4@glm_decast
$LN2@glm_decast:
  00082	8b 45 98	 mov	 eax, DWORD PTR _i$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 45 98	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_decast:
  0008b	f3 0f 2a 45 98	 cvtsi2ss xmm0, DWORD PTR _i$[ebp]
  00090	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@447a0000
  00098	0f 2f c8	 comiss	 xmm1, xmm0
  0009b	0f 86 5a 01 00
	00		 jbe	 $LN3@glm_decast

; 125  :     /* de Casteljau Subdivision */
; 126  :     a  = (p0 + c0) * 0.5f;

  000a1	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _p0$[ebp]
  000a6	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _c0$[ebp]
  000ab	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000b3	f3 0f 11 45 e0	 movss	 DWORD PTR _a$[ebp], xmm0

; 127  :     b  = (c0 + c1) * 0.5f;

  000b8	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _c0$[ebp]
  000bd	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _c1$[ebp]
  000c2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000ca	f3 0f 11 45 d4	 movss	 DWORD PTR _b$[ebp], xmm0

; 128  :     c  = (c1 + p1) * 0.5f;

  000cf	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _c1$[ebp]
  000d4	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _p1$[ebp]
  000d9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000e1	f3 0f 11 45 c8	 movss	 DWORD PTR _c$[ebp], xmm0

; 129  :     d  = (a  + b)  * 0.5f;

  000e6	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _a$[ebp]
  000eb	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR _b$[ebp]
  000f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000f8	f3 0f 11 45 bc	 movss	 DWORD PTR _d$[ebp], xmm0

; 130  :     e  = (b  + c)  * 0.5f;

  000fd	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _b$[ebp]
  00102	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _c$[ebp]
  00107	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0010f	f3 0f 11 45 b0	 movss	 DWORD PTR _e$[ebp], xmm0

; 131  :     f  = (d  + e)  * 0.5f; /* this one is on the curve! */

  00114	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _d$[ebp]
  00119	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _e$[ebp]
  0011e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00126	f3 0f 11 45 a4	 movss	 DWORD PTR _f$[ebp], xmm0

; 132  : 
; 133  :     /* The curve point is close enough to our wanted t */
; 134  :     if (fabsf(f - prm) < CGLM_DECASTEL_EPS)

  0012b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _f$[ebp]
  00130	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _prm$[ebp]
  00135	51		 push	 ecx
  00136	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013b	e8 00 00 00 00	 call	 _fabsf
  00140	83 c4 04	 add	 esp, 4
  00143	d9 9d d0 fe ff
	ff		 fstp	 DWORD PTR tv164[ebp]
  00149	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3089705f
  00151	0f 2f 85 d0 fe
	ff ff		 comiss	 xmm0, DWORD PTR tv164[ebp]
  00158	76 25		 jbe	 SHORT $LN7@glm_decast

; 135  :       return glm_clamp_zo((u  + v) * 0.5f);

  0015a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  0015f	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v$[ebp]
  00164	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0016c	51		 push	 ecx
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	e8 00 00 00 00	 call	 _glm_clamp_zo
  00177	83 c4 04	 add	 esp, 4
  0017a	e9 9c 00 00 00	 jmp	 $LN1@glm_decast
$LN7@glm_decast:

; 136  : 
; 137  :     /* dichotomy */
; 138  :     if (f < prm) {

  0017f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _prm$[ebp]
  00184	0f 2f 45 a4	 comiss	 xmm0, DWORD PTR _f$[ebp]
  00188	76 37		 jbe	 SHORT $LN8@glm_decast

; 139  :       p0 = f;

  0018a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _f$[ebp]
  0018f	f3 0f 11 45 0c	 movss	 DWORD PTR _p0$[ebp], xmm0

; 140  :       c0 = e;

  00194	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _e$[ebp]
  00199	f3 0f 11 45 10	 movss	 DWORD PTR _c0$[ebp], xmm0

; 141  :       c1 = c;

  0019e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _c$[ebp]
  001a3	f3 0f 11 45 14	 movss	 DWORD PTR _c1$[ebp], xmm0

; 142  :       u  = (u  + v) * 0.5f;

  001a8	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  001ad	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v$[ebp]
  001b2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  001ba	f3 0f 11 45 f8	 movss	 DWORD PTR _u$[ebp], xmm0

; 143  :     } else {

  001bf	eb 35		 jmp	 SHORT $LN9@glm_decast
$LN8@glm_decast:

; 144  :       c0 = a;

  001c1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _a$[ebp]
  001c6	f3 0f 11 45 10	 movss	 DWORD PTR _c0$[ebp], xmm0

; 145  :       c1 = d;

  001cb	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _d$[ebp]
  001d0	f3 0f 11 45 14	 movss	 DWORD PTR _c1$[ebp], xmm0

; 146  :       p1 = f;

  001d5	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _f$[ebp]
  001da	f3 0f 11 45 18	 movss	 DWORD PTR _p1$[ebp], xmm0

; 147  :       v  = (u  + v) * 0.5f;

  001df	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  001e4	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v$[ebp]
  001e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  001f1	f3 0f 11 45 ec	 movss	 DWORD PTR _v$[ebp], xmm0
$LN9@glm_decast:

; 148  :     }
; 149  :   }

  001f6	e9 87 fe ff ff	 jmp	 $LN2@glm_decast
$LN3@glm_decast:

; 150  : 
; 151  :   return glm_clamp_zo((u  + v) * 0.5f);

  001fb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _u$[ebp]
  00200	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v$[ebp]
  00205	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0020d	51		 push	 ecx
  0020e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00213	e8 00 00 00 00	 call	 _glm_clamp_zo
  00218	83 c4 04	 add	 esp, 4
$LN1@glm_decast:

; 152  : }

  0021b	5f		 pop	 edi
  0021c	5e		 pop	 esi
  0021d	5b		 pop	 ebx
  0021e	81 c4 30 01 00
	00		 add	 esp, 304		; 00000130H
  00224	3b ec		 cmp	 ebp, esp
  00226	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022b	8b e5		 mov	 esp, ebp
  0022d	5d		 pop	 ebp
  0022e	c3		 ret	 0
_glm_decasteljau ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\bezier.h
;	COMDAT _glm_hermite
_TEXT	SEGMENT
tv130 = -280						; size = 4
_f$ = -80						; size = 4
_e$ = -68						; size = 4
_c$ = -56						; size = 4
_b$ = -44						; size = 4
_a$ = -32						; size = 4
_d$ = -20						; size = 4
_ss$ = -8						; size = 4
_s$ = 8							; size = 4
_p0$ = 12						; size = 4
_t0$ = 16						; size = 4
_t1$ = 20						; size = 4
_p1$ = 24						; size = 4
_glm_hermite PROC					; COMDAT

; 84   : glm_hermite(float s, float p0, float t0, float t1, float p1) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00012	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __45F73C3A_bezier@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 85   :   float ss, d, a, b, c, e, f;
; 86   : 
; 87   :   ss = s  * s;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 45 f8	 movss	 DWORD PTR _ss$[ebp], xmm0

; 88   :   a  = ss + ss;

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ss$[ebp]
  0003c	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _ss$[ebp]
  00041	f3 0f 11 45 e0	 movss	 DWORD PTR _a$[ebp], xmm0

; 89   :   c  = a  + ss;

  00046	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _a$[ebp]
  0004b	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _ss$[ebp]
  00050	f3 0f 11 45 c8	 movss	 DWORD PTR _c$[ebp], xmm0

; 90   :   b  = a  * s;

  00055	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _a$[ebp]
  0005a	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0005f	f3 0f 11 45 d4	 movss	 DWORD PTR _b$[ebp], xmm0

; 91   :   d  = s  * ss;

  00064	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  00069	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _ss$[ebp]
  0006e	f3 0f 11 45 ec	 movss	 DWORD PTR _d$[ebp], xmm0

; 92   :   f  = d  - ss;

  00073	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _d$[ebp]
  00078	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _ss$[ebp]
  0007d	f3 0f 11 45 b0	 movss	 DWORD PTR _f$[ebp], xmm0

; 93   :   e  = b  - c;

  00082	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _b$[ebp]
  00087	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _c$[ebp]
  0008c	f3 0f 11 45 bc	 movss	 DWORD PTR _e$[ebp], xmm0

; 94   : 
; 95   :   return p0 * (e + 1.0f) + t0 * (f - ss + s) + t1 * f - p1 * e;

  00091	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _e$[ebp]
  00096	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0009e	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _p0$[ebp]
  000a3	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _f$[ebp]
  000a8	f3 0f 5c 4d f8	 subss	 xmm1, DWORD PTR _ss$[ebp]
  000ad	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _s$[ebp]
  000b2	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _t0$[ebp]
  000b7	f3 0f 58 c1	 addss	 xmm0, xmm1
  000bb	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _t1$[ebp]
  000c0	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _f$[ebp]
  000c5	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c9	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _p1$[ebp]
  000ce	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _e$[ebp]
  000d3	f3 0f 5c c1	 subss	 xmm0, xmm1
  000d7	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR tv130[ebp], xmm0
  000df	d9 85 e8 fe ff
	ff		 fld	 DWORD PTR tv130[ebp]

; 96   : }

  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_glm_hermite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\bezier.h
;	COMDAT _glm_bezier
_TEXT	SEGMENT
tv92 = -256						; size = 4
_a$ = -56						; size = 4
_xs3$ = -44						; size = 4
_ss$ = -32						; size = 4
_xx$ = -20						; size = 4
_x$ = -8						; size = 4
_s$ = 8							; size = 4
_p0$ = 12						; size = 4
_c0$ = 16						; size = 4
_c1$ = 20						; size = 4
_p1$ = 24						; size = 4
_glm_bezier PROC					; COMDAT

; 50   : glm_bezier(float s, float p0, float c0, float c1, float p1) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-256]
  00012	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __45F73C3A_bezier@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 51   :   float x, xx, ss, xs3, a;
; 52   : 
; 53   :   x   = 1.0f - s;

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00030	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _s$[ebp]
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _x$[ebp], xmm0

; 54   :   xx  = x * x;

  0003a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0003f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00044	f3 0f 11 45 ec	 movss	 DWORD PTR _xx$[ebp], xmm0

; 55   :   ss  = s * s;

  00049	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  0004e	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00053	f3 0f 11 45 e0	 movss	 DWORD PTR _ss$[ebp], xmm0

; 56   :   xs3 = (s - ss) * 3.0f;

  00058	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  0005d	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _ss$[ebp]
  00062	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  0006a	f3 0f 11 45 d4	 movss	 DWORD PTR _xs3$[ebp], xmm0

; 57   :   a   = p0 * xx + c0 * xs3;

  0006f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _p0$[ebp]
  00074	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _xx$[ebp]
  00079	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _c0$[ebp]
  0007e	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _xs3$[ebp]
  00083	f3 0f 58 c1	 addss	 xmm0, xmm1
  00087	f3 0f 11 45 c8	 movss	 DWORD PTR _a$[ebp], xmm0

; 58   : 
; 59   :   return a + s * (c1 * xs3 + p1 * ss - a);

  0008c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _c1$[ebp]
  00091	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _xs3$[ebp]
  00096	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _p1$[ebp]
  0009b	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _ss$[ebp]
  000a0	f3 0f 58 c1	 addss	 xmm0, xmm1
  000a4	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _a$[ebp]
  000a9	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _s$[ebp]
  000ae	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _a$[ebp]
  000b3	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR tv92[ebp], xmm0
  000bb	d9 85 00 ff ff
	ff		 fld	 DWORD PTR tv92[ebp]

; 60   : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000ca	3b ec		 cmp	 ebp, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
_glm_bezier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_clamp_zo
_TEXT	SEGMENT
_val$ = 8						; size = 4
_glm_clamp_zo PROC					; COMDAT

; 170  : glm_clamp_zo(float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 171  :   return glm_clamp(val, 0.0f, 1.0f);

  00028	51		 push	 ecx
  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00036	51		 push	 ecx
  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 _glm_clamp
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_glm_clamp_zo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_clamp
_TEXT	SEGMENT
_val$ = 8						; size = 4
_minVal$ = 12						; size = 4
_maxVal$ = 16						; size = 4
_glm_clamp PROC						; COMDAT

; 159  : glm_clamp(float val, float minVal, float maxVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 160  :   return glm_min(glm_max(val, minVal), maxVal);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _minVal$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 _glm_max
  0004e	83 c4 04	 add	 esp, 4
  00051	d9 1c 24	 fstp	 DWORD PTR [esp]
  00054	e8 00 00 00 00	 call	 _glm_min
  00059	83 c4 08	 add	 esp, 8

; 161  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_glm_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_max
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_max PROC						; COMDAT

; 144  : glm_max(float a, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  :   if (a > b)

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  0002d	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _b$[ebp]
  00031	76 05		 jbe	 SHORT $LN2@glm_max

; 146  :     return a;

  00033	d9 45 08	 fld	 DWORD PTR _a$[ebp]
  00036	eb 03		 jmp	 SHORT $LN1@glm_max
$LN2@glm_max:

; 147  :   return b;

  00038	d9 45 0c	 fld	 DWORD PTR _b$[ebp]
$LN1@glm_max:

; 148  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_min
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_min PROC						; COMDAT

; 130  : glm_min(float a, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  :   if (a < b)

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0002d	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _a$[ebp]
  00031	76 05		 jbe	 SHORT $LN2@glm_min

; 132  :     return a;

  00033	d9 45 08	 fld	 DWORD PTR _a$[ebp]
  00036	eb 03		 jmp	 SHORT $LN1@glm_min
$LN2@glm_min:

; 133  :   return b;

  00038	d9 45 0c	 fld	 DWORD PTR _b$[ebp]
$LN1@glm_min:

; 134  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 672  :             return (float)fabs(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _fabs
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 673  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
