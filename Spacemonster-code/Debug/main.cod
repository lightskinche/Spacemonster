; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_window_width
PUBLIC	_window_height
PUBLIC	_wave
PUBLIC	_score
PUBLIC	_reserve
PUBLIC	_active_en
PUBLIC	_enemy_counter
PUBLIC	_white
PUBLIC	_wave_text_quad
PUBLIC	_source_rect_nothing
PUBLIC	_player_wasd_speed
PUBLIC	_delta_time
PUBLIC	_background_vertexes
_DATA	SEGMENT
COMM	_window:DWORD
COMM	_glcontext:DWORD
COMM	_test_font_surface:DWORD
_DATA	ENDS
_BSS	SEGMENT
_score	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_cash:DWORD
_DATA	ENDS
_BSS	SEGMENT
_reserve DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_enemies:QWORD
COMM	_texturesizeswh:DWORD:02H
COMM	_texture:DWORD:04H
COMM	_VAO:DWORD
COMM	_VERTEXES_VBO:DWORD
COMM	_font_1:DWORD
COMM	_wave_text:DWORD
COMM	_wave_num:BYTE:02H
COMM	_shader_texturedobj:DWORD
COMM	_shader_colored:DWORD
COMM	_player_quad:BYTE:01cH
_DATA	ENDS
_BSS	SEGMENT
_delta_time DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_start:DWORD
COMM	_mouse_opened:DWORD
COMM	_mouse_closed:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__186FF47F_stat@h DB 01H
__8C55BF2C_SDL_stdinc@h DB 01H
__A594C705_SDL_endian@h DB 01H
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__6853117E_SDL_rect@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__03C282FB_linkedlist_h@h DB 01H
__88262B53_main@c DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
_window_width DD 0500H
_window_height DD 02d0H
_wave	DD	01H
_active_en DD	01H
_enemy_counter DD 01H
_white	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_wave_text_quad DD 000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03dcccccdr			; 0.1
	ORG $+12
_source_rect_nothing DD 000000000r		; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
_player_wasd_speed DD 03faccccdr		; 1.35
_background_vertexes DD 0bf800000r		; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_SDL_main
PUBLIC	_glm_mat4_copy
PUBLIC	_glm_mat4_zero
PUBLIC	_glm_ortho
PUBLIC	_LIST_AddElement
PUBLIC	_LIST_RemoveAt
PUBLIC	_LIST_At
PUBLIC	_RENDER_TexturedQuad
PUBLIC	_RENDER_TexturedQuadSheet
PUBLIC	_RENDER_Quad
PUBLIC	_CompileShader
PUBLIC	_SetTextureBoundedParams
PUBLIC	_GAME_WaveInit
PUBLIC	_GAME_AddEnemies
PUBLIC	_RENDER_List
PUBLIC	_CreateTexture2D
PUBLIC	_Init_GL
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@ ; `string'
PUBLIC	??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@ ; `string'
PUBLIC	??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0L@FAAGGPJM@font_1?4ttf@			; `string'
PUBLIC	??_C@_07BJPGHBBO@Wave?301@			; `string'
PUBLIC	??_C@_07FNANCGO@Wave?3?51@			; `string'
PUBLIC	??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@ ; `string'
PUBLIC	??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@ ; `string'
PUBLIC	??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@ ; `string'
PUBLIC	??_C@_0N@CJFNGLCH@SpaceMonster@			; `string'
PUBLIC	??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@ ; `string'
PUBLIC	??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@ ; `string'
PUBLIC	??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@	; `string'
PUBLIC	??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@ ; `string'
PUBLIC	??_C@_0M@DCJKCHKN@vertex1?4txt@			; `string'
PUBLIC	??_C@_0O@OBHLNCJC@fragment1?4txt@		; `string'
PUBLIC	??_C@_0M@LEAOFFAD@vertex2?4txt@			; `string'
PUBLIC	??_C@_0O@GHOPKADM@fragment2?4txt@		; `string'
PUBLIC	??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@ ; `string'
PUBLIC	??_C@_0N@OBNOHIMB@global_light@			; `string'
PUBLIC	??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@ ; `string'
PUBLIC	??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@ ; `string'
PUBLIC	??_C@_08DINNBOH@time?3?$CFf?6@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_09NOIJFDFO@added?5?$CFd?6@		; `string'
PUBLIC	??_C@_0M@KDJLAENM@exotic?5shop@			; `string'
PUBLIC	??_C@_0M@KCFKOELE@normal?5shop@			; `string'
PUBLIC	??_C@_06BENPFJFP@Wave?3?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0L@OPHAMHBB@number?3?$CFd?6@		; `string'
PUBLIC	??_C@_0BA@FPGCGDHE@character_1?4png@		; `string'
PUBLIC	??_C@_0BB@FJHLDCBO@background_1?4png@		; `string'
PUBLIC	??_C@_0BB@OGEDPOMN@character_ic?4png@		; `string'
PUBLIC	??_C@_0BC@ENOFGPDN@cursor_f_open?4png@		; `string'
PUBLIC	??_C@_0BE@NBHOGJHM@cursor_f_closed?4png@	; `string'
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4086800000000000
PUBLIC	__real@4094000000000000
PUBLIC	__real@44340000
PUBLIC	__real@447a0000
PUBLIC	__real@44a00000
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__ftell:PROC
EXTRN	__imp__puts:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__rand:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__clock:PROC
EXTRN	_gladLoadGL:PROC
EXTRN	_SDL_GetError:PROC
EXTRN	_SDL_FreeSurface:PROC
EXTRN	_SDL_CreateWindow:PROC
EXTRN	_SDL_SetWindowIcon:PROC
EXTRN	_SDL_GL_SetAttribute:PROC
EXTRN	_SDL_GL_CreateContext:PROC
EXTRN	_SDL_GL_SwapWindow:PROC
EXTRN	_SDL_GetKeyboardState:PROC
EXTRN	_SDL_GetMouseState:PROC
EXTRN	_SDL_CreateColorCursor:PROC
EXTRN	_SDL_SetCursor:PROC
EXTRN	_SDL_PollEvent:PROC
EXTRN	_SDL_Init:PROC
EXTRN	_IMG_Load:PROC
EXTRN	_TTF_Init:PROC
EXTRN	_TTF_OpenFont:PROC
EXTRN	_TTF_RenderText_Blended:PROC
EXTRN	_Mix_Init:PROC
EXTRN	_Mix_OpenAudio:PROC
EXTRN	_Mix_AllocateChannels:PROC
EXTRN	_Mix_QuerySpec:PROC
EXTRN	_Mix_GetNumChunkDecoders:PROC
EXTRN	_Mix_GetChunkDecoder:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_glad_glTexParameteri:DWORD
EXTRN	_glad_glTexImage2D:DWORD
EXTRN	_glad_glClear:DWORD
EXTRN	_glad_glClearColor:DWORD
EXTRN	_glad_glEnable:DWORD
EXTRN	_glad_glBlendFunc:DWORD
EXTRN	_glad_glGetError:DWORD
EXTRN	_glad_glViewport:DWORD
EXTRN	_glad_glOrtho:DWORD
EXTRN	_glad_glDrawArrays:DWORD
EXTRN	_glad_glBindTexture:DWORD
EXTRN	_glad_glGenTextures:DWORD
EXTRN	_glad_glActiveTexture:DWORD
EXTRN	_glad_glBindBuffer:DWORD
EXTRN	_glad_glGenBuffers:DWORD
EXTRN	_glad_glBufferData:DWORD
EXTRN	_glad_glBufferSubData:DWORD
EXTRN	_glad_glAttachShader:DWORD
EXTRN	_glad_glCompileShader:DWORD
EXTRN	_glad_glCreateProgram:DWORD
EXTRN	_glad_glCreateShader:DWORD
EXTRN	_glad_glDeleteShader:DWORD
EXTRN	_glad_glEnableVertexAttribArray:DWORD
EXTRN	_glad_glGetUniformLocation:DWORD
EXTRN	_glad_glLinkProgram:DWORD
EXTRN	_glad_glShaderSource:DWORD
EXTRN	_glad_glUseProgram:DWORD
EXTRN	_glad_glUniform3f:DWORD
EXTRN	_glad_glVertexAttribPointer:DWORD
EXTRN	_glad_glBindVertexArray:DWORD
EXTRN	_glad_glGenVertexArrays:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
?amount@?1??GAME_AddEnemies@@9@9 DD 01H DUP (?)		; `GAME_AddEnemies'::`2'::amount
?timer@?1??GAME_AddEnemies@@9@9 DD 01H DUP (?)		; `GAME_AddEnemies'::`2'::timer
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@44a00000
CONST	SEGMENT
__real@44a00000 DD 044a00000r			; 1280
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44340000
CONST	SEGMENT
__real@44340000 DD 044340000r			; 720
CONST	ENDS
;	COMDAT __real@4094000000000000
CONST	SEGMENT
__real@4094000000000000 DQ 04094000000000000r	; 1280
CONST	ENDS
;	COMDAT __real@4086800000000000
CONST	SEGMENT
__real@4086800000000000 DQ 04086800000000000r	; 720
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BE@NBHOGJHM@cursor_f_closed?4png@
CONST	SEGMENT
??_C@_0BE@NBHOGJHM@cursor_f_closed?4png@ DB 'cursor_f_closed.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ENOFGPDN@cursor_f_open?4png@
CONST	SEGMENT
??_C@_0BC@ENOFGPDN@cursor_f_open?4png@ DB 'cursor_f_open.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OGEDPOMN@character_ic?4png@
CONST	SEGMENT
??_C@_0BB@OGEDPOMN@character_ic?4png@ DB 'character_ic.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FJHLDCBO@background_1?4png@
CONST	SEGMENT
??_C@_0BB@FJHLDCBO@background_1?4png@ DB 'background_1.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FPGCGDHE@character_1?4png@
CONST	SEGMENT
??_C@_0BA@FPGCGDHE@character_1?4png@ DB 'character_1.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPHAMHBB@number?3?$CFd?6@
CONST	SEGMENT
??_C@_0L@OPHAMHBB@number?3?$CFd?6@ DB 'number:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BENPFJFP@Wave?3?$AA@
CONST	SEGMENT
??_C@_06BENPFJFP@Wave?3?$AA@ DB 'Wave:', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCFKOELE@normal?5shop@
CONST	SEGMENT
??_C@_0M@KCFKOELE@normal?5shop@ DB 'normal shop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDJLAENM@exotic?5shop@
CONST	SEGMENT
??_C@_0M@KDJLAENM@exotic?5shop@ DB 'exotic shop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NOIJFDFO@added?5?$CFd?6@
CONST	SEGMENT
??_C@_09NOIJFDFO@added?5?$CFd?6@ DB 'added %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@ DB 'reserve is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08DINNBOH@time?3?$CFf?6@
CONST	SEGMENT
??_C@_08DINNBOH@time?3?$CFf?6@ DB 'time:%f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@
CONST	SEGMENT
??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@ DB 'Failed to do s'
	DB	'omething, %x', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@ DB 'score requirement: '
	DB	'%d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@ DB 'score is now: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@
CONST	SEGMENT
??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@ DB 'Failed to ini'
	DB	'tilize shader uniforms, %x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OBNOHIMB@global_light@
CONST	SEGMENT
??_C@_0N@OBNOHIMB@global_light@ DB 'global_light', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@
CONST	SEGMENT
??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@ DB 'Failed to '
	DB	'initilize shaders, %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GHOPKADM@fragment2?4txt@
CONST	SEGMENT
??_C@_0O@GHOPKADM@fragment2?4txt@ DB 'fragment2.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LEAOFFAD@vertex2?4txt@
CONST	SEGMENT
??_C@_0M@LEAOFFAD@vertex2?4txt@ DB 'vertex2.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OBHLNCJC@fragment1?4txt@
CONST	SEGMENT
??_C@_0O@OBHLNCJC@fragment1?4txt@ DB 'fragment1.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DCJKCHKN@vertex1?4txt@
CONST	SEGMENT
??_C@_0M@DCJKCHKN@vertex1?4txt@ DB 'vertex1.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@
CONST	SEGMENT
??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@ DB 'Failed to '
	DB	'initilize openGL, %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@
CONST	SEGMENT
??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@ DB 'Failed to load openGL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@
CONST	SEGMENT
??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@ DB 'SDL/OPENGL thing f'
	DB	'ailed!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@
CONST	SEGMENT
??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@ DB 'Window creation fail'
	DB	'ed!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CJFNGLCH@SpaceMonster@
CONST	SEGMENT
??_C@_0N@CJFNGLCH@SpaceMonster@ DB 'SpaceMonster', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@
CONST	SEGMENT
??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@ DB 'Something b'
	DB	'ad happened...%s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@
CONST	SEGMENT
??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@ DB 'Freque'
	DB	'rncy:%d, audio format:%x, number of channels:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@
CONST	SEGMENT
??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@ DB 'Sample c'
	DB	'hunk decoder %d is for %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@ DB 'amount of channel'
	DB	's: %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@ DB 'Error op'
	DB	'ening audio device, %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FNANCGO@Wave?3?51@
CONST	SEGMENT
??_C@_07FNANCGO@Wave?3?51@ DB 'Wave: 1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BJPGHBBO@Wave?301@
CONST	SEGMENT
??_C@_07BJPGHBBO@Wave?301@ DB 'Wave:01', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FAAGGPJM@font_1?4ttf@
CONST	SEGMENT
??_C@_0L@FAAGGPJM@font_1?4ttf@ DB 'font_1.ttf', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@ DB 'Failed to i'
	DB	'nitilize mix, %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@
CONST	SEGMENT
??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@ DB 'Failed to lo'
	DB	'ad SDL_TTF font library', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@
CONST	SEGMENT
??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@ DB 'Couldn''t inil'
	DB	'ize audio, %s', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _Init_GL
_TEXT	SEGMENT
_tmp_surface$ = -8					; size = 4
_Init_GL PROC						; COMDAT

; 396  : void Init_GL(void){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 397  : 	SDL_Surface* tmp_surface = IMG_Load("character_1.png");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FPGCGDHE@character_1?4png@
  0002d	e8 00 00 00 00	 call	 _IMG_Load
  00032	83 c4 04	 add	 esp, 4
  00035	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 398  : 	glGenVertexArrays(1, &VAO);

  00038	8b f4		 mov	 esi, esp
  0003a	68 00 00 00 00	 push	 OFFSET _VAO
  0003f	6a 01		 push	 1
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenVertexArrays
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 399  : 	glBindVertexArray(VAO);

  0004e	8b f4		 mov	 esi, esp
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _VAO
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindVertexArray
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 400  : 	glGenBuffers(1, &VERTEXES_VBO);

  00063	8b f4		 mov	 esi, esp
  00065	68 00 00 00 00	 push	 OFFSET _VERTEXES_VBO
  0006a	6a 01		 push	 1
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenBuffers
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 401  : 	glBindBuffer(GL_ARRAY_BUFFER, VERTEXES_VBO);

  00079	8b f4		 mov	 esi, esp
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _VERTEXES_VBO
  00080	50		 push	 eax
  00081	68 92 88 00 00	 push	 34962			; 00008892H
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindBuffer
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 402  : 	glBufferData(GL_ARRAY_BUFFER, 32 * sizeof(float), NULL, GL_DYNAMIC_DRAW);

  00093	8b f4		 mov	 esi, esp
  00095	68 e8 88 00 00	 push	 35048			; 000088e8H
  0009a	6a 00		 push	 0
  0009c	68 80 00 00 00	 push	 128			; 00000080H
  000a1	68 92 88 00 00	 push	 34962			; 00008892H
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferData
  000ac	3b f4		 cmp	 esi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 403  : 	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);

  000b3	8b f4		 mov	 esi, esp
  000b5	6a 00		 push	 0
  000b7	6a 20		 push	 32			; 00000020H
  000b9	6a 00		 push	 0
  000bb	68 06 14 00 00	 push	 5126			; 00001406H
  000c0	6a 03		 push	 3
  000c2	6a 00		 push	 0
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 404  : 	glEnableVertexAttribArray(0);

  000d1	8b f4		 mov	 esi, esp
  000d3	6a 00		 push	 0
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 405  : 	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));

  000e2	8b f4		 mov	 esi, esp
  000e4	6a 0c		 push	 12			; 0000000cH
  000e6	6a 20		 push	 32			; 00000020H
  000e8	6a 00		 push	 0
  000ea	68 06 14 00 00	 push	 5126			; 00001406H
  000ef	6a 03		 push	 3
  000f1	6a 01		 push	 1
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 406  : 	glEnableVertexAttribArray(1);

  00100	8b f4		 mov	 esi, esp
  00102	6a 01		 push	 1
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 407  : 	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));

  00111	8b f4		 mov	 esi, esp
  00113	6a 18		 push	 24			; 00000018H
  00115	6a 20		 push	 32			; 00000020H
  00117	6a 00		 push	 0
  00119	68 06 14 00 00	 push	 5126			; 00001406H
  0011e	6a 03		 push	 3
  00120	6a 02		 push	 2
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  00128	3b f4		 cmp	 esi, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 408  : 	glEnableVertexAttribArray(2);

  0012f	8b f4		 mov	 esi, esp
  00131	6a 02		 push	 2
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 409  : 	//textures, player texture
; 410  : 	glActiveTexture(GL_TEXTURE0);

  00140	8b f4		 mov	 esi, esp
  00142	68 c0 84 00 00	 push	 33984			; 000084c0H
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glActiveTexture
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 411  : 	glGenTextures(4, texture);

  00154	8b f4		 mov	 esi, esp
  00156	68 00 00 00 00	 push	 OFFSET _texture
  0015b	6a 04		 push	 4
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenTextures
  00163	3b f4		 cmp	 esi, esp
  00165	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 412  : 	glBindTexture(GL_TEXTURE_2D, texture[0]);

  0016a	b8 04 00 00 00	 mov	 eax, 4
  0016f	6b c8 00	 imul	 ecx, eax, 0
  00172	8b f4		 mov	 esi, esp
  00174	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  0017a	52		 push	 edx
  0017b	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 413  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  0018d	8b f4		 mov	 esi, esp
  0018f	68 01 29 00 00	 push	 10497			; 00002901H
  00194	68 02 28 00 00	 push	 10242			; 00002802H
  00199	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001a4	3b f4		 cmp	 esi, esp
  001a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 414  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  001ab	8b f4		 mov	 esi, esp
  001ad	68 01 29 00 00	 push	 10497			; 00002901H
  001b2	68 03 28 00 00	 push	 10243			; 00002803H
  001b7	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 415  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  001c9	8b f4		 mov	 esi, esp
  001cb	68 01 26 00 00	 push	 9729			; 00002601H
  001d0	68 01 28 00 00	 push	 10241			; 00002801H
  001d5	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001e0	3b f4		 cmp	 esi, esp
  001e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 416  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  001e7	8b f4		 mov	 esi, esp
  001e9	68 01 26 00 00	 push	 9729			; 00002601H
  001ee	68 00 28 00 00	 push	 10240			; 00002800H
  001f3	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001fe	3b f4		 cmp	 esi, esp
  00200	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 417  : 	CreateTexture2D(tmp_surface, GL_RGBA, true, &player_quad.texw, &player_quad.texh);

  00205	68 18 00 00 00	 push	 OFFSET _player_quad+24
  0020a	68 14 00 00 00	 push	 OFFSET _player_quad+20
  0020f	6a 01		 push	 1
  00211	68 08 19 00 00	 push	 6408			; 00001908H
  00216	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 _CreateTexture2D
  0021f	83 c4 14	 add	 esp, 20			; 00000014H

; 418  : 	//first bacground
; 419  : 	tmp_surface = IMG_Load("background_1.png");

  00222	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FJHLDCBO@background_1?4png@
  00227	e8 00 00 00 00	 call	 _IMG_Load
  0022c	83 c4 04	 add	 esp, 4
  0022f	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 420  : 	glBindTexture(GL_TEXTURE_2D, texture[1]);

  00232	b8 04 00 00 00	 mov	 eax, 4
  00237	c1 e0 00	 shl	 eax, 0
  0023a	8b f4		 mov	 esi, esp
  0023c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00242	51		 push	 ecx
  00243	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0024e	3b f4		 cmp	 esi, esp
  00250	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 421  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  00255	8b f4		 mov	 esi, esp
  00257	68 01 29 00 00	 push	 10497			; 00002901H
  0025c	68 02 28 00 00	 push	 10242			; 00002802H
  00261	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00266	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0026c	3b f4		 cmp	 esi, esp
  0026e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 422  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  00273	8b f4		 mov	 esi, esp
  00275	68 01 29 00 00	 push	 10497			; 00002901H
  0027a	68 03 28 00 00	 push	 10243			; 00002803H
  0027f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 423  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  00291	8b f4		 mov	 esi, esp
  00293	68 01 26 00 00	 push	 9729			; 00002601H
  00298	68 01 28 00 00	 push	 10241			; 00002801H
  0029d	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002a8	3b f4		 cmp	 esi, esp
  002aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 424  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  002af	8b f4		 mov	 esi, esp
  002b1	68 01 26 00 00	 push	 9729			; 00002601H
  002b6	68 00 28 00 00	 push	 10240			; 00002800H
  002bb	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002c0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002c6	3b f4		 cmp	 esi, esp
  002c8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 425  : 	CreateTexture2D(tmp_surface, GL_RGB, true, NULL, NULL);

  002cd	6a 00		 push	 0
  002cf	6a 00		 push	 0
  002d1	6a 01		 push	 1
  002d3	68 07 19 00 00	 push	 6407			; 00001907H
  002d8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  002db	50		 push	 eax
  002dc	e8 00 00 00 00	 call	 _CreateTexture2D
  002e1	83 c4 14	 add	 esp, 20			; 00000014H

; 426  : 	/*tmp_surface = IMG_Load("fed_scout.png");
; 427  : 	glBindTexture(GL_TEXTURE_2D, texture[2]);
; 428  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
; 429  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
; 430  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
; 431  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
; 432  : 	CreateTexture2D(tmp_surface, GL_RGBA, true);*/
; 433  : 	glBindTexture(GL_TEXTURE_2D, texture[3]);

  002e4	b8 04 00 00 00	 mov	 eax, 4
  002e9	6b c8 03	 imul	 ecx, eax, 3
  002ec	8b f4		 mov	 esi, esp
  002ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  002f4	52		 push	 edx
  002f5	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 434  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  00307	8b f4		 mov	 esi, esp
  00309	68 01 29 00 00	 push	 10497			; 00002901H
  0030e	68 02 28 00 00	 push	 10242			; 00002802H
  00313	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00318	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0031e	3b f4		 cmp	 esi, esp
  00320	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 435  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  00325	8b f4		 mov	 esi, esp
  00327	68 01 29 00 00	 push	 10497			; 00002901H
  0032c	68 03 28 00 00	 push	 10243			; 00002803H
  00331	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0033c	3b f4		 cmp	 esi, esp
  0033e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 436  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  00343	8b f4		 mov	 esi, esp
  00345	68 01 26 00 00	 push	 9729			; 00002601H
  0034a	68 01 28 00 00	 push	 10241			; 00002801H
  0034f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0035a	3b f4		 cmp	 esi, esp
  0035c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 437  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  00361	8b f4		 mov	 esi, esp
  00363	68 01 26 00 00	 push	 9729			; 00002601H
  00368	68 00 28 00 00	 push	 10240			; 00002800H
  0036d	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00372	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00378	3b f4		 cmp	 esi, esp
  0037a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 438  : 	CreateTexture2D(wave_text, GL_RGBA, true, NULL, NULL); //but we want to keep the surface around so we can change the text after every wave

  0037f	6a 00		 push	 0
  00381	6a 00		 push	 0
  00383	6a 01		 push	 1
  00385	68 08 19 00 00	 push	 6408			; 00001908H
  0038a	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave_text
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 _CreateTexture2D
  00395	83 c4 14	 add	 esp, 20			; 00000014H

; 439  : 	tmp_surface = IMG_Load("character_ic.png"); //for the program icon

  00398	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OGEDPOMN@character_ic?4png@
  0039d	e8 00 00 00 00	 call	 _IMG_Load
  003a2	83 c4 04	 add	 esp, 4
  003a5	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 440  : 	SDL_SetWindowIcon(window, tmp_surface);

  003a8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  003ab	50		 push	 eax
  003ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _window
  003b2	51		 push	 ecx
  003b3	e8 00 00 00 00	 call	 _SDL_SetWindowIcon
  003b8	83 c4 08	 add	 esp, 8

; 441  : 	SDL_FreeSurface(tmp_surface);

  003bb	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  003be	50		 push	 eax
  003bf	e8 00 00 00 00	 call	 _SDL_FreeSurface
  003c4	83 c4 04	 add	 esp, 4

; 442  : 	tmp_surface = IMG_Load("cursor_f_open.png"); //for the mouse when left mouse button is not pressed

  003c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ENOFGPDN@cursor_f_open?4png@
  003cc	e8 00 00 00 00	 call	 _IMG_Load
  003d1	83 c4 04	 add	 esp, 4
  003d4	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 443  : 	mouse_opened  = SDL_CreateColorCursor(tmp_surface, 0, 0);

  003d7	6a 00		 push	 0
  003d9	6a 00		 push	 0
  003db	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  003de	50		 push	 eax
  003df	e8 00 00 00 00	 call	 _SDL_CreateColorCursor
  003e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  003e7	a3 00 00 00 00	 mov	 DWORD PTR _mouse_opened, eax

; 444  : 	SDL_FreeSurface(tmp_surface);

  003ec	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  003ef	50		 push	 eax
  003f0	e8 00 00 00 00	 call	 _SDL_FreeSurface
  003f5	83 c4 04	 add	 esp, 4

; 445  : 	tmp_surface = IMG_Load("cursor_f_closed.png"); //for the mouse when left mouse button is pressed

  003f8	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NBHOGJHM@cursor_f_closed?4png@
  003fd	e8 00 00 00 00	 call	 _IMG_Load
  00402	83 c4 04	 add	 esp, 4
  00405	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 446  : 	mouse_closed = SDL_CreateColorCursor(tmp_surface, 0, 0);

  00408	6a 00		 push	 0
  0040a	6a 00		 push	 0
  0040c	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0040f	50		 push	 eax
  00410	e8 00 00 00 00	 call	 _SDL_CreateColorCursor
  00415	83 c4 0c	 add	 esp, 12			; 0000000cH
  00418	a3 00 00 00 00	 mov	 DWORD PTR _mouse_closed, eax

; 447  : 	SDL_FreeSurface(tmp_surface);

  0041d	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00420	50		 push	 eax
  00421	e8 00 00 00 00	 call	 _SDL_FreeSurface
  00426	83 c4 04	 add	 esp, 4

; 448  : 
; 449  : }

  00429	5f		 pop	 edi
  0042a	5e		 pop	 esi
  0042b	5b		 pop	 ebx
  0042c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00432	3b ec		 cmp	 ebp, esp
  00434	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00439	8b e5		 mov	 esp, ebp
  0043b	5d		 pop	 ebp
  0043c	c3		 ret	 0
_Init_GL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _CreateTexture2D
_TEXT	SEGMENT
_tmp_surface$ = 8					; size = 4
_format$ = 12						; size = 4
_free_surface$ = 16					; size = 4
_w$ = 20						; size = 4
_h$ = 24						; size = 4
_CreateTexture2D PROC					; COMDAT

; 386  : void CreateTexture2D(SDL_Surface* tmp_surface, GLenum format, SDL_bool free_surface, int* w, int* h) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 387  : 	glTexImage2D(GL_TEXTURE_2D, 0, format, tmp_surface->w, tmp_surface->h, 0, format, GL_UNSIGNED_BYTE, tmp_surface->pixels);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0002d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00030	51		 push	 ecx
  00031	68 01 14 00 00	 push	 5121			; 00001401H
  00036	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  00039	52		 push	 edx
  0003a	6a 00		 push	 0
  0003c	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0003f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR _tmp_surface$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	50		 push	 eax
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  0004d	51		 push	 ecx
  0004e	6a 00		 push	 0
  00050	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexImage2D
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 388  : 	if(w)

  00062	83 7d 14 00	 cmp	 DWORD PTR _w$[ebp], 0
  00066	74 09		 je	 SHORT $LN2@CreateText

; 389  : 		w = tmp_surface->w;

  00068	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0006b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006e	89 4d 14	 mov	 DWORD PTR _w$[ebp], ecx
$LN2@CreateText:

; 390  : 	if(h)

  00071	83 7d 18 00	 cmp	 DWORD PTR _h$[ebp], 0
  00075	74 09		 je	 SHORT $LN3@CreateText

; 391  : 		h = tmp_surface->h;

  00077	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0007a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007d	89 4d 18	 mov	 DWORD PTR _h$[ebp], ecx
$LN3@CreateText:

; 392  : 	if (free_surface)

  00080	83 7d 10 00	 cmp	 DWORD PTR _free_surface$[ebp], 0
  00084	74 0c		 je	 SHORT $LN1@CreateText

; 393  : 		SDL_FreeSurface(tmp_surface);

  00086	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0008f	83 c4 04	 add	 esp, 4
$LN1@CreateText:

; 394  : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_CreateTexture2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_List
_TEXT	SEGMENT
_tmp_enemy$1 = -20					; size = 4
_i$2 = -8						; size = 4
_list$ = 8						; size = 4
_RENDER_List PROC					; COMDAT

; 325  : void RENDER_List(const linkedList* const list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 326  : 	for (int i = 0; i < list->count; ++i) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@RENDER_Lis
$LN2@RENDER_Lis:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@RENDER_Lis:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00040	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00043	7d 59		 jge	 SHORT $LN3@RENDER_Lis

; 327  : 		enemy* tmp_enemy = LIST_At(&enemies, i);

  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET _enemies
  0004e	e8 00 00 00 00	 call	 _LIST_At
  00053	83 c4 08	 add	 esp, 8
  00056	89 45 ec	 mov	 DWORD PTR _tmp_enemy$1[ebp], eax

; 328  : 		RENDER_TexturedQuad(tmp_enemy->sprite, 1, 1, 1, true); 

  00059	6a 01		 push	 1
  0005b	51		 push	 ecx
  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	51		 push	 ecx
  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	51		 push	 ecx
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	8b 75 ec	 mov	 esi, DWORD PTR _tmp_enemy$1[ebp]
  00088	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0008b	b9 07 00 00 00	 mov	 ecx, 7
  00090	8b fc		 mov	 edi, esp
  00092	f3 a5		 rep movsd
  00094	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  00099	83 c4 2c	 add	 esp, 44			; 0000002cH

; 329  : 	}

  0009c	eb 93		 jmp	 SHORT $LN2@RENDER_Lis
$LN3@RENDER_Lis:

; 330  : }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_RENDER_List ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _GAME_AddEnemies
_TEXT	SEGMENT
tv198 = -316						; size = 8
tv194 = -308						; size = 4
tv189 = -304						; size = 8
tv186 = -296						; size = 4
tv222 = -292						; size = 4
tv175 = -288						; size = 8
tv171 = -280						; size = 4
_tmp_enemy$1 = -80					; size = 4
_tmp_text_quad$2 = -68					; size = 28
_tmp_bitshift$3 = -32					; size = 4
_tmp$4 = -20						; size = 4
_time$ = -8						; size = 4
_GAME_AddEnemies PROC					; COMDAT

; 304  : void GAME_AddEnemies(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00012	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 305  : 	static amount = 0; //debug variable, should be removed after release
; 306  : 	static float timer = 0;
; 307  : 	clock_t time = clock() + 1000;

  00028	8b f4		 mov	 esi, esp
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  0003c	89 45 f8	 mov	 DWORD PTR _time$[ebp], eax

; 308  : 	time /= CLOCKS_PER_SEC;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _time$[ebp]
  00042	99		 cdq
  00043	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00048	f7 f9		 idiv	 ecx
  0004a	89 45 f8	 mov	 DWORD PTR _time$[ebp], eax

; 309  : 	if (timer <= 0 && (!(time % (9 - enemy_counter)))) {

  0004d	0f 57 c0	 xorps	 xmm0, xmm0
  00050	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9
  00057	0f 82 0a 02 00
	00		 jb	 $LN2@GAME_AddEn
  0005d	b9 09 00 00 00	 mov	 ecx, 9
  00062	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _enemy_counter
  00068	8b 45 f8	 mov	 eax, DWORD PTR _time$[ebp]
  0006b	33 d2		 xor	 edx, edx
  0006d	f7 f1		 div	 ecx
  0006f	85 d2		 test	 edx, edx
  00071	0f 85 f0 01 00
	00		 jne	 $LN2@GAME_AddEn

; 310  : 		unsigned int tmp = rand() % enemy_counter, tmp_bitshift = 0;

  00077	8b f4		 mov	 esi, esp
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0007f	3b f4		 cmp	 esi, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	33 d2		 xor	 edx, edx
  00088	f7 35 00 00 00
	00		 div	 DWORD PTR _enemy_counter
  0008e	89 55 ec	 mov	 DWORD PTR _tmp$4[ebp], edx
  00091	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _tmp_bitshift$3[ebp], 0

; 311  : 		tmp_bitshift = FEDERATION_SCOUT << tmp;

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _tmp$4[ebp]
  000a0	d3 e0		 shl	 eax, cl
  000a2	89 45 e0	 mov	 DWORD PTR _tmp_bitshift$3[ebp], eax

; 312  : 		if (!(active_en & tmp_bitshift))

  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR _active_en
  000aa	23 45 e0	 and	 eax, DWORD PTR _tmp_bitshift$3[ebp]
  000ad	75 0d		 jne	 SHORT $LN3@GAME_AddEn

; 313  : 			tmp_bitshift = CIVILIAN_RANCHER << tmp;

  000af	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  000b4	8b 4d ec	 mov	 ecx, DWORD PTR _tmp$4[ebp]
  000b7	d3 e0		 shl	 eax, cl
  000b9	89 45 e0	 mov	 DWORD PTR _tmp_bitshift$3[ebp], eax
$LN3@GAME_AddEn:

; 314  : 
; 315  : 		text_quad tmp_text_quad = { 0.9,PIXEL_TO_NDCY((float)(rand() % window_height), window_height),0.1,0.1,texture[0],0,0 }; //texture width and height not relevant... yet

  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000c4	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_text_quad$2[ebp], xmm0
  000c9	a1 00 00 00 00	 mov	 eax, DWORD PTR _window_height
  000ce	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv171[ebp], eax
  000d4	f2 0f 2a 85 e8
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv171[ebp]
  000dc	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv171[ebp]
  000e2	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000e5	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  000ee	f2 0f 11 85 e0
	fe ff ff	 movsd	 QWORD PTR tv175[ebp], xmm0
  000f6	f2 0f 5a 85 e0
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv175[ebp]
  000fe	8b f4		 mov	 esi, esp
  00100	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR tv222[ebp], xmm0
  00108	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0010e	3b f4		 cmp	 esi, esp
  00110	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00115	33 d2		 xor	 edx, edx
  00117	f7 35 00 00 00
	00		 div	 DWORD PTR _window_height
  0011d	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv186[ebp], edx
  00123	f2 0f 2a 85 d8
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv186[ebp]
  0012b	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR tv186[ebp]
  00131	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00134	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  0013d	f2 0f 11 85 d0
	fe ff ff	 movsd	 QWORD PTR tv189[ebp], xmm0
  00145	f2 0f 5a 85 d0
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv189[ebp]
  0014d	f3 0f 10 8d dc
	fe ff ff	 movss	 xmm1, DWORD PTR tv222[ebp]
  00155	f3 0f 5c c8	 subss	 xmm1, xmm0
  00159	a1 00 00 00 00	 mov	 eax, DWORD PTR _window_height
  0015e	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  00164	f2 0f 2a 85 cc
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv194[ebp]
  0016c	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  00172	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00175	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0017e	f2 0f 11 85 c4
	fe ff ff	 movsd	 QWORD PTR tv198[ebp], xmm0
  00186	f2 0f 5a 85 c4
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv198[ebp]
  0018e	f3 0f 5e c8	 divss	 xmm1, xmm0
  00192	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  0019a	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  001a2	f3 0f 11 4d c0	 movss	 DWORD PTR _tmp_text_quad$2[ebp+4], xmm1
  001a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001af	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_text_quad$2[ebp+8], xmm0
  001b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001bc	f3 0f 11 45 c8	 movss	 DWORD PTR _tmp_text_quad$2[ebp+12], xmm0
  001c1	b8 04 00 00 00	 mov	 eax, 4
  001c6	6b c8 00	 imul	 ecx, eax, 0
  001c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  001cf	89 55 cc	 mov	 DWORD PTR _tmp_text_quad$2[ebp+16], edx
  001d2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _tmp_text_quad$2[ebp+20], 0
  001d9	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _tmp_text_quad$2[ebp+24], 0

; 316  : 		enemy* tmp_enemy = calloc(1, sizeof(enemy));

  001e0	8b f4		 mov	 esi, esp
  001e2	6a 28		 push	 40			; 00000028H
  001e4	6a 01		 push	 1
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  001ec	83 c4 08	 add	 esp, 8
  001ef	3b f4		 cmp	 esi, esp
  001f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f6	89 45 b0	 mov	 DWORD PTR _tmp_enemy$1[ebp], eax

; 317  : 		tmp_enemy->sprite = tmp_text_quad, tmp_enemy->health = 20 * tmp_bitshift, tmp_enemy->score = 10 * tmp_bitshift * 3, tmp_enemy->id = tmp_bitshift;

  001f9	b9 07 00 00 00	 mov	 ecx, 7
  001fe	8d 75 bc	 lea	 esi, DWORD PTR _tmp_text_quad$2[ebp]
  00201	8b 7d b0	 mov	 edi, DWORD PTR _tmp_enemy$1[ebp]
  00204	f3 a5		 rep movsd
  00206	6b 45 e0 14	 imul	 eax, DWORD PTR _tmp_bitshift$3[ebp], 20
  0020a	8b 4d b0	 mov	 ecx, DWORD PTR _tmp_enemy$1[ebp]
  0020d	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00210	6b 55 e0 0a	 imul	 edx, DWORD PTR _tmp_bitshift$3[ebp], 10
  00214	6b c2 03	 imul	 eax, edx, 3
  00217	8b 4d b0	 mov	 ecx, DWORD PTR _tmp_enemy$1[ebp]
  0021a	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0021d	8b 55 b0	 mov	 edx, DWORD PTR _tmp_enemy$1[ebp]
  00220	8b 45 e0	 mov	 eax, DWORD PTR _tmp_bitshift$3[ebp]
  00223	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 318  : 		LIST_AddElement(&enemies, tmp_enemy);

  00226	8b 45 b0	 mov	 eax, DWORD PTR _tmp_enemy$1[ebp]
  00229	50		 push	 eax
  0022a	68 00 00 00 00	 push	 OFFSET _enemies
  0022f	e8 00 00 00 00	 call	 _LIST_AddElement
  00234	83 c4 08	 add	 esp, 8

; 319  : 		++amount;

  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?amount@?1??GAME_AddEnemies@@9@9
  0023c	83 c0 01	 add	 eax, 1
  0023f	a3 00 00 00 00	 mov	 DWORD PTR ?amount@?1??GAME_AddEnemies@@9@9, eax

; 320  : 		timer = 1000; //so that it doesn't place 500 enemys every 9 - enemy_count seconds

  00244	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  0024c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9, xmm0

; 321  : 		printf("number:%d\n", amount);

  00254	a1 00 00 00 00	 mov	 eax, DWORD PTR ?amount@?1??GAME_AddEnemies@@9@9
  00259	50		 push	 eax
  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OPHAMHBB@number?3?$CFd?6@
  0025f	e8 00 00 00 00	 call	 _printf
  00264	83 c4 08	 add	 esp, 8
$LN2@GAME_AddEn:

; 322  : 	}
; 323  : 	--timer;

  00267	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9
  0026f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00277	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9, xmm0

; 324  : }

  0027f	52		 push	 edx
  00280	8b cd		 mov	 ecx, ebp
  00282	50		 push	 eax
  00283	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@GAME_AddEn
  00289	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0028e	58		 pop	 eax
  0028f	5a		 pop	 edx
  00290	5f		 pop	 edi
  00291	5e		 pop	 esi
  00292	5b		 pop	 ebx
  00293	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00299	3b ec		 cmp	 ebp, esp
  0029b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a0	8b e5		 mov	 esp, ebp
  002a2	5d		 pop	 ebp
  002a3	c3		 ret	 0
$LN7@GAME_AddEn:
  002a4	01 00 00 00	 DD	 1
  002a8	00 00 00 00	 DD	 $LN6@GAME_AddEn
$LN6@GAME_AddEn:
  002ac	bc ff ff ff	 DD	 -68			; ffffffbcH
  002b0	1c 00 00 00	 DD	 28			; 0000001cH
  002b4	00 00 00 00	 DD	 $LN5@GAME_AddEn
$LN5@GAME_AddEn:
  002b8	74		 DB	 116			; 00000074H
  002b9	6d		 DB	 109			; 0000006dH
  002ba	70		 DB	 112			; 00000070H
  002bb	5f		 DB	 95			; 0000005fH
  002bc	74		 DB	 116			; 00000074H
  002bd	65		 DB	 101			; 00000065H
  002be	78		 DB	 120			; 00000078H
  002bf	74		 DB	 116			; 00000074H
  002c0	5f		 DB	 95			; 0000005fH
  002c1	71		 DB	 113			; 00000071H
  002c2	75		 DB	 117			; 00000075H
  002c3	61		 DB	 97			; 00000061H
  002c4	64		 DB	 100			; 00000064H
  002c5	00		 DB	 0
_GAME_AddEnemies ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _GAME_WaveInit
_TEXT	SEGMENT
_tmp_buffer$ = -28					; size = 8
_tmp$1 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_GAME_WaveInit PROC					; COMDAT

; 278  : void GAME_WaveInit(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 279  : 	reserve = wave * 20;

  00032	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _wave, 20
  00039	a3 00 00 00 00	 mov	 DWORD PTR _reserve, eax

; 280  : 	printf("reserve is %d\n", reserve);

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR _reserve
  00043	50		 push	 eax
  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@
  00049	e8 00 00 00 00	 call	 _printf
  0004e	83 c4 08	 add	 esp, 8

; 281  : 	if (!(wave % 3)) { // reforcement round

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00056	33 d2		 xor	 edx, edx
  00058	b9 03 00 00 00	 mov	 ecx, 3
  0005d	f7 f1		 div	 ecx
  0005f	85 d2		 test	 edx, edx
  00061	0f 85 b7 00 00
	00		 jne	 $LN2@GAME_WaveI

; 282  : 		unsigned int tmp = rand() % 2;

  00067	8b f4		 mov	 esi, esp
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0007b	79 05		 jns	 SHORT $LN12@GAME_WaveI
  0007d	48		 dec	 eax
  0007e	83 c8 fe	 or	 eax, -2			; fffffffeH
  00081	40		 inc	 eax
$LN12@GAME_WaveI:
  00082	89 45 f4	 mov	 DWORD PTR _tmp$1[ebp], eax

; 283  : 		//can add federation ship or civilian ship based on chance, players should hope for civilian ships
; 284  : 		if (tmp)

  00085	83 7d f4 00	 cmp	 DWORD PTR _tmp$1[ebp], 0
  00089	74 44		 je	 SHORT $LN3@GAME_WaveI

; 285  : 			active_en = FEDERATION_SCOUT << (wave / 3), printf("added %d\n", FEDERATION_SCOUT << (wave / 3));

  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00090	33 d2		 xor	 edx, edx
  00092	b9 03 00 00 00	 mov	 ecx, 3
  00097	f7 f1		 div	 ecx
  00099	ba 01 00 00 00	 mov	 edx, 1
  0009e	8b c8		 mov	 ecx, eax
  000a0	d3 e2		 shl	 edx, cl
  000a2	89 15 00 00 00
	00		 mov	 DWORD PTR _active_en, edx
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000ad	33 d2		 xor	 edx, edx
  000af	b9 03 00 00 00	 mov	 ecx, 3
  000b4	f7 f1		 div	 ecx
  000b6	ba 01 00 00 00	 mov	 edx, 1
  000bb	8b c8		 mov	 ecx, eax
  000bd	d3 e2		 shl	 edx, cl
  000bf	52		 push	 edx
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_09NOIJFDFO@added?5?$CFd?6@
  000c5	e8 00 00 00 00	 call	 _printf
  000ca	83 c4 08	 add	 esp, 8
  000cd	eb 42		 jmp	 SHORT $LN4@GAME_WaveI
$LN3@GAME_WaveI:

; 286  : 		else
; 287  : 			active_en = FEDERATION_FLAGSHIP /*the next bit shift will make it a civilian rancher*/ << (wave / 3), printf("added %d\n", FEDERATION_FLAGSHIP << (wave / 3));

  000cf	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000d4	33 d2		 xor	 edx, edx
  000d6	b9 03 00 00 00	 mov	 ecx, 3
  000db	f7 f1		 div	 ecx
  000dd	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e2	8b c8		 mov	 ecx, eax
  000e4	d3 e2		 shl	 edx, cl
  000e6	89 15 00 00 00
	00		 mov	 DWORD PTR _active_en, edx
  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000f1	33 d2		 xor	 edx, edx
  000f3	b9 03 00 00 00	 mov	 ecx, 3
  000f8	f7 f1		 div	 ecx
  000fa	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000ff	8b c8		 mov	 ecx, eax
  00101	d3 e2		 shl	 edx, cl
  00103	52		 push	 edx
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_09NOIJFDFO@added?5?$CFd?6@
  00109	e8 00 00 00 00	 call	 _printf
  0010e	83 c4 08	 add	 esp, 8
$LN4@GAME_WaveI:

; 288  : 		enemy_counter++;

  00111	a1 00 00 00 00	 mov	 eax, DWORD PTR _enemy_counter
  00116	83 c0 01	 add	 eax, 1
  00119	a3 00 00 00 00	 mov	 DWORD PTR _enemy_counter, eax
$LN2@GAME_WaveI:

; 289  : 	}
; 290  : 	if (!(wave % 5)) { //exotic shop appears every 5 waves

  0011e	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00123	33 d2		 xor	 edx, edx
  00125	b9 05 00 00 00	 mov	 ecx, 5
  0012a	f7 f1		 div	 ecx
  0012c	85 d2		 test	 edx, edx
  0012e	75 19		 jne	 SHORT $LN5@GAME_WaveI

; 291  : 		puts("exotic shop");

  00130	8b f4		 mov	 esi, esp
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KDJLAENM@exotic?5shop@
  00137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0013d	83 c4 04	 add	 esp, 4
  00140	3b f4		 cmp	 esi, esp
  00142	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 292  : 	}

  00147	eb 20		 jmp	 SHORT $LN6@GAME_WaveI
$LN5@GAME_WaveI:

; 293  : 	else if (wave > 1) { //opens the normal shop, makes sure that it opens it after you complete the first wave 

  00149	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _wave, 1
  00150	76 17		 jbe	 SHORT $LN6@GAME_WaveI

; 294  : 		puts("normal shop");

  00152	8b f4		 mov	 esi, esp
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KCFKOELE@normal?5shop@
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0015f	83 c4 04	 add	 esp, 4
  00162	3b f4		 cmp	 esi, esp
  00164	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@GAME_WaveI:

; 295  : 	}
; 296  : 	//update the wave counter onscreen
; 297  : 	char tmp_buffer[8] = "Wave:\0";

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06BENPFJFP@Wave?3?$AA@
  0016e	89 45 e4	 mov	 DWORD PTR _tmp_buffer$[ebp], eax
  00171	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06BENPFJFP@Wave?3?$AA@+4
  00178	66 89 4d e8	 mov	 WORD PTR _tmp_buffer$[ebp+4], cx
  0017c	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06BENPFJFP@Wave?3?$AA@+6
  00182	88 55 ea	 mov	 BYTE PTR _tmp_buffer$[ebp+6], dl
  00185	33 c0		 xor	 eax, eax
  00187	88 45 eb	 mov	 BYTE PTR _tmp_buffer$[ebp+7], al

; 298  : 	sprintf(wave_num, "%d", wave);

  0018a	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  0018f	50		 push	 eax
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00195	68 00 00 00 00	 push	 OFFSET _wave_num
  0019a	e8 00 00 00 00	 call	 _sprintf
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 299  : 	strcat(tmp_buffer, wave_num);

  001a2	68 00 00 00 00	 push	 OFFSET _wave_num
  001a7	8d 45 e4	 lea	 eax, DWORD PTR _tmp_buffer$[ebp]
  001aa	50		 push	 eax
  001ab	e8 00 00 00 00	 call	 _strcat
  001b0	83 c4 08	 add	 esp, 8

; 300  : 	wave_text = TTF_RenderText_Blended(font_1, tmp_buffer, white);

  001b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  001b8	50		 push	 eax
  001b9	8d 4d e4	 lea	 ecx, DWORD PTR _tmp_buffer$[ebp]
  001bc	51		 push	 ecx
  001bd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _font_1
  001c3	52		 push	 edx
  001c4	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  001c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cc	a3 00 00 00 00	 mov	 DWORD PTR _wave_text, eax

; 301  : 	glBindTexture(GL_TEXTURE_2D, texture[3]);

  001d1	b8 04 00 00 00	 mov	 eax, 4
  001d6	6b c8 03	 imul	 ecx, eax, 3
  001d9	8b f4		 mov	 esi, esp
  001db	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  001e1	52		 push	 edx
  001e2	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001e7	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  001ed	3b f4		 cmp	 esi, esp
  001ef	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 302  : 	CreateTexture2D(wave_text, GL_RGBA, true, NULL, NULL);

  001f4	6a 00		 push	 0
  001f6	6a 00		 push	 0
  001f8	6a 01		 push	 1
  001fa	68 08 19 00 00	 push	 6408			; 00001908H
  001ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave_text
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 _CreateTexture2D
  0020a	83 c4 14	 add	 esp, 20			; 00000014H

; 303  : }

  0020d	52		 push	 edx
  0020e	8b cd		 mov	 ecx, ebp
  00210	50		 push	 eax
  00211	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@GAME_WaveI
  00217	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0021c	58		 pop	 eax
  0021d	5a		 pop	 edx
  0021e	5f		 pop	 edi
  0021f	5e		 pop	 esi
  00220	5b		 pop	 ebx
  00221	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00224	33 cd		 xor	 ecx, ebp
  00226	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022b	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  00231	3b ec		 cmp	 ebp, esp
  00233	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00238	8b e5		 mov	 esp, ebp
  0023a	5d		 pop	 ebp
  0023b	c3		 ret	 0
$LN11@GAME_WaveI:
  0023c	01 00 00 00	 DD	 1
  00240	00 00 00 00	 DD	 $LN10@GAME_WaveI
$LN10@GAME_WaveI:
  00244	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00248	08 00 00 00	 DD	 8
  0024c	00 00 00 00	 DD	 $LN9@GAME_WaveI
$LN9@GAME_WaveI:
  00250	74		 DB	 116			; 00000074H
  00251	6d		 DB	 109			; 0000006dH
  00252	70		 DB	 112			; 00000070H
  00253	5f		 DB	 95			; 0000005fH
  00254	62		 DB	 98			; 00000062H
  00255	75		 DB	 117			; 00000075H
  00256	66		 DB	 102			; 00000066H
  00257	66		 DB	 102			; 00000066H
  00258	65		 DB	 101			; 00000065H
  00259	72		 DB	 114			; 00000072H
  0025a	00		 DB	 0
_GAME_WaveInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _SetTextureBoundedParams
_TEXT	SEGMENT
_sampler_target$ = 8					; size = 4
_filter$ = 12						; size = 4
_repeat_type$ = 16					; size = 4
_SetTextureBoundedParams PROC				; COMDAT

; 380  : void SetTextureBoundedParams(GLenum sampler_target, GLenum filter, GLfloat repeat_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 381  : 	glTexParameteri(sampler_target, GL_TEXTURE_WRAP_S, repeat_type);

  00028	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _repeat_type$[ebp]
  0002d	8b f4		 mov	 esi, esp
  0002f	50		 push	 eax
  00030	68 02 28 00 00	 push	 10242			; 00002802H
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 382  : 	glTexParameteri(sampler_target, GL_TEXTURE_WRAP_T, repeat_type);

  00046	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _repeat_type$[ebp]
  0004b	8b f4		 mov	 esi, esp
  0004d	50		 push	 eax
  0004e	68 03 28 00 00	 push	 10243			; 00002803H
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00056	51		 push	 ecx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 383  : 	glTexParameteri(sampler_target, GL_TEXTURE_MIN_FILTER, filter);

  00064	8b f4		 mov	 esi, esp
  00066	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  00069	50		 push	 eax
  0006a	68 01 28 00 00	 push	 10241			; 00002801H
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00072	51		 push	 ecx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 384  : 	glTexParameteri(sampler_target, GL_TEXTURE_MAG_FILTER, filter);

  00080	8b f4		 mov	 esi, esp
  00082	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  00085	50		 push	 eax
  00086	68 00 28 00 00	 push	 10240			; 00002800H
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  0008e	51		 push	 ecx
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 385  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_SetTextureBoundedParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _CompileShader
_TEXT	SEGMENT
_i$1 = -72						; size = 4
_fp$2 = -60						; size = 4
_linebreak_amount$ = -48				; size = 4
_size$ = -36						; size = 4
_shader_obj$ = -24					; size = 4
_shader_data$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_shader_fname$ = 8					; size = 4
_type$ = 12						; size = 4
_CompileShader PROC					; COMDAT

; 248  : GLint CompileShader(char* shader_fname, GLenum type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00012	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 249  : 	char* shader_data;
; 250  : 	GLint shader_obj;
; 251  : 	size_t size;
; 252  : 	int linebreak_amount = 0;

  00032	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _linebreak_amount$[ebp], 0

; 253  : 	{
; 254  : 		FILE* fp; 
; 255  : 		fp = fopen(shader_fname, "r");

  00039	8b f4		 mov	 esi, esp
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00040	8b 45 08	 mov	 eax, DWORD PTR _shader_fname$[ebp]
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	89 45 c4	 mov	 DWORD PTR _fp$2[ebp], eax

; 256  : 		fseek(fp, SEEK_SET, SEEK_END);

  00057	8b f4		 mov	 esi, esp
  00059	6a 02		 push	 2
  0005b	6a 00		 push	 0
  0005d	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 257  : 		size = ftell(fp);

  00071	8b f4		 mov	 esi, esp
  00073	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00076	50		 push	 eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ftell
  0007d	83 c4 04	 add	 esp, 4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	89 45 dc	 mov	 DWORD PTR _size$[ebp], eax

; 258  : 		fseek(fp, SEEK_SET, SEEK_SET);

  0008a	8b f4		 mov	 esi, esp
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00093	50		 push	 eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 259  : 		shader_data = calloc(1, size);

  000a4	8b f4		 mov	 esi, esp
  000a6	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  000a9	50		 push	 eax
  000aa	6a 01		 push	 1
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  000b2	83 c4 08	 add	 esp, 8
  000b5	3b f4		 cmp	 esi, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	89 45 f4	 mov	 DWORD PTR _shader_data$[ebp], eax

; 260  : 		fread(shader_data, 1, size, fp);

  000bf	8b f4		 mov	 esi, esp
  000c1	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  000c8	51		 push	 ecx
  000c9	6a 01		 push	 1
  000cb	8b 55 f4	 mov	 edx, DWORD PTR _shader_data$[ebp]
  000ce	52		 push	 edx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000d5	83 c4 10	 add	 esp, 16			; 00000010H
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 261  : 		fclose(fp);

  000df	8b f4		 mov	 esi, esp
  000e1	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000eb	83 c4 04	 add	 esp, 4
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 262  : 		for (int i = 0; i < size; ++i) {

  000f5	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000fc	eb 09		 jmp	 SHORT $LN4@CompileSha
$LN2@CompileSha:
  000fe	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 45 b8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@CompileSha:
  00107	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  0010a	3b 45 dc	 cmp	 eax, DWORD PTR _size$[ebp]
  0010d	73 19		 jae	 SHORT $LN3@CompileSha

; 263  : 			if (shader_data[i] == '\n') {

  0010f	8b 45 f4	 mov	 eax, DWORD PTR _shader_data$[ebp]
  00112	03 45 b8	 add	 eax, DWORD PTR _i$1[ebp]
  00115	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00118	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0011b	75 09		 jne	 SHORT $LN5@CompileSha

; 264  : 				++linebreak_amount;

  0011d	8b 45 d0	 mov	 eax, DWORD PTR _linebreak_amount$[ebp]
  00120	83 c0 01	 add	 eax, 1
  00123	89 45 d0	 mov	 DWORD PTR _linebreak_amount$[ebp], eax
$LN5@CompileSha:

; 265  : 			}
; 266  : 		}

  00126	eb d6		 jmp	 SHORT $LN2@CompileSha
$LN3@CompileSha:

; 267  : 		shader_data[size - linebreak_amount] = '\0';

  00128	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  0012b	2b 45 d0	 sub	 eax, DWORD PTR _linebreak_amount$[ebp]
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR _shader_data$[ebp]
  00131	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 268  : 		//printf("%s", shader_data);
; 269  : 		//printf("%d", size);
; 270  : 		//for debugging
; 271  : 	}
; 272  : 	shader_obj = glCreateShader(type);

  00135	8b f4		 mov	 esi, esp
  00137	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0013a	50		 push	 eax
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateShader
  00141	3b f4		 cmp	 esi, esp
  00143	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00148	89 45 e8	 mov	 DWORD PTR _shader_obj$[ebp], eax

; 273  : 	glShaderSource(shader_obj, 1, &shader_data, NULL);

  0014b	8b f4		 mov	 esi, esp
  0014d	6a 00		 push	 0
  0014f	8d 45 f4	 lea	 eax, DWORD PTR _shader_data$[ebp]
  00152	50		 push	 eax
  00153	6a 01		 push	 1
  00155	8b 4d e8	 mov	 ecx, DWORD PTR _shader_obj$[ebp]
  00158	51		 push	 ecx
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glShaderSource
  0015f	3b f4		 cmp	 esi, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 274  : 	glCompileShader(shader_obj);

  00166	8b f4		 mov	 esi, esp
  00168	8b 45 e8	 mov	 eax, DWORD PTR _shader_obj$[ebp]
  0016b	50		 push	 eax
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCompileShader
  00172	3b f4		 cmp	 esi, esp
  00174	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 275  : 	free(shader_data);

  00179	8b f4		 mov	 esi, esp
  0017b	8b 45 f4	 mov	 eax, DWORD PTR _shader_data$[ebp]
  0017e	50		 push	 eax
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00185	83 c4 04	 add	 esp, 4
  00188	3b f4		 cmp	 esi, esp
  0018a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 276  : 	return shader_obj;

  0018f	8b 45 e8	 mov	 eax, DWORD PTR _shader_obj$[ebp]

; 277  : }

  00192	52		 push	 edx
  00193	8b cd		 mov	 ecx, ebp
  00195	50		 push	 eax
  00196	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@CompileSha
  0019c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001a1	58		 pop	 eax
  001a2	5a		 pop	 edx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	33 cd		 xor	 ecx, ebp
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  001b6	3b ec		 cmp	 ebp, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
  001c1	0f 1f 00	 npad	 3
$LN9@CompileSha:
  001c4	01 00 00 00	 DD	 1
  001c8	00 00 00 00	 DD	 $LN8@CompileSha
$LN8@CompileSha:
  001cc	f4 ff ff ff	 DD	 -12			; fffffff4H
  001d0	04 00 00 00	 DD	 4
  001d4	00 00 00 00	 DD	 $LN7@CompileSha
$LN7@CompileSha:
  001d8	73		 DB	 115			; 00000073H
  001d9	68		 DB	 104			; 00000068H
  001da	61		 DB	 97			; 00000061H
  001db	64		 DB	 100			; 00000064H
  001dc	65		 DB	 101			; 00000065H
  001dd	72		 DB	 114			; 00000072H
  001de	5f		 DB	 95			; 0000005fH
  001df	64		 DB	 100			; 00000064H
  001e0	61		 DB	 97			; 00000061H
  001e1	74		 DB	 116			; 00000074H
  001e2	61		 DB	 97			; 00000061H
  001e3	00		 DB	 0
_CompileShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_Quad
_TEXT	SEGMENT
_tmp_vertexes$ = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 16
_r$ = 24						; size = 4
_g$ = 28						; size = 4
_b$ = 32						; size = 4
_RENDER_Quad PROC					; COMDAT

; 373  : void RENDER_Quad(quad target, float r, float g, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 84 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-380]
  00012	b9 5f 00 00 00	 mov	 ecx, 95			; 0000005fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 374  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 375  : 	float tmp_vertexes[32] = { x,y,0,r,g,b,0,0, x + w,y,0,r,g,b,1,0, x + w,y - h,0,r,g,b,1,1, x,y - h,0,r,g,b,0,1 };

  0005a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0005f	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp], xmm0
  00067	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0006c	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+4], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+8], xmm0
  0007f	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  00084	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+12], xmm0
  0008c	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00091	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+16], xmm0
  00099	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  0009e	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+20], xmm0
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+24], xmm0
  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+28], xmm0
  000bc	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000c1	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  000c6	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+32], xmm0
  000ce	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d3	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+36], xmm0
  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+40], xmm0
  000e6	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  000eb	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+44], xmm0
  000f3	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  000f8	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+48], xmm0
  00100	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  00105	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+52], xmm0
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00115	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$[ebp+56], xmm0
  0011a	0f 57 c0	 xorps	 xmm0, xmm0
  0011d	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$[ebp+60], xmm0
  00122	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00127	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0012c	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$[ebp+64], xmm0
  00131	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00136	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0013b	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$[ebp+68], xmm0
  00140	0f 57 c0	 xorps	 xmm0, xmm0
  00143	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$[ebp+72], xmm0
  00148	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  0014d	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$[ebp+76], xmm0
  00152	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00157	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$[ebp+80], xmm0
  0015c	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  00161	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$[ebp+84], xmm0
  00166	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016e	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$[ebp+88], xmm0
  00173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0017b	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$[ebp+92], xmm0
  00180	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00185	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$[ebp+96], xmm0
  0018a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0018f	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00194	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$[ebp+100], xmm0
  00199	0f 57 c0	 xorps	 xmm0, xmm0
  0019c	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$[ebp+104], xmm0
  001a1	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  001a6	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$[ebp+108], xmm0
  001ab	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  001b0	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$[ebp+112], xmm0
  001b5	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  001ba	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$[ebp+116], xmm0
  001bf	0f 57 c0	 xorps	 xmm0, xmm0
  001c2	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$[ebp+120], xmm0
  001c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cf	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$[ebp+124], xmm0

; 376  : 	glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001d4	8b f4		 mov	 esi, esp
  001d6	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$[ebp]
  001dc	50		 push	 eax
  001dd	68 80 00 00 00	 push	 128			; 00000080H
  001e2	6a 00		 push	 0
  001e4	68 92 88 00 00	 push	 34962			; 00008892H
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  001ef	3b f4		 cmp	 esi, esp
  001f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 377  : 	glUseProgram(shader_colored);

  001f6	8b f4		 mov	 esi, esp
  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  001fd	50		 push	 eax
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 378  : 	glDrawArrays(GL_QUADS, 0, 4);

  0020b	8b f4		 mov	 esi, esp
  0020d	6a 04		 push	 4
  0020f	6a 00		 push	 0
  00211	6a 07		 push	 7
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00219	3b f4		 cmp	 esi, esp
  0021b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 379  : }

  00220	52		 push	 edx
  00221	8b cd		 mov	 ecx, ebp
  00223	50		 push	 eax
  00224	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@RENDER_Qua
  0022a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0022f	58		 pop	 eax
  00230	5a		 pop	 edx
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	5b		 pop	 ebx
  00234	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00237	33 cd		 xor	 ecx, ebp
  00239	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023e	81 c4 7c 01 00
	00		 add	 esp, 380		; 0000017cH
  00244	3b ec		 cmp	 ebp, esp
  00246	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
  0024f	90		 npad	 1
$LN5@RENDER_Qua:
  00250	01 00 00 00	 DD	 1
  00254	00 00 00 00	 DD	 $LN4@RENDER_Qua
$LN4@RENDER_Qua:
  00258	48 ff ff ff	 DD	 -184			; ffffff48H
  0025c	80 00 00 00	 DD	 128			; 00000080H
  00260	00 00 00 00	 DD	 $LN3@RENDER_Qua
$LN3@RENDER_Qua:
  00264	74		 DB	 116			; 00000074H
  00265	6d		 DB	 109			; 0000006dH
  00266	70		 DB	 112			; 00000070H
  00267	5f		 DB	 95			; 0000005fH
  00268	76		 DB	 118			; 00000076H
  00269	65		 DB	 101			; 00000065H
  0026a	72		 DB	 114			; 00000072H
  0026b	74		 DB	 116			; 00000074H
  0026c	65		 DB	 101			; 00000065H
  0026d	78		 DB	 120			; 00000078H
  0026e	65		 DB	 101			; 00000065H
  0026f	73		 DB	 115			; 00000073H
  00270	00		 DB	 0
_RENDER_Quad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_TexturedQuadSheet
_TEXT	SEGMENT
_tmp_vertexes$1 = -368					; size = 128
_tmp_vertexes$2 = -232					; size = 128
_texth$ = -96						; size = 4
_texty$ = -84						; size = 4
_textw$ = -72						; size = 4
_textx$ = -60						; size = 4
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 28
_source_rect$ = 36					; size = 16
_r$ = 52						; size = 4
_g$ = 56						; size = 4
_b$ = 60						; size = 4
_normalized$ = 64					; size = 4
_reverse_rendering$ = 68				; size = 4
_RENDER_TexturedQuadSheet PROC				; COMDAT

; 348  : void RENDER_TexturedQuadSheet(text_quad target, quad source_rect, float r, float g, float b, SDL_bool normalized, SDL_bool reverse_rendering) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 02 00
	00		 sub	 esp, 564		; 00000234H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd cc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-564]
  00012	b9 8d 00 00 00	 mov	 ecx, 141		; 0000008dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 349  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 350  : 	float textx, textw;
; 351  : 	float texty, texth;
; 352  : 	if (normalized)

  0005a	83 7d 40 00	 cmp	 DWORD PTR _normalized$[ebp], 0
  0005e	74 2a		 je	 SHORT $LN2@RENDER_Tex

; 353  : 		textx = source_rect.x, texty = source_rect.y, textw = source_rect.w, texth = source_rect.h;

  00060	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  00065	f3 0f 11 45 c4	 movss	 DWORD PTR _textx$[ebp], xmm0
  0006a	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  0006f	f3 0f 11 45 ac	 movss	 DWORD PTR _texty$[ebp], xmm0
  00074	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _source_rect$[ebp+8]
  00079	f3 0f 11 45 b8	 movss	 DWORD PTR _textw$[ebp], xmm0
  0007e	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _source_rect$[ebp+12]
  00083	f3 0f 11 45 a0	 movss	 DWORD PTR _texth$[ebp], xmm0
  00088	eb 4c		 jmp	 SHORT $LN3@RENDER_Tex
$LN2@RENDER_Tex:

; 354  : 	else
; 355  : 		textx = source_rect.x / target.texw, texty = source_rect.y / target.texh, textw = source_rect.w / target.texw, texth = source_rect.h / target.texh;

  0008a	f3 0f 2a 45 1c	 cvtsi2ss xmm0, DWORD PTR _target$[ebp+20]
  0008f	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR _source_rect$[ebp]
  00094	f3 0f 5e c8	 divss	 xmm1, xmm0
  00098	f3 0f 11 4d c4	 movss	 DWORD PTR _textx$[ebp], xmm1
  0009d	f3 0f 2a 45 20	 cvtsi2ss xmm0, DWORD PTR _target$[ebp+24]
  000a2	f3 0f 10 4d 28	 movss	 xmm1, DWORD PTR _source_rect$[ebp+4]
  000a7	f3 0f 5e c8	 divss	 xmm1, xmm0
  000ab	f3 0f 11 4d ac	 movss	 DWORD PTR _texty$[ebp], xmm1
  000b0	f3 0f 2a 45 1c	 cvtsi2ss xmm0, DWORD PTR _target$[ebp+20]
  000b5	f3 0f 10 4d 2c	 movss	 xmm1, DWORD PTR _source_rect$[ebp+8]
  000ba	f3 0f 5e c8	 divss	 xmm1, xmm0
  000be	f3 0f 11 4d b8	 movss	 DWORD PTR _textw$[ebp], xmm1
  000c3	f3 0f 2a 45 20	 cvtsi2ss xmm0, DWORD PTR _target$[ebp+24]
  000c8	f3 0f 10 4d 30	 movss	 xmm1, DWORD PTR _source_rect$[ebp+12]
  000cd	f3 0f 5e c8	 divss	 xmm1, xmm0
  000d1	f3 0f 11 4d a0	 movss	 DWORD PTR _texth$[ebp], xmm1
$LN3@RENDER_Tex:

; 356  : 
; 357  : 	if (reverse_rendering) {

  000d6	83 7d 44 00	 cmp	 DWORD PTR _reverse_rendering$[ebp], 0
  000da	0f 84 17 02 00
	00		 je	 $LN4@RENDER_Tex

; 358  : 		float tmp_vertexes[32] = { x + w,y,0,r,g,b,textx,texty, x,y,0,r,g,b,textx + textw,texty, x,y - h,0,r,g,b,textx + textw,textx + texth, x + w,y - h,0,r,g,b,textx,textx + texth};

  000e0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000e5	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  000ea	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp], xmm0
  000f2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000f7	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+4], xmm0
  000ff	0f 57 c0	 xorps	 xmm0, xmm0
  00102	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+8], xmm0
  0010a	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  0010f	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+12], xmm0
  00117	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0011c	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+16], xmm0
  00124	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00129	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+20], xmm0
  00131	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00136	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+24], xmm0
  0013e	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  00143	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+28], xmm0
  0014b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00150	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+32], xmm0
  00158	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0015d	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+36], xmm0
  00165	0f 57 c0	 xorps	 xmm0, xmm0
  00168	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+40], xmm0
  00170	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00175	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+44], xmm0
  0017d	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00182	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+48], xmm0
  0018a	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0018f	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+52], xmm0
  00197	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0019c	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  001a1	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+56], xmm0
  001a9	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  001ae	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+60], xmm0
  001b6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  001bb	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+64], xmm0
  001c3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  001c8	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  001cd	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+68], xmm0
  001d5	0f 57 c0	 xorps	 xmm0, xmm0
  001d8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+72], xmm0
  001e0	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  001e5	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+76], xmm0
  001ed	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  001f2	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+80], xmm0
  001fa	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  001ff	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+84], xmm0
  00207	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0020c	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  00211	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+88], xmm0
  00219	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0021e	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  00223	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+92], xmm0
  0022b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00230	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  00235	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+96], xmm0
  0023d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00242	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00247	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+100], xmm0
  0024f	0f 57 c0	 xorps	 xmm0, xmm0
  00252	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$2[ebp+104], xmm0
  00257	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  0025c	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$2[ebp+108], xmm0
  00261	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00266	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$2[ebp+112], xmm0
  0026b	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00270	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+116], xmm0
  00275	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0027a	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$2[ebp+120], xmm0
  0027f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00284	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  00289	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$2[ebp+124], xmm0

; 359  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  0028e	8b f4		 mov	 esi, esp
  00290	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$2[ebp]
  00296	50		 push	 eax
  00297	68 80 00 00 00	 push	 128			; 00000080H
  0029c	6a 00		 push	 0
  0029e	68 92 88 00 00	 push	 34962			; 00008892H
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  002a9	3b f4		 cmp	 esi, esp
  002ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 360  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  002b0	8b f4		 mov	 esi, esp
  002b2	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  002b5	50		 push	 eax
  002b6	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  002c1	3b f4		 cmp	 esi, esp
  002c3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 361  : 		glUseProgram(shader_texturedobj);

  002c8	8b f4		 mov	 esi, esp
  002ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  002cf	50		 push	 eax
  002d0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  002d6	3b f4		 cmp	 esi, esp
  002d8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 362  : 		glDrawArrays(GL_QUADS, 0, 4);

  002dd	8b f4		 mov	 esi, esp
  002df	6a 04		 push	 4
  002e1	6a 00		 push	 0
  002e3	6a 07		 push	 7
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 363  : 	}

  002f2	e9 24 02 00 00	 jmp	 $LN5@RENDER_Tex
$LN4@RENDER_Tex:

; 364  : 	else {
; 365  : 		//this is so unreadable, definitly clean this up later
; 366  : 		float tmp_vertexes[32] = { x,y,0,r,g,b,textx,texty, x + w,y,0,r,g,b,textx + textw,source_rect.y, x + w,y - h,0,r,g,b,textx + textw,texty + texth, x,y - h,0,r,g,b,textx,texty + texth };

  002f7	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  002fc	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp], xmm0
  00304	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00309	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+4], xmm0
  00311	0f 57 c0	 xorps	 xmm0, xmm0
  00314	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+8], xmm0
  0031c	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00321	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+12], xmm0
  00329	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0032e	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+16], xmm0
  00336	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0033b	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+20], xmm0
  00343	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00348	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+24], xmm0
  00350	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  00355	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+28], xmm0
  0035d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00362	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  00367	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+32], xmm0
  0036f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00374	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+36], xmm0
  0037c	0f 57 c0	 xorps	 xmm0, xmm0
  0037f	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+40], xmm0
  00387	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  0038c	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+44], xmm0
  00394	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00399	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+48], xmm0
  003a1	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  003a6	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+52], xmm0
  003ae	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  003b3	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  003b8	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+56], xmm0
  003c0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  003c5	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+60], xmm0
  003cd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  003d2	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  003d7	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+64], xmm0
  003df	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  003e4	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  003e9	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+68], xmm0
  003f1	0f 57 c0	 xorps	 xmm0, xmm0
  003f4	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+72], xmm0
  003fc	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00401	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+76], xmm0
  00409	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0040e	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+80], xmm0
  00416	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0041b	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+84], xmm0
  00423	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00428	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  0042d	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+88], xmm0
  00435	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  0043a	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  0043f	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+92], xmm0
  00447	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0044c	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+96], xmm0
  00454	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00459	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0045e	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+100], xmm0
  00466	0f 57 c0	 xorps	 xmm0, xmm0
  00469	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+104], xmm0
  00471	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00476	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+108], xmm0
  0047e	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00483	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+112], xmm0
  0048b	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00490	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+116], xmm0
  00498	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0049d	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+120], xmm0
  004a5	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  004aa	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  004af	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+124], xmm0

; 367  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  004b7	8b f4		 mov	 esi, esp
  004b9	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$1[ebp]
  004bf	50		 push	 eax
  004c0	68 80 00 00 00	 push	 128			; 00000080H
  004c5	6a 00		 push	 0
  004c7	68 92 88 00 00	 push	 34962			; 00008892H
  004cc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  004d2	3b f4		 cmp	 esi, esp
  004d4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 368  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  004d9	8b f4		 mov	 esi, esp
  004db	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  004de	50		 push	 eax
  004df	68 e1 0d 00 00	 push	 3553			; 00000de1H
  004e4	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  004ea	3b f4		 cmp	 esi, esp
  004ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 369  : 		glUseProgram(shader_texturedobj);

  004f1	8b f4		 mov	 esi, esp
  004f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  004f8	50		 push	 eax
  004f9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  004ff	3b f4		 cmp	 esi, esp
  00501	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 370  : 		glDrawArrays(GL_QUADS, 0, 4);

  00506	8b f4		 mov	 esi, esp
  00508	6a 04		 push	 4
  0050a	6a 00		 push	 0
  0050c	6a 07		 push	 7
  0050e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00514	3b f4		 cmp	 esi, esp
  00516	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@RENDER_Tex:

; 371  : 	}
; 372  : }

  0051b	52		 push	 edx
  0051c	8b cd		 mov	 ecx, ebp
  0051e	50		 push	 eax
  0051f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@RENDER_Tex
  00525	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0052a	58		 pop	 eax
  0052b	5a		 pop	 edx
  0052c	5f		 pop	 edi
  0052d	5e		 pop	 esi
  0052e	5b		 pop	 ebx
  0052f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00532	33 cd		 xor	 ecx, ebp
  00534	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00539	81 c4 34 02 00
	00		 add	 esp, 564		; 00000234H
  0053f	3b ec		 cmp	 ebp, esp
  00541	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00546	8b e5		 mov	 esp, ebp
  00548	5d		 pop	 ebp
  00549	c3		 ret	 0
  0054a	66 90		 npad	 2
$LN10@RENDER_Tex:
  0054c	02 00 00 00	 DD	 2
  00550	00 00 00 00	 DD	 $LN9@RENDER_Tex
$LN9@RENDER_Tex:
  00554	18 ff ff ff	 DD	 -232			; ffffff18H
  00558	80 00 00 00	 DD	 128			; 00000080H
  0055c	00 00 00 00	 DD	 $LN7@RENDER_Tex
  00560	90 fe ff ff	 DD	 -368			; fffffe90H
  00564	80 00 00 00	 DD	 128			; 00000080H
  00568	00 00 00 00	 DD	 $LN8@RENDER_Tex
$LN8@RENDER_Tex:
  0056c	74		 DB	 116			; 00000074H
  0056d	6d		 DB	 109			; 0000006dH
  0056e	70		 DB	 112			; 00000070H
  0056f	5f		 DB	 95			; 0000005fH
  00570	76		 DB	 118			; 00000076H
  00571	65		 DB	 101			; 00000065H
  00572	72		 DB	 114			; 00000072H
  00573	74		 DB	 116			; 00000074H
  00574	65		 DB	 101			; 00000065H
  00575	78		 DB	 120			; 00000078H
  00576	65		 DB	 101			; 00000065H
  00577	73		 DB	 115			; 00000073H
  00578	00		 DB	 0
$LN7@RENDER_Tex:
  00579	74		 DB	 116			; 00000074H
  0057a	6d		 DB	 109			; 0000006dH
  0057b	70		 DB	 112			; 00000070H
  0057c	5f		 DB	 95			; 0000005fH
  0057d	76		 DB	 118			; 00000076H
  0057e	65		 DB	 101			; 00000065H
  0057f	72		 DB	 114			; 00000072H
  00580	74		 DB	 116			; 00000074H
  00581	65		 DB	 101			; 00000065H
  00582	78		 DB	 120			; 00000078H
  00583	65		 DB	 101			; 00000065H
  00584	73		 DB	 115			; 00000073H
  00585	00		 DB	 0
_RENDER_TexturedQuadSheet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_TexturedQuad
_TEXT	SEGMENT
_tmp_vertexes$1 = -320					; size = 128
_tmp_vertexes$2 = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 28
_r$ = 36						; size = 4
_g$ = 40						; size = 4
_b$ = 44						; size = 4
_reverse_rendering$ = 48				; size = 4
_RENDER_TexturedQuad PROC				; COMDAT

; 331  : void RENDER_TexturedQuad(text_quad target, float r, float g, float b, SDL_bool reverse_rendering) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-516]
  00012	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 332  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 333  : 	if (reverse_rendering) {

  0005a	83 7d 30 00	 cmp	 DWORD PTR _reverse_rendering$[ebp], 0
  0005e	0f 84 e3 01 00
	00		 je	 $LN2@RENDER_Tex

; 334  : 		float tmp_vertexes[32] = { x+w,y,0,r,g,b,0,0, x,y,0,r,g,b,1,0, x,y - h,0,r,g,b,1,1, x + w,y - h,0,r,g,b,0,1 };

  00064	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0006e	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp], xmm0
  00076	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0007b	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+4], xmm0
  00083	0f 57 c0	 xorps	 xmm0, xmm0
  00086	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+8], xmm0
  0008e	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00093	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+12], xmm0
  0009b	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  000a0	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+16], xmm0
  000a8	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  000ad	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+20], xmm0
  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+24], xmm0
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+28], xmm0
  000cb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000d0	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+32], xmm0
  000d8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000dd	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+36], xmm0
  000e5	0f 57 c0	 xorps	 xmm0, xmm0
  000e8	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+40], xmm0
  000f0	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  000f5	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+44], xmm0
  000fd	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  00102	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+48], xmm0
  0010a	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0010f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+52], xmm0
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011f	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$2[ebp+56], xmm0
  00124	0f 57 c0	 xorps	 xmm0, xmm0
  00127	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$2[ebp+60], xmm0
  0012c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00131	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$2[ebp+64], xmm0
  00136	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0013b	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00140	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+68], xmm0
  00145	0f 57 c0	 xorps	 xmm0, xmm0
  00148	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$2[ebp+72], xmm0
  0014d	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00152	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$2[ebp+76], xmm0
  00157	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  0015c	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$2[ebp+80], xmm0
  00161	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00166	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+84], xmm0
  0016b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00173	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+88], xmm0
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00180	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+92], xmm0
  00185	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0018a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0018f	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+96], xmm0
  00194	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00199	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0019e	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$2[ebp+100], xmm0
  001a3	0f 57 c0	 xorps	 xmm0, xmm0
  001a6	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+104], xmm0
  001ab	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  001b0	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+108], xmm0
  001b5	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  001ba	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+112], xmm0
  001bf	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  001c4	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$2[ebp+116], xmm0
  001c9	0f 57 c0	 xorps	 xmm0, xmm0
  001cc	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+120], xmm0
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001d9	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+124], xmm0

; 335  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001de	8b f4		 mov	 esi, esp
  001e0	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$2[ebp]
  001e6	50		 push	 eax
  001e7	68 80 00 00 00	 push	 128			; 00000080H
  001ec	6a 00		 push	 0
  001ee	68 92 88 00 00	 push	 34962			; 00008892H
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  001f9	3b f4		 cmp	 esi, esp
  001fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 336  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00200	8b f4		 mov	 esi, esp
  00202	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  00205	50		 push	 eax
  00206	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00211	3b f4		 cmp	 esi, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 337  : 		glUseProgram(shader_texturedobj);

  00218	8b f4		 mov	 esi, esp
  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0021f	50		 push	 eax
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 338  : 		glDrawArrays(GL_QUADS, 0, 4);

  0022d	8b f4		 mov	 esi, esp
  0022f	6a 04		 push	 4
  00231	6a 00		 push	 0
  00233	6a 07		 push	 7
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  0023b	3b f4		 cmp	 esi, esp
  0023d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 339  : 	}

  00242	e9 14 02 00 00	 jmp	 $LN3@RENDER_Tex
$LN2@RENDER_Tex:

; 340  : 	else {
; 341  : 		float tmp_vertexes[32] = { x,y,0,r,g,b,0,0, x + w,y,0,r,g,b,1,0, x + w,y - h,0,r,g,b,1,1, x,y - h,0,r,g,b,0,1 };

  00247	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0024c	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp], xmm0
  00254	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00259	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+4], xmm0
  00261	0f 57 c0	 xorps	 xmm0, xmm0
  00264	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+8], xmm0
  0026c	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00271	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+12], xmm0
  00279	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  0027e	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+16], xmm0
  00286	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0028b	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+20], xmm0
  00293	0f 57 c0	 xorps	 xmm0, xmm0
  00296	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+24], xmm0
  0029e	0f 57 c0	 xorps	 xmm0, xmm0
  002a1	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+28], xmm0
  002a9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  002ae	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  002b3	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+32], xmm0
  002bb	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  002c0	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+36], xmm0
  002c8	0f 57 c0	 xorps	 xmm0, xmm0
  002cb	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+40], xmm0
  002d3	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  002d8	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+44], xmm0
  002e0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  002e5	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+48], xmm0
  002ed	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  002f2	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+52], xmm0
  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00302	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+56], xmm0
  0030a	0f 57 c0	 xorps	 xmm0, xmm0
  0030d	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+60], xmm0
  00315	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0031a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0031f	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+64], xmm0
  00327	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0032c	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00331	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+68], xmm0
  00339	0f 57 c0	 xorps	 xmm0, xmm0
  0033c	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+72], xmm0
  00344	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00349	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+76], xmm0
  00351	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  00356	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+80], xmm0
  0035e	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00363	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+84], xmm0
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00373	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+88], xmm0
  0037b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00383	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+92], xmm0
  0038b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00390	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+96], xmm0
  00398	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0039d	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  003a2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+100], xmm0
  003aa	0f 57 c0	 xorps	 xmm0, xmm0
  003ad	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+104], xmm0
  003b5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  003ba	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+108], xmm0
  003c2	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  003c7	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+112], xmm0
  003cf	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  003d4	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+116], xmm0
  003dc	0f 57 c0	 xorps	 xmm0, xmm0
  003df	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+120], xmm0
  003e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ef	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+124], xmm0

; 342  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  003f7	8b f4		 mov	 esi, esp
  003f9	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$1[ebp]
  003ff	50		 push	 eax
  00400	68 80 00 00 00	 push	 128			; 00000080H
  00405	6a 00		 push	 0
  00407	68 92 88 00 00	 push	 34962			; 00008892H
  0040c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00412	3b f4		 cmp	 esi, esp
  00414	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00419	8b f4		 mov	 esi, esp
  0041b	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  0041e	50		 push	 eax
  0041f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00424	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0042a	3b f4		 cmp	 esi, esp
  0042c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 344  : 		glUseProgram(shader_texturedobj);

  00431	8b f4		 mov	 esi, esp
  00433	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00438	50		 push	 eax
  00439	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  0043f	3b f4		 cmp	 esi, esp
  00441	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 345  : 		glDrawArrays(GL_QUADS, 0, 4);

  00446	8b f4		 mov	 esi, esp
  00448	6a 04		 push	 4
  0044a	6a 00		 push	 0
  0044c	6a 07		 push	 7
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00454	3b f4		 cmp	 esi, esp
  00456	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@RENDER_Tex:

; 346  : 	}
; 347  : }

  0045b	52		 push	 edx
  0045c	8b cd		 mov	 ecx, ebp
  0045e	50		 push	 eax
  0045f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RENDER_Tex
  00465	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0046a	58		 pop	 eax
  0046b	5a		 pop	 edx
  0046c	5f		 pop	 edi
  0046d	5e		 pop	 esi
  0046e	5b		 pop	 ebx
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00472	33 cd		 xor	 ecx, ebp
  00474	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00479	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  0047f	3b ec		 cmp	 ebp, esp
  00481	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00486	8b e5		 mov	 esp, ebp
  00488	5d		 pop	 ebp
  00489	c3		 ret	 0
  0048a	66 90		 npad	 2
$LN8@RENDER_Tex:
  0048c	02 00 00 00	 DD	 2
  00490	00 00 00 00	 DD	 $LN7@RENDER_Tex
$LN7@RENDER_Tex:
  00494	48 ff ff ff	 DD	 -184			; ffffff48H
  00498	80 00 00 00	 DD	 128			; 00000080H
  0049c	00 00 00 00	 DD	 $LN5@RENDER_Tex
  004a0	c0 fe ff ff	 DD	 -320			; fffffec0H
  004a4	80 00 00 00	 DD	 128			; 00000080H
  004a8	00 00 00 00	 DD	 $LN6@RENDER_Tex
$LN6@RENDER_Tex:
  004ac	74		 DB	 116			; 00000074H
  004ad	6d		 DB	 109			; 0000006dH
  004ae	70		 DB	 112			; 00000070H
  004af	5f		 DB	 95			; 0000005fH
  004b0	76		 DB	 118			; 00000076H
  004b1	65		 DB	 101			; 00000065H
  004b2	72		 DB	 114			; 00000072H
  004b3	74		 DB	 116			; 00000074H
  004b4	65		 DB	 101			; 00000065H
  004b5	78		 DB	 120			; 00000078H
  004b6	65		 DB	 101			; 00000065H
  004b7	73		 DB	 115			; 00000073H
  004b8	00		 DB	 0
$LN5@RENDER_Tex:
  004b9	74		 DB	 116			; 00000074H
  004ba	6d		 DB	 109			; 0000006dH
  004bb	70		 DB	 112			; 00000070H
  004bc	5f		 DB	 95			; 0000005fH
  004bd	76		 DB	 118			; 00000076H
  004be	65		 DB	 101			; 00000065H
  004bf	72		 DB	 114			; 00000072H
  004c0	74		 DB	 116			; 00000074H
  004c1	65		 DB	 101			; 00000065H
  004c2	78		 DB	 120			; 00000078H
  004c3	65		 DB	 101			; 00000065H
  004c4	73		 DB	 115			; 00000073H
  004c5	00		 DB	 0
_RENDER_TexturedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_At
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp_node$2 = -8					; size = 4
_list$ = 8						; size = 4
_location$ = 12						; size = 4
_LIST_At PROC						; COMDAT

; 61   : void* LIST_At(const linkedList* const list, int location) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   : 	if (list->head) {

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	74 3e		 je	 SHORT $LN5@LIST_At

; 63   : 		listNode* tmp_node = list->head;

  00030	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx

; 64   : 		for (int i = 0; i < location; ++i) {

  00038	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0003f	eb 09		 jmp	 SHORT $LN4@LIST_At
$LN2@LIST_At:
  00041	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_At:
  0004a	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0004d	3b 45 0c	 cmp	 eax, DWORD PTR _location$[ebp]
  00050	7d 12		 jge	 SHORT $LN3@LIST_At

; 65   : 			if (tmp_node->next)

  00052	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00055	83 38 00	 cmp	 DWORD PTR [eax], 0
  00058	74 08		 je	 SHORT $LN7@LIST_At

; 66   : 				tmp_node = tmp_node->next;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx
$LN7@LIST_At:

; 67   : 			//else
; 68   : 			//	printf("element %d could not be found", location); return 2.0;
; 69   : 		}

  00062	eb dd		 jmp	 SHORT $LN2@LIST_At
$LN3@LIST_At:

; 70   : 		return tmp_node->data;

  00064	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00067	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006a	eb 04		 jmp	 SHORT $LN1@LIST_At

; 71   : 	}

  0006c	eb 02		 jmp	 SHORT $LN1@LIST_At
$LN5@LIST_At:

; 72   : 	else
; 73   : 		return NULL;

  0006e	33 c0		 xor	 eax, eax
$LN1@LIST_At:

; 74   : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_LIST_At ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_RemoveAt
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp_node$2 = -8					; size = 4
_list$ = 8						; size = 4
_location$ = 12						; size = 4
_remove_data$ = 16					; size = 1
_LIST_RemoveAt PROC					; COMDAT

; 38   : int LIST_RemoveAt(linkedList* list, int location, bool remove_data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   : 	if (list->head) {

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	0f 84 d8 00 00
	00		 je	 $LN5@LIST_Remov

; 40   : 		listNode* tmp_node = list->head;

  00034	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx

; 41   : 		for (int i = 0; i < location; ++i) {

  0003c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN4@LIST_Remov
$LN2@LIST_Remov:
  00045	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_Remov:
  0004e	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00051	3b 45 0c	 cmp	 eax, DWORD PTR _location$[ebp]
  00054	7d 12		 jge	 SHORT $LN3@LIST_Remov

; 42   : 			if (tmp_node->next)

  00056	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00059	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005c	74 08		 je	 SHORT $LN6@LIST_Remov

; 43   : 				tmp_node = tmp_node->next;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx
$LN6@LIST_Remov:

; 44   : 			//else
; 45   : 			//	printf("element %d could not be found", location); return 1;
; 46   : 		}

  00066	eb dd		 jmp	 SHORT $LN2@LIST_Remov
$LN3@LIST_Remov:

; 47   : 		if (tmp_node->next && tmp_node->prev)

  00068	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0006b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0006e	74 26		 je	 SHORT $LN7@LIST_Remov
  00070	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00073	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00077	74 1d		 je	 SHORT $LN7@LIST_Remov

; 48   : 			tmp_node->prev->next = tmp_node->next, tmp_node->next->prev = tmp_node->prev;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0007c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$2[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	89 01		 mov	 DWORD PTR [ecx], eax
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$2[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0008e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00091	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00094	eb 3f		 jmp	 SHORT $LN8@LIST_Remov
$LN7@LIST_Remov:

; 49   : 		else if (list->head == tmp_node)

  00096	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	3b 4d f8	 cmp	 ecx, DWORD PTR _tmp_node$2[ebp]
  0009e	75 18		 jne	 SHORT $LN9@LIST_Remov

; 50   : 			list->head = tmp_node->next, tmp_node->next->prev = NULL;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$2[ebp]
  000a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a8	89 10		 mov	 DWORD PTR [eax], edx
  000aa	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  000b6	eb 1d		 jmp	 SHORT $LN8@LIST_Remov
$LN9@LIST_Remov:

; 51   : 		else if (!tmp_node->next)

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000bb	83 38 00	 cmp	 DWORD PTR [eax], 0
  000be	75 0e		 jne	 SHORT $LN11@LIST_Remov

; 52   : 			tmp_node->prev->next = NULL;

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c6	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  000cc	eb 07		 jmp	 SHORT $LN8@LIST_Remov
$LN11@LIST_Remov:

; 53   : 		else
; 54   : 			return 1;

  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	eb 39		 jmp	 SHORT $LN1@LIST_Remov
$LN8@LIST_Remov:

; 55   : 		if (remove_data)

  000d5	0f b6 45 10	 movzx	 eax, BYTE PTR _remove_data$[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 19		 je	 SHORT $LN13@LIST_Remov

; 56   : 			free(tmp_node->data);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000e2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e5	51		 push	 ecx
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000ec	83 c4 04	 add	 esp, 4
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@LIST_Remov:

; 57   : 		free(tmp_node);

  000f6	8b f4		 mov	 esi, esp
  000f8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000fb	50		 push	 eax
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00102	83 c4 04	 add	 esp, 4
  00105	3b f4		 cmp	 esi, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@LIST_Remov:

; 58   : 	}
; 59   : 	return 0;

  0010c	33 c0		 xor	 eax, eax
$LN1@LIST_Remov:

; 60   : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00117	3b ec		 cmp	 ebp, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
_LIST_RemoveAt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_AddElement
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_tmp_node_travlist$2 = -20				; size = 4
_tmp_node$ = -8						; size = 4
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_LIST_AddElement PROC					; COMDAT

; 16   : void LIST_AddElement(linkedList* list, void* data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 17   : 	listNode* tmp_node = calloc(1, sizeof(listNode));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0c		 push	 12			; 0000000cH
  0002c	6a 01		 push	 1
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00034	83 c4 08	 add	 esp, 8
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	89 45 f8	 mov	 DWORD PTR _tmp_node$[ebp], eax

; 18   : 	tmp_node->data = data;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  00047	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 19   : 	if (!list->head)

  0004a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0004d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00050	75 1d		 jne	 SHORT $LN5@LIST_AddEl

; 20   : 		list->head = tmp_node, tmp_node->next = NULL, tmp_node->prev = NULL;

  00052	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  00058	89 08		 mov	 DWORD PTR [eax], ecx
  0005a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  0005d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00063	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00066	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0006d	eb 7c		 jmp	 SHORT $LN6@LIST_AddEl
$LN5@LIST_AddEl:

; 21   : 	else { //travese the list until the end is found
; 22   : 		if (!list->head->next)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00077	75 21		 jne	 SHORT $LN7@LIST_AddEl

; 23   : 			tmp_node->prev = list->head, tmp_node->prev->next = tmp_node, tmp_node->next = NULL;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00084	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00087	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  0008d	89 11		 mov	 DWORD PTR [ecx], edx
  0008f	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00092	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00098	eb 51		 jmp	 SHORT $LN6@LIST_AddEl
$LN7@LIST_AddEl:

; 24   : 		else {
; 25   : 			listNode* tmp_node_travlist = list->head;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d ec	 mov	 DWORD PTR _tmp_node_travlist$2[ebp], ecx

; 26   : 			for (int i = 0; i < list->count; ++i) {

  000a2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000a9	eb 09		 jmp	 SHORT $LN4@LIST_AddEl
$LN2@LIST_AddEl:
  000ab	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 e0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_AddEl:
  000b4	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000b7	8b 4d e0	 mov	 ecx, DWORD PTR _i$1[ebp]
  000ba	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000bd	7d 12		 jge	 SHORT $LN3@LIST_AddEl

; 27   : 				if (tmp_node_travlist->next)

  000bf	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000c2	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c5	74 08		 je	 SHORT $LN9@LIST_AddEl

; 28   : 					tmp_node_travlist = tmp_node_travlist->next;

  000c7	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	89 4d ec	 mov	 DWORD PTR _tmp_node_travlist$2[ebp], ecx
$LN9@LIST_AddEl:

; 29   : 
; 30   : 					
; 31   : 			}

  000cf	eb da		 jmp	 SHORT $LN2@LIST_AddEl
$LN3@LIST_AddEl:

; 32   : 			tmp_node_travlist->next = tmp_node, tmp_node->prev = tmp_node_travlist, tmp_node->next = NULL;

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  000d7	89 08		 mov	 DWORD PTR [eax], ecx
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  000dc	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000df	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  000e5	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN6@LIST_AddEl:

; 33   : 		}
; 34   : 	
; 35   : 	}
; 36   : 	list->count += 1;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	83 c1 01	 add	 ecx, 1
  000f4	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  000f7	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 37   : }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00103	3b ec		 cmp	 ebp, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
_LIST_AddElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\cam.h
;	COMDAT _glm_ortho
_TEXT	SEGMENT
_fn$ = -32						; size = 4
_tb$ = -20						; size = 4
_rl$ = -8						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_nearVal$ = 24						; size = 4
_farVal$ = 28						; size = 4
_dest$ = 32						; size = 4
_glm_ortho PROC						; COMDAT

; 105  :           mat4  dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __40246743_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 106  :   float rl, tb, fn;
; 107  : 
; 108  :   glm_mat4_zero(dest);

  00028	8b 45 20	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_zero
  00031	83 c4 04	 add	 esp, 4

; 109  : 
; 110  :   rl = 1.0f / (right  - left);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  00039	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _left$[ebp]
  0003e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00046	f3 0f 5e c8	 divss	 xmm1, xmm0
  0004a	f3 0f 11 4d f8	 movss	 DWORD PTR _rl$[ebp], xmm1

; 111  :   tb = 1.0f / (top    - bottom);

  0004f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00054	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bottom$[ebp]
  00059	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00061	f3 0f 5e c8	 divss	 xmm1, xmm0
  00065	f3 0f 11 4d ec	 movss	 DWORD PTR _tb$[ebp], xmm1

; 112  :   fn =-1.0f / (farVal - nearVal);

  0006a	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  0006f	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _nearVal$[ebp]
  00074	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0007c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00080	f3 0f 11 4d e0	 movss	 DWORD PTR _fn$[ebp], xmm1

; 113  : 
; 114  :   dest[0][0] = 2.0f * rl;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00092	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	6b c2 00	 imul	 eax, edx, 0
  000a5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 115  :   dest[1][1] = 2.0f * tb;

  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000b2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  000b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000bc	c1 e0 00	 shl	 eax, 0
  000bf	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000c2	b9 04 00 00 00	 mov	 ecx, 4
  000c7	c1 e1 00	 shl	 ecx, 0
  000ca	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 116  :   dest[2][2] = 2.0f * fn;

  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000d7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  000dc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000e1	d1 e0		 shl	 eax, 1
  000e3	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000e6	b9 04 00 00 00	 mov	 ecx, 4
  000eb	d1 e1		 shl	 ecx, 1
  000ed	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 117  :   dest[3][0] =-(right  + left)    * rl;

  000f2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  000f7	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _left$[ebp]
  000fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00103	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00108	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0010d	6b c8 03	 imul	 ecx, eax, 3
  00110	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00113	ba 04 00 00 00	 mov	 edx, 4
  00118	6b c2 00	 imul	 eax, edx, 0
  0011b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 118  :   dest[3][1] =-(top    + bottom)  * tb;

  00120	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00125	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _bottom$[ebp]
  0012a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00131	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  00136	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013b	6b c8 03	 imul	 ecx, eax, 3
  0013e	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00141	ba 04 00 00 00	 mov	 edx, 4
  00146	c1 e2 00	 shl	 edx, 0
  00149	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 119  :   dest[3][2] = (farVal + nearVal) * fn;

  0014e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00153	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _nearVal$[ebp]
  00158	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  0015d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00162	6b c8 03	 imul	 ecx, eax, 3
  00165	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00168	ba 04 00 00 00	 mov	 edx, 4
  0016d	d1 e2		 shl	 edx, 1
  0016f	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 120  :   dest[3][3] = 1.0f;

  00174	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00179	6b c8 03	 imul	 ecx, eax, 3
  0017c	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0017f	ba 04 00 00 00	 mov	 edx, 4
  00184	6b c2 03	 imul	 eax, edx, 3
  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0018f	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 121  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_glm_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_zero
_TEXT	SEGMENT
_t$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat4_zero PROC					; COMDAT

; 189  : glm_mat4_zero(mat4 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 190  :   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_ZERO_INIT;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 45 b0	 movss	 DWORD PTR _t$[ebp], xmm0
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 b4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 45 b8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 bc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+32], xmm0
  0008c	0f 57 c0	 xorps	 xmm0, xmm0
  0008f	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+36], xmm0
  00094	0f 57 c0	 xorps	 xmm0, xmm0
  00097	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+40], xmm0
  0009c	0f 57 c0	 xorps	 xmm0, xmm0
  0009f	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+44], xmm0
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+48], xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+52], xmm0
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+56], xmm0
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+60], xmm0

; 191  :   glm_mat4_copy(t, mat);

  000c4	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  000c7	50		 push	 eax
  000c8	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _glm_mat4_copy
  000d1	83 c4 08	 add	 esp, 8

; 192  : }

  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_z
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	8b e3		 mov	 esp, ebx
  000f6	5b		 pop	 ebx
  000f7	c3		 ret	 0
$LN5@glm_mat4_z:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN4@glm_mat4_z
$LN4@glm_mat4_z:
  00100	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00104	40 00 00 00	 DD	 64			; 00000040H
  00108	00 00 00 00	 DD	 $LN3@glm_mat4_z
$LN3@glm_mat4_z:
  0010c	74		 DB	 116			; 00000074H
  0010d	00		 DB	 0
_glm_mat4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_copy PROC					; COMDAT

; 123  : glm_mat4_copy(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  : #ifdef __AVX__
; 125  :   glmm_store256(dest[0], glmm_load256(mat[0]));
; 126  :   glmm_store256(dest[2], glmm_load256(mat[2]));
; 127  : #elif defined( __SSE__ ) || defined( __SSE2__ )
; 128  :   glmm_store(dest[0], glmm_load(mat[0]));

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00036	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00041	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 129  :   glmm_store(dest[1], glmm_load(mat[1]));

  00044	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00049	c1 e0 00	 shl	 eax, 0
  0004c	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0004f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00052	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00057	c1 e1 00	 shl	 ecx, 0
  0005a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 130  :   glmm_store(dest[2], glmm_load(mat[2]));

  00060	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00065	d1 e0		 shl	 eax, 1
  00067	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00072	d1 e1		 shl	 ecx, 1
  00074	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00077	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 131  :   glmm_store(dest[3], glmm_load(mat[3]));

  0007a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00085	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00088	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0008d	6b c2 03	 imul	 eax, edx, 3
  00090	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00093	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 132  : #elif defined(CGLM_NEON_FP)
; 133  :   vst1q_f32(dest[0], vld1q_f32(mat[0]));
; 134  :   vst1q_f32(dest[1], vld1q_f32(mat[1]));
; 135  :   vst1q_f32(dest[2], vld1q_f32(mat[2]));
; 136  :   vst1q_f32(dest[3], vld1q_f32(mat[3]));
; 137  : #else
; 138  :   glm_mat4_ucopy(mat, dest);
; 139  : #endif
; 140  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_mat4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _SDL_main
_TEXT	SEGMENT
tv525 = -480						; size = 4
_event_handle$ = -280					; size = 56
_key_input$ = -216					; size = 4
_loc$1 = -204						; size = 4
_shader_fragment$2 = -192				; size = 4
_shader_vertex$3 = -180					; size = 4
_shader_fragment$4 = -168				; size = 4
_shader_vertex$5 = -156					; size = 4
_ortho$ = -144						; size = 64
_format$ = -60						; size = 2
_channels$ = -48					; size = 4
_freq$ = -36						; size = 4
_i$6 = -24						; size = 4
_number_decoders$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_SDL_main PROC						; COMDAT

; 44   : int main(void) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 01 00
	00		 sub	 esp, 488		; 000001e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-488]
  00024	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 45   : 	//Inititlze SDL stuff
; 46   : 	//TODO: rename some globals from "test" and choose better var names, also get controller support and haptic support before you start adding items and stuff
; 47   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);

  00044	6a 03		 push	 3
  00046	6a 11		 push	 17			; 00000011H
  00048	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  0004d	83 c4 08	 add	 esp, 8

; 48   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);

  00050	6a 03		 push	 3
  00052	6a 12		 push	 18			; 00000012H
  00054	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  00059	83 c4 08	 add	 esp, 8

; 49   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_COMPATIBILITY);

  0005c	6a 02		 push	 2
  0005e	6a 15		 push	 21			; 00000015H
  00060	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  00065	83 c4 08	 add	 esp, 8

; 50   : 	if (SDL_Init(SDL_INIT_AUDIO | SDL_INIT_HAPTIC | SDL_INIT_JOYSTICK)) {

  00068	68 10 12 00 00	 push	 4624			; 00001210H
  0006d	e8 00 00 00 00	 call	 _SDL_Init
  00072	83 c4 04	 add	 esp, 4
  00075	85 c0		 test	 eax, eax
  00077	74 13		 je	 SHORT $LN7@SDL_main

; 51   : 		printf("Couldn't inilize audio, %s", SDL_GetError());

  00079	e8 00 00 00 00	 call	 _SDL_GetError
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@
  00084	e8 00 00 00 00	 call	 _printf
  00089	83 c4 08	 add	 esp, 8
$LN7@SDL_main:

; 52   : 	}
; 53   : 	if (TTF_Init() == -1) {

  0008c	e8 00 00 00 00	 call	 _TTF_Init
  00091	83 f8 ff	 cmp	 eax, -1
  00094	75 17		 jne	 SHORT $LN8@SDL_main

; 54   : 		puts("Failed to load SDL_TTF font library");

  00096	8b f4		 mov	 esi, esp
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000a3	83 c4 04	 add	 esp, 4
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@SDL_main:

; 55   : 	}
; 56   : 	if ((Mix_Init(MIX_INIT_MP3) & MIX_INIT_MP3) != MIX_INIT_MP3) {

  000ad	6a 08		 push	 8
  000af	e8 00 00 00 00	 call	 _Mix_Init
  000b4	83 c4 04	 add	 esp, 4
  000b7	83 e0 08	 and	 eax, 8
  000ba	75 13		 jne	 SHORT $LN9@SDL_main

; 57   : 		printf("Failed to initilize mix, %s\n", Mix_GetError());

  000bc	e8 00 00 00 00	 call	 _SDL_GetError
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@
  000c7	e8 00 00 00 00	 call	 _printf
  000cc	83 c4 08	 add	 esp, 8
$LN9@SDL_main:

; 58   : 	}
; 59   : 	//set up fonts, load them and turn them into surfaces here
; 60   : 	font_1 = TTF_OpenFont("font_1.ttf", 50);

  000cf	6a 32		 push	 50			; 00000032H
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FAAGGPJM@font_1?4ttf@
  000d6	e8 00 00 00 00	 call	 _TTF_OpenFont
  000db	83 c4 08	 add	 esp, 8
  000de	a3 00 00 00 00	 mov	 DWORD PTR _font_1, eax

; 61   : 	wave_text = TTF_RenderText_Blended(font_1, "Wave:01", white);

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_07BJPGHBBO@Wave?301@
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _font_1
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fd	a3 00 00 00 00	 mov	 DWORD PTR _wave_text, eax

; 62   : 	wave_text_quad.w = QUAD_TEXTURE_RECT_TEXT_CAL("Wave: 1");

  00102	68 00 00 00 00	 push	 OFFSET ??_C@_07FNANCGO@Wave?3?51@
  00107	e8 00 00 00 00	 call	 _strlen
  0010c	83 c4 04	 add	 esp, 4
  0010f	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv525[ebp], eax
  00115	f2 0f 2a 85 20
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv525[ebp]
  0011d	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR tv525[ebp]
  00123	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00126	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0012f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00137	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0013b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _wave_text_quad+8, xmm0

; 63   : 	//set up audio
; 64   : 	if(Mix_OpenAudio(22050, AUDIO_S16SYS, 2, 2048) < 0) {

  00143	68 00 08 00 00	 push	 2048			; 00000800H
  00148	6a 02		 push	 2
  0014a	68 10 80 00 00	 push	 32784			; 00008010H
  0014f	68 22 56 00 00	 push	 22050			; 00005622H
  00154	e8 00 00 00 00	 call	 _Mix_OpenAudio
  00159	83 c4 10	 add	 esp, 16			; 00000010H
  0015c	85 c0		 test	 eax, eax
  0015e	7d 13		 jge	 SHORT $LN10@SDL_main

; 65   : 		printf("Error opening audio device, %s\n", Mix_GetError());

  00160	e8 00 00 00 00	 call	 _SDL_GetError
  00165	50		 push	 eax
  00166	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@
  0016b	e8 00 00 00 00	 call	 _printf
  00170	83 c4 08	 add	 esp, 8
$LN10@SDL_main:

; 66   : 	}
; 67   : 	printf("amount of channels: %d\n", Mix_AllocateChannels(32));

  00173	6a 20		 push	 32			; 00000020H
  00175	e8 00 00 00 00	 call	 _Mix_AllocateChannels
  0017a	83 c4 04	 add	 esp, 4
  0017d	50		 push	 eax
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@
  00183	e8 00 00 00 00	 call	 _printf
  00188	83 c4 08	 add	 esp, 8

; 68   : 	//???
; 69   : 	int number_decoders = Mix_GetNumChunkDecoders();

  0018b	e8 00 00 00 00	 call	 _Mix_GetNumChunkDecoders
  00190	89 45 f4	 mov	 DWORD PTR _number_decoders$[ebp], eax

; 70   : 	for (int i = 0; i < number_decoders; ++i)

  00193	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  0019a	eb 09		 jmp	 SHORT $LN4@SDL_main
$LN2@SDL_main:
  0019c	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  0019f	83 c0 01	 add	 eax, 1
  001a2	89 45 e8	 mov	 DWORD PTR _i$6[ebp], eax
$LN4@SDL_main:
  001a5	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  001a8	3b 45 f4	 cmp	 eax, DWORD PTR _number_decoders$[ebp]
  001ab	7d 20		 jge	 SHORT $LN3@SDL_main

; 71   : 		printf("Sample chunk decoder %d is for %s\n", i, Mix_GetChunkDecoder(i));

  001ad	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  001b0	50		 push	 eax
  001b1	e8 00 00 00 00	 call	 _Mix_GetChunkDecoder
  001b6	83 c4 04	 add	 esp, 4
  001b9	50		 push	 eax
  001ba	8b 4d e8	 mov	 ecx, DWORD PTR _i$6[ebp]
  001bd	51		 push	 ecx
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@
  001c3	e8 00 00 00 00	 call	 _printf
  001c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cb	eb cf		 jmp	 SHORT $LN2@SDL_main
$LN3@SDL_main:

; 72   : 	//set up any audio loading here
; 73   : 
; 74   : 	//print out the current hardware format
; 75   : 	int freq, channels;
; 76   : 	Uint16 format;
; 77   : 	if (Mix_QuerySpec(&freq, &format, &channels)) {

  001cd	8d 45 d0	 lea	 eax, DWORD PTR _channels$[ebp]
  001d0	50		 push	 eax
  001d1	8d 4d c4	 lea	 ecx, DWORD PTR _format$[ebp]
  001d4	51		 push	 ecx
  001d5	8d 55 dc	 lea	 edx, DWORD PTR _freq$[ebp]
  001d8	52		 push	 edx
  001d9	e8 00 00 00 00	 call	 _Mix_QuerySpec
  001de	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e1	85 c0		 test	 eax, eax
  001e3	74 1c		 je	 SHORT $LN11@SDL_main

; 78   : 		printf("Frequerncy:%d, audio format:%x, number of channels:%d\n", freq, format, channels);

  001e5	8b 45 d0	 mov	 eax, DWORD PTR _channels$[ebp]
  001e8	50		 push	 eax
  001e9	0f b7 4d c4	 movzx	 ecx, WORD PTR _format$[ebp]
  001ed	51		 push	 ecx
  001ee	8b 55 dc	 mov	 edx, DWORD PTR _freq$[ebp]
  001f1	52		 push	 edx
  001f2	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@
  001f7	e8 00 00 00 00	 call	 _printf
  001fc	83 c4 10	 add	 esp, 16			; 00000010H

; 79   : 	}

  001ff	eb 13		 jmp	 SHORT $LN12@SDL_main
$LN11@SDL_main:

; 80   : 	else
; 81   : 	{
; 82   : 		printf("Something bad happened...%s\n", Mix_GetError());

  00201	e8 00 00 00 00	 call	 _SDL_GetError
  00206	50		 push	 eax
  00207	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@
  0020c	e8 00 00 00 00	 call	 _printf
  00211	83 c4 08	 add	 esp, 8
$LN12@SDL_main:

; 83   : 	}
; 84   : 	window = SDL_CreateWindow("SpaceMonster", 0, 100, WINDOW_WIDTH_START, WINDOW_HEIGHT_START, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);

  00214	6a 22		 push	 34			; 00000022H
  00216	68 d0 02 00 00	 push	 720			; 000002d0H
  0021b	68 00 05 00 00	 push	 1280			; 00000500H
  00220	6a 64		 push	 100			; 00000064H
  00222	6a 00		 push	 0
  00224	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CJFNGLCH@SpaceMonster@
  00229	e8 00 00 00 00	 call	 _SDL_CreateWindow
  0022e	83 c4 18	 add	 esp, 24			; 00000018H
  00231	a3 00 00 00 00	 mov	 DWORD PTR _window, eax

; 85   : 	if (!window) {

  00236	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _window, 0
  0023d	75 17		 jne	 SHORT $LN13@SDL_main

; 86   : 		puts("Window creation failed!");

  0023f	8b f4		 mov	 esi, esp
  00241	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@
  00246	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0024c	83 c4 04	 add	 esp, 4
  0024f	3b f4		 cmp	 esi, esp
  00251	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@SDL_main:

; 87   : 	}
; 88   :     glcontext = SDL_GL_CreateContext(window);

  00256	a1 00 00 00 00	 mov	 eax, DWORD PTR _window
  0025b	50		 push	 eax
  0025c	e8 00 00 00 00	 call	 _SDL_GL_CreateContext
  00261	83 c4 04	 add	 esp, 4
  00264	a3 00 00 00 00	 mov	 DWORD PTR _glcontext, eax

; 89   : 	if (!glcontext) {

  00269	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _glcontext, 0
  00270	75 17		 jne	 SHORT $LN14@SDL_main

; 90   : 		puts("SDL/OPENGL thing failed!");

  00272	8b f4		 mov	 esi, esp
  00274	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@
  00279	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0027f	83 c4 04	 add	 esp, 4
  00282	3b f4		 cmp	 esi, esp
  00284	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN14@SDL_main:

; 91   : 	}
; 92   : 	if (!gladLoadGL()) {

  00289	e8 00 00 00 00	 call	 _gladLoadGL
  0028e	85 c0		 test	 eax, eax
  00290	75 17		 jne	 SHORT $LN15@SDL_main

; 93   : 		puts("Failed to load openGL");

  00292	8b f4		 mov	 esi, esp
  00294	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0029f	83 c4 04	 add	 esp, 4
  002a2	3b f4		 cmp	 esi, esp
  002a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN15@SDL_main:

; 94   : 	}
; 95   : 	glEnable(GL_BLEND);

  002a9	8b f4		 mov	 esi, esp
  002ab	68 e2 0b 00 00	 push	 3042			; 00000be2H
  002b0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnable
  002b6	3b f4		 cmp	 esi, esp
  002b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 96   : 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  002bd	8b f4		 mov	 esi, esp
  002bf	68 03 03 00 00	 push	 771			; 00000303H
  002c4	68 02 03 00 00	 push	 770			; 00000302H
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBlendFunc
  002cf	3b f4		 cmp	 esi, esp
  002d1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 97   : 	glViewport(0, 0, WINDOW_WIDTH_START, WINDOW_HEIGHT_START);

  002d6	8b f4		 mov	 esi, esp
  002d8	68 d0 02 00 00	 push	 720			; 000002d0H
  002dd	68 00 05 00 00	 push	 1280			; 00000500H
  002e2	6a 00		 push	 0
  002e4	6a 00		 push	 0
  002e6	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glViewport
  002ec	3b f4		 cmp	 esi, esp
  002ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 98   : 	glOrtho(0, WINDOW_WIDTH_START, 0, WINDOW_HEIGHT_START, 1.0, -1.0);

  002f3	8b f4		 mov	 esi, esp
  002f5	83 ec 08	 sub	 esp, 8
  002f8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00300	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00305	83 ec 08	 sub	 esp, 8
  00308	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00310	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00315	83 ec 08	 sub	 esp, 8
  00318	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4086800000000000
  00320	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00325	83 ec 08	 sub	 esp, 8
  00328	0f 57 c0	 xorps	 xmm0, xmm0
  0032b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00330	83 ec 08	 sub	 esp, 8
  00333	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4094000000000000
  0033b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00340	83 ec 08	 sub	 esp, 8
  00343	0f 57 c0	 xorps	 xmm0, xmm0
  00346	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0034b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glOrtho
  00351	3b f4		 cmp	 esi, esp
  00353	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 99   : 	mat4 ortho;
; 100  : 	glm_ortho(0, WINDOW_WIDTH_START, 0, WINDOW_HEIGHT_START, 1.0, -1.0, ortho);

  00358	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ortho$[ebp]
  0035e	50		 push	 eax
  0035f	51		 push	 ecx
  00360	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00368	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036d	51		 push	 ecx
  0036e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44340000
  00384	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00389	51		 push	 ecx
  0038a	0f 57 c0	 xorps	 xmm0, xmm0
  0038d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00392	51		 push	 ecx
  00393	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44a00000
  0039b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a0	51		 push	 ecx
  003a1	0f 57 c0	 xorps	 xmm0, xmm0
  003a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a9	e8 00 00 00 00	 call	 _glm_ortho
  003ae	83 c4 1c	 add	 esp, 28			; 0000001cH

; 101  : 	if (glGetError()) {

  003b1	8b f4		 mov	 esi, esp
  003b3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  003b9	3b f4		 cmp	 esi, esp
  003bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003c0	85 c0		 test	 eax, eax
  003c2	74 1d		 je	 SHORT $LN16@SDL_main

; 102  : 		printf("Failed to initilize openGL, %x", glGetError());

  003c4	8b f4		 mov	 esi, esp
  003c6	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  003cc	3b f4		 cmp	 esi, esp
  003ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d3	50		 push	 eax
  003d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@
  003d9	e8 00 00 00 00	 call	 _printf
  003de	83 c4 08	 add	 esp, 8
$LN16@SDL_main:

; 103  : 	}
; 104  : 	shader_texturedobj = glCreateProgram();

  003e1	8b f4		 mov	 esi, esp
  003e3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateProgram
  003e9	3b f4		 cmp	 esi, esp
  003eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003f0	a3 00 00 00 00	 mov	 DWORD PTR _shader_texturedobj, eax

; 105  : 	shader_colored = glCreateProgram();

  003f5	8b f4		 mov	 esi, esp
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateProgram
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	a3 00 00 00 00	 mov	 DWORD PTR _shader_colored, eax

; 106  : 	{
; 107  : 		GLint shader_vertex;
; 108  : 		GLint shader_fragment;
; 109  : 		shader_vertex = CompileShader("vertex1.txt", GL_VERTEX_SHADER);

  00409	68 31 8b 00 00	 push	 35633			; 00008b31H
  0040e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DCJKCHKN@vertex1?4txt@
  00413	e8 00 00 00 00	 call	 _CompileShader
  00418	83 c4 08	 add	 esp, 8
  0041b	89 85 64 ff ff
	ff		 mov	 DWORD PTR _shader_vertex$5[ebp], eax

; 110  : 		shader_fragment = CompileShader("fragment1.txt", GL_FRAGMENT_SHADER);

  00421	68 30 8b 00 00	 push	 35632			; 00008b30H
  00426	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OBHLNCJC@fragment1?4txt@
  0042b	e8 00 00 00 00	 call	 _CompileShader
  00430	83 c4 08	 add	 esp, 8
  00433	89 85 58 ff ff
	ff		 mov	 DWORD PTR _shader_fragment$4[ebp], eax

; 111  : 		glAttachShader(shader_texturedobj, shader_vertex);

  00439	8b f4		 mov	 esi, esp
  0043b	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$5[ebp]
  00441	50		 push	 eax
  00442	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_texturedobj
  00448	51		 push	 ecx
  00449	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  0044f	3b f4		 cmp	 esi, esp
  00451	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 112  : 		glAttachShader(shader_texturedobj, shader_fragment);

  00456	8b f4		 mov	 esi, esp
  00458	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$4[ebp]
  0045e	50		 push	 eax
  0045f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_texturedobj
  00465	51		 push	 ecx
  00466	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  0046c	3b f4		 cmp	 esi, esp
  0046e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 113  : 		glDeleteShader(shader_vertex);

  00473	8b f4		 mov	 esi, esp
  00475	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$5[ebp]
  0047b	50		 push	 eax
  0047c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  00482	3b f4		 cmp	 esi, esp
  00484	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 114  : 		glDeleteShader(shader_fragment);

  00489	8b f4		 mov	 esi, esp
  0048b	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$4[ebp]
  00491	50		 push	 eax
  00492	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  00498	3b f4		 cmp	 esi, esp
  0049a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 115  : 	}        
; 116  : 	{
; 117  : 		GLint shader_vertex;
; 118  : 		GLint shader_fragment;
; 119  : 		shader_vertex = CompileShader("vertex2.txt", GL_VERTEX_SHADER);

  0049f	68 31 8b 00 00	 push	 35633			; 00008b31H
  004a4	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LEAOFFAD@vertex2?4txt@
  004a9	e8 00 00 00 00	 call	 _CompileShader
  004ae	83 c4 08	 add	 esp, 8
  004b1	89 85 4c ff ff
	ff		 mov	 DWORD PTR _shader_vertex$3[ebp], eax

; 120  : 		shader_fragment = CompileShader("fragment2.txt", GL_FRAGMENT_SHADER);

  004b7	68 30 8b 00 00	 push	 35632			; 00008b30H
  004bc	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GHOPKADM@fragment2?4txt@
  004c1	e8 00 00 00 00	 call	 _CompileShader
  004c6	83 c4 08	 add	 esp, 8
  004c9	89 85 40 ff ff
	ff		 mov	 DWORD PTR _shader_fragment$2[ebp], eax

; 121  : 		glAttachShader(shader_colored, shader_vertex);

  004cf	8b f4		 mov	 esi, esp
  004d1	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$3[ebp]
  004d7	50		 push	 eax
  004d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_colored
  004de	51		 push	 ecx
  004df	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  004e5	3b f4		 cmp	 esi, esp
  004e7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 122  : 		glAttachShader(shader_colored, shader_fragment);

  004ec	8b f4		 mov	 esi, esp
  004ee	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$2[ebp]
  004f4	50		 push	 eax
  004f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_colored
  004fb	51		 push	 ecx
  004fc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  00502	3b f4		 cmp	 esi, esp
  00504	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  : 		glDeleteShader(shader_vertex);

  00509	8b f4		 mov	 esi, esp
  0050b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$3[ebp]
  00511	50		 push	 eax
  00512	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  00518	3b f4		 cmp	 esi, esp
  0051a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 124  : 		glDeleteShader(shader_fragment);

  0051f	8b f4		 mov	 esi, esp
  00521	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$2[ebp]
  00527	50		 push	 eax
  00528	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  0052e	3b f4		 cmp	 esi, esp
  00530	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 125  : 	}
; 126  : 	glLinkProgram(shader_texturedobj);

  00535	8b f4		 mov	 esi, esp
  00537	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0053c	50		 push	 eax
  0053d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLinkProgram
  00543	3b f4		 cmp	 esi, esp
  00545	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 127  : 	glLinkProgram(shader_colored);

  0054a	8b f4		 mov	 esi, esp
  0054c	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  00551	50		 push	 eax
  00552	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLinkProgram
  00558	3b f4		 cmp	 esi, esp
  0055a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 128  : 	if (glGetError()) {

  0055f	8b f4		 mov	 esi, esp
  00561	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00567	3b f4		 cmp	 esi, esp
  00569	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0056e	85 c0		 test	 eax, eax
  00570	74 1d		 je	 SHORT $LN17@SDL_main

; 129  : 		printf("Failed to initilize shaders, %x", glGetError());

  00572	8b f4		 mov	 esi, esp
  00574	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  0057a	3b f4		 cmp	 esi, esp
  0057c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00581	50		 push	 eax
  00582	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@
  00587	e8 00 00 00 00	 call	 _printf
  0058c	83 c4 08	 add	 esp, 8
$LN17@SDL_main:

; 130  : 	}
; 131  : 	//setting global light
; 132  : 	{
; 133  : 		glUseProgram(shader_colored);

  0058f	8b f4		 mov	 esi, esp
  00591	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  00596	50		 push	 eax
  00597	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  0059d	3b f4		 cmp	 esi, esp
  0059f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 134  : 		GLint loc = glGetUniformLocation(shader_colored, "global_light");

  005a4	8b f4		 mov	 esi, esp
  005a6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OBNOHIMB@global_light@
  005ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  005b0	50		 push	 eax
  005b1	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetUniformLocation
  005b7	3b f4		 cmp	 esi, esp
  005b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005be	89 85 34 ff ff
	ff		 mov	 DWORD PTR _loc$1[ebp], eax

; 135  : 		glUniform3f(loc, 1, 1, 1);

  005c4	8b f4		 mov	 esi, esp
  005c6	51		 push	 ecx
  005c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d4	51		 push	 ecx
  005d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e2	51		 push	 ecx
  005e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f0	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _loc$1[ebp]
  005f6	50		 push	 eax
  005f7	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUniform3f
  005fd	3b f4		 cmp	 esi, esp
  005ff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 136  : 		glUseProgram(shader_texturedobj);

  00604	8b f4		 mov	 esi, esp
  00606	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0060b	50		 push	 eax
  0060c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00612	3b f4		 cmp	 esi, esp
  00614	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 137  : 		loc = glGetUniformLocation(shader_texturedobj, "global_light");

  00619	8b f4		 mov	 esi, esp
  0061b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OBNOHIMB@global_light@
  00620	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00625	50		 push	 eax
  00626	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetUniformLocation
  0062c	3b f4		 cmp	 esi, esp
  0062e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00633	89 85 34 ff ff
	ff		 mov	 DWORD PTR _loc$1[ebp], eax

; 138  : 		glUniform3f(loc, 1, 1, 1);

  00639	8b f4		 mov	 esi, esp
  0063b	51		 push	 ecx
  0063c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00644	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00649	51		 push	 ecx
  0064a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00652	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00657	51		 push	 ecx
  00658	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _loc$1[ebp]
  0066b	50		 push	 eax
  0066c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUniform3f
  00672	3b f4		 cmp	 esi, esp
  00674	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 139  : 		if (glGetError()) {

  00679	8b f4		 mov	 esi, esp
  0067b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00681	3b f4		 cmp	 esi, esp
  00683	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00688	85 c0		 test	 eax, eax
  0068a	74 1d		 je	 SHORT $LN18@SDL_main

; 140  : 			printf("Failed to initilize shader uniforms, %x", glGetError());

  0068c	8b f4		 mov	 esi, esp
  0068e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00694	3b f4		 cmp	 esi, esp
  00696	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0069b	50		 push	 eax
  0069c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@
  006a1	e8 00 00 00 00	 call	 _printf
  006a6	83 c4 08	 add	 esp, 8
$LN18@SDL_main:

; 141  : 		}
; 142  : 		//unless you need it for somereason
; 143  : 		//GLint tex0 = glGetUniformLocation(shader_texturedobj, "Texture0");
; 144  : 		//GLint tex1 = glGetUniformLocation(shader_texturedobj, "Texture1");
; 145  : 		//glUniform1i(tex0, 0);
; 146  : 		//glUniform1i(tex1, 1);
; 147  : 	}
; 148  : 	glUseProgram(shader_texturedobj);

  006a9	8b f4		 mov	 esi, esp
  006ab	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  006b0	50		 push	 eax
  006b1	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  006b7	3b f4		 cmp	 esi, esp
  006b9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 149  : 	Init_GL();

  006be	e8 00 00 00 00	 call	 _Init_GL

; 150  : 	GAME_WaveInit();

  006c3	e8 00 00 00 00	 call	 _GAME_WaveInit

; 151  : 	//other misc texture init
; 152  : 	player_quad.x = -1.0, player_quad.y = 1.0, player_quad.w = 0.1, player_quad.h = 0.2;

  006c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006d0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
  006d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006e0	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
  006e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  006f0	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _player_quad+8, xmm0
  006f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00700	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR _player_quad+12, xmm0

; 153  : 	player_quad.textid = texture[0];

  00708	b8 04 00 00 00	 mov	 eax, 4
  0070d	6b c8 00	 imul	 ecx, eax, 0
  00710	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  00716	89 15 10 00 00
	00		 mov	 DWORD PTR _player_quad+16, edx

; 154  : 	wave_text_quad.textid = texture[3];

  0071c	b8 04 00 00 00	 mov	 eax, 4
  00721	6b c8 03	 imul	 ecx, eax, 3
  00724	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  0072a	89 15 10 00 00
	00		 mov	 DWORD PTR _wave_text_quad+16, edx

; 155  : 	wave_num[0] = '0', wave_num[1] = '1';

  00730	b8 01 00 00 00	 mov	 eax, 1
  00735	6b c8 00	 imul	 ecx, eax, 0
  00738	c6 81 00 00 00
	00 30		 mov	 BYTE PTR _wave_num[ecx], 48 ; 00000030H
  0073f	ba 01 00 00 00	 mov	 edx, 1
  00744	c1 e2 00	 shl	 edx, 0
  00747	c6 82 00 00 00
	00 31		 mov	 BYTE PTR _wave_num[edx], 49 ; 00000031H

; 156  : 	glClearColor(0, 0, 0, 1);

  0074e	8b f4		 mov	 esi, esp
  00750	51		 push	 ecx
  00751	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00759	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075e	51		 push	 ecx
  0075f	0f 57 c0	 xorps	 xmm0, xmm0
  00762	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00767	51		 push	 ecx
  00768	0f 57 c0	 xorps	 xmm0, xmm0
  0076b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00770	51		 push	 ecx
  00771	0f 57 c0	 xorps	 xmm0, xmm0
  00774	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00779	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glClearColor
  0077f	3b f4		 cmp	 esi, esp
  00781	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 157  : 	//Stuff that needs to be outside of the while loop
; 158  : 	Uint8* key_input = SDL_GetKeyboardState(NULL);

  00786	6a 00		 push	 0
  00788	e8 00 00 00 00	 call	 _SDL_GetKeyboardState
  0078d	83 c4 04	 add	 esp, 4
  00790	89 85 28 ff ff
	ff		 mov	 DWORD PTR _key_input$[ebp], eax
$LN5@SDL_main:

; 159  : 	SDL_Event event_handle;
; 160  : 	while (1) {

  00796	b8 01 00 00 00	 mov	 eax, 1
  0079b	85 c0		 test	 eax, eax
  0079d	0f 84 90 06 00
	00		 je	 $SHUTDOWN$49

; 161  : 		start = clock();

  007a3	8b f4		 mov	 esi, esp
  007a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  007ab	3b f4		 cmp	 esi, esp
  007ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007b2	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  007b6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _start, xmm0

; 162  : 		if (SDL_PollEvent(&event_handle)) {

  007be	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _event_handle$[ebp]
  007c4	50		 push	 eax
  007c5	e8 00 00 00 00	 call	 _SDL_PollEvent
  007ca	83 c4 04	 add	 esp, 4
  007cd	85 c0		 test	 eax, eax
  007cf	0f 84 27 01 00
	00		 je	 $LN22@SDL_main

; 163  : 			if (event_handle.type == SDL_WINDOWEVENT) {

  007d5	81 bd e8 fe ff
	ff 00 02 00 00	 cmp	 DWORD PTR _event_handle$[ebp], 512 ; 00000200H
  007df	0f 85 17 01 00
	00		 jne	 $LN22@SDL_main

; 164  : 				if (event_handle.window.event == SDL_WINDOWEVENT_CLOSE) {

  007e5	0f b6 85 f4 fe
	ff ff		 movzx	 eax, BYTE PTR _event_handle$[ebp+12]
  007ec	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  007ef	75 05		 jne	 SHORT $LN21@SDL_main

; 165  : 					goto SHUTDOWN;

  007f1	e9 3d 06 00 00	 jmp	 $SHUTDOWN$49
$LN21@SDL_main:

; 166  : 				}
; 167  : 				if (event_handle.window.event == SDL_WINDOWEVENT_RESIZED) {

  007f6	0f b6 85 f4 fe
	ff ff		 movzx	 eax, BYTE PTR _event_handle$[ebp+12]
  007fd	83 f8 05	 cmp	 eax, 5
  00800	0f 85 f6 00 00
	00		 jne	 $LN22@SDL_main

; 168  : 					glViewport(0, 0, event_handle.window.data1, event_handle.window.data2);

  00806	8b f4		 mov	 esi, esp
  00808	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _event_handle$[ebp+20]
  0080e	50		 push	 eax
  0080f	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _event_handle$[ebp+16]
  00815	51		 push	 ecx
  00816	6a 00		 push	 0
  00818	6a 00		 push	 0
  0081a	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glViewport
  00820	3b f4		 cmp	 esi, esp
  00822	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 169  : 					glOrtho(0, event_handle.window.data1, 0, event_handle.window.data2, 1.0, -1.0);

  00827	8b f4		 mov	 esi, esp
  00829	83 ec 08	 sub	 esp, 8
  0082c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00834	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00839	83 ec 08	 sub	 esp, 8
  0083c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00844	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00849	f2 0f 2a 85 fc
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR _event_handle$[ebp+20]
  00851	83 ec 08	 sub	 esp, 8
  00854	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00859	83 ec 08	 sub	 esp, 8
  0085c	0f 57 c0	 xorps	 xmm0, xmm0
  0085f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00864	f2 0f 2a 85 f8
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR _event_handle$[ebp+16]
  0086c	83 ec 08	 sub	 esp, 8
  0086f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00874	83 ec 08	 sub	 esp, 8
  00877	0f 57 c0	 xorps	 xmm0, xmm0
  0087a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0087f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glOrtho
  00885	3b f4		 cmp	 esi, esp
  00887	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 170  : 					glm_ortho(0, event_handle.window.data1, 0, event_handle.window.data2, 1.0, -1.0, ortho);

  0088c	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ortho$[ebp]
  00892	50		 push	 eax
  00893	51		 push	 ecx
  00894	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0089c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a1	51		 push	 ecx
  008a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008af	f3 0f 2a 85 fc
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _event_handle$[ebp+20]
  008b7	51		 push	 ecx
  008b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bd	51		 push	 ecx
  008be	0f 57 c0	 xorps	 xmm0, xmm0
  008c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c6	f3 0f 2a 85 f8
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _event_handle$[ebp+16]
  008ce	51		 push	 ecx
  008cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d4	51		 push	 ecx
  008d5	0f 57 c0	 xorps	 xmm0, xmm0
  008d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008dd	e8 00 00 00 00	 call	 _glm_ortho
  008e2	83 c4 1c	 add	 esp, 28			; 0000001cH

; 171  : 					window_width = event_handle.window.data1, window_height = event_handle.window.data2;

  008e5	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _event_handle$[ebp+16]
  008eb	a3 00 00 00 00	 mov	 DWORD PTR _window_width, eax
  008f0	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _event_handle$[ebp+20]
  008f6	89 0d 00 00 00
	00		 mov	 DWORD PTR _window_height, ecx
$LN22@SDL_main:

; 172  : 				}
; 173  : 			}
; 174  : 		}
; 175  : 
; 176  : 		glClear(GL_COLOR_BUFFER_BIT);

  008fc	8b f4		 mov	 esi, esp
  008fe	68 00 40 00 00	 push	 16384			; 00004000H
  00903	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glClear
  00909	3b f4		 cmp	 esi, esp
  0090b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 177  : 		//cycle the background
; 178  : 		background_vertexes[6] = background_vertexes[6] + 0.5 * delta_time, background_vertexes[14] = background_vertexes[14] + 0.5 * delta_time;

  00910	b8 04 00 00 00	 mov	 eax, 4
  00915	6b c8 06	 imul	 ecx, eax, 6
  00918	f3 0f 5a 81 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[ecx]
  00920	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00928	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00930	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00934	ba 04 00 00 00	 mov	 edx, 4
  00939	6b c2 06	 imul	 eax, edx, 6
  0093c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00940	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00948	b9 04 00 00 00	 mov	 ecx, 4
  0094d	6b d1 0e	 imul	 edx, ecx, 14
  00950	f3 0f 5a 82 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[edx]
  00958	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00960	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00968	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0096c	b8 04 00 00 00	 mov	 eax, 4
  00971	6b c8 0e	 imul	 ecx, eax, 14
  00974	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00978	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0

; 179  : 		background_vertexes[22] = background_vertexes[22] + 0.5 * delta_time, background_vertexes[30] = background_vertexes[30] + 0.5 * delta_time;

  00980	b8 04 00 00 00	 mov	 eax, 4
  00985	6b c8 16	 imul	 ecx, eax, 22
  00988	f3 0f 5a 81 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[ecx]
  00990	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00998	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  009a0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  009a4	ba 04 00 00 00	 mov	 edx, 4
  009a9	6b c2 16	 imul	 eax, edx, 22
  009ac	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009b0	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  009b8	b9 04 00 00 00	 mov	 ecx, 4
  009bd	6b d1 1e	 imul	 edx, ecx, 30
  009c0	f3 0f 5a 82 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[edx]
  009c8	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  009d0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  009d8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  009dc	b8 04 00 00 00	 mov	 eax, 4
  009e1	6b c8 1e	 imul	 ecx, eax, 30
  009e4	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009e8	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0

; 180  : 		if (background_vertexes[6] > 1)

  009f0	b8 04 00 00 00	 mov	 eax, 4
  009f5	6b c8 06	 imul	 ecx, eax, 6
  009f8	f3 0f 10 81 00
	00 00 00	 movss	 xmm0, DWORD PTR _background_vertexes[ecx]
  00a00	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00a07	76 56		 jbe	 SHORT $LN23@SDL_main

; 181  : 			background_vertexes[6] = 0, background_vertexes[14] = 1, background_vertexes[22] = 1, background_vertexes[30] = 0;

  00a09	b8 04 00 00 00	 mov	 eax, 4
  00a0e	6b c8 06	 imul	 ecx, eax, 6
  00a11	0f 57 c0	 xorps	 xmm0, xmm0
  00a14	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0
  00a1c	ba 04 00 00 00	 mov	 edx, 4
  00a21	6b c2 0e	 imul	 eax, edx, 14
  00a24	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a2c	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00a34	b9 04 00 00 00	 mov	 ecx, 4
  00a39	6b d1 16	 imul	 edx, ecx, 22
  00a3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a44	f3 0f 11 82 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[edx], xmm0
  00a4c	b8 04 00 00 00	 mov	 eax, 4
  00a51	6b c8 1e	 imul	 ecx, eax, 30
  00a54	0f 57 c0	 xorps	 xmm0, xmm0
  00a57	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0
$LN23@SDL_main:

; 182  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), background_vertexes);

  00a5f	8b f4		 mov	 esi, esp
  00a61	68 00 00 00 00	 push	 OFFSET _background_vertexes
  00a66	68 80 00 00 00	 push	 128			; 00000080H
  00a6b	6a 00		 push	 0
  00a6d	68 92 88 00 00	 push	 34962			; 00008892H
  00a72	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00a78	3b f4		 cmp	 esi, esp
  00a7a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 183  : 		glBindTexture(GL_TEXTURE_2D, texture[1]);

  00a7f	b8 04 00 00 00	 mov	 eax, 4
  00a84	c1 e0 00	 shl	 eax, 0
  00a87	8b f4		 mov	 esi, esp
  00a89	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00a8f	51		 push	 ecx
  00a90	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00a95	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00a9b	3b f4		 cmp	 esi, esp
  00a9d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 184  : 		glDrawArrays(GL_QUADS, 0, 4);

  00aa2	8b f4		 mov	 esi, esp
  00aa4	6a 04		 push	 4
  00aa6	6a 00		 push	 0
  00aa8	6a 07		 push	 7
  00aaa	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00ab0	3b f4		 cmp	 esi, esp
  00ab2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 185  : 		//input processing
; 186  : 		if (SDL_GetMouseState(NULL, NULL) & SDL_BUTTON(SDL_BUTTON_LEFT)) {

  00ab7	6a 00		 push	 0
  00ab9	6a 00		 push	 0
  00abb	e8 00 00 00 00	 call	 _SDL_GetMouseState
  00ac0	83 c4 08	 add	 esp, 8
  00ac3	83 e0 01	 and	 eax, 1
  00ac6	74 10		 je	 SHORT $LN24@SDL_main

; 187  : 			SDL_SetCursor(mouse_closed);

  00ac8	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse_closed
  00acd	50		 push	 eax
  00ace	e8 00 00 00 00	 call	 _SDL_SetCursor
  00ad3	83 c4 04	 add	 esp, 4

; 188  : 		}

  00ad6	eb 0e		 jmp	 SHORT $LN25@SDL_main
$LN24@SDL_main:

; 189  : 		else {
; 190  : 			SDL_SetCursor(mouse_opened);

  00ad8	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse_opened
  00add	50		 push	 eax
  00ade	e8 00 00 00 00	 call	 _SDL_SetCursor
  00ae3	83 c4 04	 add	 esp, 4
$LN25@SDL_main:

; 191  : 		}
; 192  : 		if (key_input[SDL_SCANCODE_UP]) {

  00ae6	b8 01 00 00 00	 mov	 eax, 1
  00aeb	6b c8 52	 imul	 ecx, eax, 82
  00aee	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00af4	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00af8	85 c0		 test	 eax, eax
  00afa	74 0d		 je	 SHORT $LN26@SDL_main

; 193  : 			++score;

  00afc	a1 00 00 00 00	 mov	 eax, DWORD PTR _score
  00b01	83 c0 01	 add	 eax, 1
  00b04	a3 00 00 00 00	 mov	 DWORD PTR _score, eax
$LN26@SDL_main:

; 194  : 		}
; 195  : 		if (key_input[SDL_SCANCODE_DOWN]) {

  00b09	b8 01 00 00 00	 mov	 eax, 1
  00b0e	6b c8 51	 imul	 ecx, eax, 81
  00b11	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00b17	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00b1b	85 c0		 test	 eax, eax
  00b1d	74 13		 je	 SHORT $LN27@SDL_main

; 196  : 			printf("score is now: %d\n", score);

  00b1f	a1 00 00 00 00	 mov	 eax, DWORD PTR _score
  00b24	50		 push	 eax
  00b25	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@
  00b2a	e8 00 00 00 00	 call	 _printf
  00b2f	83 c4 08	 add	 esp, 8
$LN27@SDL_main:

; 197  : 		}
; 198  : 		if (key_input[SDL_SCANCODE_D]) {

  00b32	b8 01 00 00 00	 mov	 eax, 1
  00b37	6b c8 07	 imul	 ecx, eax, 7
  00b3a	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00b40	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00b44	85 c0		 test	 eax, eax
  00b46	74 20		 je	 SHORT $LN28@SDL_main

; 199  : 			player_quad.x = player_quad.x + player_wasd_speed * delta_time;

  00b48	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00b50	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00b58	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad
  00b60	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
$LN28@SDL_main:

; 200  : 		}
; 201  : 		if (key_input[SDL_SCANCODE_A]) {

  00b68	b8 01 00 00 00	 mov	 eax, 1
  00b6d	c1 e0 02	 shl	 eax, 2
  00b70	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _key_input$[ebp]
  00b76	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00b7a	85 d2		 test	 edx, edx
  00b7c	74 24		 je	 SHORT $LN29@SDL_main

; 202  : 			player_quad.x = player_quad.x - player_wasd_speed * delta_time;

  00b7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00b86	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00b8e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR _player_quad
  00b96	f3 0f 5c c8	 subss	 xmm1, xmm0
  00b9a	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm1
$LN29@SDL_main:

; 203  : 		}
; 204  : 		if (key_input[SDL_SCANCODE_S]) {

  00ba2	b8 01 00 00 00	 mov	 eax, 1
  00ba7	6b c8 16	 imul	 ecx, eax, 22
  00baa	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00bb0	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00bb4	85 c0		 test	 eax, eax
  00bb6	74 24		 je	 SHORT $LN30@SDL_main

; 205  : 			player_quad.y = player_quad.y - player_wasd_speed * delta_time;

  00bb8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00bc0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00bc8	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR _player_quad+4
  00bd0	f3 0f 5c c8	 subss	 xmm1, xmm0
  00bd4	f3 0f 11 0d 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm1
$LN30@SDL_main:

; 206  : 		}
; 207  : 		if (key_input[SDL_SCANCODE_W]) {

  00bdc	b8 01 00 00 00	 mov	 eax, 1
  00be1	6b c8 1a	 imul	 ecx, eax, 26
  00be4	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00bea	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00bee	85 c0		 test	 eax, eax
  00bf0	74 20		 je	 SHORT $LN31@SDL_main

; 208  : 			player_quad.y = player_quad.y + player_wasd_speed * delta_time;

  00bf2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00bfa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00c02	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+4
  00c0a	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
$LN31@SDL_main:

; 209  : 		}
; 210  : 		//make sure player is not outside of the window
; 211  : 		if (player_quad.x < -1) {

  00c12	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00c1a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR _player_quad
  00c21	76 12		 jbe	 SHORT $LN32@SDL_main

; 212  : 			player_quad.x = -1;

  00c23	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00c2b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0

; 213  : 
; 214  : 		}

  00c33	eb 29		 jmp	 SHORT $LN34@SDL_main
$LN32@SDL_main:

; 215  : 		else if (player_quad.x + player_quad.w > 1) {

  00c35	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_quad
  00c3d	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+8
  00c45	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00c4c	76 10		 jbe	 SHORT $LN34@SDL_main

; 216  : 			player_quad.x = 0.9;

  00c4e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00c56	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
$LN34@SDL_main:

; 217  : 
; 218  : 		}
; 219  : 		if (player_quad.y > 1) {

  00c5e	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR _player_quad+4
  00c66	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00c6d	76 12		 jbe	 SHORT $LN35@SDL_main

; 220  : 			player_quad.y = 1;

  00c6f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c77	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0

; 221  : 
; 222  : 		}

  00c7f	eb 29		 jmp	 SHORT $LN37@SDL_main
$LN35@SDL_main:

; 223  : 		else if (player_quad.y < -1 + player_quad.h) {

  00c81	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00c89	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+12
  00c91	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR _player_quad+4
  00c98	76 10		 jbe	 SHORT $LN37@SDL_main

; 224  : 			player_quad.y = -0.8;

  00c9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00ca2	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
$LN37@SDL_main:

; 225  : 
; 226  : 		}
; 227  : 		//check if wave should increase
; 228  : 		if (score == (1000 * wave))

  00caa	69 05 00 00 00
	00 e8 03 00 00	 imul	 eax, DWORD PTR _wave, 1000
  00cb4	39 05 00 00 00
	00		 cmp	 DWORD PTR _score, eax
  00cba	75 2a		 jne	 SHORT $LN38@SDL_main

; 229  : 			++wave, GAME_WaveInit(), printf("score requirement: %d\n", 1000 * wave);

  00cbc	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00cc1	83 c0 01	 add	 eax, 1
  00cc4	a3 00 00 00 00	 mov	 DWORD PTR _wave, eax
  00cc9	e8 00 00 00 00	 call	 _GAME_WaveInit
  00cce	69 0d 00 00 00
	00 e8 03 00 00	 imul	 ecx, DWORD PTR _wave, 1000
  00cd8	51		 push	 ecx
  00cd9	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@
  00cde	e8 00 00 00 00	 call	 _printf
  00ce3	83 c4 08	 add	 esp, 8
$LN38@SDL_main:

; 230  : 		GAME_AddEnemies();

  00ce6	e8 00 00 00 00	 call	 _GAME_AddEnemies

; 231  : 		RENDER_TexturedQuad(player_quad,1,1,1, false);

  00ceb	6a 00		 push	 0
  00ced	51		 push	 ecx
  00cee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00cf6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cfb	51		 push	 ecx
  00cfc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d09	51		 push	 ecx
  00d0a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d17	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00d1a	b9 07 00 00 00	 mov	 ecx, 7
  00d1f	be 00 00 00 00	 mov	 esi, OFFSET _player_quad
  00d24	8b fc		 mov	 edi, esp
  00d26	f3 a5		 rep movsd
  00d28	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  00d2d	83 c4 2c	 add	 esp, 44			; 0000002cH

; 232  : 		RENDER_TexturedQuad(wave_text_quad, 1, 0.1, 0.1, false);

  00d30	6a 00		 push	 0
  00d32	51		 push	 ecx
  00d33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d40	51		 push	 ecx
  00d41	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00d49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d4e	51		 push	 ecx
  00d4f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5c	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00d5f	b9 07 00 00 00	 mov	 ecx, 7
  00d64	be 00 00 00 00	 mov	 esi, OFFSET _wave_text_quad
  00d69	8b fc		 mov	 edi, esp
  00d6b	f3 a5		 rep movsd
  00d6d	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  00d72	83 c4 2c	 add	 esp, 44			; 0000002cH

; 233  : 		RENDER_List(&enemies);

  00d75	68 00 00 00 00	 push	 OFFSET _enemies
  00d7a	e8 00 00 00 00	 call	 _RENDER_List
  00d7f	83 c4 04	 add	 esp, 4

; 234  : 		if (glGetError()) {

  00d82	8b f4		 mov	 esi, esp
  00d84	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00d8a	3b f4		 cmp	 esi, esp
  00d8c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d91	85 c0		 test	 eax, eax
  00d93	74 1d		 je	 SHORT $LN39@SDL_main

; 235  : 			printf("Failed to do something, %x", glGetError());

  00d95	8b f4		 mov	 esi, esp
  00d97	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00d9d	3b f4		 cmp	 esi, esp
  00d9f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00da4	50		 push	 eax
  00da5	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@
  00daa	e8 00 00 00 00	 call	 _printf
  00daf	83 c4 08	 add	 esp, 8
$LN39@SDL_main:

; 236  : 		}
; 237  : 		SDL_GL_SwapWindow(window);

  00db2	a1 00 00 00 00	 mov	 eax, DWORD PTR _window
  00db7	50		 push	 eax
  00db8	e8 00 00 00 00	 call	 _SDL_GL_SwapWindow
  00dbd	83 c4 04	 add	 esp, 4

; 238  : 		delta_time = clock() - start;

  00dc0	8b f4		 mov	 esi, esp
  00dc2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  00dc8	3b f4		 cmp	 esi, esp
  00dca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00dcf	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00dd3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR _start
  00ddb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _delta_time, xmm0

; 239  : 		delta_time /= CLOCKS_PER_SEC;

  00de3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _delta_time
  00deb	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00df3	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _delta_time, xmm0

; 240  : 		if (key_input[SDL_SCANCODE_F]) {

  00dfb	b8 01 00 00 00	 mov	 eax, 1
  00e00	6b c8 09	 imul	 ecx, eax, 9
  00e03	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00e09	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00e0d	85 c0		 test	 eax, eax
  00e0f	74 1d		 je	 SHORT $LN40@SDL_main

; 241  : 			printf("time:%f\n", delta_time);

  00e11	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _delta_time
  00e19	83 ec 08	 sub	 esp, 8
  00e1c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00e21	68 00 00 00 00	 push	 OFFSET ??_C@_08DINNBOH@time?3?$CFf?6@
  00e26	e8 00 00 00 00	 call	 _printf
  00e2b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN40@SDL_main:

; 242  : 		}
; 243  : 	}	

  00e2e	e9 63 f9 ff ff	 jmp	 $LN5@SDL_main
$SHUTDOWN$49:

; 244  : SHUTDOWN:
; 245  : 	return 0;

  00e33	33 c0		 xor	 eax, eax

; 246  : }

  00e35	52		 push	 edx
  00e36	8b cd		 mov	 ecx, ebp
  00e38	50		 push	 eax
  00e39	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN48@SDL_main
  00e3f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00e44	58		 pop	 eax
  00e45	5a		 pop	 edx
  00e46	5f		 pop	 edi
  00e47	5e		 pop	 esi
  00e48	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e4b	33 cd		 xor	 ecx, ebp
  00e4d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e52	8b e5		 mov	 esp, ebp
  00e54	5d		 pop	 ebp
  00e55	8b e3		 mov	 esp, ebx
  00e57	5b		 pop	 ebx
  00e58	c3		 ret	 0
  00e59	0f 1f 00	 npad	 3
$LN48@SDL_main:
  00e5c	05 00 00 00	 DD	 5
  00e60	00 00 00 00	 DD	 $LN47@SDL_main
$LN47@SDL_main:
  00e64	dc ff ff ff	 DD	 -36			; ffffffdcH
  00e68	04 00 00 00	 DD	 4
  00e6c	00 00 00 00	 DD	 $LN42@SDL_main
  00e70	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00e74	04 00 00 00	 DD	 4
  00e78	00 00 00 00	 DD	 $LN43@SDL_main
  00e7c	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00e80	02 00 00 00	 DD	 2
  00e84	00 00 00 00	 DD	 $LN44@SDL_main
  00e88	70 ff ff ff	 DD	 -144			; ffffff70H
  00e8c	40 00 00 00	 DD	 64			; 00000040H
  00e90	00 00 00 00	 DD	 $LN45@SDL_main
  00e94	e8 fe ff ff	 DD	 -280			; fffffee8H
  00e98	38 00 00 00	 DD	 56			; 00000038H
  00e9c	00 00 00 00	 DD	 $LN46@SDL_main
$LN46@SDL_main:
  00ea0	65		 DB	 101			; 00000065H
  00ea1	76		 DB	 118			; 00000076H
  00ea2	65		 DB	 101			; 00000065H
  00ea3	6e		 DB	 110			; 0000006eH
  00ea4	74		 DB	 116			; 00000074H
  00ea5	5f		 DB	 95			; 0000005fH
  00ea6	68		 DB	 104			; 00000068H
  00ea7	61		 DB	 97			; 00000061H
  00ea8	6e		 DB	 110			; 0000006eH
  00ea9	64		 DB	 100			; 00000064H
  00eaa	6c		 DB	 108			; 0000006cH
  00eab	65		 DB	 101			; 00000065H
  00eac	00		 DB	 0
$LN45@SDL_main:
  00ead	6f		 DB	 111			; 0000006fH
  00eae	72		 DB	 114			; 00000072H
  00eaf	74		 DB	 116			; 00000074H
  00eb0	68		 DB	 104			; 00000068H
  00eb1	6f		 DB	 111			; 0000006fH
  00eb2	00		 DB	 0
$LN44@SDL_main:
  00eb3	66		 DB	 102			; 00000066H
  00eb4	6f		 DB	 111			; 0000006fH
  00eb5	72		 DB	 114			; 00000072H
  00eb6	6d		 DB	 109			; 0000006dH
  00eb7	61		 DB	 97			; 00000061H
  00eb8	74		 DB	 116			; 00000074H
  00eb9	00		 DB	 0
$LN43@SDL_main:
  00eba	63		 DB	 99			; 00000063H
  00ebb	68		 DB	 104			; 00000068H
  00ebc	61		 DB	 97			; 00000061H
  00ebd	6e		 DB	 110			; 0000006eH
  00ebe	6e		 DB	 110			; 0000006eH
  00ebf	65		 DB	 101			; 00000065H
  00ec0	6c		 DB	 108			; 0000006cH
  00ec1	73		 DB	 115			; 00000073H
  00ec2	00		 DB	 0
$LN42@SDL_main:
  00ec3	66		 DB	 102			; 00000066H
  00ec4	72		 DB	 114			; 00000072H
  00ec5	65		 DB	 101			; 00000065H
  00ec6	71		 DB	 113			; 00000071H
  00ec7	00		 DB	 0
_SDL_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vsprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00028	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00033	52		 push	 edx
  00034	6a ff		 push	 -1
  00036	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __vsnprintf_l
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	83 ca 01	 or	 edx, 1
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	50		 push	 eax
  0004c	52		 push	 edx
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00053	83 c4 1c	 add	 esp, 28			; 0000001cH
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00060	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00064	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  00066	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00070	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00072	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  00075	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0007b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
