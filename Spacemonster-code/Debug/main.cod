; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_window_width
PUBLIC	_window_height
PUBLIC	_white
PUBLIC	_player_wasd_speed
PUBLIC	_delta_time
PUBLIC	_background_vertexes
PUBLIC	_left
_DATA	SEGMENT
COMM	_window:DWORD
COMM	_glcontext:DWORD
COMM	_test_font_surface:DWORD
COMM	_test_font:DWORD
COMM	_shader_texturedobj:DWORD
COMM	_shader_colored:DWORD
COMM	_texture:DWORD:03H
COMM	_VAO:DWORD
COMM	_VERTEXES_VBO:DWORD
COMM	_player_quad:BYTE:014H
_DATA	ENDS
_BSS	SEGMENT
_delta_time DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_start:DWORD
COMM	_mouse_opened:DWORD
COMM	_mouse_closed:DWORD
COMM	_test_list:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__186FF47F_stat@h DB 01H
__8C55BF2C_SDL_stdinc@h DB 01H
__A594C705_SDL_endian@h DB 01H
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__6853117E_SDL_rect@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__03C282FB_linkedlist_h@h DB 01H
__88262B53_main@c DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
_window_width DD 0500H
_window_height DD 02d0H
_white	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_player_wasd_speed DD 03faccccdr		; 1.35
_background_vertexes DD 0bf800000r		; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
_left	DB	07fH
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_SDL_main
PUBLIC	_glm_mat4_copy
PUBLIC	_glm_mat4_zero
PUBLIC	_glm_ortho
PUBLIC	_LIST_AddElement
PUBLIC	_LIST_RemoveAt
PUBLIC	_LIST_At
PUBLIC	_RENDER_TexturedQuad
PUBLIC	_RENDER_TexturedQuadSheet
PUBLIC	_RENDER_Quad
PUBLIC	_CompileShader
PUBLIC	_SetTextureBoundedParams
PUBLIC	_MoveShapeXY
PUBLIC	_RENDER_List
PUBLIC	_CreateTexture2D
PUBLIC	_Init_GL
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@ ; `string'
PUBLIC	??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@ ; `string'
PUBLIC	??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0N@DFCODNDC@testfont?4ttf@		; `string'
PUBLIC	??_C@_0BN@CDHAJDMA@Error?5loading?5true?5type?5font@ ; `string'
PUBLIC	??_C@_0BL@BHMGIKOL@what?5do?5you?5want?5it?5to?5be?$DP@ ; `string'
PUBLIC	??_C@_0CG@GILHFLBI@Failed?5to?5create?5SDL_Surface?5fr@ ; `string'
PUBLIC	??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_09LEBKLOBD@testa?4wav@			; `string'
PUBLIC	??_C@_08NJOICEBB@test?4wav@			; `string'
PUBLIC	??_C@_09DCIOMMLN@testb?4wav@			; `string'
PUBLIC	??_C@_0BI@LHPDKIPA@Failed?5to?5load?5WAV?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@ ; `string'
PUBLIC	??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@ ; `string'
PUBLIC	??_C@_0N@CJFNGLCH@SpaceMonster@			; `string'
PUBLIC	??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@ ; `string'
PUBLIC	??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@ ; `string'
PUBLIC	??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@	; `string'
PUBLIC	??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@ ; `string'
PUBLIC	??_C@_0M@DCJKCHKN@vertex1?4txt@			; `string'
PUBLIC	??_C@_0O@OBHLNCJC@fragment1?4txt@		; `string'
PUBLIC	??_C@_0M@LEAOFFAD@vertex2?4txt@			; `string'
PUBLIC	??_C@_0O@GHOPKADM@fragment2?4txt@		; `string'
PUBLIC	??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@ ; `string'
PUBLIC	??_C@_0N@OBNOHIMB@global_light@			; `string'
PUBLIC	??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@ ; `string'
PUBLIC	??_C@_08DINNBOH@time?3?$CFf?6@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0BA@FPGCGDHE@character_1?4png@		; `string'
PUBLIC	??_C@_0BB@FJHLDCBO@background_1?4png@		; `string'
PUBLIC	??_C@_0BB@OGEDPOMN@character_ic?4png@		; `string'
PUBLIC	??_C@_0BC@ENOFGPDN@cursor_f_open?4png@		; `string'
PUBLIC	??_C@_0BE@NBHOGJHM@cursor_f_closed?4png@	; `string'
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@404e000000000000
PUBLIC	__real@4086800000000000
PUBLIC	__real@4094000000000000
PUBLIC	__real@41a00000
PUBLIC	__real@44340000
PUBLIC	__real@447a0000
PUBLIC	__real@44a00000
PUBLIC	__real@be4ccccd
PUBLIC	__real@becccccd
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf800000
PUBLIC	__real@bfc999999999999a
PUBLIC	__real@bfd0000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__ftell:PROC
EXTRN	__imp__puts:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__clock:PROC
EXTRN	_gladLoadGL:PROC
EXTRN	_SDL_GetError:PROC
EXTRN	_SDL_RWFromFile:PROC
EXTRN	_SDL_FreeSurface:PROC
EXTRN	_SDL_CreateWindow:PROC
EXTRN	_SDL_SetWindowIcon:PROC
EXTRN	_SDL_GL_SetAttribute:PROC
EXTRN	_SDL_GL_CreateContext:PROC
EXTRN	_SDL_GL_SwapWindow:PROC
EXTRN	_SDL_GetKeyboardState:PROC
EXTRN	_SDL_GetMouseState:PROC
EXTRN	_SDL_CreateColorCursor:PROC
EXTRN	_SDL_SetCursor:PROC
EXTRN	_SDL_PollEvent:PROC
EXTRN	_SDL_Init:PROC
EXTRN	_IMG_Load:PROC
EXTRN	_TTF_Init:PROC
EXTRN	_TTF_OpenFont:PROC
EXTRN	_TTF_RenderText_Blended:PROC
EXTRN	_Mix_Init:PROC
EXTRN	_Mix_OpenAudio:PROC
EXTRN	_Mix_AllocateChannels:PROC
EXTRN	_Mix_QuerySpec:PROC
EXTRN	_Mix_LoadWAV_RW:PROC
EXTRN	_Mix_LoadMUS:PROC
EXTRN	_Mix_GetNumChunkDecoders:PROC
EXTRN	_Mix_GetChunkDecoder:PROC
EXTRN	_Mix_SetPanning:PROC
EXTRN	_Mix_PlayChannelTimed:PROC
EXTRN	_Mix_PlayMusic:PROC
EXTRN	_Mix_VolumeMusic:PROC
EXTRN	_Mix_SetMusicPosition:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_glad_glTexParameteri:DWORD
EXTRN	_glad_glTexImage2D:DWORD
EXTRN	_glad_glClear:DWORD
EXTRN	_glad_glClearColor:DWORD
EXTRN	_glad_glEnable:DWORD
EXTRN	_glad_glBlendFunc:DWORD
EXTRN	_glad_glGetError:DWORD
EXTRN	_glad_glViewport:DWORD
EXTRN	_glad_glLoadIdentity:DWORD
EXTRN	_glad_glMatrixMode:DWORD
EXTRN	_glad_glOrtho:DWORD
EXTRN	_glad_glDrawArrays:DWORD
EXTRN	_glad_glBindTexture:DWORD
EXTRN	_glad_glGenTextures:DWORD
EXTRN	_glad_glActiveTexture:DWORD
EXTRN	_glad_glBindBuffer:DWORD
EXTRN	_glad_glGenBuffers:DWORD
EXTRN	_glad_glBufferData:DWORD
EXTRN	_glad_glBufferSubData:DWORD
EXTRN	_glad_glAttachShader:DWORD
EXTRN	_glad_glCompileShader:DWORD
EXTRN	_glad_glCreateProgram:DWORD
EXTRN	_glad_glCreateShader:DWORD
EXTRN	_glad_glDeleteShader:DWORD
EXTRN	_glad_glEnableVertexAttribArray:DWORD
EXTRN	_glad_glGetUniformLocation:DWORD
EXTRN	_glad_glLinkProgram:DWORD
EXTRN	_glad_glShaderSource:DWORD
EXTRN	_glad_glUseProgram:DWORD
EXTRN	_glad_glUniform3f:DWORD
EXTRN	_glad_glVertexAttribPointer:DWORD
EXTRN	_glad_glBindVertexArray:DWORD
EXTRN	_glad_glGenVertexArrays:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfd0000000000000
CONST	SEGMENT
__real@bfd0000000000000 DQ 0bfd0000000000000r	; -0.25
CONST	ENDS
;	COMDAT __real@bfc999999999999a
CONST	SEGMENT
__real@bfc999999999999a DQ 0bfc999999999999ar	; -0.2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@becccccd
CONST	SEGMENT
__real@becccccd DD 0becccccdr			; -0.4
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@44a00000
CONST	SEGMENT
__real@44a00000 DD 044a00000r			; 1280
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44340000
CONST	SEGMENT
__real@44340000 DD 044340000r			; 720
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@4094000000000000
CONST	SEGMENT
__real@4094000000000000 DQ 04094000000000000r	; 1280
CONST	ENDS
;	COMDAT __real@4086800000000000
CONST	SEGMENT
__real@4086800000000000 DQ 04086800000000000r	; 720
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BE@NBHOGJHM@cursor_f_closed?4png@
CONST	SEGMENT
??_C@_0BE@NBHOGJHM@cursor_f_closed?4png@ DB 'cursor_f_closed.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@ENOFGPDN@cursor_f_open?4png@
CONST	SEGMENT
??_C@_0BC@ENOFGPDN@cursor_f_open?4png@ DB 'cursor_f_open.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OGEDPOMN@character_ic?4png@
CONST	SEGMENT
??_C@_0BB@OGEDPOMN@character_ic?4png@ DB 'character_ic.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FJHLDCBO@background_1?4png@
CONST	SEGMENT
??_C@_0BB@FJHLDCBO@background_1?4png@ DB 'background_1.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FPGCGDHE@character_1?4png@
CONST	SEGMENT
??_C@_0BA@FPGCGDHE@character_1?4png@ DB 'character_1.png', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08DINNBOH@time?3?$CFf?6@
CONST	SEGMENT
??_C@_08DINNBOH@time?3?$CFf?6@ DB 'time:%f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@
CONST	SEGMENT
??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@ DB 'Failed to ini'
	DB	'tilize shader uniforms, %x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OBNOHIMB@global_light@
CONST	SEGMENT
??_C@_0N@OBNOHIMB@global_light@ DB 'global_light', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@
CONST	SEGMENT
??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@ DB 'Failed to '
	DB	'initilize shaders, %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GHOPKADM@fragment2?4txt@
CONST	SEGMENT
??_C@_0O@GHOPKADM@fragment2?4txt@ DB 'fragment2.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LEAOFFAD@vertex2?4txt@
CONST	SEGMENT
??_C@_0M@LEAOFFAD@vertex2?4txt@ DB 'vertex2.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OBHLNCJC@fragment1?4txt@
CONST	SEGMENT
??_C@_0O@OBHLNCJC@fragment1?4txt@ DB 'fragment1.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DCJKCHKN@vertex1?4txt@
CONST	SEGMENT
??_C@_0M@DCJKCHKN@vertex1?4txt@ DB 'vertex1.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@
CONST	SEGMENT
??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@ DB 'Failed to '
	DB	'initilize openGL, %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@
CONST	SEGMENT
??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@ DB 'Failed to load openGL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@
CONST	SEGMENT
??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@ DB 'SDL/OPENGL thing f'
	DB	'ailed!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@
CONST	SEGMENT
??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@ DB 'Window creation fail'
	DB	'ed!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CJFNGLCH@SpaceMonster@
CONST	SEGMENT
??_C@_0N@CJFNGLCH@SpaceMonster@ DB 'SpaceMonster', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@
CONST	SEGMENT
??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@ DB 'Something b'
	DB	'ad happened...%s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@
CONST	SEGMENT
??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@ DB 'Freque'
	DB	'rncy:%d, audio format:%x, number of channels:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LHPDKIPA@Failed?5to?5load?5WAV?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0BI@LHPDKIPA@Failed?5to?5load?5WAV?0?5?$CFs?6@ DB 'Failed to load W'
	DB	'AV, %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09DCIOMMLN@testb?4wav@
CONST	SEGMENT
??_C@_09DCIOMMLN@testb?4wav@ DB 'testb.wav', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NJOICEBB@test?4wav@
CONST	SEGMENT
??_C@_08NJOICEBB@test?4wav@ DB 'test.wav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LEBKLOBD@testa?4wav@
CONST	SEGMENT
??_C@_09LEBKLOBD@testa?4wav@ DB 'testa.wav', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@
CONST	SEGMENT
??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@ DB 'Sample c'
	DB	'hunk decoder %d is for %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@ DB 'amount of channel'
	DB	's: %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@ DB 'Error op'
	DB	'ening audio device, %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GILHFLBI@Failed?5to?5create?5SDL_Surface?5fr@
CONST	SEGMENT
??_C@_0CG@GILHFLBI@Failed?5to?5create?5SDL_Surface?5fr@ DB 'Failed to cre'
	DB	'ate SDL_Surface from TTF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BHMGIKOL@what?5do?5you?5want?5it?5to?5be?$DP@
CONST	SEGMENT
??_C@_0BL@BHMGIKOL@what?5do?5you?5want?5it?5to?5be?$DP@ DB 'what do you w'
	DB	'ant it to be?', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CDHAJDMA@Error?5loading?5true?5type?5font@
CONST	SEGMENT
??_C@_0BN@CDHAJDMA@Error?5loading?5true?5type?5font@ DB 'Error loading tr'
	DB	'ue type font', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DFCODNDC@testfont?4ttf@
CONST	SEGMENT
??_C@_0N@DFCODNDC@testfont?4ttf@ DB 'testfont.ttf', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@ DB 'Failed to i'
	DB	'nitilize mix, %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@
CONST	SEGMENT
??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@ DB 'Failed to lo'
	DB	'ad SDL_TTF font library', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@
CONST	SEGMENT
??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@ DB 'Couldn''t inil'
	DB	'ize audio, %s', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _Init_GL
_TEXT	SEGMENT
_tmp_surface$ = -8					; size = 4
_Init_GL PROC						; COMDAT

; 379  : void Init_GL(void){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 380  : 	//TODO MAYBE ABSTRACT THE VBO SO ITS EASIER TO CREATE OBJECTS
; 381  : 	SDL_Surface* tmp_surface = IMG_Load("character_1.png");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FPGCGDHE@character_1?4png@
  0002d	e8 00 00 00 00	 call	 _IMG_Load
  00032	83 c4 04	 add	 esp, 4
  00035	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 382  : 	glGenVertexArrays(1, &VAO);

  00038	8b f4		 mov	 esi, esp
  0003a	68 00 00 00 00	 push	 OFFSET _VAO
  0003f	6a 01		 push	 1
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenVertexArrays
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 383  : 	glBindVertexArray(VAO);

  0004e	8b f4		 mov	 esi, esp
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _VAO
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindVertexArray
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 384  : 	glGenBuffers(1, &VERTEXES_VBO);

  00063	8b f4		 mov	 esi, esp
  00065	68 00 00 00 00	 push	 OFFSET _VERTEXES_VBO
  0006a	6a 01		 push	 1
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenBuffers
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 385  : 	glBindBuffer(GL_ARRAY_BUFFER, VERTEXES_VBO);

  00079	8b f4		 mov	 esi, esp
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _VERTEXES_VBO
  00080	50		 push	 eax
  00081	68 92 88 00 00	 push	 34962			; 00008892H
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindBuffer
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 386  : 	glBufferData(GL_ARRAY_BUFFER, 32 * sizeof(float), NULL, GL_DYNAMIC_DRAW);

  00093	8b f4		 mov	 esi, esp
  00095	68 e8 88 00 00	 push	 35048			; 000088e8H
  0009a	6a 00		 push	 0
  0009c	68 80 00 00 00	 push	 128			; 00000080H
  000a1	68 92 88 00 00	 push	 34962			; 00008892H
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferData
  000ac	3b f4		 cmp	 esi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 387  : 	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);

  000b3	8b f4		 mov	 esi, esp
  000b5	6a 00		 push	 0
  000b7	6a 20		 push	 32			; 00000020H
  000b9	6a 00		 push	 0
  000bb	68 06 14 00 00	 push	 5126			; 00001406H
  000c0	6a 03		 push	 3
  000c2	6a 00		 push	 0
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 388  : 	glEnableVertexAttribArray(0);

  000d1	8b f4		 mov	 esi, esp
  000d3	6a 00		 push	 0
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 389  : 	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));

  000e2	8b f4		 mov	 esi, esp
  000e4	6a 0c		 push	 12			; 0000000cH
  000e6	6a 20		 push	 32			; 00000020H
  000e8	6a 00		 push	 0
  000ea	68 06 14 00 00	 push	 5126			; 00001406H
  000ef	6a 03		 push	 3
  000f1	6a 01		 push	 1
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 390  : 	glEnableVertexAttribArray(1);

  00100	8b f4		 mov	 esi, esp
  00102	6a 01		 push	 1
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 391  : 	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));

  00111	8b f4		 mov	 esi, esp
  00113	6a 18		 push	 24			; 00000018H
  00115	6a 20		 push	 32			; 00000020H
  00117	6a 00		 push	 0
  00119	68 06 14 00 00	 push	 5126			; 00001406H
  0011e	6a 03		 push	 3
  00120	6a 02		 push	 2
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  00128	3b f4		 cmp	 esi, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 392  : 	glEnableVertexAttribArray(2);

  0012f	8b f4		 mov	 esi, esp
  00131	6a 02		 push	 2
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 393  : 	//textures, player texture
; 394  : 	glActiveTexture(GL_TEXTURE0);

  00140	8b f4		 mov	 esi, esp
  00142	68 c0 84 00 00	 push	 33984			; 000084c0H
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glActiveTexture
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 395  : 	glGenTextures(3, texture);

  00154	8b f4		 mov	 esi, esp
  00156	68 00 00 00 00	 push	 OFFSET _texture
  0015b	6a 03		 push	 3
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenTextures
  00163	3b f4		 cmp	 esi, esp
  00165	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 396  : 	glBindTexture(GL_TEXTURE_2D, texture[0]);

  0016a	b8 04 00 00 00	 mov	 eax, 4
  0016f	6b c8 00	 imul	 ecx, eax, 0
  00172	8b f4		 mov	 esi, esp
  00174	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  0017a	52		 push	 edx
  0017b	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 397  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  0018d	8b f4		 mov	 esi, esp
  0018f	68 01 29 00 00	 push	 10497			; 00002901H
  00194	68 02 28 00 00	 push	 10242			; 00002802H
  00199	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001a4	3b f4		 cmp	 esi, esp
  001a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 398  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  001ab	8b f4		 mov	 esi, esp
  001ad	68 01 29 00 00	 push	 10497			; 00002901H
  001b2	68 03 28 00 00	 push	 10243			; 00002803H
  001b7	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 399  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  001c9	8b f4		 mov	 esi, esp
  001cb	68 01 26 00 00	 push	 9729			; 00002601H
  001d0	68 01 28 00 00	 push	 10241			; 00002801H
  001d5	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001e0	3b f4		 cmp	 esi, esp
  001e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 400  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  001e7	8b f4		 mov	 esi, esp
  001e9	68 01 26 00 00	 push	 9729			; 00002601H
  001ee	68 00 28 00 00	 push	 10240			; 00002800H
  001f3	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001fe	3b f4		 cmp	 esi, esp
  00200	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 401  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, tmp_surface->w, tmp_surface->h, 0, GL_RGBA, GL_UNSIGNED_BYTE, tmp_surface->pixels);

  00205	8b f4		 mov	 esi, esp
  00207	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0020a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0020d	51		 push	 ecx
  0020e	68 01 14 00 00	 push	 5121			; 00001401H
  00213	68 08 19 00 00	 push	 6408			; 00001908H
  00218	6a 00		 push	 0
  0021a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_surface$[ebp]
  0021d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00220	50		 push	 eax
  00221	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_surface$[ebp]
  00224	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00227	52		 push	 edx
  00228	68 08 19 00 00	 push	 6408			; 00001908H
  0022d	6a 00		 push	 0
  0022f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexImage2D
  0023a	3b f4		 cmp	 esi, esp
  0023c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 402  : 	SDL_FreeSurface(tmp_surface);

  00241	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00244	50		 push	 eax
  00245	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0024a	83 c4 04	 add	 esp, 4

; 403  : 	//first bacground
; 404  : 	tmp_surface = IMG_Load("background_1.png");

  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FJHLDCBO@background_1?4png@
  00252	e8 00 00 00 00	 call	 _IMG_Load
  00257	83 c4 04	 add	 esp, 4
  0025a	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 405  : 	glBindTexture(GL_TEXTURE_2D, texture[1]);

  0025d	b8 04 00 00 00	 mov	 eax, 4
  00262	c1 e0 00	 shl	 eax, 0
  00265	8b f4		 mov	 esi, esp
  00267	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  0026d	51		 push	 ecx
  0026e	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00273	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00279	3b f4		 cmp	 esi, esp
  0027b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 406  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  00280	8b f4		 mov	 esi, esp
  00282	68 01 29 00 00	 push	 10497			; 00002901H
  00287	68 02 28 00 00	 push	 10242			; 00002802H
  0028c	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00297	3b f4		 cmp	 esi, esp
  00299	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 407  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  0029e	8b f4		 mov	 esi, esp
  002a0	68 01 29 00 00	 push	 10497			; 00002901H
  002a5	68 03 28 00 00	 push	 10243			; 00002803H
  002aa	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002af	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002b5	3b f4		 cmp	 esi, esp
  002b7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 408  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  002bc	8b f4		 mov	 esi, esp
  002be	68 01 26 00 00	 push	 9729			; 00002601H
  002c3	68 01 28 00 00	 push	 10241			; 00002801H
  002c8	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002cd	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002d3	3b f4		 cmp	 esi, esp
  002d5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 409  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  002da	8b f4		 mov	 esi, esp
  002dc	68 01 26 00 00	 push	 9729			; 00002601H
  002e1	68 00 28 00 00	 push	 10240			; 00002800H
  002e6	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002eb	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002f1	3b f4		 cmp	 esi, esp
  002f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 410  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, tmp_surface->w, tmp_surface->h, 0, GL_RGB, GL_UNSIGNED_BYTE, tmp_surface->pixels);

  002f8	8b f4		 mov	 esi, esp
  002fa	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  002fd	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00300	51		 push	 ecx
  00301	68 01 14 00 00	 push	 5121			; 00001401H
  00306	68 07 19 00 00	 push	 6407			; 00001907H
  0030b	6a 00		 push	 0
  0030d	8b 55 f8	 mov	 edx, DWORD PTR _tmp_surface$[ebp]
  00310	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00313	50		 push	 eax
  00314	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_surface$[ebp]
  00317	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0031a	52		 push	 edx
  0031b	68 07 19 00 00	 push	 6407			; 00001907H
  00320	6a 00		 push	 0
  00322	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexImage2D
  0032d	3b f4		 cmp	 esi, esp
  0032f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 411  : 	SDL_FreeSurface(tmp_surface);

  00334	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00337	50		 push	 eax
  00338	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0033d	83 c4 04	 add	 esp, 4

; 412  : 	//for the test text on screen
; 413  : 	glBindTexture(GL_TEXTURE_2D, texture[2]);

  00340	b8 04 00 00 00	 mov	 eax, 4
  00345	d1 e0		 shl	 eax, 1
  00347	8b f4		 mov	 esi, esp
  00349	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  0034f	51		 push	 ecx
  00350	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0035b	3b f4		 cmp	 esi, esp
  0035d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 414  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  00362	8b f4		 mov	 esi, esp
  00364	68 01 29 00 00	 push	 10497			; 00002901H
  00369	68 02 28 00 00	 push	 10242			; 00002802H
  0036e	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00373	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00379	3b f4		 cmp	 esi, esp
  0037b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 415  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  00380	8b f4		 mov	 esi, esp
  00382	68 01 29 00 00	 push	 10497			; 00002901H
  00387	68 03 28 00 00	 push	 10243			; 00002803H
  0038c	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00391	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00397	3b f4		 cmp	 esi, esp
  00399	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 416  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  0039e	8b f4		 mov	 esi, esp
  003a0	68 01 26 00 00	 push	 9729			; 00002601H
  003a5	68 01 28 00 00	 push	 10241			; 00002801H
  003aa	68 e1 0d 00 00	 push	 3553			; 00000de1H
  003af	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  003b5	3b f4		 cmp	 esi, esp
  003b7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 417  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  003bc	8b f4		 mov	 esi, esp
  003be	68 01 26 00 00	 push	 9729			; 00002601H
  003c3	68 00 28 00 00	 push	 10240			; 00002800H
  003c8	68 e1 0d 00 00	 push	 3553			; 00000de1H
  003cd	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  003d3	3b f4		 cmp	 esi, esp
  003d5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 418  : 	CreateTexture2D(test_font_surface, GL_RGBA, true);

  003da	6a 01		 push	 1
  003dc	68 08 19 00 00	 push	 6408			; 00001908H
  003e1	a1 00 00 00 00	 mov	 eax, DWORD PTR _test_font_surface
  003e6	50		 push	 eax
  003e7	e8 00 00 00 00	 call	 _CreateTexture2D
  003ec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 419  : 	tmp_surface = IMG_Load("character_ic.png"); //for the program icon

  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@OGEDPOMN@character_ic?4png@
  003f4	e8 00 00 00 00	 call	 _IMG_Load
  003f9	83 c4 04	 add	 esp, 4
  003fc	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 420  : 	SDL_SetWindowIcon(window, tmp_surface);

  003ff	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00402	50		 push	 eax
  00403	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _window
  00409	51		 push	 ecx
  0040a	e8 00 00 00 00	 call	 _SDL_SetWindowIcon
  0040f	83 c4 08	 add	 esp, 8

; 421  : 	SDL_FreeSurface(tmp_surface);

  00412	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00415	50		 push	 eax
  00416	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0041b	83 c4 04	 add	 esp, 4

; 422  : 	tmp_surface = IMG_Load("cursor_f_open.png"); //for the mouse when left mouse button is not pressed

  0041e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@ENOFGPDN@cursor_f_open?4png@
  00423	e8 00 00 00 00	 call	 _IMG_Load
  00428	83 c4 04	 add	 esp, 4
  0042b	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 423  : 	mouse_opened  = SDL_CreateColorCursor(tmp_surface, 0, 0);

  0042e	6a 00		 push	 0
  00430	6a 00		 push	 0
  00432	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00435	50		 push	 eax
  00436	e8 00 00 00 00	 call	 _SDL_CreateColorCursor
  0043b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0043e	a3 00 00 00 00	 mov	 DWORD PTR _mouse_opened, eax

; 424  : 	SDL_FreeSurface(tmp_surface);

  00443	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00446	50		 push	 eax
  00447	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0044c	83 c4 04	 add	 esp, 4

; 425  : 	tmp_surface = IMG_Load("cursor_f_closed.png"); //for the mouse when left mouse button is pressed

  0044f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NBHOGJHM@cursor_f_closed?4png@
  00454	e8 00 00 00 00	 call	 _IMG_Load
  00459	83 c4 04	 add	 esp, 4
  0045c	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 426  : 	mouse_closed = SDL_CreateColorCursor(tmp_surface, 0, 0);

  0045f	6a 00		 push	 0
  00461	6a 00		 push	 0
  00463	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00466	50		 push	 eax
  00467	e8 00 00 00 00	 call	 _SDL_CreateColorCursor
  0046c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0046f	a3 00 00 00 00	 mov	 DWORD PTR _mouse_closed, eax

; 427  : 	SDL_FreeSurface(tmp_surface);

  00474	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00477	50		 push	 eax
  00478	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0047d	83 c4 04	 add	 esp, 4

; 428  : 
; 429  : }

  00480	5f		 pop	 edi
  00481	5e		 pop	 esi
  00482	5b		 pop	 ebx
  00483	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00489	3b ec		 cmp	 ebp, esp
  0048b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00490	8b e5		 mov	 esp, ebp
  00492	5d		 pop	 ebp
  00493	c3		 ret	 0
_Init_GL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _CreateTexture2D
_TEXT	SEGMENT
_tmp_surface$ = 8					; size = 4
_format$ = 12						; size = 4
_free_surface$ = 16					; size = 4
_CreateTexture2D PROC					; COMDAT

; 373  : void CreateTexture2D(SDL_Surface* tmp_surface, GLenum format, SDL_bool free_surface) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 374  : 	glTexImage2D(GL_TEXTURE_2D, 0, format, tmp_surface->w, tmp_surface->h, 0, format, GL_UNSIGNED_BYTE, tmp_surface->pixels);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0002d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00030	51		 push	 ecx
  00031	68 01 14 00 00	 push	 5121			; 00001401H
  00036	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  00039	52		 push	 edx
  0003a	6a 00		 push	 0
  0003c	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0003f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR _tmp_surface$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	50		 push	 eax
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  0004d	51		 push	 ecx
  0004e	6a 00		 push	 0
  00050	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexImage2D
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 375  : 	if (free_surface)

  00062	83 7d 10 00	 cmp	 DWORD PTR _free_surface$[ebp], 0
  00066	74 0c		 je	 SHORT $LN1@CreateText

; 376  : 		SDL_FreeSurface(tmp_surface);

  00068	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _SDL_FreeSurface
  00071	83 c4 04	 add	 esp, 4
$LN1@CreateText:

; 377  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_CreateTexture2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_List
_TEXT	SEGMENT
_tmp_float_p$1 = -32					; size = 4
_tmp_person_p$2 = -20					; size = 4
_i$3 = -8						; size = 4
_list$ = 8						; size = 4
_RENDER_List PROC					; COMDAT

; 308  : void RENDER_List(const linkedList* const list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 309  : 	glBindTexture(GL_TEXTURE_2D, texture[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b f4		 mov	 esi, esp
  00032	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  00038	52		 push	 edx
  00039	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 310  : 	glUseProgram(shader_texturedobj);

  0004b	8b f4		 mov	 esi, esp
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00052	50		 push	 eax
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 311  : 	for (int i = 0; i < list->count; ++i) {

  00060	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$3[ebp], 0
  00067	eb 09		 jmp	 SHORT $LN4@RENDER_Lis
$LN2@RENDER_Lis:
  00069	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  0006c	83 c0 01	 add	 eax, 1
  0006f	89 45 f8	 mov	 DWORD PTR _i$3[ebp], eax
$LN4@RENDER_Lis:
  00072	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _i$3[ebp]
  00078	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0007b	7d 4f		 jge	 SHORT $LN1@RENDER_Lis

; 312  : 		personMale* tmp_person_p = LIST_At(list, i);

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _i$3[ebp]
  00080	50		 push	 eax
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _LIST_At
  0008a	83 c4 08	 add	 esp, 8
  0008d	89 45 ec	 mov	 DWORD PTR _tmp_person_p$2[ebp], eax

; 313  : 		float* tmp_float_p = tmp_person_p->vertexes;

  00090	8b 45 ec	 mov	 eax, DWORD PTR _tmp_person_p$2[ebp]
  00093	89 45 e0	 mov	 DWORD PTR _tmp_float_p$1[ebp], eax

; 314  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_float_p);

  00096	8b f4		 mov	 esi, esp
  00098	8b 45 e0	 mov	 eax, DWORD PTR _tmp_float_p$1[ebp]
  0009b	50		 push	 eax
  0009c	68 80 00 00 00	 push	 128			; 00000080H
  000a1	6a 00		 push	 0
  000a3	68 92 88 00 00	 push	 34962			; 00008892H
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 315  : 		glDrawArrays(GL_QUADS, 0, 4);

  000b5	8b f4		 mov	 esi, esp
  000b7	6a 04		 push	 4
  000b9	6a 00		 push	 0
  000bb	6a 07		 push	 7
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  000c3	3b f4		 cmp	 esi, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 316  : 	}

  000ca	eb 9d		 jmp	 SHORT $LN2@RENDER_Lis
$LN1@RENDER_Lis:

; 317  : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000d5	3b ec		 cmp	 ebp, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
_RENDER_List ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _MoveShapeXY
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_number_of_vertexes$ = 16				; size = 4
_stride$ = 20						; size = 4
_vertex_data$ = 24					; size = 4
_MoveShapeXY PROC					; COMDAT

; 366  : void MoveShapeXY(float x, float y, int number_of_vertexes, int stride, float* vertex_data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 367  : 	for (int i = 0; i <= number_of_vertexes; ++i) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@MoveShapeX
$LN2@MoveShapeX:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@MoveShapeX:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0003d	3b 45 10	 cmp	 eax, DWORD PTR _number_of_vertexes$[ebp]
  00040	7f 4a		 jg	 SHORT $LN3@MoveShapeX

; 368  : 	    vertex_data[stride * i] += x;

  00042	8b 45 14	 mov	 eax, DWORD PTR _stride$[ebp]
  00045	0f af 45 f8	 imul	 eax, DWORD PTR _i$1[ebp]
  00049	8b 4d 18	 mov	 ecx, DWORD PTR _vertex_data$[ebp]
  0004c	f3 0f 10 04 81	 movss	 xmm0, DWORD PTR [ecx+eax*4]
  00051	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _x$[ebp]
  00056	8b 55 14	 mov	 edx, DWORD PTR _stride$[ebp]
  00059	0f af 55 f8	 imul	 edx, DWORD PTR _i$1[ebp]
  0005d	8b 45 18	 mov	 eax, DWORD PTR _vertex_data$[ebp]
  00060	f3 0f 11 04 90	 movss	 DWORD PTR [eax+edx*4], xmm0

; 369  : 		vertex_data[stride * i + 1] -= y;

  00065	8b 45 14	 mov	 eax, DWORD PTR _stride$[ebp]
  00068	0f af 45 f8	 imul	 eax, DWORD PTR _i$1[ebp]
  0006c	8b 4d 18	 mov	 ecx, DWORD PTR _vertex_data$[ebp]
  0006f	f3 0f 10 44 81
	04		 movss	 xmm0, DWORD PTR [ecx+eax*4+4]
  00075	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _y$[ebp]
  0007a	8b 55 14	 mov	 edx, DWORD PTR _stride$[ebp]
  0007d	0f af 55 f8	 imul	 edx, DWORD PTR _i$1[ebp]
  00081	8b 45 18	 mov	 eax, DWORD PTR _vertex_data$[ebp]
  00084	f3 0f 11 44 90
	04		 movss	 DWORD PTR [eax+edx*4+4], xmm0

; 370  : 	}

  0008a	eb a5		 jmp	 SHORT $LN2@MoveShapeX
$LN3@MoveShapeX:

; 371  : 
; 372  : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
_MoveShapeXY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _SetTextureBoundedParams
_TEXT	SEGMENT
_sampler_target$ = 8					; size = 4
_filter$ = 12						; size = 4
_repeat_type$ = 16					; size = 4
_SetTextureBoundedParams PROC				; COMDAT

; 360  : void SetTextureBoundedParams(GLenum sampler_target, GLenum filter, GLfloat repeat_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 361  : 	glTexParameteri(sampler_target, GL_TEXTURE_WRAP_S, repeat_type);

  00028	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _repeat_type$[ebp]
  0002d	8b f4		 mov	 esi, esp
  0002f	50		 push	 eax
  00030	68 02 28 00 00	 push	 10242			; 00002802H
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 362  : 	glTexParameteri(sampler_target, GL_TEXTURE_WRAP_T, repeat_type);

  00046	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _repeat_type$[ebp]
  0004b	8b f4		 mov	 esi, esp
  0004d	50		 push	 eax
  0004e	68 03 28 00 00	 push	 10243			; 00002803H
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00056	51		 push	 ecx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 363  : 	glTexParameteri(sampler_target, GL_TEXTURE_MIN_FILTER, filter);

  00064	8b f4		 mov	 esi, esp
  00066	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  00069	50		 push	 eax
  0006a	68 01 28 00 00	 push	 10241			; 00002801H
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00072	51		 push	 ecx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 364  : 	glTexParameteri(sampler_target, GL_TEXTURE_MAG_FILTER, filter);

  00080	8b f4		 mov	 esi, esp
  00082	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  00085	50		 push	 eax
  00086	68 00 28 00 00	 push	 10240			; 00002800H
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  0008e	51		 push	 ecx
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 365  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_SetTextureBoundedParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _CompileShader
_TEXT	SEGMENT
_i$1 = -72						; size = 4
_fp$2 = -60						; size = 4
_linebreak_amount$ = -48				; size = 4
_size$ = -36						; size = 4
_shader_obj$ = -24					; size = 4
_shader_data$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_shader_fname$ = 8					; size = 4
_type$ = 12						; size = 4
_CompileShader PROC					; COMDAT

; 278  : GLint CompileShader(char* shader_fname, GLenum type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00012	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 279  : 	char* shader_data;
; 280  : 	GLint shader_obj;
; 281  : 	size_t size;
; 282  : 	int linebreak_amount = 0;

  00032	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _linebreak_amount$[ebp], 0

; 283  : 	{
; 284  : 		FILE* fp; 
; 285  : 		fp = fopen(shader_fname, "r");

  00039	8b f4		 mov	 esi, esp
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00040	8b 45 08	 mov	 eax, DWORD PTR _shader_fname$[ebp]
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	89 45 c4	 mov	 DWORD PTR _fp$2[ebp], eax

; 286  : 		fseek(fp, SEEK_SET, SEEK_END);

  00057	8b f4		 mov	 esi, esp
  00059	6a 02		 push	 2
  0005b	6a 00		 push	 0
  0005d	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 287  : 		size = ftell(fp);

  00071	8b f4		 mov	 esi, esp
  00073	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00076	50		 push	 eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ftell
  0007d	83 c4 04	 add	 esp, 4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	89 45 dc	 mov	 DWORD PTR _size$[ebp], eax

; 288  : 		fseek(fp, SEEK_SET, SEEK_SET);

  0008a	8b f4		 mov	 esi, esp
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00093	50		 push	 eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 289  : 		shader_data = calloc(1, size);

  000a4	8b f4		 mov	 esi, esp
  000a6	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  000a9	50		 push	 eax
  000aa	6a 01		 push	 1
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  000b2	83 c4 08	 add	 esp, 8
  000b5	3b f4		 cmp	 esi, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	89 45 f4	 mov	 DWORD PTR _shader_data$[ebp], eax

; 290  : 		fread(shader_data, 1, size, fp);

  000bf	8b f4		 mov	 esi, esp
  000c1	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  000c8	51		 push	 ecx
  000c9	6a 01		 push	 1
  000cb	8b 55 f4	 mov	 edx, DWORD PTR _shader_data$[ebp]
  000ce	52		 push	 edx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000d5	83 c4 10	 add	 esp, 16			; 00000010H
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 291  : 		fclose(fp);

  000df	8b f4		 mov	 esi, esp
  000e1	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000eb	83 c4 04	 add	 esp, 4
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 292  : 		for (int i = 0; i < size; ++i) {

  000f5	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000fc	eb 09		 jmp	 SHORT $LN4@CompileSha
$LN2@CompileSha:
  000fe	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 45 b8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@CompileSha:
  00107	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  0010a	3b 45 dc	 cmp	 eax, DWORD PTR _size$[ebp]
  0010d	73 19		 jae	 SHORT $LN3@CompileSha

; 293  : 			if (shader_data[i] == '\n') {

  0010f	8b 45 f4	 mov	 eax, DWORD PTR _shader_data$[ebp]
  00112	03 45 b8	 add	 eax, DWORD PTR _i$1[ebp]
  00115	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00118	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0011b	75 09		 jne	 SHORT $LN5@CompileSha

; 294  : 				++linebreak_amount;

  0011d	8b 45 d0	 mov	 eax, DWORD PTR _linebreak_amount$[ebp]
  00120	83 c0 01	 add	 eax, 1
  00123	89 45 d0	 mov	 DWORD PTR _linebreak_amount$[ebp], eax
$LN5@CompileSha:

; 295  : 			}
; 296  : 		}

  00126	eb d6		 jmp	 SHORT $LN2@CompileSha
$LN3@CompileSha:

; 297  : 		shader_data[size - linebreak_amount] = '\0';

  00128	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  0012b	2b 45 d0	 sub	 eax, DWORD PTR _linebreak_amount$[ebp]
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR _shader_data$[ebp]
  00131	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 298  : 		//printf("%s", shader_data);
; 299  : 		//printf("%d", size);
; 300  : 		//for debugging
; 301  : 	}
; 302  : 	shader_obj = glCreateShader(type);

  00135	8b f4		 mov	 esi, esp
  00137	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0013a	50		 push	 eax
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateShader
  00141	3b f4		 cmp	 esi, esp
  00143	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00148	89 45 e8	 mov	 DWORD PTR _shader_obj$[ebp], eax

; 303  : 	glShaderSource(shader_obj, 1, &shader_data, NULL);

  0014b	8b f4		 mov	 esi, esp
  0014d	6a 00		 push	 0
  0014f	8d 45 f4	 lea	 eax, DWORD PTR _shader_data$[ebp]
  00152	50		 push	 eax
  00153	6a 01		 push	 1
  00155	8b 4d e8	 mov	 ecx, DWORD PTR _shader_obj$[ebp]
  00158	51		 push	 ecx
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glShaderSource
  0015f	3b f4		 cmp	 esi, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 304  : 	glCompileShader(shader_obj);

  00166	8b f4		 mov	 esi, esp
  00168	8b 45 e8	 mov	 eax, DWORD PTR _shader_obj$[ebp]
  0016b	50		 push	 eax
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCompileShader
  00172	3b f4		 cmp	 esi, esp
  00174	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 305  : 	free(shader_data);

  00179	8b f4		 mov	 esi, esp
  0017b	8b 45 f4	 mov	 eax, DWORD PTR _shader_data$[ebp]
  0017e	50		 push	 eax
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00185	83 c4 04	 add	 esp, 4
  00188	3b f4		 cmp	 esi, esp
  0018a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 306  : 	return shader_obj;

  0018f	8b 45 e8	 mov	 eax, DWORD PTR _shader_obj$[ebp]

; 307  : }

  00192	52		 push	 edx
  00193	8b cd		 mov	 ecx, ebp
  00195	50		 push	 eax
  00196	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@CompileSha
  0019c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001a1	58		 pop	 eax
  001a2	5a		 pop	 edx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	33 cd		 xor	 ecx, ebp
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  001b6	3b ec		 cmp	 ebp, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
  001c1	0f 1f 00	 npad	 3
$LN9@CompileSha:
  001c4	01 00 00 00	 DD	 1
  001c8	00 00 00 00	 DD	 $LN8@CompileSha
$LN8@CompileSha:
  001cc	f4 ff ff ff	 DD	 -12			; fffffff4H
  001d0	04 00 00 00	 DD	 4
  001d4	00 00 00 00	 DD	 $LN7@CompileSha
$LN7@CompileSha:
  001d8	73		 DB	 115			; 00000073H
  001d9	68		 DB	 104			; 00000068H
  001da	61		 DB	 97			; 00000061H
  001db	64		 DB	 100			; 00000064H
  001dc	65		 DB	 101			; 00000065H
  001dd	72		 DB	 114			; 00000072H
  001de	5f		 DB	 95			; 0000005fH
  001df	64		 DB	 100			; 00000064H
  001e0	61		 DB	 97			; 00000061H
  001e1	74		 DB	 116			; 00000074H
  001e2	61		 DB	 97			; 00000061H
  001e3	00		 DB	 0
_CompileShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_Quad
_TEXT	SEGMENT
_tmp_vertexes$ = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 16
_r$ = 24						; size = 4
_g$ = 28						; size = 4
_b$ = 32						; size = 4
_RENDER_Quad PROC					; COMDAT

; 353  : void RENDER_Quad(quad target, float r, float g, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 84 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-380]
  00012	b9 5f 00 00 00	 mov	 ecx, 95			; 0000005fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 354  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 355  : 	float tmp_vertexes[32] = { x,y,0,r,g,b,0,0, x + w,y,0,r,g,b,1,0, x + w,y - h,0,r,g,b,1,1, x,y - h,0,r,g,b,0,1 };

  0005a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0005f	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp], xmm0
  00067	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0006c	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+4], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+8], xmm0
  0007f	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  00084	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+12], xmm0
  0008c	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00091	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+16], xmm0
  00099	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  0009e	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+20], xmm0
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+24], xmm0
  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+28], xmm0
  000bc	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000c1	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  000c6	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+32], xmm0
  000ce	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d3	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+36], xmm0
  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+40], xmm0
  000e6	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  000eb	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+44], xmm0
  000f3	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  000f8	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+48], xmm0
  00100	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  00105	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+52], xmm0
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00115	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$[ebp+56], xmm0
  0011a	0f 57 c0	 xorps	 xmm0, xmm0
  0011d	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$[ebp+60], xmm0
  00122	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00127	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0012c	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$[ebp+64], xmm0
  00131	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00136	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0013b	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$[ebp+68], xmm0
  00140	0f 57 c0	 xorps	 xmm0, xmm0
  00143	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$[ebp+72], xmm0
  00148	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  0014d	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$[ebp+76], xmm0
  00152	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00157	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$[ebp+80], xmm0
  0015c	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  00161	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$[ebp+84], xmm0
  00166	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016e	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$[ebp+88], xmm0
  00173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0017b	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$[ebp+92], xmm0
  00180	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00185	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$[ebp+96], xmm0
  0018a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0018f	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00194	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$[ebp+100], xmm0
  00199	0f 57 c0	 xorps	 xmm0, xmm0
  0019c	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$[ebp+104], xmm0
  001a1	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  001a6	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$[ebp+108], xmm0
  001ab	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  001b0	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$[ebp+112], xmm0
  001b5	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  001ba	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$[ebp+116], xmm0
  001bf	0f 57 c0	 xorps	 xmm0, xmm0
  001c2	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$[ebp+120], xmm0
  001c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cf	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$[ebp+124], xmm0

; 356  : 	glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001d4	8b f4		 mov	 esi, esp
  001d6	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$[ebp]
  001dc	50		 push	 eax
  001dd	68 80 00 00 00	 push	 128			; 00000080H
  001e2	6a 00		 push	 0
  001e4	68 92 88 00 00	 push	 34962			; 00008892H
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  001ef	3b f4		 cmp	 esi, esp
  001f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 357  : 	glUseProgram(shader_colored);

  001f6	8b f4		 mov	 esi, esp
  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  001fd	50		 push	 eax
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 358  : 	glDrawArrays(GL_QUADS, 0, 4);

  0020b	8b f4		 mov	 esi, esp
  0020d	6a 04		 push	 4
  0020f	6a 00		 push	 0
  00211	6a 07		 push	 7
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00219	3b f4		 cmp	 esi, esp
  0021b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 359  : }

  00220	52		 push	 edx
  00221	8b cd		 mov	 ecx, ebp
  00223	50		 push	 eax
  00224	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@RENDER_Qua
  0022a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0022f	58		 pop	 eax
  00230	5a		 pop	 edx
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	5b		 pop	 ebx
  00234	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00237	33 cd		 xor	 ecx, ebp
  00239	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023e	81 c4 7c 01 00
	00		 add	 esp, 380		; 0000017cH
  00244	3b ec		 cmp	 ebp, esp
  00246	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
  0024f	90		 npad	 1
$LN5@RENDER_Qua:
  00250	01 00 00 00	 DD	 1
  00254	00 00 00 00	 DD	 $LN4@RENDER_Qua
$LN4@RENDER_Qua:
  00258	48 ff ff ff	 DD	 -184			; ffffff48H
  0025c	80 00 00 00	 DD	 128			; 00000080H
  00260	00 00 00 00	 DD	 $LN3@RENDER_Qua
$LN3@RENDER_Qua:
  00264	74		 DB	 116			; 00000074H
  00265	6d		 DB	 109			; 0000006dH
  00266	70		 DB	 112			; 00000070H
  00267	5f		 DB	 95			; 0000005fH
  00268	76		 DB	 118			; 00000076H
  00269	65		 DB	 101			; 00000065H
  0026a	72		 DB	 114			; 00000072H
  0026b	74		 DB	 116			; 00000074H
  0026c	65		 DB	 101			; 00000065H
  0026d	78		 DB	 120			; 00000078H
  0026e	65		 DB	 101			; 00000065H
  0026f	73		 DB	 115			; 00000073H
  00270	00		 DB	 0
_RENDER_Quad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_TexturedQuadSheet
_TEXT	SEGMENT
_tmp_vertexes$1 = -320					; size = 128
_tmp_vertexes$2 = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 20
_source_rect$ = 28					; size = 16
_r$ = 44						; size = 4
_g$ = 48						; size = 4
_b$ = 52						; size = 4
_reverse_rendering$ = 56				; size = 4
_RENDER_TexturedQuadSheet PROC				; COMDAT

; 335  : void RENDER_TexturedQuadSheet(text_quad target, quad source_rect, float r, float g, float b, SDL_bool reverse_rendering) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-516]
  00012	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 336  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 337  : 	if (reverse_rendering) {

  0005a	83 7d 38 00	 cmp	 DWORD PTR _reverse_rendering$[ebp], 0
  0005e	0f 84 f3 01 00
	00		 je	 $LN2@RENDER_Tex

; 338  : 		float tmp_vertexes[32] = { x + w,y,0,r,g,b,source_rect.x,source_rect.y, x,y,0,r,g,b,source_rect.x + source_rect.w,source_rect.y, x,y - h,0,r,g,b,source_rect.x + source_rect.w,source_rect.y + source_rect.h, x + w,y - h,0,r,g,b,source_rect.x,source_rect.y + source_rect.h };

  00064	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0006e	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp], xmm0
  00076	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0007b	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+4], xmm0
  00083	0f 57 c0	 xorps	 xmm0, xmm0
  00086	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+8], xmm0
  0008e	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _r$[ebp]
  00093	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+12], xmm0
  0009b	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _g$[ebp]
  000a0	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+16], xmm0
  000a8	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _b$[ebp]
  000ad	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+20], xmm0
  000b5	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  000ba	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+24], xmm0
  000c2	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  000c7	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+28], xmm0
  000cf	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000d4	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+32], xmm0
  000dc	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000e1	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+36], xmm0
  000e9	0f 57 c0	 xorps	 xmm0, xmm0
  000ec	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+40], xmm0
  000f4	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _r$[ebp]
  000f9	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+44], xmm0
  00101	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _g$[ebp]
  00106	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+48], xmm0
  0010e	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _b$[ebp]
  00113	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+52], xmm0
  0011b	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  00120	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _source_rect$[ebp+8]
  00125	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$2[ebp+56], xmm0
  0012a	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  0012f	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$2[ebp+60], xmm0
  00134	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00139	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$2[ebp+64], xmm0
  0013e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00143	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00148	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+68], xmm0
  0014d	0f 57 c0	 xorps	 xmm0, xmm0
  00150	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$2[ebp+72], xmm0
  00155	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _r$[ebp]
  0015a	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$2[ebp+76], xmm0
  0015f	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _g$[ebp]
  00164	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$2[ebp+80], xmm0
  00169	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _b$[ebp]
  0016e	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+84], xmm0
  00173	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  00178	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _source_rect$[ebp+8]
  0017d	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+88], xmm0
  00182	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  00187	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _source_rect$[ebp+12]
  0018c	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+92], xmm0
  00191	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00196	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0019b	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+96], xmm0
  001a0	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  001a5	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  001aa	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$2[ebp+100], xmm0
  001af	0f 57 c0	 xorps	 xmm0, xmm0
  001b2	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+104], xmm0
  001b7	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _r$[ebp]
  001bc	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+108], xmm0
  001c1	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _g$[ebp]
  001c6	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+112], xmm0
  001cb	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _b$[ebp]
  001d0	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$2[ebp+116], xmm0
  001d5	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  001da	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+120], xmm0
  001df	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  001e4	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _source_rect$[ebp+12]
  001e9	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+124], xmm0

; 339  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001ee	8b f4		 mov	 esi, esp
  001f0	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$2[ebp]
  001f6	50		 push	 eax
  001f7	68 80 00 00 00	 push	 128			; 00000080H
  001fc	6a 00		 push	 0
  001fe	68 92 88 00 00	 push	 34962			; 00008892H
  00203	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00209	3b f4		 cmp	 esi, esp
  0020b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 340  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00210	8b f4		 mov	 esi, esp
  00212	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  00215	50		 push	 eax
  00216	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0021b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00221	3b f4		 cmp	 esi, esp
  00223	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 341  : 		glUseProgram(shader_texturedobj);

  00228	8b f4		 mov	 esi, esp
  0022a	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0022f	50		 push	 eax
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00236	3b f4		 cmp	 esi, esp
  00238	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 342  : 		glDrawArrays(GL_QUADS, 0, 4);

  0023d	8b f4		 mov	 esi, esp
  0023f	6a 04		 push	 4
  00241	6a 00		 push	 0
  00243	6a 07		 push	 7
  00245	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  0024b	3b f4		 cmp	 esi, esp
  0024d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 	}

  00252	e9 24 02 00 00	 jmp	 $LN3@RENDER_Tex
$LN2@RENDER_Tex:

; 344  : 	else {
; 345  : 		//this is so unreadable, definitly clean this up later
; 346  : 		float tmp_vertexes[32] = { x,y,0,r,g,b,source_rect.x,source_rect.y, x + w,y,0,r,g,b,source_rect.x + source_rect.w,source_rect.y, x + w,y - h,0,r,g,b,source_rect.x + source_rect.w,source_rect.y + source_rect.h, x,y - h,0,r,g,b,source_rect.x,source_rect.y + source_rect.h };

  00257	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0025c	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp], xmm0
  00264	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00269	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+4], xmm0
  00271	0f 57 c0	 xorps	 xmm0, xmm0
  00274	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+8], xmm0
  0027c	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _r$[ebp]
  00281	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+12], xmm0
  00289	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _g$[ebp]
  0028e	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+16], xmm0
  00296	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _b$[ebp]
  0029b	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+20], xmm0
  002a3	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  002a8	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+24], xmm0
  002b0	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  002b5	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+28], xmm0
  002bd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  002c2	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  002c7	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+32], xmm0
  002cf	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  002d4	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+36], xmm0
  002dc	0f 57 c0	 xorps	 xmm0, xmm0
  002df	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+40], xmm0
  002e7	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _r$[ebp]
  002ec	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+44], xmm0
  002f4	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _g$[ebp]
  002f9	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+48], xmm0
  00301	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _b$[ebp]
  00306	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+52], xmm0
  0030e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  00313	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _source_rect$[ebp+8]
  00318	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+56], xmm0
  00320	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  00325	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+60], xmm0
  0032d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00332	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  00337	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+64], xmm0
  0033f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00344	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00349	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+68], xmm0
  00351	0f 57 c0	 xorps	 xmm0, xmm0
  00354	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+72], xmm0
  0035c	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _r$[ebp]
  00361	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+76], xmm0
  00369	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _g$[ebp]
  0036e	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+80], xmm0
  00376	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _b$[ebp]
  0037b	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+84], xmm0
  00383	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  00388	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _source_rect$[ebp+8]
  0038d	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+88], xmm0
  00395	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  0039a	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _source_rect$[ebp+12]
  0039f	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+92], xmm0
  003a7	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  003ac	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+96], xmm0
  003b4	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  003b9	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  003be	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+100], xmm0
  003c6	0f 57 c0	 xorps	 xmm0, xmm0
  003c9	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+104], xmm0
  003d1	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _r$[ebp]
  003d6	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+108], xmm0
  003de	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _g$[ebp]
  003e3	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+112], xmm0
  003eb	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _b$[ebp]
  003f0	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+116], xmm0
  003f8	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  003fd	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+120], xmm0
  00405	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  0040a	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _source_rect$[ebp+12]
  0040f	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+124], xmm0

; 347  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  00417	8b f4		 mov	 esi, esp
  00419	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$1[ebp]
  0041f	50		 push	 eax
  00420	68 80 00 00 00	 push	 128			; 00000080H
  00425	6a 00		 push	 0
  00427	68 92 88 00 00	 push	 34962			; 00008892H
  0042c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00432	3b f4		 cmp	 esi, esp
  00434	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 348  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00439	8b f4		 mov	 esi, esp
  0043b	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  0043e	50		 push	 eax
  0043f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00444	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0044a	3b f4		 cmp	 esi, esp
  0044c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 349  : 		glUseProgram(shader_texturedobj);

  00451	8b f4		 mov	 esi, esp
  00453	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00458	50		 push	 eax
  00459	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  0045f	3b f4		 cmp	 esi, esp
  00461	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 350  : 		glDrawArrays(GL_QUADS, 0, 4);

  00466	8b f4		 mov	 esi, esp
  00468	6a 04		 push	 4
  0046a	6a 00		 push	 0
  0046c	6a 07		 push	 7
  0046e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00474	3b f4		 cmp	 esi, esp
  00476	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@RENDER_Tex:

; 351  : 	}
; 352  : }

  0047b	52		 push	 edx
  0047c	8b cd		 mov	 ecx, ebp
  0047e	50		 push	 eax
  0047f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RENDER_Tex
  00485	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0048a	58		 pop	 eax
  0048b	5a		 pop	 edx
  0048c	5f		 pop	 edi
  0048d	5e		 pop	 esi
  0048e	5b		 pop	 ebx
  0048f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00492	33 cd		 xor	 ecx, ebp
  00494	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00499	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  0049f	3b ec		 cmp	 ebp, esp
  004a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004a6	8b e5		 mov	 esp, ebp
  004a8	5d		 pop	 ebp
  004a9	c3		 ret	 0
  004aa	66 90		 npad	 2
$LN8@RENDER_Tex:
  004ac	02 00 00 00	 DD	 2
  004b0	00 00 00 00	 DD	 $LN7@RENDER_Tex
$LN7@RENDER_Tex:
  004b4	48 ff ff ff	 DD	 -184			; ffffff48H
  004b8	80 00 00 00	 DD	 128			; 00000080H
  004bc	00 00 00 00	 DD	 $LN5@RENDER_Tex
  004c0	c0 fe ff ff	 DD	 -320			; fffffec0H
  004c4	80 00 00 00	 DD	 128			; 00000080H
  004c8	00 00 00 00	 DD	 $LN6@RENDER_Tex
$LN6@RENDER_Tex:
  004cc	74		 DB	 116			; 00000074H
  004cd	6d		 DB	 109			; 0000006dH
  004ce	70		 DB	 112			; 00000070H
  004cf	5f		 DB	 95			; 0000005fH
  004d0	76		 DB	 118			; 00000076H
  004d1	65		 DB	 101			; 00000065H
  004d2	72		 DB	 114			; 00000072H
  004d3	74		 DB	 116			; 00000074H
  004d4	65		 DB	 101			; 00000065H
  004d5	78		 DB	 120			; 00000078H
  004d6	65		 DB	 101			; 00000065H
  004d7	73		 DB	 115			; 00000073H
  004d8	00		 DB	 0
$LN5@RENDER_Tex:
  004d9	74		 DB	 116			; 00000074H
  004da	6d		 DB	 109			; 0000006dH
  004db	70		 DB	 112			; 00000070H
  004dc	5f		 DB	 95			; 0000005fH
  004dd	76		 DB	 118			; 00000076H
  004de	65		 DB	 101			; 00000065H
  004df	72		 DB	 114			; 00000072H
  004e0	74		 DB	 116			; 00000074H
  004e1	65		 DB	 101			; 00000065H
  004e2	78		 DB	 120			; 00000078H
  004e3	65		 DB	 101			; 00000065H
  004e4	73		 DB	 115			; 00000073H
  004e5	00		 DB	 0
_RENDER_TexturedQuadSheet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_TexturedQuad
_TEXT	SEGMENT
_tmp_vertexes$1 = -320					; size = 128
_tmp_vertexes$2 = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 20
_r$ = 28						; size = 4
_g$ = 32						; size = 4
_b$ = 36						; size = 4
_reverse_rendering$ = 40				; size = 4
_RENDER_TexturedQuad PROC				; COMDAT

; 318  : void RENDER_TexturedQuad(text_quad target, float r, float g, float b, SDL_bool reverse_rendering) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-516]
  00012	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 319  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 320  : 	if (reverse_rendering) {

  0005a	83 7d 28 00	 cmp	 DWORD PTR _reverse_rendering$[ebp], 0
  0005e	0f 84 e3 01 00
	00		 je	 $LN2@RENDER_Tex

; 321  : 		float tmp_vertexes[32] = { x+w,y,0,r,g,b,0,0, x,y,0,r,g,b,1,0, x,y - h,0,r,g,b,1,1, x + w,y - h,0,r,g,b,0,1 };

  00064	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0006e	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp], xmm0
  00076	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0007b	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+4], xmm0
  00083	0f 57 c0	 xorps	 xmm0, xmm0
  00086	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+8], xmm0
  0008e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _r$[ebp]
  00093	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+12], xmm0
  0009b	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _g$[ebp]
  000a0	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+16], xmm0
  000a8	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _b$[ebp]
  000ad	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+20], xmm0
  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+24], xmm0
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+28], xmm0
  000cb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000d0	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+32], xmm0
  000d8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000dd	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+36], xmm0
  000e5	0f 57 c0	 xorps	 xmm0, xmm0
  000e8	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+40], xmm0
  000f0	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _r$[ebp]
  000f5	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+44], xmm0
  000fd	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _g$[ebp]
  00102	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+48], xmm0
  0010a	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _b$[ebp]
  0010f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+52], xmm0
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011f	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$2[ebp+56], xmm0
  00124	0f 57 c0	 xorps	 xmm0, xmm0
  00127	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$2[ebp+60], xmm0
  0012c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00131	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$2[ebp+64], xmm0
  00136	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0013b	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00140	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+68], xmm0
  00145	0f 57 c0	 xorps	 xmm0, xmm0
  00148	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$2[ebp+72], xmm0
  0014d	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _r$[ebp]
  00152	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$2[ebp+76], xmm0
  00157	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _g$[ebp]
  0015c	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$2[ebp+80], xmm0
  00161	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _b$[ebp]
  00166	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+84], xmm0
  0016b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00173	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+88], xmm0
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00180	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+92], xmm0
  00185	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0018a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0018f	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+96], xmm0
  00194	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00199	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0019e	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$2[ebp+100], xmm0
  001a3	0f 57 c0	 xorps	 xmm0, xmm0
  001a6	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+104], xmm0
  001ab	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _r$[ebp]
  001b0	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+108], xmm0
  001b5	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _g$[ebp]
  001ba	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+112], xmm0
  001bf	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _b$[ebp]
  001c4	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$2[ebp+116], xmm0
  001c9	0f 57 c0	 xorps	 xmm0, xmm0
  001cc	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+120], xmm0
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001d9	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+124], xmm0

; 322  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001de	8b f4		 mov	 esi, esp
  001e0	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$2[ebp]
  001e6	50		 push	 eax
  001e7	68 80 00 00 00	 push	 128			; 00000080H
  001ec	6a 00		 push	 0
  001ee	68 92 88 00 00	 push	 34962			; 00008892H
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  001f9	3b f4		 cmp	 esi, esp
  001fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 323  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00200	8b f4		 mov	 esi, esp
  00202	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  00205	50		 push	 eax
  00206	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00211	3b f4		 cmp	 esi, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 324  : 		glUseProgram(shader_texturedobj);

  00218	8b f4		 mov	 esi, esp
  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0021f	50		 push	 eax
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 325  : 		glDrawArrays(GL_QUADS, 0, 4);

  0022d	8b f4		 mov	 esi, esp
  0022f	6a 04		 push	 4
  00231	6a 00		 push	 0
  00233	6a 07		 push	 7
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  0023b	3b f4		 cmp	 esi, esp
  0023d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 326  : 	}

  00242	e9 14 02 00 00	 jmp	 $LN3@RENDER_Tex
$LN2@RENDER_Tex:

; 327  : 	else {
; 328  : 		float tmp_vertexes[32] = { x,y,0,r,g,b,0,0, x + w,y,0,r,g,b,1,0, x + w,y - h,0,r,g,b,1,1, x,y - h,0,r,g,b,0,1 };

  00247	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0024c	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp], xmm0
  00254	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00259	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+4], xmm0
  00261	0f 57 c0	 xorps	 xmm0, xmm0
  00264	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+8], xmm0
  0026c	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _r$[ebp]
  00271	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+12], xmm0
  00279	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _g$[ebp]
  0027e	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+16], xmm0
  00286	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _b$[ebp]
  0028b	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+20], xmm0
  00293	0f 57 c0	 xorps	 xmm0, xmm0
  00296	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+24], xmm0
  0029e	0f 57 c0	 xorps	 xmm0, xmm0
  002a1	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+28], xmm0
  002a9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  002ae	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  002b3	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+32], xmm0
  002bb	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  002c0	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+36], xmm0
  002c8	0f 57 c0	 xorps	 xmm0, xmm0
  002cb	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+40], xmm0
  002d3	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _r$[ebp]
  002d8	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+44], xmm0
  002e0	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _g$[ebp]
  002e5	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+48], xmm0
  002ed	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _b$[ebp]
  002f2	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+52], xmm0
  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00302	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+56], xmm0
  0030a	0f 57 c0	 xorps	 xmm0, xmm0
  0030d	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+60], xmm0
  00315	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0031a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0031f	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+64], xmm0
  00327	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0032c	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00331	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+68], xmm0
  00339	0f 57 c0	 xorps	 xmm0, xmm0
  0033c	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+72], xmm0
  00344	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _r$[ebp]
  00349	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+76], xmm0
  00351	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _g$[ebp]
  00356	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+80], xmm0
  0035e	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _b$[ebp]
  00363	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+84], xmm0
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00373	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+88], xmm0
  0037b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00383	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+92], xmm0
  0038b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00390	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+96], xmm0
  00398	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0039d	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  003a2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+100], xmm0
  003aa	0f 57 c0	 xorps	 xmm0, xmm0
  003ad	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+104], xmm0
  003b5	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _r$[ebp]
  003ba	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+108], xmm0
  003c2	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _g$[ebp]
  003c7	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+112], xmm0
  003cf	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _b$[ebp]
  003d4	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+116], xmm0
  003dc	0f 57 c0	 xorps	 xmm0, xmm0
  003df	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+120], xmm0
  003e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ef	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+124], xmm0

; 329  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  003f7	8b f4		 mov	 esi, esp
  003f9	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$1[ebp]
  003ff	50		 push	 eax
  00400	68 80 00 00 00	 push	 128			; 00000080H
  00405	6a 00		 push	 0
  00407	68 92 88 00 00	 push	 34962			; 00008892H
  0040c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00412	3b f4		 cmp	 esi, esp
  00414	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 330  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00419	8b f4		 mov	 esi, esp
  0041b	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  0041e	50		 push	 eax
  0041f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00424	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0042a	3b f4		 cmp	 esi, esp
  0042c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 331  : 		glUseProgram(shader_texturedobj);

  00431	8b f4		 mov	 esi, esp
  00433	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00438	50		 push	 eax
  00439	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  0043f	3b f4		 cmp	 esi, esp
  00441	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 332  : 		glDrawArrays(GL_QUADS, 0, 4);

  00446	8b f4		 mov	 esi, esp
  00448	6a 04		 push	 4
  0044a	6a 00		 push	 0
  0044c	6a 07		 push	 7
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00454	3b f4		 cmp	 esi, esp
  00456	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@RENDER_Tex:

; 333  : 	}
; 334  : }

  0045b	52		 push	 edx
  0045c	8b cd		 mov	 ecx, ebp
  0045e	50		 push	 eax
  0045f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RENDER_Tex
  00465	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0046a	58		 pop	 eax
  0046b	5a		 pop	 edx
  0046c	5f		 pop	 edi
  0046d	5e		 pop	 esi
  0046e	5b		 pop	 ebx
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00472	33 cd		 xor	 ecx, ebp
  00474	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00479	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  0047f	3b ec		 cmp	 ebp, esp
  00481	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00486	8b e5		 mov	 esp, ebp
  00488	5d		 pop	 ebp
  00489	c3		 ret	 0
  0048a	66 90		 npad	 2
$LN8@RENDER_Tex:
  0048c	02 00 00 00	 DD	 2
  00490	00 00 00 00	 DD	 $LN7@RENDER_Tex
$LN7@RENDER_Tex:
  00494	48 ff ff ff	 DD	 -184			; ffffff48H
  00498	80 00 00 00	 DD	 128			; 00000080H
  0049c	00 00 00 00	 DD	 $LN5@RENDER_Tex
  004a0	c0 fe ff ff	 DD	 -320			; fffffec0H
  004a4	80 00 00 00	 DD	 128			; 00000080H
  004a8	00 00 00 00	 DD	 $LN6@RENDER_Tex
$LN6@RENDER_Tex:
  004ac	74		 DB	 116			; 00000074H
  004ad	6d		 DB	 109			; 0000006dH
  004ae	70		 DB	 112			; 00000070H
  004af	5f		 DB	 95			; 0000005fH
  004b0	76		 DB	 118			; 00000076H
  004b1	65		 DB	 101			; 00000065H
  004b2	72		 DB	 114			; 00000072H
  004b3	74		 DB	 116			; 00000074H
  004b4	65		 DB	 101			; 00000065H
  004b5	78		 DB	 120			; 00000078H
  004b6	65		 DB	 101			; 00000065H
  004b7	73		 DB	 115			; 00000073H
  004b8	00		 DB	 0
$LN5@RENDER_Tex:
  004b9	74		 DB	 116			; 00000074H
  004ba	6d		 DB	 109			; 0000006dH
  004bb	70		 DB	 112			; 00000070H
  004bc	5f		 DB	 95			; 0000005fH
  004bd	76		 DB	 118			; 00000076H
  004be	65		 DB	 101			; 00000065H
  004bf	72		 DB	 114			; 00000072H
  004c0	74		 DB	 116			; 00000074H
  004c1	65		 DB	 101			; 00000065H
  004c2	78		 DB	 120			; 00000078H
  004c3	65		 DB	 101			; 00000065H
  004c4	73		 DB	 115			; 00000073H
  004c5	00		 DB	 0
_RENDER_TexturedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_At
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp_node$2 = -8					; size = 4
_list$ = 8						; size = 4
_location$ = 12						; size = 4
_LIST_At PROC						; COMDAT

; 61   : void* LIST_At(const linkedList* const list, int location) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   : 	if (list->head) {

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	74 3e		 je	 SHORT $LN5@LIST_At

; 63   : 		listNode* tmp_node = list->head;

  00030	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx

; 64   : 		for (int i = 0; i < location; ++i) {

  00038	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0003f	eb 09		 jmp	 SHORT $LN4@LIST_At
$LN2@LIST_At:
  00041	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_At:
  0004a	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0004d	3b 45 0c	 cmp	 eax, DWORD PTR _location$[ebp]
  00050	7d 12		 jge	 SHORT $LN3@LIST_At

; 65   : 			if (tmp_node->next)

  00052	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00055	83 38 00	 cmp	 DWORD PTR [eax], 0
  00058	74 08		 je	 SHORT $LN7@LIST_At

; 66   : 				tmp_node = tmp_node->next;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx
$LN7@LIST_At:

; 67   : 			//else
; 68   : 			//	printf("element %d could not be found", location); return 2.0;
; 69   : 		}

  00062	eb dd		 jmp	 SHORT $LN2@LIST_At
$LN3@LIST_At:

; 70   : 		return tmp_node->data;

  00064	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00067	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006a	eb 04		 jmp	 SHORT $LN1@LIST_At

; 71   : 	}

  0006c	eb 02		 jmp	 SHORT $LN1@LIST_At
$LN5@LIST_At:

; 72   : 	else
; 73   : 		return NULL;

  0006e	33 c0		 xor	 eax, eax
$LN1@LIST_At:

; 74   : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_LIST_At ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_RemoveAt
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp_node$2 = -8					; size = 4
_list$ = 8						; size = 4
_location$ = 12						; size = 4
_remove_data$ = 16					; size = 1
_LIST_RemoveAt PROC					; COMDAT

; 38   : int LIST_RemoveAt(linkedList* list, int location, bool remove_data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   : 	if (list->head) {

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	0f 84 d8 00 00
	00		 je	 $LN5@LIST_Remov

; 40   : 		listNode* tmp_node = list->head;

  00034	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx

; 41   : 		for (int i = 0; i < location; ++i) {

  0003c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN4@LIST_Remov
$LN2@LIST_Remov:
  00045	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_Remov:
  0004e	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00051	3b 45 0c	 cmp	 eax, DWORD PTR _location$[ebp]
  00054	7d 12		 jge	 SHORT $LN3@LIST_Remov

; 42   : 			if (tmp_node->next)

  00056	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00059	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005c	74 08		 je	 SHORT $LN6@LIST_Remov

; 43   : 				tmp_node = tmp_node->next;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx
$LN6@LIST_Remov:

; 44   : 			//else
; 45   : 			//	printf("element %d could not be found", location); return 1;
; 46   : 		}

  00066	eb dd		 jmp	 SHORT $LN2@LIST_Remov
$LN3@LIST_Remov:

; 47   : 		if (tmp_node->next && tmp_node->prev)

  00068	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0006b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0006e	74 26		 je	 SHORT $LN7@LIST_Remov
  00070	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00073	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00077	74 1d		 je	 SHORT $LN7@LIST_Remov

; 48   : 			tmp_node->prev->next = tmp_node->next, tmp_node->next->prev = tmp_node->prev;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0007c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$2[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	89 01		 mov	 DWORD PTR [ecx], eax
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$2[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0008e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00091	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00094	eb 3f		 jmp	 SHORT $LN8@LIST_Remov
$LN7@LIST_Remov:

; 49   : 		else if (list->head == tmp_node)

  00096	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	3b 4d f8	 cmp	 ecx, DWORD PTR _tmp_node$2[ebp]
  0009e	75 18		 jne	 SHORT $LN9@LIST_Remov

; 50   : 			list->head = tmp_node->next, tmp_node->next->prev = NULL;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$2[ebp]
  000a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a8	89 10		 mov	 DWORD PTR [eax], edx
  000aa	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  000b6	eb 1d		 jmp	 SHORT $LN8@LIST_Remov
$LN9@LIST_Remov:

; 51   : 		else if (!tmp_node->next)

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000bb	83 38 00	 cmp	 DWORD PTR [eax], 0
  000be	75 0e		 jne	 SHORT $LN11@LIST_Remov

; 52   : 			tmp_node->prev->next = NULL;

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c6	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  000cc	eb 07		 jmp	 SHORT $LN8@LIST_Remov
$LN11@LIST_Remov:

; 53   : 		else
; 54   : 			return 1;

  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	eb 39		 jmp	 SHORT $LN1@LIST_Remov
$LN8@LIST_Remov:

; 55   : 		if (remove_data)

  000d5	0f b6 45 10	 movzx	 eax, BYTE PTR _remove_data$[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 19		 je	 SHORT $LN13@LIST_Remov

; 56   : 			free(tmp_node->data);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000e2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e5	51		 push	 ecx
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000ec	83 c4 04	 add	 esp, 4
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@LIST_Remov:

; 57   : 		free(tmp_node);

  000f6	8b f4		 mov	 esi, esp
  000f8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000fb	50		 push	 eax
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00102	83 c4 04	 add	 esp, 4
  00105	3b f4		 cmp	 esi, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@LIST_Remov:

; 58   : 	}
; 59   : 	return 0;

  0010c	33 c0		 xor	 eax, eax
$LN1@LIST_Remov:

; 60   : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00117	3b ec		 cmp	 ebp, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
_LIST_RemoveAt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_AddElement
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_tmp_node_travlist$2 = -20				; size = 4
_tmp_node$ = -8						; size = 4
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_LIST_AddElement PROC					; COMDAT

; 16   : void LIST_AddElement(linkedList* list, void* data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 17   : 	listNode* tmp_node = calloc(1, sizeof(listNode));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0c		 push	 12			; 0000000cH
  0002c	6a 01		 push	 1
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00034	83 c4 08	 add	 esp, 8
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	89 45 f8	 mov	 DWORD PTR _tmp_node$[ebp], eax

; 18   : 	tmp_node->data = data;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  00047	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 19   : 	if (!list->head)

  0004a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0004d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00050	75 1d		 jne	 SHORT $LN5@LIST_AddEl

; 20   : 		list->head = tmp_node, tmp_node->next = NULL, tmp_node->prev = NULL;

  00052	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  00058	89 08		 mov	 DWORD PTR [eax], ecx
  0005a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  0005d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00063	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00066	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0006d	eb 7c		 jmp	 SHORT $LN6@LIST_AddEl
$LN5@LIST_AddEl:

; 21   : 	else { //travese the list until the end is found
; 22   : 		if (!list->head->next)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00077	75 21		 jne	 SHORT $LN7@LIST_AddEl

; 23   : 			tmp_node->prev = list->head, tmp_node->prev->next = tmp_node, tmp_node->next = NULL;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00084	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00087	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  0008d	89 11		 mov	 DWORD PTR [ecx], edx
  0008f	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00092	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00098	eb 51		 jmp	 SHORT $LN6@LIST_AddEl
$LN7@LIST_AddEl:

; 24   : 		else {
; 25   : 			listNode* tmp_node_travlist = list->head;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d ec	 mov	 DWORD PTR _tmp_node_travlist$2[ebp], ecx

; 26   : 			for (int i = 0; i < list->count; ++i) {

  000a2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000a9	eb 09		 jmp	 SHORT $LN4@LIST_AddEl
$LN2@LIST_AddEl:
  000ab	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 e0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_AddEl:
  000b4	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000b7	8b 4d e0	 mov	 ecx, DWORD PTR _i$1[ebp]
  000ba	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000bd	7d 12		 jge	 SHORT $LN3@LIST_AddEl

; 27   : 				if (tmp_node_travlist->next)

  000bf	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000c2	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c5	74 08		 je	 SHORT $LN9@LIST_AddEl

; 28   : 					tmp_node_travlist = tmp_node_travlist->next;

  000c7	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	89 4d ec	 mov	 DWORD PTR _tmp_node_travlist$2[ebp], ecx
$LN9@LIST_AddEl:

; 29   : 
; 30   : 					
; 31   : 			}

  000cf	eb da		 jmp	 SHORT $LN2@LIST_AddEl
$LN3@LIST_AddEl:

; 32   : 			tmp_node_travlist->next = tmp_node, tmp_node->prev = tmp_node_travlist, tmp_node->next = NULL;

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  000d7	89 08		 mov	 DWORD PTR [eax], ecx
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  000dc	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000df	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  000e5	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN6@LIST_AddEl:

; 33   : 		}
; 34   : 	
; 35   : 	}
; 36   : 	list->count += 1;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	83 c1 01	 add	 ecx, 1
  000f4	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  000f7	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 37   : }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00103	3b ec		 cmp	 ebp, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
_LIST_AddElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\cam.h
;	COMDAT _glm_ortho
_TEXT	SEGMENT
_fn$ = -32						; size = 4
_tb$ = -20						; size = 4
_rl$ = -8						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_nearVal$ = 24						; size = 4
_farVal$ = 28						; size = 4
_dest$ = 32						; size = 4
_glm_ortho PROC						; COMDAT

; 105  :           mat4  dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __40246743_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 106  :   float rl, tb, fn;
; 107  : 
; 108  :   glm_mat4_zero(dest);

  00028	8b 45 20	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_zero
  00031	83 c4 04	 add	 esp, 4

; 109  : 
; 110  :   rl = 1.0f / (right  - left);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  00039	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _left$[ebp]
  0003e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00046	f3 0f 5e c8	 divss	 xmm1, xmm0
  0004a	f3 0f 11 4d f8	 movss	 DWORD PTR _rl$[ebp], xmm1

; 111  :   tb = 1.0f / (top    - bottom);

  0004f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00054	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bottom$[ebp]
  00059	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00061	f3 0f 5e c8	 divss	 xmm1, xmm0
  00065	f3 0f 11 4d ec	 movss	 DWORD PTR _tb$[ebp], xmm1

; 112  :   fn =-1.0f / (farVal - nearVal);

  0006a	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  0006f	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _nearVal$[ebp]
  00074	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0007c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00080	f3 0f 11 4d e0	 movss	 DWORD PTR _fn$[ebp], xmm1

; 113  : 
; 114  :   dest[0][0] = 2.0f * rl;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00092	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	6b c2 00	 imul	 eax, edx, 0
  000a5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 115  :   dest[1][1] = 2.0f * tb;

  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000b2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  000b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000bc	c1 e0 00	 shl	 eax, 0
  000bf	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000c2	b9 04 00 00 00	 mov	 ecx, 4
  000c7	c1 e1 00	 shl	 ecx, 0
  000ca	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 116  :   dest[2][2] = 2.0f * fn;

  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000d7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  000dc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000e1	d1 e0		 shl	 eax, 1
  000e3	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000e6	b9 04 00 00 00	 mov	 ecx, 4
  000eb	d1 e1		 shl	 ecx, 1
  000ed	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 117  :   dest[3][0] =-(right  + left)    * rl;

  000f2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  000f7	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _left$[ebp]
  000fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00103	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00108	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0010d	6b c8 03	 imul	 ecx, eax, 3
  00110	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00113	ba 04 00 00 00	 mov	 edx, 4
  00118	6b c2 00	 imul	 eax, edx, 0
  0011b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 118  :   dest[3][1] =-(top    + bottom)  * tb;

  00120	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00125	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _bottom$[ebp]
  0012a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00131	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  00136	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013b	6b c8 03	 imul	 ecx, eax, 3
  0013e	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00141	ba 04 00 00 00	 mov	 edx, 4
  00146	c1 e2 00	 shl	 edx, 0
  00149	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 119  :   dest[3][2] = (farVal + nearVal) * fn;

  0014e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00153	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _nearVal$[ebp]
  00158	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  0015d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00162	6b c8 03	 imul	 ecx, eax, 3
  00165	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00168	ba 04 00 00 00	 mov	 edx, 4
  0016d	d1 e2		 shl	 edx, 1
  0016f	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 120  :   dest[3][3] = 1.0f;

  00174	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00179	6b c8 03	 imul	 ecx, eax, 3
  0017c	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0017f	ba 04 00 00 00	 mov	 edx, 4
  00184	6b c2 03	 imul	 eax, edx, 3
  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0018f	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 121  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_glm_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_zero
_TEXT	SEGMENT
_t$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat4_zero PROC					; COMDAT

; 189  : glm_mat4_zero(mat4 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 190  :   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_ZERO_INIT;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 45 b0	 movss	 DWORD PTR _t$[ebp], xmm0
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 b4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 45 b8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 bc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+32], xmm0
  0008c	0f 57 c0	 xorps	 xmm0, xmm0
  0008f	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+36], xmm0
  00094	0f 57 c0	 xorps	 xmm0, xmm0
  00097	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+40], xmm0
  0009c	0f 57 c0	 xorps	 xmm0, xmm0
  0009f	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+44], xmm0
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+48], xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+52], xmm0
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+56], xmm0
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+60], xmm0

; 191  :   glm_mat4_copy(t, mat);

  000c4	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  000c7	50		 push	 eax
  000c8	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _glm_mat4_copy
  000d1	83 c4 08	 add	 esp, 8

; 192  : }

  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_z
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	8b e3		 mov	 esp, ebx
  000f6	5b		 pop	 ebx
  000f7	c3		 ret	 0
$LN5@glm_mat4_z:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN4@glm_mat4_z
$LN4@glm_mat4_z:
  00100	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00104	40 00 00 00	 DD	 64			; 00000040H
  00108	00 00 00 00	 DD	 $LN3@glm_mat4_z
$LN3@glm_mat4_z:
  0010c	74		 DB	 116			; 00000074H
  0010d	00		 DB	 0
_glm_mat4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_copy PROC					; COMDAT

; 123  : glm_mat4_copy(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  : #ifdef __AVX__
; 125  :   glmm_store256(dest[0], glmm_load256(mat[0]));
; 126  :   glmm_store256(dest[2], glmm_load256(mat[2]));
; 127  : #elif defined( __SSE__ ) || defined( __SSE2__ )
; 128  :   glmm_store(dest[0], glmm_load(mat[0]));

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00036	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00041	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 129  :   glmm_store(dest[1], glmm_load(mat[1]));

  00044	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00049	c1 e0 00	 shl	 eax, 0
  0004c	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0004f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00052	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00057	c1 e1 00	 shl	 ecx, 0
  0005a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 130  :   glmm_store(dest[2], glmm_load(mat[2]));

  00060	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00065	d1 e0		 shl	 eax, 1
  00067	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00072	d1 e1		 shl	 ecx, 1
  00074	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00077	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 131  :   glmm_store(dest[3], glmm_load(mat[3]));

  0007a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00085	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00088	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0008d	6b c2 03	 imul	 eax, edx, 3
  00090	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00093	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 132  : #elif defined(CGLM_NEON_FP)
; 133  :   vst1q_f32(dest[0], vld1q_f32(mat[0]));
; 134  :   vst1q_f32(dest[1], vld1q_f32(mat[1]));
; 135  :   vst1q_f32(dest[2], vld1q_f32(mat[2]));
; 136  :   vst1q_f32(dest[3], vld1q_f32(mat[3]));
; 137  : #else
; 138  :   glm_mat4_ucopy(mat, dest);
; 139  : #endif
; 140  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_mat4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _SDL_main
_TEXT	SEGMENT
tv948 = -1008						; size = 4
_source_rect$1 = -616					; size = 16
_test_colored3$2 = -592					; size = 16
_test_colored2$3 = -568					; size = 16
_test_colored$4 = -544					; size = 16
_event_handle$ = -520					; size = 56
_key_input$ = -456					; size = 4
_test_person$5 = -444					; size = 4
_tmp_vertexes$6 = -432					; size = 128
_i$7 = -292						; size = 4
_text_test_quad$ = -280					; size = 20
_loc$8 = -252						; size = 4
_shader_fragment$9 = -240				; size = 4
_shader_vertex$10 = -228				; size = 4
_shader_fragment$11 = -216				; size = 4
_shader_vertex$12 = -204				; size = 4
_ortho$ = -192						; size = 64
_format$ = -108						; size = 2
_channels$ = -96					; size = 4
_freq$ = -84						; size = 4
_other_test$ = -72					; size = 4
_test$ = -60						; size = 4
_stero_test$ = -48					; size = 4
_i$13 = -36						; size = 4
_number_decoders$ = -24					; size = 4
_test_text_string$ = -12				; size = 4
__$ArrayPad$ = -4					; size = 4
_SDL_main PROC						; COMDAT

; 38   : int main(void) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f8 03 00
	00		 sub	 esp, 1016		; 000003f8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 08 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-1016]
  00024	b9 fe 00 00 00	 mov	 ecx, 254		; 000000feH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   : 	//Inititlze SDL stuff
; 40   : 	//TODO: rename some globals from "test" and choose better var names, also get controller support and haptic support before you start adding items and stuff
; 41   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);

  00044	6a 03		 push	 3
  00046	6a 11		 push	 17			; 00000011H
  00048	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  0004d	83 c4 08	 add	 esp, 8

; 42   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);

  00050	6a 03		 push	 3
  00052	6a 12		 push	 18			; 00000012H
  00054	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  00059	83 c4 08	 add	 esp, 8

; 43   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_COMPATIBILITY);

  0005c	6a 02		 push	 2
  0005e	6a 15		 push	 21			; 00000015H
  00060	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  00065	83 c4 08	 add	 esp, 8

; 44   : 	if (SDL_Init(SDL_INIT_AUDIO | SDL_INIT_HAPTIC | SDL_INIT_JOYSTICK)) {

  00068	68 10 12 00 00	 push	 4624			; 00001210H
  0006d	e8 00 00 00 00	 call	 _SDL_Init
  00072	83 c4 04	 add	 esp, 4
  00075	85 c0		 test	 eax, eax
  00077	74 13		 je	 SHORT $LN10@SDL_main

; 45   : 		printf("Couldn't inilize audio, %s", SDL_GetError());

  00079	e8 00 00 00 00	 call	 _SDL_GetError
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@
  00084	e8 00 00 00 00	 call	 _printf
  00089	83 c4 08	 add	 esp, 8
$LN10@SDL_main:

; 46   : 	}
; 47   : 	if (TTF_Init() == -1) {

  0008c	e8 00 00 00 00	 call	 _TTF_Init
  00091	83 f8 ff	 cmp	 eax, -1
  00094	75 17		 jne	 SHORT $LN11@SDL_main

; 48   : 		puts("Failed to load SDL_TTF font library");

  00096	8b f4		 mov	 esi, esp
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000a3	83 c4 04	 add	 esp, 4
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN11@SDL_main:

; 49   : 	}
; 50   : 	if ((Mix_Init(MIX_INIT_MP3) & MIX_INIT_MP3) != MIX_INIT_MP3) {

  000ad	6a 08		 push	 8
  000af	e8 00 00 00 00	 call	 _Mix_Init
  000b4	83 c4 04	 add	 esp, 4
  000b7	83 e0 08	 and	 eax, 8
  000ba	75 13		 jne	 SHORT $LN12@SDL_main

; 51   : 		printf("Failed to initilize mix, %s\n", Mix_GetError());

  000bc	e8 00 00 00 00	 call	 _SDL_GetError
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@
  000c7	e8 00 00 00 00	 call	 _printf
  000cc	83 c4 08	 add	 esp, 8
$LN12@SDL_main:

; 52   : 	}
; 53   : 	//set up fonts
; 54   : 	test_font = TTF_OpenFont("testfont.ttf", 50);

  000cf	6a 32		 push	 50			; 00000032H
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DFCODNDC@testfont?4ttf@
  000d6	e8 00 00 00 00	 call	 _TTF_OpenFont
  000db	83 c4 08	 add	 esp, 8
  000de	a3 00 00 00 00	 mov	 DWORD PTR _test_font, eax

; 55   : 	if (!test_font) {

  000e3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _test_font, 0
  000ea	75 17		 jne	 SHORT $LN13@SDL_main

; 56   : 		puts("Error loading true type font");

  000ec	8b f4		 mov	 esi, esp
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CDHAJDMA@Error?5loading?5true?5type?5font@
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000f9	83 c4 04	 add	 esp, 4
  000fc	3b f4		 cmp	 esi, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@SDL_main:

; 57   : 	}
; 58   : 	char* test_text_string = "what do you want it to be?";

  00103	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _test_text_string$[ebp], OFFSET ??_C@_0BL@BHMGIKOL@what?5do?5you?5want?5it?5to?5be?$DP@

; 59   : 	test_font_surface = TTF_RenderText_Blended(test_font, test_text_string, white);

  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  0010f	50		 push	 eax
  00110	8b 4d f4	 mov	 ecx, DWORD PTR _test_text_string$[ebp]
  00113	51		 push	 ecx
  00114	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _test_font
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  00120	83 c4 0c	 add	 esp, 12			; 0000000cH
  00123	a3 00 00 00 00	 mov	 DWORD PTR _test_font_surface, eax

; 60   : 	if (!test_font_surface) {

  00128	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _test_font_surface, 0
  0012f	75 17		 jne	 SHORT $LN14@SDL_main

; 61   : 		puts("Failed to create SDL_Surface from TTF");

  00131	8b f4		 mov	 esi, esp
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@GILHFLBI@Failed?5to?5create?5SDL_Surface?5fr@
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0013e	83 c4 04	 add	 esp, 4
  00141	3b f4		 cmp	 esi, esp
  00143	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN14@SDL_main:

; 62   : 	}
; 63   : 	//set up audio
; 64   : 	if(Mix_OpenAudio(22050, AUDIO_S16SYS, 2, 2048) < 0) {

  00148	68 00 08 00 00	 push	 2048			; 00000800H
  0014d	6a 02		 push	 2
  0014f	68 10 80 00 00	 push	 32784			; 00008010H
  00154	68 22 56 00 00	 push	 22050			; 00005622H
  00159	e8 00 00 00 00	 call	 _Mix_OpenAudio
  0015e	83 c4 10	 add	 esp, 16			; 00000010H
  00161	85 c0		 test	 eax, eax
  00163	7d 13		 jge	 SHORT $LN15@SDL_main

; 65   : 		printf("Error opening audio device, %s\n", Mix_GetError());

  00165	e8 00 00 00 00	 call	 _SDL_GetError
  0016a	50		 push	 eax
  0016b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@
  00170	e8 00 00 00 00	 call	 _printf
  00175	83 c4 08	 add	 esp, 8
$LN15@SDL_main:

; 66   : 	}
; 67   : 	printf("amount of channels: %d\n", Mix_AllocateChannels(32));

  00178	6a 20		 push	 32			; 00000020H
  0017a	e8 00 00 00 00	 call	 _Mix_AllocateChannels
  0017f	83 c4 04	 add	 esp, 4
  00182	50		 push	 eax
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@
  00188	e8 00 00 00 00	 call	 _printf
  0018d	83 c4 08	 add	 esp, 8

; 68   : 	//???
; 69   : 	int number_decoders = Mix_GetNumChunkDecoders();

  00190	e8 00 00 00 00	 call	 _Mix_GetNumChunkDecoders
  00195	89 45 e8	 mov	 DWORD PTR _number_decoders$[ebp], eax

; 70   : 	for (int i = 0; i < number_decoders; ++i)

  00198	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$13[ebp], 0
  0019f	eb 09		 jmp	 SHORT $LN4@SDL_main
$LN2@SDL_main:
  001a1	8b 45 dc	 mov	 eax, DWORD PTR _i$13[ebp]
  001a4	83 c0 01	 add	 eax, 1
  001a7	89 45 dc	 mov	 DWORD PTR _i$13[ebp], eax
$LN4@SDL_main:
  001aa	8b 45 dc	 mov	 eax, DWORD PTR _i$13[ebp]
  001ad	3b 45 e8	 cmp	 eax, DWORD PTR _number_decoders$[ebp]
  001b0	7d 20		 jge	 SHORT $LN3@SDL_main

; 71   : 		printf("Sample chunk decoder %d is for %s\n", i, Mix_GetChunkDecoder(i));

  001b2	8b 45 dc	 mov	 eax, DWORD PTR _i$13[ebp]
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 _Mix_GetChunkDecoder
  001bb	83 c4 04	 add	 esp, 4
  001be	50		 push	 eax
  001bf	8b 4d dc	 mov	 ecx, DWORD PTR _i$13[ebp]
  001c2	51		 push	 ecx
  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@
  001c8	e8 00 00 00 00	 call	 _printf
  001cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d0	eb cf		 jmp	 SHORT $LN2@SDL_main
$LN3@SDL_main:

; 72   : 
; 73   : 	Mix_Chunk* stero_test;
; 74   : 	stero_test = Mix_LoadWAV("testa.wav");

  001d2	6a 01		 push	 1
  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  001d9	68 00 00 00 00	 push	 OFFSET ??_C@_09LEBKLOBD@testa?4wav@
  001de	e8 00 00 00 00	 call	 _SDL_RWFromFile
  001e3	83 c4 08	 add	 esp, 8
  001e6	50		 push	 eax
  001e7	e8 00 00 00 00	 call	 _Mix_LoadWAV_RW
  001ec	83 c4 08	 add	 esp, 8
  001ef	89 45 d0	 mov	 DWORD PTR _stero_test$[ebp], eax

; 75   : 	Mix_PlayChannel(0, stero_test, -1);

  001f2	6a ff		 push	 -1
  001f4	6a ff		 push	 -1
  001f6	8b 45 d0	 mov	 eax, DWORD PTR _stero_test$[ebp]
  001f9	50		 push	 eax
  001fa	6a 00		 push	 0
  001fc	e8 00 00 00 00	 call	 _Mix_PlayChannelTimed
  00201	83 c4 10	 add	 esp, 16			; 00000010H

; 76   : 	//load in audio data, turns out you use Mix_Music for large files
; 77   : 	Mix_Music* test, *other_test;
; 78   : 	test = Mix_LoadMUS("test.wav"), other_test = Mix_LoadMUS("testb.wav");

  00204	68 00 00 00 00	 push	 OFFSET ??_C@_08NJOICEBB@test?4wav@
  00209	e8 00 00 00 00	 call	 _Mix_LoadMUS
  0020e	83 c4 04	 add	 esp, 4
  00211	89 45 c4	 mov	 DWORD PTR _test$[ebp], eax
  00214	68 00 00 00 00	 push	 OFFSET ??_C@_09DCIOMMLN@testb?4wav@
  00219	e8 00 00 00 00	 call	 _Mix_LoadMUS
  0021e	83 c4 04	 add	 esp, 4
  00221	89 45 b8	 mov	 DWORD PTR _other_test$[ebp], eax

; 79   : 	if (!test) {

  00224	83 7d c4 00	 cmp	 DWORD PTR _test$[ebp], 0
  00228	75 13		 jne	 SHORT $LN16@SDL_main

; 80   : 		printf("Failed to load WAV, %s\n", Mix_GetError());

  0022a	e8 00 00 00 00	 call	 _SDL_GetError
  0022f	50		 push	 eax
  00230	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LHPDKIPA@Failed?5to?5load?5WAV?0?5?$CFs?6@
  00235	e8 00 00 00 00	 call	 _printf
  0023a	83 c4 08	 add	 esp, 8
$LN16@SDL_main:

; 81   : 	}
; 82   : 	Mix_SetMusicPosition(60);

  0023d	83 ec 08	 sub	 esp, 8
  00240	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@404e000000000000
  00248	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0024d	e8 00 00 00 00	 call	 _Mix_SetMusicPosition
  00252	83 c4 08	 add	 esp, 8

; 83   : 	Mix_VolumeMusic(64);

  00255	6a 40		 push	 64			; 00000040H
  00257	e8 00 00 00 00	 call	 _Mix_VolumeMusic
  0025c	83 c4 04	 add	 esp, 4

; 84   : 	//print out the current hardware format
; 85   : 	int freq, channels;
; 86   : 	Uint16 format;
; 87   : 	if (Mix_QuerySpec(&freq, &format, &channels)) {

  0025f	8d 45 a0	 lea	 eax, DWORD PTR _channels$[ebp]
  00262	50		 push	 eax
  00263	8d 4d 94	 lea	 ecx, DWORD PTR _format$[ebp]
  00266	51		 push	 ecx
  00267	8d 55 ac	 lea	 edx, DWORD PTR _freq$[ebp]
  0026a	52		 push	 edx
  0026b	e8 00 00 00 00	 call	 _Mix_QuerySpec
  00270	83 c4 0c	 add	 esp, 12			; 0000000cH
  00273	85 c0		 test	 eax, eax
  00275	74 1c		 je	 SHORT $LN17@SDL_main

; 88   : 		printf("Frequerncy:%d, audio format:%x, number of channels:%d\n", freq, format, channels);

  00277	8b 45 a0	 mov	 eax, DWORD PTR _channels$[ebp]
  0027a	50		 push	 eax
  0027b	0f b7 4d 94	 movzx	 ecx, WORD PTR _format$[ebp]
  0027f	51		 push	 ecx
  00280	8b 55 ac	 mov	 edx, DWORD PTR _freq$[ebp]
  00283	52		 push	 edx
  00284	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@
  00289	e8 00 00 00 00	 call	 _printf
  0028e	83 c4 10	 add	 esp, 16			; 00000010H

; 89   : 	}

  00291	eb 13		 jmp	 SHORT $LN18@SDL_main
$LN17@SDL_main:

; 90   : 	else
; 91   : 	{
; 92   : 		printf("Something bad happened...%s\n", Mix_GetError());

  00293	e8 00 00 00 00	 call	 _SDL_GetError
  00298	50		 push	 eax
  00299	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@
  0029e	e8 00 00 00 00	 call	 _printf
  002a3	83 c4 08	 add	 esp, 8
$LN18@SDL_main:

; 93   : 	}
; 94   : 	window = SDL_CreateWindow("SpaceMonster", 0, 100, WINDOW_WIDTH_START, WINDOW_HEIGHT_START, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);

  002a6	6a 22		 push	 34			; 00000022H
  002a8	68 d0 02 00 00	 push	 720			; 000002d0H
  002ad	68 00 05 00 00	 push	 1280			; 00000500H
  002b2	6a 64		 push	 100			; 00000064H
  002b4	6a 00		 push	 0
  002b6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CJFNGLCH@SpaceMonster@
  002bb	e8 00 00 00 00	 call	 _SDL_CreateWindow
  002c0	83 c4 18	 add	 esp, 24			; 00000018H
  002c3	a3 00 00 00 00	 mov	 DWORD PTR _window, eax

; 95   : 	if (!window) {

  002c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _window, 0
  002cf	75 17		 jne	 SHORT $LN19@SDL_main

; 96   : 		puts("Window creation failed!");

  002d1	8b f4		 mov	 esi, esp
  002d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@
  002d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  002de	83 c4 04	 add	 esp, 4
  002e1	3b f4		 cmp	 esi, esp
  002e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN19@SDL_main:

; 97   : 	}
; 98   :     glcontext = SDL_GL_CreateContext(window);

  002e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _window
  002ed	50		 push	 eax
  002ee	e8 00 00 00 00	 call	 _SDL_GL_CreateContext
  002f3	83 c4 04	 add	 esp, 4
  002f6	a3 00 00 00 00	 mov	 DWORD PTR _glcontext, eax

; 99   : 	if (!glcontext) {

  002fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _glcontext, 0
  00302	75 17		 jne	 SHORT $LN20@SDL_main

; 100  : 		puts("SDL/OPENGL thing failed!");

  00304	8b f4		 mov	 esi, esp
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@
  0030b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00311	83 c4 04	 add	 esp, 4
  00314	3b f4		 cmp	 esi, esp
  00316	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN20@SDL_main:

; 101  : 	}
; 102  : 	if (!gladLoadGL()) {

  0031b	e8 00 00 00 00	 call	 _gladLoadGL
  00320	85 c0		 test	 eax, eax
  00322	75 17		 jne	 SHORT $LN21@SDL_main

; 103  : 		puts("Failed to load openGL");

  00324	8b f4		 mov	 esi, esp
  00326	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@
  0032b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00331	83 c4 04	 add	 esp, 4
  00334	3b f4		 cmp	 esi, esp
  00336	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN21@SDL_main:

; 104  : 	}
; 105  : 	glEnable(GL_BLEND);

  0033b	8b f4		 mov	 esi, esp
  0033d	68 e2 0b 00 00	 push	 3042			; 00000be2H
  00342	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnable
  00348	3b f4		 cmp	 esi, esp
  0034a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  : 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  0034f	8b f4		 mov	 esi, esp
  00351	68 03 03 00 00	 push	 771			; 00000303H
  00356	68 02 03 00 00	 push	 770			; 00000302H
  0035b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBlendFunc
  00361	3b f4		 cmp	 esi, esp
  00363	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 107  : 	glMatrixMode(GL_PROJECTION);

  00368	8b f4		 mov	 esi, esp
  0036a	68 01 17 00 00	 push	 5889			; 00001701H
  0036f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glMatrixMode
  00375	3b f4		 cmp	 esi, esp
  00377	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 108  : 	glLoadIdentity();

  0037c	8b f4		 mov	 esi, esp
  0037e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLoadIdentity
  00384	3b f4		 cmp	 esi, esp
  00386	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 109  : 	glViewport(0, 0, WINDOW_WIDTH_START, WINDOW_HEIGHT_START);

  0038b	8b f4		 mov	 esi, esp
  0038d	68 d0 02 00 00	 push	 720			; 000002d0H
  00392	68 00 05 00 00	 push	 1280			; 00000500H
  00397	6a 00		 push	 0
  00399	6a 00		 push	 0
  0039b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glViewport
  003a1	3b f4		 cmp	 esi, esp
  003a3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 110  : 	glOrtho(0, WINDOW_WIDTH_START, 0, WINDOW_HEIGHT_START, 1.0, -1.0);

  003a8	8b f4		 mov	 esi, esp
  003aa	83 ec 08	 sub	 esp, 8
  003ad	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  003b5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003ba	83 ec 08	 sub	 esp, 8
  003bd	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  003c5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003ca	83 ec 08	 sub	 esp, 8
  003cd	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4086800000000000
  003d5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003da	83 ec 08	 sub	 esp, 8
  003dd	0f 57 c0	 xorps	 xmm0, xmm0
  003e0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003e5	83 ec 08	 sub	 esp, 8
  003e8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4094000000000000
  003f0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003f5	83 ec 08	 sub	 esp, 8
  003f8	0f 57 c0	 xorps	 xmm0, xmm0
  003fb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00400	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glOrtho
  00406	3b f4		 cmp	 esi, esp
  00408	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 111  : 	mat4 ortho;
; 112  : 	glm_ortho(0, WINDOW_WIDTH_START, 0, WINDOW_HEIGHT_START, 1.0, -1.0, ortho);

  0040d	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _ortho$[ebp]
  00413	50		 push	 eax
  00414	51		 push	 ecx
  00415	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0041d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00422	51		 push	 ecx
  00423	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0042b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00430	51		 push	 ecx
  00431	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44340000
  00439	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043e	51		 push	 ecx
  0043f	0f 57 c0	 xorps	 xmm0, xmm0
  00442	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00447	51		 push	 ecx
  00448	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44a00000
  00450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00455	51		 push	 ecx
  00456	0f 57 c0	 xorps	 xmm0, xmm0
  00459	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045e	e8 00 00 00 00	 call	 _glm_ortho
  00463	83 c4 1c	 add	 esp, 28			; 0000001cH

; 113  : 	if (glGetError()) {

  00466	8b f4		 mov	 esi, esp
  00468	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  0046e	3b f4		 cmp	 esi, esp
  00470	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00475	85 c0		 test	 eax, eax
  00477	74 1d		 je	 SHORT $LN22@SDL_main

; 114  : 		printf("Failed to initilize openGL, %x", glGetError());

  00479	8b f4		 mov	 esi, esp
  0047b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00481	3b f4		 cmp	 esi, esp
  00483	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00488	50		 push	 eax
  00489	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@
  0048e	e8 00 00 00 00	 call	 _printf
  00493	83 c4 08	 add	 esp, 8
$LN22@SDL_main:

; 115  : 	}
; 116  : 	shader_texturedobj = glCreateProgram();

  00496	8b f4		 mov	 esi, esp
  00498	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateProgram
  0049e	3b f4		 cmp	 esi, esp
  004a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004a5	a3 00 00 00 00	 mov	 DWORD PTR _shader_texturedobj, eax

; 117  : 	shader_colored = glCreateProgram();

  004aa	8b f4		 mov	 esi, esp
  004ac	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateProgram
  004b2	3b f4		 cmp	 esi, esp
  004b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004b9	a3 00 00 00 00	 mov	 DWORD PTR _shader_colored, eax

; 118  : 	{
; 119  : 		GLint shader_vertex;
; 120  : 		GLint shader_fragment;
; 121  : 		shader_vertex = CompileShader("vertex1.txt", GL_VERTEX_SHADER);

  004be	68 31 8b 00 00	 push	 35633			; 00008b31H
  004c3	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DCJKCHKN@vertex1?4txt@
  004c8	e8 00 00 00 00	 call	 _CompileShader
  004cd	83 c4 08	 add	 esp, 8
  004d0	89 85 34 ff ff
	ff		 mov	 DWORD PTR _shader_vertex$12[ebp], eax

; 122  : 		shader_fragment = CompileShader("fragment1.txt", GL_FRAGMENT_SHADER);

  004d6	68 30 8b 00 00	 push	 35632			; 00008b30H
  004db	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OBHLNCJC@fragment1?4txt@
  004e0	e8 00 00 00 00	 call	 _CompileShader
  004e5	83 c4 08	 add	 esp, 8
  004e8	89 85 28 ff ff
	ff		 mov	 DWORD PTR _shader_fragment$11[ebp], eax

; 123  : 		glAttachShader(shader_texturedobj, shader_vertex);

  004ee	8b f4		 mov	 esi, esp
  004f0	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$12[ebp]
  004f6	50		 push	 eax
  004f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_texturedobj
  004fd	51		 push	 ecx
  004fe	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  00504	3b f4		 cmp	 esi, esp
  00506	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 124  : 		glAttachShader(shader_texturedobj, shader_fragment);

  0050b	8b f4		 mov	 esi, esp
  0050d	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$11[ebp]
  00513	50		 push	 eax
  00514	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_texturedobj
  0051a	51		 push	 ecx
  0051b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  00521	3b f4		 cmp	 esi, esp
  00523	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 125  : 		glDeleteShader(shader_vertex);

  00528	8b f4		 mov	 esi, esp
  0052a	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$12[ebp]
  00530	50		 push	 eax
  00531	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  00537	3b f4		 cmp	 esi, esp
  00539	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 126  : 		glDeleteShader(shader_fragment);

  0053e	8b f4		 mov	 esi, esp
  00540	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$11[ebp]
  00546	50		 push	 eax
  00547	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  0054d	3b f4		 cmp	 esi, esp
  0054f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 127  : 	}        
; 128  : 	{
; 129  : 		GLint shader_vertex;
; 130  : 		GLint shader_fragment;
; 131  : 		shader_vertex = CompileShader("vertex2.txt", GL_VERTEX_SHADER);

  00554	68 31 8b 00 00	 push	 35633			; 00008b31H
  00559	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LEAOFFAD@vertex2?4txt@
  0055e	e8 00 00 00 00	 call	 _CompileShader
  00563	83 c4 08	 add	 esp, 8
  00566	89 85 1c ff ff
	ff		 mov	 DWORD PTR _shader_vertex$10[ebp], eax

; 132  : 		shader_fragment = CompileShader("fragment2.txt", GL_FRAGMENT_SHADER);

  0056c	68 30 8b 00 00	 push	 35632			; 00008b30H
  00571	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GHOPKADM@fragment2?4txt@
  00576	e8 00 00 00 00	 call	 _CompileShader
  0057b	83 c4 08	 add	 esp, 8
  0057e	89 85 10 ff ff
	ff		 mov	 DWORD PTR _shader_fragment$9[ebp], eax

; 133  : 		glAttachShader(shader_colored, shader_vertex);

  00584	8b f4		 mov	 esi, esp
  00586	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$10[ebp]
  0058c	50		 push	 eax
  0058d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_colored
  00593	51		 push	 ecx
  00594	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  0059a	3b f4		 cmp	 esi, esp
  0059c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 134  : 		glAttachShader(shader_colored, shader_fragment);

  005a1	8b f4		 mov	 esi, esp
  005a3	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$9[ebp]
  005a9	50		 push	 eax
  005aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_colored
  005b0	51		 push	 ecx
  005b1	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  005b7	3b f4		 cmp	 esi, esp
  005b9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 135  : 		glDeleteShader(shader_vertex);

  005be	8b f4		 mov	 esi, esp
  005c0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$10[ebp]
  005c6	50		 push	 eax
  005c7	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  005cd	3b f4		 cmp	 esi, esp
  005cf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 136  : 		glDeleteShader(shader_fragment);

  005d4	8b f4		 mov	 esi, esp
  005d6	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$9[ebp]
  005dc	50		 push	 eax
  005dd	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  005e3	3b f4		 cmp	 esi, esp
  005e5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 137  : 	}
; 138  : 	glLinkProgram(shader_texturedobj);

  005ea	8b f4		 mov	 esi, esp
  005ec	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  005f1	50		 push	 eax
  005f2	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLinkProgram
  005f8	3b f4		 cmp	 esi, esp
  005fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 139  : 	glLinkProgram(shader_colored);

  005ff	8b f4		 mov	 esi, esp
  00601	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  00606	50		 push	 eax
  00607	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLinkProgram
  0060d	3b f4		 cmp	 esi, esp
  0060f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 	if (glGetError()) {

  00614	8b f4		 mov	 esi, esp
  00616	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  0061c	3b f4		 cmp	 esi, esp
  0061e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00623	85 c0		 test	 eax, eax
  00625	74 1d		 je	 SHORT $LN23@SDL_main

; 141  : 		printf("Failed to initilize shaders, %x", glGetError());

  00627	8b f4		 mov	 esi, esp
  00629	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  0062f	3b f4		 cmp	 esi, esp
  00631	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00636	50		 push	 eax
  00637	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@
  0063c	e8 00 00 00 00	 call	 _printf
  00641	83 c4 08	 add	 esp, 8
$LN23@SDL_main:

; 142  : 	}
; 143  : 	//setting global light
; 144  : 	{
; 145  : 		glUseProgram(shader_colored);

  00644	8b f4		 mov	 esi, esp
  00646	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  0064b	50		 push	 eax
  0064c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00652	3b f4		 cmp	 esi, esp
  00654	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 146  : 		GLint loc = glGetUniformLocation(shader_colored, "global_light");

  00659	8b f4		 mov	 esi, esp
  0065b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OBNOHIMB@global_light@
  00660	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  00665	50		 push	 eax
  00666	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetUniformLocation
  0066c	3b f4		 cmp	 esi, esp
  0066e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00673	89 85 04 ff ff
	ff		 mov	 DWORD PTR _loc$8[ebp], eax

; 147  : 		glUniform3f(loc, 1, 1, 1);

  00679	8b f4		 mov	 esi, esp
  0067b	51		 push	 ecx
  0067c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	51		 push	 ecx
  0068a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00692	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00697	51		 push	 ecx
  00698	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a5	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _loc$8[ebp]
  006ab	50		 push	 eax
  006ac	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUniform3f
  006b2	3b f4		 cmp	 esi, esp
  006b4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 148  : 		glUseProgram(shader_texturedobj);

  006b9	8b f4		 mov	 esi, esp
  006bb	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  006c0	50		 push	 eax
  006c1	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  006c7	3b f4		 cmp	 esi, esp
  006c9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 149  : 		loc = glGetUniformLocation(shader_texturedobj, "global_light");

  006ce	8b f4		 mov	 esi, esp
  006d0	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OBNOHIMB@global_light@
  006d5	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  006da	50		 push	 eax
  006db	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetUniformLocation
  006e1	3b f4		 cmp	 esi, esp
  006e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006e8	89 85 04 ff ff
	ff		 mov	 DWORD PTR _loc$8[ebp], eax

; 150  : 		glUniform3f(loc, 1, 1, 1);

  006ee	8b f4		 mov	 esi, esp
  006f0	51		 push	 ecx
  006f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fe	51		 push	 ecx
  006ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00707	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070c	51		 push	 ecx
  0070d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00715	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071a	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _loc$8[ebp]
  00720	50		 push	 eax
  00721	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUniform3f
  00727	3b f4		 cmp	 esi, esp
  00729	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 151  : 		if (glGetError()) {

  0072e	8b f4		 mov	 esi, esp
  00730	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00736	3b f4		 cmp	 esi, esp
  00738	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0073d	85 c0		 test	 eax, eax
  0073f	74 1d		 je	 SHORT $LN24@SDL_main

; 152  : 			printf("Failed to initilize shader uniforms, %x", glGetError());

  00741	8b f4		 mov	 esi, esp
  00743	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00749	3b f4		 cmp	 esi, esp
  0074b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00750	50		 push	 eax
  00751	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@
  00756	e8 00 00 00 00	 call	 _printf
  0075b	83 c4 08	 add	 esp, 8
$LN24@SDL_main:

; 153  : 		}
; 154  : 		//unless you need it for somereason
; 155  : 		//GLint tex0 = glGetUniformLocation(shader_texturedobj, "Texture0");
; 156  : 		//GLint tex1 = glGetUniformLocation(shader_texturedobj, "Texture1");
; 157  : 		//glUniform1i(tex0, 0);
; 158  : 		//glUniform1i(tex1, 1);
; 159  : 	}
; 160  : 	glUseProgram(shader_texturedobj);

  0075e	8b f4		 mov	 esi, esp
  00760	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00765	50		 push	 eax
  00766	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  0076c	3b f4		 cmp	 esi, esp
  0076e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 161  : 	Init_GL();

  00773	e8 00 00 00 00	 call	 _Init_GL

; 162  : 	player_quad.x = -1.0, player_quad.y = 1.0, player_quad.w = 0.1, player_quad.h = 0.2;

  00778	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00780	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
  00788	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00790	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
  00798	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  007a0	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _player_quad+8, xmm0
  007a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  007b0	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR _player_quad+12, xmm0

; 163  : 	player_quad.textid = texture[0];

  007b8	b8 04 00 00 00	 mov	 eax, 4
  007bd	6b c8 00	 imul	 ecx, eax, 0
  007c0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  007c6	89 15 10 00 00
	00		 mov	 DWORD PTR _player_quad+16, edx

; 164  : 	text_quad text_test_quad = { 0,0,QUAD_TEXTURE_RECT_TEXT_CAL(test_text_string),0.1, texture[2] };

  007cc	0f 57 c0	 xorps	 xmm0, xmm0
  007cf	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _text_test_quad$[ebp], xmm0
  007d7	0f 57 c0	 xorps	 xmm0, xmm0
  007da	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _text_test_quad$[ebp+4], xmm0
  007e2	8b 45 f4	 mov	 eax, DWORD PTR _test_text_string$[ebp]
  007e5	50		 push	 eax
  007e6	e8 00 00 00 00	 call	 _strlen
  007eb	83 c4 04	 add	 esp, 4
  007ee	89 85 10 fc ff
	ff		 mov	 DWORD PTR tv948[ebp], eax
  007f4	f2 0f 2a 85 10
	fc ff ff	 cvtsi2sd xmm0, DWORD PTR tv948[ebp]
  007fc	8b 8d 10 fc ff
	ff		 mov	 ecx, DWORD PTR tv948[ebp]
  00802	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00805	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0080e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00816	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0081a	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _text_test_quad$[ebp+8], xmm0
  00822	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0082a	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _text_test_quad$[ebp+12], xmm0
  00832	b8 04 00 00 00	 mov	 eax, 4
  00837	d1 e0		 shl	 eax, 1
  00839	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  0083f	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _text_test_quad$[ebp+16], ecx

; 165  : 	//create a lot of enemys
; 166  : 	test_list.head = NULL;

  00845	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _test_list, 0

; 167  : 	for (int i = 0; i < 10; ++i) {

  0084f	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$7[ebp], 0
  00859	eb 0f		 jmp	 SHORT $LN7@SDL_main
$LN5@SDL_main:
  0085b	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _i$7[ebp]
  00861	83 c0 01	 add	 eax, 1
  00864	89 85 dc fe ff
	ff		 mov	 DWORD PTR _i$7[ebp], eax
$LN7@SDL_main:
  0086a	83 bd dc fe ff
	ff 0a		 cmp	 DWORD PTR _i$7[ebp], 10	; 0000000aH
  00871	0f 8d 9b 02 00
	00		 jge	 $LN6@SDL_main

; 168  : 		float tmp_vertexes[32] = { -0.2 + (float)i / 20,1,0,1,1,1,0,0, -0.25 + (float)i / 20,1,0,1,1,1,1,0, -0.25 + (float)i / 20,0.9,0,1,1,1,1,1, -0.2 + (float)i / 20,0.9,0,1,1,1,0,1 };

  00877	f3 0f 2a 85 dc
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$7[ebp]
  0087f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41a00000
  00887	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0088b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfc999999999999a
  00893	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00897	f3 0f 11 85 50
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp], xmm0
  0089f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008a7	f3 0f 11 85 54
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+4], xmm0
  008af	0f 57 c0	 xorps	 xmm0, xmm0
  008b2	f3 0f 11 85 58
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+8], xmm0
  008ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008c2	f3 0f 11 85 5c
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+12], xmm0
  008ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008d2	f3 0f 11 85 60
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+16], xmm0
  008da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008e2	f3 0f 11 85 64
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+20], xmm0
  008ea	0f 57 c0	 xorps	 xmm0, xmm0
  008ed	f3 0f 11 85 68
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+24], xmm0
  008f5	0f 57 c0	 xorps	 xmm0, xmm0
  008f8	f3 0f 11 85 6c
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+28], xmm0
  00900	f3 0f 2a 85 dc
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$7[ebp]
  00908	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41a00000
  00910	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00914	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd0000000000000
  0091c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00920	f3 0f 11 85 70
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+32], xmm0
  00928	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00930	f3 0f 11 85 74
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+36], xmm0
  00938	0f 57 c0	 xorps	 xmm0, xmm0
  0093b	f3 0f 11 85 78
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+40], xmm0
  00943	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0094b	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+44], xmm0
  00953	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0095b	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+48], xmm0
  00963	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0096b	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+52], xmm0
  00973	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0097b	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+56], xmm0
  00983	0f 57 c0	 xorps	 xmm0, xmm0
  00986	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+60], xmm0
  0098e	f3 0f 2a 85 dc
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$7[ebp]
  00996	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41a00000
  0099e	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  009a2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfd0000000000000
  009aa	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  009ae	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+64], xmm0
  009b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  009be	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+68], xmm0
  009c6	0f 57 c0	 xorps	 xmm0, xmm0
  009c9	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+72], xmm0
  009d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009d9	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+76], xmm0
  009e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009e9	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+80], xmm0
  009f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009f9	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+84], xmm0
  00a01	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a09	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+88], xmm0
  00a11	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a19	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+92], xmm0
  00a21	f3 0f 2a 85 dc
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$7[ebp]
  00a29	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41a00000
  00a31	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00a35	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@bfc999999999999a
  00a3d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a41	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+96], xmm0
  00a49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00a51	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+100], xmm0
  00a59	0f 57 c0	 xorps	 xmm0, xmm0
  00a5c	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+104], xmm0
  00a64	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a6c	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+108], xmm0
  00a74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a7c	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+112], xmm0
  00a84	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a8c	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+116], xmm0
  00a94	0f 57 c0	 xorps	 xmm0, xmm0
  00a97	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+120], xmm0
  00a9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00aa7	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$6[ebp+124], xmm0

; 169  : 		personMale* test_person = calloc(1, sizeof(personMale));

  00aaf	8b f4		 mov	 esi, esp
  00ab1	68 84 00 00 00	 push	 132			; 00000084H
  00ab6	6a 01		 push	 1
  00ab8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00abe	83 c4 08	 add	 esp, 8
  00ac1	3b f4		 cmp	 esi, esp
  00ac3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ac8	89 85 44 fe ff
	ff		 mov	 DWORD PTR _test_person$5[ebp], eax

; 170  : 		memcpy(test_person->vertexes, tmp_vertexes, 32 * sizeof(float));

  00ace	68 80 00 00 00	 push	 128			; 00000080H
  00ad3	8d 85 50 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$6[ebp]
  00ad9	50		 push	 eax
  00ada	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _test_person$5[ebp]
  00ae0	51		 push	 ecx
  00ae1	e8 00 00 00 00	 call	 _memcpy
  00ae6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 		test_person->health = 100;

  00ae9	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR _test_person$5[ebp]
  00aef	c7 80 80 00 00
	00 64 00 00 00	 mov	 DWORD PTR [eax+128], 100 ; 00000064H

; 172  : 		LIST_AddElement(&test_list, test_person);

  00af9	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR _test_person$5[ebp]
  00aff	50		 push	 eax
  00b00	68 00 00 00 00	 push	 OFFSET _test_list
  00b05	e8 00 00 00 00	 call	 _LIST_AddElement
  00b0a	83 c4 08	 add	 esp, 8

; 173  : 	    
; 174  : 	}

  00b0d	e9 49 fd ff ff	 jmp	 $LN5@SDL_main
$LN6@SDL_main:

; 175  : 	glClearColor(0, 0, 0, 1);

  00b12	8b f4		 mov	 esi, esp
  00b14	51		 push	 ecx
  00b15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b22	51		 push	 ecx
  00b23	0f 57 c0	 xorps	 xmm0, xmm0
  00b26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2b	51		 push	 ecx
  00b2c	0f 57 c0	 xorps	 xmm0, xmm0
  00b2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b34	51		 push	 ecx
  00b35	0f 57 c0	 xorps	 xmm0, xmm0
  00b38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b3d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glClearColor
  00b43	3b f4		 cmp	 esi, esp
  00b45	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 176  : 	//Stuff that needs to be outside of the while loop
; 177  : 	Uint8* key_input = SDL_GetKeyboardState(NULL);

  00b4a	6a 00		 push	 0
  00b4c	e8 00 00 00 00	 call	 _SDL_GetKeyboardState
  00b51	83 c4 04	 add	 esp, 4
  00b54	89 85 38 fe ff
	ff		 mov	 DWORD PTR _key_input$[ebp], eax
$LN8@SDL_main:

; 178  : 	SDL_Event event_handle;
; 179  : 	while (1) {

  00b5a	b8 01 00 00 00	 mov	 eax, 1
  00b5f	85 c0		 test	 eax, eax
  00b61	0f 84 06 09 00
	00		 je	 $SHUTDOWN$62

; 180  : 		start = clock();

  00b67	8b f4		 mov	 esi, esp
  00b69	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  00b6f	3b f4		 cmp	 esi, esp
  00b71	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b76	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00b7a	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _start, xmm0

; 181  : 		if (SDL_PollEvent(&event_handle)) {

  00b82	8d 85 f8 fd ff
	ff		 lea	 eax, DWORD PTR _event_handle$[ebp]
  00b88	50		 push	 eax
  00b89	e8 00 00 00 00	 call	 _SDL_PollEvent
  00b8e	83 c4 04	 add	 esp, 4
  00b91	85 c0		 test	 eax, eax
  00b93	0f 84 27 01 00
	00		 je	 $LN28@SDL_main

; 182  : 			if (event_handle.type == SDL_WINDOWEVENT) {

  00b99	81 bd f8 fd ff
	ff 00 02 00 00	 cmp	 DWORD PTR _event_handle$[ebp], 512 ; 00000200H
  00ba3	0f 85 17 01 00
	00		 jne	 $LN28@SDL_main

; 183  : 				if (event_handle.window.event == SDL_WINDOWEVENT_CLOSE) {

  00ba9	0f b6 85 04 fe
	ff ff		 movzx	 eax, BYTE PTR _event_handle$[ebp+12]
  00bb0	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00bb3	75 05		 jne	 SHORT $LN27@SDL_main

; 184  : 					goto SHUTDOWN;

  00bb5	e9 b3 08 00 00	 jmp	 $SHUTDOWN$62
$LN27@SDL_main:

; 185  : 				}
; 186  : 				if (event_handle.window.event == SDL_WINDOWEVENT_RESIZED) {

  00bba	0f b6 85 04 fe
	ff ff		 movzx	 eax, BYTE PTR _event_handle$[ebp+12]
  00bc1	83 f8 05	 cmp	 eax, 5
  00bc4	0f 85 f6 00 00
	00		 jne	 $LN28@SDL_main

; 187  : 					glViewport(0, 0, event_handle.window.data1, event_handle.window.data2);

  00bca	8b f4		 mov	 esi, esp
  00bcc	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _event_handle$[ebp+20]
  00bd2	50		 push	 eax
  00bd3	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _event_handle$[ebp+16]
  00bd9	51		 push	 ecx
  00bda	6a 00		 push	 0
  00bdc	6a 00		 push	 0
  00bde	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glViewport
  00be4	3b f4		 cmp	 esi, esp
  00be6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 188  : 					glOrtho(0, event_handle.window.data1, 0, event_handle.window.data2, 1.0, -1.0);

  00beb	8b f4		 mov	 esi, esp
  00bed	83 ec 08	 sub	 esp, 8
  00bf0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00bf8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00bfd	83 ec 08	 sub	 esp, 8
  00c00	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00c08	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c0d	f2 0f 2a 85 0c
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR _event_handle$[ebp+20]
  00c15	83 ec 08	 sub	 esp, 8
  00c18	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c1d	83 ec 08	 sub	 esp, 8
  00c20	0f 57 c0	 xorps	 xmm0, xmm0
  00c23	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c28	f2 0f 2a 85 08
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR _event_handle$[ebp+16]
  00c30	83 ec 08	 sub	 esp, 8
  00c33	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c38	83 ec 08	 sub	 esp, 8
  00c3b	0f 57 c0	 xorps	 xmm0, xmm0
  00c3e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c43	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glOrtho
  00c49	3b f4		 cmp	 esi, esp
  00c4b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 189  : 					glm_ortho(0, event_handle.window.data1, 0, event_handle.window.data2, 1.0, -1.0, ortho);

  00c50	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _ortho$[ebp]
  00c56	50		 push	 eax
  00c57	51		 push	 ecx
  00c58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00c60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c65	51		 push	 ecx
  00c66	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c73	f3 0f 2a 85 0c
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _event_handle$[ebp+20]
  00c7b	51		 push	 ecx
  00c7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c81	51		 push	 ecx
  00c82	0f 57 c0	 xorps	 xmm0, xmm0
  00c85	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c8a	f3 0f 2a 85 08
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _event_handle$[ebp+16]
  00c92	51		 push	 ecx
  00c93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c98	51		 push	 ecx
  00c99	0f 57 c0	 xorps	 xmm0, xmm0
  00c9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ca1	e8 00 00 00 00	 call	 _glm_ortho
  00ca6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 190  : 					window_width = event_handle.window.data1, window_height = event_handle.window.data2;

  00ca9	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _event_handle$[ebp+16]
  00caf	a3 00 00 00 00	 mov	 DWORD PTR _window_width, eax
  00cb4	8b 8d 0c fe ff
	ff		 mov	 ecx, DWORD PTR _event_handle$[ebp+20]
  00cba	89 0d 00 00 00
	00		 mov	 DWORD PTR _window_height, ecx
$LN28@SDL_main:

; 191  : 				}
; 192  : 			}
; 193  : 		}
; 194  : 
; 195  : 		glClear(GL_COLOR_BUFFER_BIT);

  00cc0	8b f4		 mov	 esi, esp
  00cc2	68 00 40 00 00	 push	 16384			; 00004000H
  00cc7	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glClear
  00ccd	3b f4		 cmp	 esi, esp
  00ccf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 196  : 		//cycle the background
; 197  : 		background_vertexes[6] = background_vertexes[6] + 0.5 * delta_time, background_vertexes[14] = background_vertexes[14] + 0.5 * delta_time;

  00cd4	b8 04 00 00 00	 mov	 eax, 4
  00cd9	6b c8 06	 imul	 ecx, eax, 6
  00cdc	f3 0f 5a 81 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[ecx]
  00ce4	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00cec	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00cf4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00cf8	ba 04 00 00 00	 mov	 edx, 4
  00cfd	6b c2 06	 imul	 eax, edx, 6
  00d00	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d04	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00d0c	b9 04 00 00 00	 mov	 ecx, 4
  00d11	6b d1 0e	 imul	 edx, ecx, 14
  00d14	f3 0f 5a 82 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[edx]
  00d1c	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00d24	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00d2c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00d30	b8 04 00 00 00	 mov	 eax, 4
  00d35	6b c8 0e	 imul	 ecx, eax, 14
  00d38	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d3c	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0

; 198  : 		background_vertexes[22] = background_vertexes[22] + 0.5 * delta_time, background_vertexes[30] = background_vertexes[30] + 0.5 * delta_time;

  00d44	b8 04 00 00 00	 mov	 eax, 4
  00d49	6b c8 16	 imul	 ecx, eax, 22
  00d4c	f3 0f 5a 81 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[ecx]
  00d54	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00d5c	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00d64	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00d68	ba 04 00 00 00	 mov	 edx, 4
  00d6d	6b c2 16	 imul	 eax, edx, 22
  00d70	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00d74	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00d7c	b9 04 00 00 00	 mov	 ecx, 4
  00d81	6b d1 1e	 imul	 edx, ecx, 30
  00d84	f3 0f 5a 82 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[edx]
  00d8c	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00d94	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00d9c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00da0	b8 04 00 00 00	 mov	 eax, 4
  00da5	6b c8 1e	 imul	 ecx, eax, 30
  00da8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00dac	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0

; 199  : 		if (background_vertexes[6] > 1)

  00db4	b8 04 00 00 00	 mov	 eax, 4
  00db9	6b c8 06	 imul	 ecx, eax, 6
  00dbc	f3 0f 10 81 00
	00 00 00	 movss	 xmm0, DWORD PTR _background_vertexes[ecx]
  00dc4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00dcb	76 56		 jbe	 SHORT $LN29@SDL_main

; 200  : 			background_vertexes[6] = 0, background_vertexes[14] = 1, background_vertexes[22] = 1, background_vertexes[30] = 0;

  00dcd	b8 04 00 00 00	 mov	 eax, 4
  00dd2	6b c8 06	 imul	 ecx, eax, 6
  00dd5	0f 57 c0	 xorps	 xmm0, xmm0
  00dd8	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0
  00de0	ba 04 00 00 00	 mov	 edx, 4
  00de5	6b c2 0e	 imul	 eax, edx, 14
  00de8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00df0	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00df8	b9 04 00 00 00	 mov	 ecx, 4
  00dfd	6b d1 16	 imul	 edx, ecx, 22
  00e00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e08	f3 0f 11 82 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[edx], xmm0
  00e10	b8 04 00 00 00	 mov	 eax, 4
  00e15	6b c8 1e	 imul	 ecx, eax, 30
  00e18	0f 57 c0	 xorps	 xmm0, xmm0
  00e1b	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0
$LN29@SDL_main:

; 201  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), background_vertexes);

  00e23	8b f4		 mov	 esi, esp
  00e25	68 00 00 00 00	 push	 OFFSET _background_vertexes
  00e2a	68 80 00 00 00	 push	 128			; 00000080H
  00e2f	6a 00		 push	 0
  00e31	68 92 88 00 00	 push	 34962			; 00008892H
  00e36	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00e3c	3b f4		 cmp	 esi, esp
  00e3e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 202  : 		glBindTexture(GL_TEXTURE_2D, texture[1]);

  00e43	b8 04 00 00 00	 mov	 eax, 4
  00e48	c1 e0 00	 shl	 eax, 0
  00e4b	8b f4		 mov	 esi, esp
  00e4d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00e53	51		 push	 ecx
  00e54	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00e59	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00e5f	3b f4		 cmp	 esi, esp
  00e61	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 203  : 		glDrawArrays(GL_QUADS, 0, 4);

  00e66	8b f4		 mov	 esi, esp
  00e68	6a 04		 push	 4
  00e6a	6a 00		 push	 0
  00e6c	6a 07		 push	 7
  00e6e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00e74	3b f4		 cmp	 esi, esp
  00e76	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 204  : 		//input processing
; 205  : 		if (SDL_GetMouseState(NULL, NULL) & SDL_BUTTON(SDL_BUTTON_LEFT)) {

  00e7b	6a 00		 push	 0
  00e7d	6a 00		 push	 0
  00e7f	e8 00 00 00 00	 call	 _SDL_GetMouseState
  00e84	83 c4 08	 add	 esp, 8
  00e87	83 e0 01	 and	 eax, 1
  00e8a	74 10		 je	 SHORT $LN30@SDL_main

; 206  : 			SDL_SetCursor(mouse_closed);

  00e8c	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse_closed
  00e91	50		 push	 eax
  00e92	e8 00 00 00 00	 call	 _SDL_SetCursor
  00e97	83 c4 04	 add	 esp, 4

; 207  : 		}

  00e9a	eb 0e		 jmp	 SHORT $LN31@SDL_main
$LN30@SDL_main:

; 208  : 		else {
; 209  : 			SDL_SetCursor(mouse_opened);

  00e9c	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse_opened
  00ea1	50		 push	 eax
  00ea2	e8 00 00 00 00	 call	 _SDL_SetCursor
  00ea7	83 c4 04	 add	 esp, 4
$LN31@SDL_main:

; 210  : 		}
; 211  : 		if (key_input[SDL_SCANCODE_RIGHT]) {

  00eaa	b8 01 00 00 00	 mov	 eax, 1
  00eaf	6b c8 4f	 imul	 ecx, eax, 79
  00eb2	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00eb8	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00ebc	85 c0		 test	 eax, eax
  00ebe	74 20		 je	 SHORT $LN32@SDL_main

; 212  : 			text_test_quad.x = text_test_quad.x + player_wasd_speed * delta_time;

  00ec0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00ec8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00ed0	f3 0f 58 85 e8
	fe ff ff	 addss	 xmm0, DWORD PTR _text_test_quad$[ebp]
  00ed8	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _text_test_quad$[ebp], xmm0
$LN32@SDL_main:

; 213  : 		}
; 214  : 		if (key_input[SDL_SCANCODE_LEFT]) {

  00ee0	b8 01 00 00 00	 mov	 eax, 1
  00ee5	6b c8 50	 imul	 ecx, eax, 80
  00ee8	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00eee	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00ef2	85 c0		 test	 eax, eax
  00ef4	74 24		 je	 SHORT $LN33@SDL_main

; 215  : 			text_test_quad.x = text_test_quad.x - player_wasd_speed * delta_time;

  00ef6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00efe	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00f06	f3 0f 10 8d e8
	fe ff ff	 movss	 xmm1, DWORD PTR _text_test_quad$[ebp]
  00f0e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00f12	f3 0f 11 8d e8
	fe ff ff	 movss	 DWORD PTR _text_test_quad$[ebp], xmm1
$LN33@SDL_main:

; 216  : 		}
; 217  : 		if (key_input[SDL_SCANCODE_UP]) {

  00f1a	b8 01 00 00 00	 mov	 eax, 1
  00f1f	6b c8 52	 imul	 ecx, eax, 82
  00f22	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00f28	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00f2c	85 c0		 test	 eax, eax
  00f2e	74 0c		 je	 SHORT $LN34@SDL_main

; 218  : 			left++;

  00f30	a0 00 00 00 00	 mov	 al, BYTE PTR _left
  00f35	04 01		 add	 al, 1
  00f37	a2 00 00 00 00	 mov	 BYTE PTR _left, al
$LN34@SDL_main:

; 219  : 		}
; 220  : 		if (key_input[SDL_SCANCODE_DOWN]) {

  00f3c	b8 01 00 00 00	 mov	 eax, 1
  00f41	6b c8 51	 imul	 ecx, eax, 81
  00f44	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00f4a	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00f4e	85 c0		 test	 eax, eax
  00f50	74 0c		 je	 SHORT $LN35@SDL_main

; 221  : 			left--;

  00f52	a0 00 00 00 00	 mov	 al, BYTE PTR _left
  00f57	2c 01		 sub	 al, 1
  00f59	a2 00 00 00 00	 mov	 BYTE PTR _left, al
$LN35@SDL_main:

; 222  : 		}
; 223  : 		Mix_SetPanning(0, left, 255 - left);

  00f5e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _left
  00f65	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00f6a	2b c8		 sub	 ecx, eax
  00f6c	51		 push	 ecx
  00f6d	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _left
  00f74	52		 push	 edx
  00f75	6a 00		 push	 0
  00f77	e8 00 00 00 00	 call	 _Mix_SetPanning
  00f7c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 224  : 		if (key_input[SDL_SCANCODE_F]) {

  00f7f	b8 01 00 00 00	 mov	 eax, 1
  00f84	6b c8 09	 imul	 ecx, eax, 9
  00f87	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00f8d	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00f91	85 c0		 test	 eax, eax
  00f93	74 1d		 je	 SHORT $LN36@SDL_main

; 225  : 			printf("time:%f\n", delta_time);

  00f95	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _delta_time
  00f9d	83 ec 08	 sub	 esp, 8
  00fa0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00fa5	68 00 00 00 00	 push	 OFFSET ??_C@_08DINNBOH@time?3?$CFf?6@
  00faa	e8 00 00 00 00	 call	 _printf
  00faf	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN36@SDL_main:

; 226  : 		}
; 227  : 		if (key_input[SDL_SCANCODE_SPACE]) {

  00fb2	b8 01 00 00 00	 mov	 eax, 1
  00fb7	6b c8 2c	 imul	 ecx, eax, 44
  00fba	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00fc0	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00fc4	85 c0		 test	 eax, eax
  00fc6	74 0e		 je	 SHORT $LN37@SDL_main

; 228  : 			Mix_PlayMusic(test, 1);

  00fc8	6a 01		 push	 1
  00fca	8b 45 c4	 mov	 eax, DWORD PTR _test$[ebp]
  00fcd	50		 push	 eax
  00fce	e8 00 00 00 00	 call	 _Mix_PlayMusic
  00fd3	83 c4 08	 add	 esp, 8
$LN37@SDL_main:

; 229  : 		}
; 230  : 		if (key_input[SDL_SCANCODE_D]) {

  00fd6	b8 01 00 00 00	 mov	 eax, 1
  00fdb	6b c8 07	 imul	 ecx, eax, 7
  00fde	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00fe4	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00fe8	85 c0		 test	 eax, eax
  00fea	74 20		 je	 SHORT $LN38@SDL_main

; 231  : 			player_quad.x = player_quad.x + player_wasd_speed * delta_time;

  00fec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00ff4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00ffc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad
  01004	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
$LN38@SDL_main:

; 232  : 		}
; 233  : 		if (key_input[SDL_SCANCODE_A]) {

  0100c	b8 01 00 00 00	 mov	 eax, 1
  01011	c1 e0 02	 shl	 eax, 2
  01014	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR _key_input$[ebp]
  0101a	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0101e	85 d2		 test	 edx, edx
  01020	74 24		 je	 SHORT $LN39@SDL_main

; 234  : 			player_quad.x = player_quad.x - player_wasd_speed * delta_time;

  01022	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  0102a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  01032	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR _player_quad
  0103a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0103e	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm1
$LN39@SDL_main:

; 235  : 		}
; 236  : 		if (key_input[SDL_SCANCODE_S]) {

  01046	b8 01 00 00 00	 mov	 eax, 1
  0104b	6b c8 16	 imul	 ecx, eax, 22
  0104e	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  01054	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  01058	85 c0		 test	 eax, eax
  0105a	74 24		 je	 SHORT $LN40@SDL_main

; 237  : 			player_quad.y = player_quad.y - player_wasd_speed * delta_time;

  0105c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  01064	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  0106c	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR _player_quad+4
  01074	f3 0f 5c c8	 subss	 xmm1, xmm0
  01078	f3 0f 11 0d 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm1
$LN40@SDL_main:

; 238  : 		}
; 239  : 		//TODO ADD JUMP PYHSICS AND ACTUAL PYHSICS
; 240  : 		if (key_input[SDL_SCANCODE_W]) {

  01080	b8 01 00 00 00	 mov	 eax, 1
  01085	6b c8 1a	 imul	 ecx, eax, 26
  01088	8b 95 38 fe ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  0108e	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  01092	85 c0		 test	 eax, eax
  01094	74 20		 je	 SHORT $LN41@SDL_main

; 241  : 			player_quad.y = player_quad.y + player_wasd_speed * delta_time;

  01096	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  0109e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  010a6	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+4
  010ae	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
$LN41@SDL_main:

; 242  : 		}
; 243  : 		//make sure player is not outside of the window
; 244  : 		if (player_quad.x < -1) {

  010b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  010be	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR _player_quad
  010c5	76 12		 jbe	 SHORT $LN42@SDL_main

; 245  : 			player_quad.x = -1;

  010c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  010cf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0

; 246  : 
; 247  : 		}

  010d7	eb 29		 jmp	 SHORT $LN44@SDL_main
$LN42@SDL_main:

; 248  : 		else if (player_quad.x + player_quad.w > 1) {

  010d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_quad
  010e1	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+8
  010e9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  010f0	76 10		 jbe	 SHORT $LN44@SDL_main

; 249  : 			player_quad.x = 0.9;

  010f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  010fa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
$LN44@SDL_main:

; 250  : 
; 251  : 		}
; 252  : 		if (player_quad.y > 1) {

  01102	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR _player_quad+4
  0110a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  01111	76 12		 jbe	 SHORT $LN45@SDL_main

; 253  : 			player_quad.y = 1;

  01113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0111b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0

; 254  : 
; 255  : 		}

  01123	eb 29		 jmp	 SHORT $LN47@SDL_main
$LN45@SDL_main:

; 256  : 		else if (player_quad.y < -1 + player_quad.h) {

  01125	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0112d	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+12
  01135	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR _player_quad+4
  0113c	76 10		 jbe	 SHORT $LN47@SDL_main

; 257  : 			player_quad.y = -0.8;

  0113e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  01146	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
$LN47@SDL_main:

; 258  : 
; 259  : 		}
; 260  : 		quad test_colored = { 0,0,0.2,0.2 };

  0114e	0f 57 c0	 xorps	 xmm0, xmm0
  01151	f3 0f 11 85 e0
	fd ff ff	 movss	 DWORD PTR _test_colored$4[ebp], xmm0
  01159	0f 57 c0	 xorps	 xmm0, xmm0
  0115c	f3 0f 11 85 e4
	fd ff ff	 movss	 DWORD PTR _test_colored$4[ebp+4], xmm0
  01164	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0116c	f3 0f 11 85 e8
	fd ff ff	 movss	 DWORD PTR _test_colored$4[ebp+8], xmm0
  01174	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0117c	f3 0f 11 85 ec
	fd ff ff	 movss	 DWORD PTR _test_colored$4[ebp+12], xmm0

; 261  : 		quad test_colored2 = { 0,-0.2, 0.2, 0.2 };

  01184	0f 57 c0	 xorps	 xmm0, xmm0
  01187	f3 0f 11 85 c8
	fd ff ff	 movss	 DWORD PTR _test_colored2$3[ebp], xmm0
  0118f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be4ccccd
  01197	f3 0f 11 85 cc
	fd ff ff	 movss	 DWORD PTR _test_colored2$3[ebp+4], xmm0
  0119f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  011a7	f3 0f 11 85 d0
	fd ff ff	 movss	 DWORD PTR _test_colored2$3[ebp+8], xmm0
  011af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  011b7	f3 0f 11 85 d4
	fd ff ff	 movss	 DWORD PTR _test_colored2$3[ebp+12], xmm0

; 262  : 		quad test_colored3 = { 0,-0.4, 0.2, 0.2 };

  011bf	0f 57 c0	 xorps	 xmm0, xmm0
  011c2	f3 0f 11 85 b0
	fd ff ff	 movss	 DWORD PTR _test_colored3$2[ebp], xmm0
  011ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@becccccd
  011d2	f3 0f 11 85 b4
	fd ff ff	 movss	 DWORD PTR _test_colored3$2[ebp+4], xmm0
  011da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  011e2	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _test_colored3$2[ebp+8], xmm0
  011ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  011f2	f3 0f 11 85 bc
	fd ff ff	 movss	 DWORD PTR _test_colored3$2[ebp+12], xmm0

; 263  : 		quad source_rect = { 0,0,1,1 };

  011fa	0f 57 c0	 xorps	 xmm0, xmm0
  011fd	f3 0f 11 85 98
	fd ff ff	 movss	 DWORD PTR _source_rect$1[ebp], xmm0
  01205	0f 57 c0	 xorps	 xmm0, xmm0
  01208	f3 0f 11 85 9c
	fd ff ff	 movss	 DWORD PTR _source_rect$1[ebp+4], xmm0
  01210	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01218	f3 0f 11 85 a0
	fd ff ff	 movss	 DWORD PTR _source_rect$1[ebp+8], xmm0
  01220	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01228	f3 0f 11 85 a4
	fd ff ff	 movss	 DWORD PTR _source_rect$1[ebp+12], xmm0

; 264  : 		RENDER_TexturedQuadSheet(player_quad,source_rect,1,1,1, false);

  01230	6a 00		 push	 0
  01232	51		 push	 ecx
  01233	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0123b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01240	51		 push	 ecx
  01241	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01249	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0124e	51		 push	 ecx
  0124f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01257	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0125c	83 ec 10	 sub	 esp, 16			; 00000010H
  0125f	8b c4		 mov	 eax, esp
  01261	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _source_rect$1[ebp]
  01267	89 08		 mov	 DWORD PTR [eax], ecx
  01269	8b 95 9c fd ff
	ff		 mov	 edx, DWORD PTR _source_rect$1[ebp+4]
  0126f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01272	8b 8d a0 fd ff
	ff		 mov	 ecx, DWORD PTR _source_rect$1[ebp+8]
  01278	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0127b	8b 95 a4 fd ff
	ff		 mov	 edx, DWORD PTR _source_rect$1[ebp+12]
  01281	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  01284	83 ec 14	 sub	 esp, 20			; 00000014H
  01287	8b c4		 mov	 eax, esp
  01289	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _player_quad
  0128f	89 08		 mov	 DWORD PTR [eax], ecx
  01291	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _player_quad+4
  01297	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0129a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _player_quad+8
  012a0	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  012a3	8b 15 0c 00 00
	00		 mov	 edx, DWORD PTR _player_quad+12
  012a9	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  012ac	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _player_quad+16
  012b2	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  012b5	e8 00 00 00 00	 call	 _RENDER_TexturedQuadSheet
  012ba	83 c4 34	 add	 esp, 52			; 00000034H

; 265  : 		RENDER_Quad(test_colored, 1, 0, 0);

  012bd	51		 push	 ecx
  012be	0f 57 c0	 xorps	 xmm0, xmm0
  012c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c6	51		 push	 ecx
  012c7	0f 57 c0	 xorps	 xmm0, xmm0
  012ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012cf	51		 push	 ecx
  012d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  012d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012dd	83 ec 10	 sub	 esp, 16			; 00000010H
  012e0	8b c4		 mov	 eax, esp
  012e2	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _test_colored$4[ebp]
  012e8	89 08		 mov	 DWORD PTR [eax], ecx
  012ea	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _test_colored$4[ebp+4]
  012f0	89 50 04	 mov	 DWORD PTR [eax+4], edx
  012f3	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _test_colored$4[ebp+8]
  012f9	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  012fc	8b 95 ec fd ff
	ff		 mov	 edx, DWORD PTR _test_colored$4[ebp+12]
  01302	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  01305	e8 00 00 00 00	 call	 _RENDER_Quad
  0130a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 266  : 		RENDER_Quad(test_colored2, 0, 1, 0);

  0130d	51		 push	 ecx
  0130e	0f 57 c0	 xorps	 xmm0, xmm0
  01311	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01316	51		 push	 ecx
  01317	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0131f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01324	51		 push	 ecx
  01325	0f 57 c0	 xorps	 xmm0, xmm0
  01328	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0132d	83 ec 10	 sub	 esp, 16			; 00000010H
  01330	8b c4		 mov	 eax, esp
  01332	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR _test_colored2$3[ebp]
  01338	89 08		 mov	 DWORD PTR [eax], ecx
  0133a	8b 95 cc fd ff
	ff		 mov	 edx, DWORD PTR _test_colored2$3[ebp+4]
  01340	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01343	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR _test_colored2$3[ebp+8]
  01349	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0134c	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR _test_colored2$3[ebp+12]
  01352	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  01355	e8 00 00 00 00	 call	 _RENDER_Quad
  0135a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 267  : 		RENDER_Quad(test_colored3, 0, 0, 1);

  0135d	51		 push	 ecx
  0135e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0136b	51		 push	 ecx
  0136c	0f 57 c0	 xorps	 xmm0, xmm0
  0136f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01374	51		 push	 ecx
  01375	0f 57 c0	 xorps	 xmm0, xmm0
  01378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0137d	83 ec 10	 sub	 esp, 16			; 00000010H
  01380	8b c4		 mov	 eax, esp
  01382	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _test_colored3$2[ebp]
  01388	89 08		 mov	 DWORD PTR [eax], ecx
  0138a	8b 95 b4 fd ff
	ff		 mov	 edx, DWORD PTR _test_colored3$2[ebp+4]
  01390	89 50 04	 mov	 DWORD PTR [eax+4], edx
  01393	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _test_colored3$2[ebp+8]
  01399	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0139c	8b 95 bc fd ff
	ff		 mov	 edx, DWORD PTR _test_colored3$2[ebp+12]
  013a2	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  013a5	e8 00 00 00 00	 call	 _RENDER_Quad
  013aa	83 c4 1c	 add	 esp, 28			; 0000001cH

; 268  : 		RENDER_TexturedQuad(text_test_quad, 0.05, 1, 0.1, false);

  013ad	6a 00		 push	 0
  013af	51		 push	 ecx
  013b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  013b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013bd	51		 push	 ecx
  013be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  013c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013cb	51		 push	 ecx
  013cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  013d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d9	83 ec 14	 sub	 esp, 20			; 00000014H
  013dc	8b c4		 mov	 eax, esp
  013de	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _text_test_quad$[ebp]
  013e4	89 08		 mov	 DWORD PTR [eax], ecx
  013e6	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _text_test_quad$[ebp+4]
  013ec	89 50 04	 mov	 DWORD PTR [eax+4], edx
  013ef	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _text_test_quad$[ebp+8]
  013f5	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  013f8	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _text_test_quad$[ebp+12]
  013fe	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  01401	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _text_test_quad$[ebp+16]
  01407	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0140a	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  0140f	83 c4 24	 add	 esp, 36			; 00000024H

; 269  : 		RENDER_List(&test_list);

  01412	68 00 00 00 00	 push	 OFFSET _test_list
  01417	e8 00 00 00 00	 call	 _RENDER_List
  0141c	83 c4 04	 add	 esp, 4

; 270  : 		SDL_GL_SwapWindow(window);

  0141f	a1 00 00 00 00	 mov	 eax, DWORD PTR _window
  01424	50		 push	 eax
  01425	e8 00 00 00 00	 call	 _SDL_GL_SwapWindow
  0142a	83 c4 04	 add	 esp, 4

; 271  : 		delta_time = clock() - start;

  0142d	8b f4		 mov	 esi, esp
  0142f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  01435	3b f4		 cmp	 esi, esp
  01437	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0143c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  01440	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR _start
  01448	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _delta_time, xmm0

; 272  : 		delta_time /= CLOCKS_PER_SEC;

  01450	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _delta_time
  01458	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  01460	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _delta_time, xmm0

; 273  : 	}	

  01468	e9 ed f6 ff ff	 jmp	 $LN8@SDL_main
$SHUTDOWN$62:

; 274  : SHUTDOWN:
; 275  : 	return 0;

  0146d	33 c0		 xor	 eax, eax

; 276  : }

  0146f	52		 push	 edx
  01470	8b cd		 mov	 ecx, ebp
  01472	50		 push	 eax
  01473	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN61@SDL_main
  01479	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0147e	58		 pop	 eax
  0147f	5a		 pop	 edx
  01480	5f		 pop	 edi
  01481	5e		 pop	 esi
  01482	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01485	33 cd		 xor	 ecx, ebp
  01487	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0148c	8b e5		 mov	 esp, ebp
  0148e	5d		 pop	 ebp
  0148f	8b e3		 mov	 esp, ebx
  01491	5b		 pop	 ebx
  01492	c3		 ret	 0
  01493	90		 npad	 1
$LN61@SDL_main:
  01494	0b 00 00 00	 DD	 11			; 0000000bH
  01498	00 00 00 00	 DD	 $LN60@SDL_main
$LN60@SDL_main:
  0149c	ac ff ff ff	 DD	 -84			; ffffffacH
  014a0	04 00 00 00	 DD	 4
  014a4	00 00 00 00	 DD	 $LN49@SDL_main
  014a8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  014ac	04 00 00 00	 DD	 4
  014b0	00 00 00 00	 DD	 $LN50@SDL_main
  014b4	94 ff ff ff	 DD	 -108			; ffffff94H
  014b8	02 00 00 00	 DD	 2
  014bc	00 00 00 00	 DD	 $LN51@SDL_main
  014c0	40 ff ff ff	 DD	 -192			; ffffff40H
  014c4	40 00 00 00	 DD	 64			; 00000040H
  014c8	00 00 00 00	 DD	 $LN52@SDL_main
  014cc	e8 fe ff ff	 DD	 -280			; fffffee8H
  014d0	14 00 00 00	 DD	 20			; 00000014H
  014d4	00 00 00 00	 DD	 $LN53@SDL_main
  014d8	50 fe ff ff	 DD	 -432			; fffffe50H
  014dc	80 00 00 00	 DD	 128			; 00000080H
  014e0	00 00 00 00	 DD	 $LN54@SDL_main
  014e4	f8 fd ff ff	 DD	 -520			; fffffdf8H
  014e8	38 00 00 00	 DD	 56			; 00000038H
  014ec	00 00 00 00	 DD	 $LN55@SDL_main
  014f0	e0 fd ff ff	 DD	 -544			; fffffde0H
  014f4	10 00 00 00	 DD	 16			; 00000010H
  014f8	00 00 00 00	 DD	 $LN56@SDL_main
  014fc	c8 fd ff ff	 DD	 -568			; fffffdc8H
  01500	10 00 00 00	 DD	 16			; 00000010H
  01504	00 00 00 00	 DD	 $LN57@SDL_main
  01508	b0 fd ff ff	 DD	 -592			; fffffdb0H
  0150c	10 00 00 00	 DD	 16			; 00000010H
  01510	00 00 00 00	 DD	 $LN58@SDL_main
  01514	98 fd ff ff	 DD	 -616			; fffffd98H
  01518	10 00 00 00	 DD	 16			; 00000010H
  0151c	00 00 00 00	 DD	 $LN59@SDL_main
$LN59@SDL_main:
  01520	73		 DB	 115			; 00000073H
  01521	6f		 DB	 111			; 0000006fH
  01522	75		 DB	 117			; 00000075H
  01523	72		 DB	 114			; 00000072H
  01524	63		 DB	 99			; 00000063H
  01525	65		 DB	 101			; 00000065H
  01526	5f		 DB	 95			; 0000005fH
  01527	72		 DB	 114			; 00000072H
  01528	65		 DB	 101			; 00000065H
  01529	63		 DB	 99			; 00000063H
  0152a	74		 DB	 116			; 00000074H
  0152b	00		 DB	 0
$LN58@SDL_main:
  0152c	74		 DB	 116			; 00000074H
  0152d	65		 DB	 101			; 00000065H
  0152e	73		 DB	 115			; 00000073H
  0152f	74		 DB	 116			; 00000074H
  01530	5f		 DB	 95			; 0000005fH
  01531	63		 DB	 99			; 00000063H
  01532	6f		 DB	 111			; 0000006fH
  01533	6c		 DB	 108			; 0000006cH
  01534	6f		 DB	 111			; 0000006fH
  01535	72		 DB	 114			; 00000072H
  01536	65		 DB	 101			; 00000065H
  01537	64		 DB	 100			; 00000064H
  01538	33		 DB	 51			; 00000033H
  01539	00		 DB	 0
$LN57@SDL_main:
  0153a	74		 DB	 116			; 00000074H
  0153b	65		 DB	 101			; 00000065H
  0153c	73		 DB	 115			; 00000073H
  0153d	74		 DB	 116			; 00000074H
  0153e	5f		 DB	 95			; 0000005fH
  0153f	63		 DB	 99			; 00000063H
  01540	6f		 DB	 111			; 0000006fH
  01541	6c		 DB	 108			; 0000006cH
  01542	6f		 DB	 111			; 0000006fH
  01543	72		 DB	 114			; 00000072H
  01544	65		 DB	 101			; 00000065H
  01545	64		 DB	 100			; 00000064H
  01546	32		 DB	 50			; 00000032H
  01547	00		 DB	 0
$LN56@SDL_main:
  01548	74		 DB	 116			; 00000074H
  01549	65		 DB	 101			; 00000065H
  0154a	73		 DB	 115			; 00000073H
  0154b	74		 DB	 116			; 00000074H
  0154c	5f		 DB	 95			; 0000005fH
  0154d	63		 DB	 99			; 00000063H
  0154e	6f		 DB	 111			; 0000006fH
  0154f	6c		 DB	 108			; 0000006cH
  01550	6f		 DB	 111			; 0000006fH
  01551	72		 DB	 114			; 00000072H
  01552	65		 DB	 101			; 00000065H
  01553	64		 DB	 100			; 00000064H
  01554	00		 DB	 0
$LN55@SDL_main:
  01555	65		 DB	 101			; 00000065H
  01556	76		 DB	 118			; 00000076H
  01557	65		 DB	 101			; 00000065H
  01558	6e		 DB	 110			; 0000006eH
  01559	74		 DB	 116			; 00000074H
  0155a	5f		 DB	 95			; 0000005fH
  0155b	68		 DB	 104			; 00000068H
  0155c	61		 DB	 97			; 00000061H
  0155d	6e		 DB	 110			; 0000006eH
  0155e	64		 DB	 100			; 00000064H
  0155f	6c		 DB	 108			; 0000006cH
  01560	65		 DB	 101			; 00000065H
  01561	00		 DB	 0
$LN54@SDL_main:
  01562	74		 DB	 116			; 00000074H
  01563	6d		 DB	 109			; 0000006dH
  01564	70		 DB	 112			; 00000070H
  01565	5f		 DB	 95			; 0000005fH
  01566	76		 DB	 118			; 00000076H
  01567	65		 DB	 101			; 00000065H
  01568	72		 DB	 114			; 00000072H
  01569	74		 DB	 116			; 00000074H
  0156a	65		 DB	 101			; 00000065H
  0156b	78		 DB	 120			; 00000078H
  0156c	65		 DB	 101			; 00000065H
  0156d	73		 DB	 115			; 00000073H
  0156e	00		 DB	 0
$LN53@SDL_main:
  0156f	74		 DB	 116			; 00000074H
  01570	65		 DB	 101			; 00000065H
  01571	78		 DB	 120			; 00000078H
  01572	74		 DB	 116			; 00000074H
  01573	5f		 DB	 95			; 0000005fH
  01574	74		 DB	 116			; 00000074H
  01575	65		 DB	 101			; 00000065H
  01576	73		 DB	 115			; 00000073H
  01577	74		 DB	 116			; 00000074H
  01578	5f		 DB	 95			; 0000005fH
  01579	71		 DB	 113			; 00000071H
  0157a	75		 DB	 117			; 00000075H
  0157b	61		 DB	 97			; 00000061H
  0157c	64		 DB	 100			; 00000064H
  0157d	00		 DB	 0
$LN52@SDL_main:
  0157e	6f		 DB	 111			; 0000006fH
  0157f	72		 DB	 114			; 00000072H
  01580	74		 DB	 116			; 00000074H
  01581	68		 DB	 104			; 00000068H
  01582	6f		 DB	 111			; 0000006fH
  01583	00		 DB	 0
$LN51@SDL_main:
  01584	66		 DB	 102			; 00000066H
  01585	6f		 DB	 111			; 0000006fH
  01586	72		 DB	 114			; 00000072H
  01587	6d		 DB	 109			; 0000006dH
  01588	61		 DB	 97			; 00000061H
  01589	74		 DB	 116			; 00000074H
  0158a	00		 DB	 0
$LN50@SDL_main:
  0158b	63		 DB	 99			; 00000063H
  0158c	68		 DB	 104			; 00000068H
  0158d	61		 DB	 97			; 00000061H
  0158e	6e		 DB	 110			; 0000006eH
  0158f	6e		 DB	 110			; 0000006eH
  01590	65		 DB	 101			; 00000065H
  01591	6c		 DB	 108			; 0000006cH
  01592	73		 DB	 115			; 00000073H
  01593	00		 DB	 0
$LN49@SDL_main:
  01594	66		 DB	 102			; 00000066H
  01595	72		 DB	 114			; 00000072H
  01596	65		 DB	 101			; 00000065H
  01597	71		 DB	 113			; 00000071H
  01598	00		 DB	 0
_SDL_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
