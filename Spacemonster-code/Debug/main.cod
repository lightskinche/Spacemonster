; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_window_width
PUBLIC	_window_height
PUBLIC	_delta_time
PUBLIC	_overtime_bell_rung
PUBLIC	_white
PUBLIC	_reserve
PUBLIC	_wave
PUBLIC	_score
PUBLIC	_active_en
PUBLIC	_enemy_counter
PUBLIC	_wave_text_quad
PUBLIC	_overtime_quad
PUBLIC	_source_rect_nothing
PUBLIC	_player_wasd_speed
PUBLIC	_background_vertexes
_DATA	SEGMENT
COMM	_L:DWORD
_DATA	ENDS
_BSS	SEGMENT
_delta_time DD	01H DUP (?)
_overtime_bell_rung DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_wave_text:DWORD
COMM	_overtime_text:DWORD
COMM	_font_1:DWORD
_DATA	ENDS
_BSS	SEGMENT
_reserve DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_wave_num:BYTE:02H
_DATA	ENDS
_BSS	SEGMENT
_score	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_cash:DWORD
_DATA	ENDS
_BSS	SEGMENT
_active_en DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_shader_texturedobj:DWORD
COMM	_shader_colored:DWORD
COMM	_texture:DWORD:05H
COMM	_enemies:QWORD
COMM	_window:DWORD
COMM	_glcontext:DWORD
COMM	_test_font_surface:DWORD
COMM	_texturesizeswh:DWORD:02H
COMM	_VAO:DWORD
COMM	_VERTEXES_VBO:DWORD
COMM	_overtime_bell_audio:DWORD
COMM	_player_quad:BYTE:01cH
COMM	_start:DWORD
COMM	_mouse_opened:DWORD
COMM	_mouse_closed:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__186FF47F_stat@h DB 01H
__8C55BF2C_SDL_stdinc@h DB 01H
__A594C705_SDL_endian@h DB 01H
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__6853117E_SDL_rect@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__A4B63AD5_linkedlist_h@h DB 01H
__E7DCAAE8_main@c DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
_window_width DD 0500H
_window_height DD 02d0H
_white	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_wave	DD	01H
_enemy_counter DD 01H
_wave_text_quad DD 000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03dcccccdr			; 0.1
	ORG $+12
_overtime_quad DD 000000000r			; 0
	DD	03f4ccccdr			; 0.8
	DD	000000000r			; 0
	DD	03dcccccdr			; 0.1
	ORG $+12
_source_rect_nothing DD 000000000r		; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
_player_wasd_speed DD 03faccccdr		; 1.35
_background_vertexes DD 0bf800000r		; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_printf
PUBLIC	_SDL_main
PUBLIC	_glm_mat4_copy
PUBLIC	_glm_mat4_zero
PUBLIC	_glm_ortho
PUBLIC	_LIST_AddElement
PUBLIC	_LIST_RemoveAt
PUBLIC	_LIST_At
PUBLIC	_CompileShader
PUBLIC	_SetTextureBoundedParams
PUBLIC	_CreateTexture2D
PUBLIC	_Init_GL
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@ ; `string'
PUBLIC	??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@ ; `string'
PUBLIC	??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BF@IGFECFHO@resources?1font_1?4ttf@	; `string'
PUBLIC	??_C@_07BJPGHBBO@Wave?301@			; `string'
PUBLIC	??_C@_08CCCPFIL@OVERTIME@			; `string'
PUBLIC	??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BM@BIBBAEFM@resources?1overtime_bell?4wav@ ; `string'
PUBLIC	??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@ ; `string'
PUBLIC	??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@ ; `string'
PUBLIC	??_C@_02CBLLGHLK@r?$CL@				; `string'
PUBLIC	??_C@_0BP@IAPMJAI@resources?1lua?1scripts?1test?4lua@ ; `string'
PUBLIC	??_C@_04HJPCFDOP@line@				; `string'
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6@			; `string'
PUBLIC	??_C@_02BOGAIONP@ab@				; `string'
PUBLIC	??_C@_01OJONOECF@b@				; `string'
PUBLIC	??_C@_03PPOCCAPH@?$CFf?6@			; `string'
PUBLIC	??_C@_0N@CJFNGLCH@SpaceMonster@			; `string'
PUBLIC	??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@ ; `string'
PUBLIC	??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@ ; `string'
PUBLIC	??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@	; `string'
PUBLIC	??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@ ; `string'
PUBLIC	??_C@_0BO@HPNKKGGC@resources?1shaders?1vertex1?4txt@ ; `string'
PUBLIC	??_C@_0CA@DHKGOHOF@resources?1shaders?1fragment1?4txt@ ; `string'
PUBLIC	??_C@_0BO@PJEONEMM@resources?1shaders?1vertex2?4txt@ ; `string'
PUBLIC	??_C@_0CA@LBDCJFEL@resources?1shaders?1fragment2?4txt@ ; `string'
PUBLIC	??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@ ; `string'
PUBLIC	??_C@_0N@OBNOHIMB@global_light@			; `string'
PUBLIC	??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@ ; `string'
PUBLIC	??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@ ; `string'
PUBLIC	??_C@_08DINNBOH@time?3?$CFf?6@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0BK@EBIFNHNF@resources?1character_1?4png@	; `string'
PUBLIC	??_C@_0BL@HOCADEHK@resources?1background_2?4png@ ; `string'
PUBLIC	??_C@_0BI@IOIDGNDF@resources?1fed_scout?4png@	; `string'
PUBLIC	??_C@_0BL@EHIMIKAH@resources?1character_ic?4png@ ; `string'
PUBLIC	??_C@_0BM@DGPFILOH@resources?1cursor_f_open?4png@ ; `string'
PUBLIC	??_C@_0BO@NMOBJJI@resources?1cursor_f_closed?4png@ ; `string'
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4086800000000000
PUBLIC	__real@4094000000000000
PUBLIC	__real@44340000
PUBLIC	__real@447a0000
PUBLIC	__real@44a00000
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__ftell:PROC
EXTRN	__imp__puts:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__clock:PROC
EXTRN	_gladLoadGL:PROC
EXTRN	_SDL_GetError:PROC
EXTRN	_SDL_RWFromFile:PROC
EXTRN	_SDL_FreeSurface:PROC
EXTRN	_SDL_CreateWindow:PROC
EXTRN	_SDL_SetWindowIcon:PROC
EXTRN	_SDL_GL_SetAttribute:PROC
EXTRN	_SDL_GL_CreateContext:PROC
EXTRN	_SDL_GL_SwapWindow:PROC
EXTRN	_SDL_GetKeyboardState:PROC
EXTRN	_SDL_GetMouseState:PROC
EXTRN	_SDL_CreateColorCursor:PROC
EXTRN	_SDL_SetCursor:PROC
EXTRN	_SDL_PollEvent:PROC
EXTRN	_SDL_Init:PROC
EXTRN	_IMG_Load:PROC
EXTRN	_TTF_Init:PROC
EXTRN	_TTF_OpenFont:PROC
EXTRN	_TTF_RenderText_Blended:PROC
EXTRN	_Mix_Init:PROC
EXTRN	_Mix_OpenAudio:PROC
EXTRN	_Mix_AllocateChannels:PROC
EXTRN	_Mix_QuerySpec:PROC
EXTRN	_Mix_LoadWAV_RW:PROC
EXTRN	_Mix_GetNumChunkDecoders:PROC
EXTRN	_Mix_GetChunkDecoder:PROC
EXTRN	_Mix_PlayChannelTimed:PROC
EXTRN	_Mix_VolumeChunk:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_tonumber:PROC
EXTRN	_lua_tolstring:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_gettable:PROC
EXTRN	_lua_getfield:PROC
EXTRN	_lua_pcall:PROC
EXTRN	_luaL_loadbuffer:PROC
EXTRN	_luaL_newstate:PROC
EXTRN	_luaL_openlibs:PROC
EXTRN	_GAME_WaveInit:PROC
EXTRN	_GAME_AddEnemies:PROC
EXTRN	_GAME_HandleEnemies:PROC
EXTRN	_RENDER_TexturedQuad:PROC
EXTRN	_RENDER_List:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_glad_glTexParameteri:DWORD
EXTRN	_glad_glTexImage2D:DWORD
EXTRN	_glad_glClear:DWORD
EXTRN	_glad_glClearColor:DWORD
EXTRN	_glad_glEnable:DWORD
EXTRN	_glad_glBlendFunc:DWORD
EXTRN	_glad_glGetError:DWORD
EXTRN	_glad_glViewport:DWORD
EXTRN	_glad_glOrtho:DWORD
EXTRN	_glad_glDrawArrays:DWORD
EXTRN	_glad_glBindTexture:DWORD
EXTRN	_glad_glGenTextures:DWORD
EXTRN	_glad_glActiveTexture:DWORD
EXTRN	_glad_glBindBuffer:DWORD
EXTRN	_glad_glGenBuffers:DWORD
EXTRN	_glad_glBufferData:DWORD
EXTRN	_glad_glBufferSubData:DWORD
EXTRN	_glad_glAttachShader:DWORD
EXTRN	_glad_glCompileShader:DWORD
EXTRN	_glad_glCreateProgram:DWORD
EXTRN	_glad_glCreateShader:DWORD
EXTRN	_glad_glDeleteShader:DWORD
EXTRN	_glad_glEnableVertexAttribArray:DWORD
EXTRN	_glad_glGetUniformLocation:DWORD
EXTRN	_glad_glLinkProgram:DWORD
EXTRN	_glad_glShaderSource:DWORD
EXTRN	_glad_glUseProgram:DWORD
EXTRN	_glad_glUniform3f:DWORD
EXTRN	_glad_glVertexAttribPointer:DWORD
EXTRN	_glad_glBindVertexArray:DWORD
EXTRN	_glad_glGenVertexArrays:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@44a00000
CONST	SEGMENT
__real@44a00000 DD 044a00000r			; 1280
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44340000
CONST	SEGMENT
__real@44340000 DD 044340000r			; 720
CONST	ENDS
;	COMDAT __real@4094000000000000
CONST	SEGMENT
__real@4094000000000000 DQ 04094000000000000r	; 1280
CONST	ENDS
;	COMDAT __real@4086800000000000
CONST	SEGMENT
__real@4086800000000000 DQ 04086800000000000r	; 720
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BO@NMOBJJI@resources?1cursor_f_closed?4png@
CONST	SEGMENT
??_C@_0BO@NMOBJJI@resources?1cursor_f_closed?4png@ DB 'resources/cursor_f'
	DB	'_closed.png', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DGPFILOH@resources?1cursor_f_open?4png@
CONST	SEGMENT
??_C@_0BM@DGPFILOH@resources?1cursor_f_open?4png@ DB 'resources/cursor_f_'
	DB	'open.png', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EHIMIKAH@resources?1character_ic?4png@
CONST	SEGMENT
??_C@_0BL@EHIMIKAH@resources?1character_ic?4png@ DB 'resources/character_'
	DB	'ic.png', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IOIDGNDF@resources?1fed_scout?4png@
CONST	SEGMENT
??_C@_0BI@IOIDGNDF@resources?1fed_scout?4png@ DB 'resources/fed_scout.png'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HOCADEHK@resources?1background_2?4png@
CONST	SEGMENT
??_C@_0BL@HOCADEHK@resources?1background_2?4png@ DB 'resources/background'
	DB	'_2.png', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EBIFNHNF@resources?1character_1?4png@
CONST	SEGMENT
??_C@_0BK@EBIFNHNF@resources?1character_1?4png@ DB 'resources/character_1'
	DB	'.png', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08DINNBOH@time?3?$CFf?6@
CONST	SEGMENT
??_C@_08DINNBOH@time?3?$CFf?6@ DB 'time:%f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@
CONST	SEGMENT
??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@ DB 'Failed to do s'
	DB	'omething, %x', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@ DB 'score requirement: '
	DB	'%d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@ DB 'score is now: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@
CONST	SEGMENT
??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@ DB 'Failed to ini'
	DB	'tilize shader uniforms, %x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OBNOHIMB@global_light@
CONST	SEGMENT
??_C@_0N@OBNOHIMB@global_light@ DB 'global_light', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@
CONST	SEGMENT
??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@ DB 'Failed to '
	DB	'initilize shaders, %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LBDCJFEL@resources?1shaders?1fragment2?4txt@
CONST	SEGMENT
??_C@_0CA@LBDCJFEL@resources?1shaders?1fragment2?4txt@ DB 'resources/shad'
	DB	'ers/fragment2.txt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PJEONEMM@resources?1shaders?1vertex2?4txt@
CONST	SEGMENT
??_C@_0BO@PJEONEMM@resources?1shaders?1vertex2?4txt@ DB 'resources/shader'
	DB	's/vertex2.txt', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DHKGOHOF@resources?1shaders?1fragment1?4txt@
CONST	SEGMENT
??_C@_0CA@DHKGOHOF@resources?1shaders?1fragment1?4txt@ DB 'resources/shad'
	DB	'ers/fragment1.txt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HPNKKGGC@resources?1shaders?1vertex1?4txt@
CONST	SEGMENT
??_C@_0BO@HPNKKGGC@resources?1shaders?1vertex1?4txt@ DB 'resources/shader'
	DB	's/vertex1.txt', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@
CONST	SEGMENT
??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@ DB 'Failed to '
	DB	'initilize openGL, %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@
CONST	SEGMENT
??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@ DB 'Failed to load openGL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@
CONST	SEGMENT
??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@ DB 'SDL/OPENGL thing f'
	DB	'ailed!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@
CONST	SEGMENT
??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@ DB 'Window creation fail'
	DB	'ed!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CJFNGLCH@SpaceMonster@
CONST	SEGMENT
??_C@_0N@CJFNGLCH@SpaceMonster@ DB 'SpaceMonster', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PPOCCAPH@?$CFf?6@
CONST	SEGMENT
??_C@_03PPOCCAPH@?$CFf?6@ DB '%f', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OJONOECF@b@
CONST	SEGMENT
??_C@_01OJONOECF@b@ DB 'b', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02BOGAIONP@ab@
CONST	SEGMENT
??_C@_02BOGAIONP@ab@ DB 'ab', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJPCFDOP@line@
CONST	SEGMENT
??_C@_04HJPCFDOP@line@ DB 'line', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IAPMJAI@resources?1lua?1scripts?1test?4lua@
CONST	SEGMENT
??_C@_0BP@IAPMJAI@resources?1lua?1scripts?1test?4lua@ DB 'resources/lua/s'
	DB	'cripts/test.lua', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CBLLGHLK@r?$CL@
CONST	SEGMENT
??_C@_02CBLLGHLK@r?$CL@ DB 'r+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@
CONST	SEGMENT
??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@ DB 'Something b'
	DB	'ad happened...%s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@
CONST	SEGMENT
??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@ DB 'Freque'
	DB	'rncy:%d, audio format:%x, number of channels:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BIBBAEFM@resources?1overtime_bell?4wav@
CONST	SEGMENT
??_C@_0BM@BIBBAEFM@resources?1overtime_bell?4wav@ DB 'resources/overtime_'
	DB	'bell.wav', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@
CONST	SEGMENT
??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@ DB 'Sample c'
	DB	'hunk decoder %d is for %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@ DB 'amount of channel'
	DB	's: %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@ DB 'Error op'
	DB	'ening audio device, %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCCPFIL@OVERTIME@
CONST	SEGMENT
??_C@_08CCCPFIL@OVERTIME@ DB 'OVERTIME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BJPGHBBO@Wave?301@
CONST	SEGMENT
??_C@_07BJPGHBBO@Wave?301@ DB 'Wave:01', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IGFECFHO@resources?1font_1?4ttf@
CONST	SEGMENT
??_C@_0BF@IGFECFHO@resources?1font_1?4ttf@ DB 'resources/font_1.ttf', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@ DB 'Failed to i'
	DB	'nitilize mix, %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@
CONST	SEGMENT
??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@ DB 'Failed to lo'
	DB	'ad SDL_TTF font library', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@
CONST	SEGMENT
??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@ DB 'Couldn''t inil'
	DB	'ize audio, %s', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\main.c
;	COMDAT _Init_GL
_TEXT	SEGMENT
_tmp_surface$ = -8					; size = 4
_Init_GL PROC						; COMDAT

; 340  : void Init_GL(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E7DCAAE8_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 341  : 	SDL_Surface* tmp_surface = IMG_Load("resources/character_1.png");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EBIFNHNF@resources?1character_1?4png@
  0002d	e8 00 00 00 00	 call	 _IMG_Load
  00032	83 c4 04	 add	 esp, 4
  00035	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 342  : 	glGenVertexArrays(1, &VAO);

  00038	8b f4		 mov	 esi, esp
  0003a	68 00 00 00 00	 push	 OFFSET _VAO
  0003f	6a 01		 push	 1
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenVertexArrays
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 343  : 	glBindVertexArray(VAO);

  0004e	8b f4		 mov	 esi, esp
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _VAO
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindVertexArray
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 344  : 	glGenBuffers(1, &VERTEXES_VBO);

  00063	8b f4		 mov	 esi, esp
  00065	68 00 00 00 00	 push	 OFFSET _VERTEXES_VBO
  0006a	6a 01		 push	 1
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenBuffers
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 345  : 	glBindBuffer(GL_ARRAY_BUFFER, VERTEXES_VBO);

  00079	8b f4		 mov	 esi, esp
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _VERTEXES_VBO
  00080	50		 push	 eax
  00081	68 92 88 00 00	 push	 34962			; 00008892H
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindBuffer
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 346  : 	glBufferData(GL_ARRAY_BUFFER, 32 * sizeof(float), NULL, GL_DYNAMIC_DRAW);

  00093	8b f4		 mov	 esi, esp
  00095	68 e8 88 00 00	 push	 35048			; 000088e8H
  0009a	6a 00		 push	 0
  0009c	68 80 00 00 00	 push	 128			; 00000080H
  000a1	68 92 88 00 00	 push	 34962			; 00008892H
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferData
  000ac	3b f4		 cmp	 esi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 347  : 	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);

  000b3	8b f4		 mov	 esi, esp
  000b5	6a 00		 push	 0
  000b7	6a 20		 push	 32			; 00000020H
  000b9	6a 00		 push	 0
  000bb	68 06 14 00 00	 push	 5126			; 00001406H
  000c0	6a 03		 push	 3
  000c2	6a 00		 push	 0
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 348  : 	glEnableVertexAttribArray(0);

  000d1	8b f4		 mov	 esi, esp
  000d3	6a 00		 push	 0
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 349  : 	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));

  000e2	8b f4		 mov	 esi, esp
  000e4	6a 0c		 push	 12			; 0000000cH
  000e6	6a 20		 push	 32			; 00000020H
  000e8	6a 00		 push	 0
  000ea	68 06 14 00 00	 push	 5126			; 00001406H
  000ef	6a 03		 push	 3
  000f1	6a 01		 push	 1
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 350  : 	glEnableVertexAttribArray(1);

  00100	8b f4		 mov	 esi, esp
  00102	6a 01		 push	 1
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 351  : 	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));

  00111	8b f4		 mov	 esi, esp
  00113	6a 18		 push	 24			; 00000018H
  00115	6a 20		 push	 32			; 00000020H
  00117	6a 00		 push	 0
  00119	68 06 14 00 00	 push	 5126			; 00001406H
  0011e	6a 03		 push	 3
  00120	6a 02		 push	 2
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  00128	3b f4		 cmp	 esi, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 352  : 	glEnableVertexAttribArray(2);

  0012f	8b f4		 mov	 esi, esp
  00131	6a 02		 push	 2
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 353  : 	//textures, player texture
; 354  : 	glActiveTexture(GL_TEXTURE0);

  00140	8b f4		 mov	 esi, esp
  00142	68 c0 84 00 00	 push	 33984			; 000084c0H
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glActiveTexture
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 355  : 	glGenTextures(4, texture);

  00154	8b f4		 mov	 esi, esp
  00156	68 00 00 00 00	 push	 OFFSET _texture
  0015b	6a 04		 push	 4
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenTextures
  00163	3b f4		 cmp	 esi, esp
  00165	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 356  : 	glBindTexture(GL_TEXTURE_2D, texture[0]);

  0016a	b8 04 00 00 00	 mov	 eax, 4
  0016f	6b c8 00	 imul	 ecx, eax, 0
  00172	8b f4		 mov	 esi, esp
  00174	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  0017a	52		 push	 edx
  0017b	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 357  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  0018d	8b f4		 mov	 esi, esp
  0018f	68 01 29 00 00	 push	 10497			; 00002901H
  00194	68 02 28 00 00	 push	 10242			; 00002802H
  00199	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001a4	3b f4		 cmp	 esi, esp
  001a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 358  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  001ab	8b f4		 mov	 esi, esp
  001ad	68 01 29 00 00	 push	 10497			; 00002901H
  001b2	68 03 28 00 00	 push	 10243			; 00002803H
  001b7	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 359  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  001c9	8b f4		 mov	 esi, esp
  001cb	68 01 26 00 00	 push	 9729			; 00002601H
  001d0	68 01 28 00 00	 push	 10241			; 00002801H
  001d5	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001e0	3b f4		 cmp	 esi, esp
  001e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 360  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  001e7	8b f4		 mov	 esi, esp
  001e9	68 01 26 00 00	 push	 9729			; 00002601H
  001ee	68 00 28 00 00	 push	 10240			; 00002800H
  001f3	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001fe	3b f4		 cmp	 esi, esp
  00200	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 361  : 	CreateTexture2D(tmp_surface, GL_RGBA, true, &player_quad.texw, &player_quad.texh);

  00205	68 18 00 00 00	 push	 OFFSET _player_quad+24
  0020a	68 14 00 00 00	 push	 OFFSET _player_quad+20
  0020f	6a 01		 push	 1
  00211	68 08 19 00 00	 push	 6408			; 00001908H
  00216	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 _CreateTexture2D
  0021f	83 c4 14	 add	 esp, 20			; 00000014H

; 362  : 	//first bacground
; 363  : 	tmp_surface = IMG_Load("resources/background_2.png");

  00222	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HOCADEHK@resources?1background_2?4png@
  00227	e8 00 00 00 00	 call	 _IMG_Load
  0022c	83 c4 04	 add	 esp, 4
  0022f	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 364  : 	glBindTexture(GL_TEXTURE_2D, texture[1]);

  00232	b8 04 00 00 00	 mov	 eax, 4
  00237	c1 e0 00	 shl	 eax, 0
  0023a	8b f4		 mov	 esi, esp
  0023c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00242	51		 push	 ecx
  00243	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0024e	3b f4		 cmp	 esi, esp
  00250	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 365  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  00255	8b f4		 mov	 esi, esp
  00257	68 01 29 00 00	 push	 10497			; 00002901H
  0025c	68 02 28 00 00	 push	 10242			; 00002802H
  00261	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00266	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0026c	3b f4		 cmp	 esi, esp
  0026e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 366  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  00273	8b f4		 mov	 esi, esp
  00275	68 01 29 00 00	 push	 10497			; 00002901H
  0027a	68 03 28 00 00	 push	 10243			; 00002803H
  0027f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 367  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  00291	8b f4		 mov	 esi, esp
  00293	68 01 26 00 00	 push	 9729			; 00002601H
  00298	68 01 28 00 00	 push	 10241			; 00002801H
  0029d	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002a8	3b f4		 cmp	 esi, esp
  002aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 368  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  002af	8b f4		 mov	 esi, esp
  002b1	68 01 26 00 00	 push	 9729			; 00002601H
  002b6	68 00 28 00 00	 push	 10240			; 00002800H
  002bb	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002c0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002c6	3b f4		 cmp	 esi, esp
  002c8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 369  : 	CreateTexture2D(tmp_surface, GL_RGBA, true, NULL, NULL);

  002cd	6a 00		 push	 0
  002cf	6a 00		 push	 0
  002d1	6a 01		 push	 1
  002d3	68 08 19 00 00	 push	 6408			; 00001908H
  002d8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  002db	50		 push	 eax
  002dc	e8 00 00 00 00	 call	 _CreateTexture2D
  002e1	83 c4 14	 add	 esp, 20			; 00000014H

; 370  : 	tmp_surface = IMG_Load("resources/fed_scout.png");

  002e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IOIDGNDF@resources?1fed_scout?4png@
  002e9	e8 00 00 00 00	 call	 _IMG_Load
  002ee	83 c4 04	 add	 esp, 4
  002f1	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 371  : 	glBindTexture(GL_TEXTURE_2D, texture[2]);

  002f4	b8 04 00 00 00	 mov	 eax, 4
  002f9	d1 e0		 shl	 eax, 1
  002fb	8b f4		 mov	 esi, esp
  002fd	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00303	51		 push	 ecx
  00304	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0030f	3b f4		 cmp	 esi, esp
  00311	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 372  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  00316	8b f4		 mov	 esi, esp
  00318	68 01 29 00 00	 push	 10497			; 00002901H
  0031d	68 02 28 00 00	 push	 10242			; 00002802H
  00322	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00327	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0032d	3b f4		 cmp	 esi, esp
  0032f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 373  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  00334	8b f4		 mov	 esi, esp
  00336	68 01 29 00 00	 push	 10497			; 00002901H
  0033b	68 03 28 00 00	 push	 10243			; 00002803H
  00340	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00345	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0034b	3b f4		 cmp	 esi, esp
  0034d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 374  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  00352	8b f4		 mov	 esi, esp
  00354	68 01 26 00 00	 push	 9729			; 00002601H
  00359	68 01 28 00 00	 push	 10241			; 00002801H
  0035e	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00363	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00369	3b f4		 cmp	 esi, esp
  0036b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 375  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  00370	8b f4		 mov	 esi, esp
  00372	68 01 26 00 00	 push	 9729			; 00002601H
  00377	68 00 28 00 00	 push	 10240			; 00002800H
  0037c	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00381	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00387	3b f4		 cmp	 esi, esp
  00389	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 376  : 	CreateTexture2D(tmp_surface, GL_RGBA, true, NULL, NULL);

  0038e	6a 00		 push	 0
  00390	6a 00		 push	 0
  00392	6a 01		 push	 1
  00394	68 08 19 00 00	 push	 6408			; 00001908H
  00399	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0039c	50		 push	 eax
  0039d	e8 00 00 00 00	 call	 _CreateTexture2D
  003a2	83 c4 14	 add	 esp, 20			; 00000014H

; 377  : 	glBindTexture(GL_TEXTURE_2D, texture[3]);

  003a5	b8 04 00 00 00	 mov	 eax, 4
  003aa	6b c8 03	 imul	 ecx, eax, 3
  003ad	8b f4		 mov	 esi, esp
  003af	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  003b5	52		 push	 edx
  003b6	68 e1 0d 00 00	 push	 3553			; 00000de1H
  003bb	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  003c1	3b f4		 cmp	 esi, esp
  003c3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 378  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  003c8	8b f4		 mov	 esi, esp
  003ca	68 01 29 00 00	 push	 10497			; 00002901H
  003cf	68 02 28 00 00	 push	 10242			; 00002802H
  003d4	68 e1 0d 00 00	 push	 3553			; 00000de1H
  003d9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  003df	3b f4		 cmp	 esi, esp
  003e1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 379  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  003e6	8b f4		 mov	 esi, esp
  003e8	68 01 29 00 00	 push	 10497			; 00002901H
  003ed	68 03 28 00 00	 push	 10243			; 00002803H
  003f2	68 e1 0d 00 00	 push	 3553			; 00000de1H
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 380  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  00404	8b f4		 mov	 esi, esp
  00406	68 01 26 00 00	 push	 9729			; 00002601H
  0040b	68 01 28 00 00	 push	 10241			; 00002801H
  00410	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00415	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0041b	3b f4		 cmp	 esi, esp
  0041d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 381  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  00422	8b f4		 mov	 esi, esp
  00424	68 01 26 00 00	 push	 9729			; 00002601H
  00429	68 00 28 00 00	 push	 10240			; 00002800H
  0042e	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00433	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00439	3b f4		 cmp	 esi, esp
  0043b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 382  : 	CreateTexture2D(wave_text, GL_RGBA, true, NULL, NULL); //but we want to keep the surface around so we can change the text after every wave

  00440	6a 00		 push	 0
  00442	6a 00		 push	 0
  00444	6a 01		 push	 1
  00446	68 08 19 00 00	 push	 6408			; 00001908H
  0044b	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave_text
  00450	50		 push	 eax
  00451	e8 00 00 00 00	 call	 _CreateTexture2D
  00456	83 c4 14	 add	 esp, 20			; 00000014H

; 383  : 	glBindTexture(GL_TEXTURE_2D, texture[4]);

  00459	b8 04 00 00 00	 mov	 eax, 4
  0045e	c1 e0 02	 shl	 eax, 2
  00461	8b f4		 mov	 esi, esp
  00463	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00469	51		 push	 ecx
  0046a	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0046f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00475	3b f4		 cmp	 esi, esp
  00477	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 384  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  0047c	8b f4		 mov	 esi, esp
  0047e	68 01 29 00 00	 push	 10497			; 00002901H
  00483	68 02 28 00 00	 push	 10242			; 00002802H
  00488	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0048d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00493	3b f4		 cmp	 esi, esp
  00495	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 385  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  0049a	8b f4		 mov	 esi, esp
  0049c	68 01 29 00 00	 push	 10497			; 00002901H
  004a1	68 03 28 00 00	 push	 10243			; 00002803H
  004a6	68 e1 0d 00 00	 push	 3553			; 00000de1H
  004ab	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  004b1	3b f4		 cmp	 esi, esp
  004b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 386  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  004b8	8b f4		 mov	 esi, esp
  004ba	68 01 26 00 00	 push	 9729			; 00002601H
  004bf	68 01 28 00 00	 push	 10241			; 00002801H
  004c4	68 e1 0d 00 00	 push	 3553			; 00000de1H
  004c9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  004cf	3b f4		 cmp	 esi, esp
  004d1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 387  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  004d6	8b f4		 mov	 esi, esp
  004d8	68 01 26 00 00	 push	 9729			; 00002601H
  004dd	68 00 28 00 00	 push	 10240			; 00002800H
  004e2	68 e1 0d 00 00	 push	 3553			; 00000de1H
  004e7	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  004ed	3b f4		 cmp	 esi, esp
  004ef	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 388  : 	CreateTexture2D(overtime_text, GL_RGBA, true, NULL, NULL);

  004f4	6a 00		 push	 0
  004f6	6a 00		 push	 0
  004f8	6a 01		 push	 1
  004fa	68 08 19 00 00	 push	 6408			; 00001908H
  004ff	a1 00 00 00 00	 mov	 eax, DWORD PTR _overtime_text
  00504	50		 push	 eax
  00505	e8 00 00 00 00	 call	 _CreateTexture2D
  0050a	83 c4 14	 add	 esp, 20			; 00000014H

; 389  : 	tmp_surface = IMG_Load("resources/character_ic.png"); //for the program icon

  0050d	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EHIMIKAH@resources?1character_ic?4png@
  00512	e8 00 00 00 00	 call	 _IMG_Load
  00517	83 c4 04	 add	 esp, 4
  0051a	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 390  : 	SDL_SetWindowIcon(window, tmp_surface);

  0051d	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00520	50		 push	 eax
  00521	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _window
  00527	51		 push	 ecx
  00528	e8 00 00 00 00	 call	 _SDL_SetWindowIcon
  0052d	83 c4 08	 add	 esp, 8

; 391  : 	SDL_FreeSurface(tmp_surface);

  00530	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00533	50		 push	 eax
  00534	e8 00 00 00 00	 call	 _SDL_FreeSurface
  00539	83 c4 04	 add	 esp, 4

; 392  : 	tmp_surface = IMG_Load("resources/cursor_f_open.png"); //for the mouse when left mouse button is not pressed

  0053c	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DGPFILOH@resources?1cursor_f_open?4png@
  00541	e8 00 00 00 00	 call	 _IMG_Load
  00546	83 c4 04	 add	 esp, 4
  00549	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 393  : 	mouse_opened = SDL_CreateColorCursor(tmp_surface, 0, 0);

  0054c	6a 00		 push	 0
  0054e	6a 00		 push	 0
  00550	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00553	50		 push	 eax
  00554	e8 00 00 00 00	 call	 _SDL_CreateColorCursor
  00559	83 c4 0c	 add	 esp, 12			; 0000000cH
  0055c	a3 00 00 00 00	 mov	 DWORD PTR _mouse_opened, eax

; 394  : 	SDL_FreeSurface(tmp_surface);

  00561	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00564	50		 push	 eax
  00565	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0056a	83 c4 04	 add	 esp, 4

; 395  : 	tmp_surface = IMG_Load("resources/cursor_f_closed.png"); //for the mouse when left mouse button is pressed

  0056d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NMOBJJI@resources?1cursor_f_closed?4png@
  00572	e8 00 00 00 00	 call	 _IMG_Load
  00577	83 c4 04	 add	 esp, 4
  0057a	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 396  : 	mouse_closed = SDL_CreateColorCursor(tmp_surface, 0, 0);

  0057d	6a 00		 push	 0
  0057f	6a 00		 push	 0
  00581	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00584	50		 push	 eax
  00585	e8 00 00 00 00	 call	 _SDL_CreateColorCursor
  0058a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0058d	a3 00 00 00 00	 mov	 DWORD PTR _mouse_closed, eax

; 397  : 	SDL_FreeSurface(tmp_surface);

  00592	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00595	50		 push	 eax
  00596	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0059b	83 c4 04	 add	 esp, 4

; 398  : 
; 399  : }

  0059e	5f		 pop	 edi
  0059f	5e		 pop	 esi
  005a0	5b		 pop	 ebx
  005a1	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  005a7	3b ec		 cmp	 ebp, esp
  005a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005ae	8b e5		 mov	 esp, ebp
  005b0	5d		 pop	 ebp
  005b1	c3		 ret	 0
_Init_GL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\main.c
;	COMDAT _CreateTexture2D
_TEXT	SEGMENT
_tmp_surface$ = 8					; size = 4
_format$ = 12						; size = 4
_free_surface$ = 16					; size = 4
_w$ = 20						; size = 4
_h$ = 24						; size = 4
_CreateTexture2D PROC					; COMDAT

; 330  : void CreateTexture2D(SDL_Surface* tmp_surface, GLenum format, SDL_bool free_surface, int* w, int* h) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E7DCAAE8_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 331  : 	glTexImage2D(GL_TEXTURE_2D, 0, format, tmp_surface->w, tmp_surface->h, 0, format, GL_UNSIGNED_BYTE, tmp_surface->pixels);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0002d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00030	51		 push	 ecx
  00031	68 01 14 00 00	 push	 5121			; 00001401H
  00036	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  00039	52		 push	 edx
  0003a	6a 00		 push	 0
  0003c	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0003f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR _tmp_surface$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	50		 push	 eax
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  0004d	51		 push	 ecx
  0004e	6a 00		 push	 0
  00050	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexImage2D
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 332  : 	if(w)

  00062	83 7d 14 00	 cmp	 DWORD PTR _w$[ebp], 0
  00066	74 09		 je	 SHORT $LN2@CreateText

; 333  : 		w = tmp_surface->w;

  00068	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0006b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006e	89 4d 14	 mov	 DWORD PTR _w$[ebp], ecx
$LN2@CreateText:

; 334  : 	if(h)

  00071	83 7d 18 00	 cmp	 DWORD PTR _h$[ebp], 0
  00075	74 09		 je	 SHORT $LN3@CreateText

; 335  : 		h = tmp_surface->h;

  00077	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0007a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007d	89 4d 18	 mov	 DWORD PTR _h$[ebp], ecx
$LN3@CreateText:

; 336  : 	if (free_surface)

  00080	83 7d 10 00	 cmp	 DWORD PTR _free_surface$[ebp], 0
  00084	74 0c		 je	 SHORT $LN1@CreateText

; 337  : 		SDL_FreeSurface(tmp_surface);

  00086	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0008f	83 c4 04	 add	 esp, 4
$LN1@CreateText:

; 338  : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_CreateTexture2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\main.c
;	COMDAT _SetTextureBoundedParams
_TEXT	SEGMENT
_sampler_target$ = 8					; size = 4
_filter$ = 12						; size = 4
_repeat_type$ = 16					; size = 4
_SetTextureBoundedParams PROC				; COMDAT

; 324  : void SetTextureBoundedParams(GLenum sampler_target, GLenum filter, GLfloat repeat_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E7DCAAE8_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 325  : 	glTexParameteri(sampler_target, GL_TEXTURE_WRAP_S, repeat_type);

  00028	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _repeat_type$[ebp]
  0002d	8b f4		 mov	 esi, esp
  0002f	50		 push	 eax
  00030	68 02 28 00 00	 push	 10242			; 00002802H
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 326  : 	glTexParameteri(sampler_target, GL_TEXTURE_WRAP_T, repeat_type);

  00046	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _repeat_type$[ebp]
  0004b	8b f4		 mov	 esi, esp
  0004d	50		 push	 eax
  0004e	68 03 28 00 00	 push	 10243			; 00002803H
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00056	51		 push	 ecx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 327  : 	glTexParameteri(sampler_target, GL_TEXTURE_MIN_FILTER, filter);

  00064	8b f4		 mov	 esi, esp
  00066	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  00069	50		 push	 eax
  0006a	68 01 28 00 00	 push	 10241			; 00002801H
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00072	51		 push	 ecx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 328  : 	glTexParameteri(sampler_target, GL_TEXTURE_MAG_FILTER, filter);

  00080	8b f4		 mov	 esi, esp
  00082	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  00085	50		 push	 eax
  00086	68 00 28 00 00	 push	 10240			; 00002800H
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  0008e	51		 push	 ecx
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 329  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_SetTextureBoundedParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\main.c
;	COMDAT _CompileShader
_TEXT	SEGMENT
_i$1 = -72						; size = 4
_fp$2 = -60						; size = 4
_linebreak_amount$ = -48				; size = 4
_size$ = -36						; size = 4
_shader_obj$ = -24					; size = 4
_shader_data$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_shader_fname$ = 8					; size = 4
_type$ = 12						; size = 4
_CompileShader PROC					; COMDAT

; 293  : GLint CompileShader(char* shader_fname, GLenum type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00012	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __E7DCAAE8_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 294  : 	char* shader_data;
; 295  : 	GLint shader_obj;
; 296  : 	size_t size;
; 297  : 	int linebreak_amount = 0;

  00032	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _linebreak_amount$[ebp], 0

; 298  : 	{
; 299  : 		FILE* fp; 
; 300  : 		fp = fopen(shader_fname, "r");

  00039	8b f4		 mov	 esi, esp
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00040	8b 45 08	 mov	 eax, DWORD PTR _shader_fname$[ebp]
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	89 45 c4	 mov	 DWORD PTR _fp$2[ebp], eax

; 301  : 		fseek(fp, SEEK_SET, SEEK_END);

  00057	8b f4		 mov	 esi, esp
  00059	6a 02		 push	 2
  0005b	6a 00		 push	 0
  0005d	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 302  : 		size = ftell(fp);

  00071	8b f4		 mov	 esi, esp
  00073	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00076	50		 push	 eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ftell
  0007d	83 c4 04	 add	 esp, 4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	89 45 dc	 mov	 DWORD PTR _size$[ebp], eax

; 303  : 		fseek(fp, SEEK_SET, SEEK_SET);

  0008a	8b f4		 mov	 esi, esp
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00093	50		 push	 eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 304  : 		shader_data = calloc(1, size);

  000a4	8b f4		 mov	 esi, esp
  000a6	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  000a9	50		 push	 eax
  000aa	6a 01		 push	 1
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  000b2	83 c4 08	 add	 esp, 8
  000b5	3b f4		 cmp	 esi, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	89 45 f4	 mov	 DWORD PTR _shader_data$[ebp], eax

; 305  : 		fread(shader_data, 1, size, fp);

  000bf	8b f4		 mov	 esi, esp
  000c1	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  000c8	51		 push	 ecx
  000c9	6a 01		 push	 1
  000cb	8b 55 f4	 mov	 edx, DWORD PTR _shader_data$[ebp]
  000ce	52		 push	 edx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000d5	83 c4 10	 add	 esp, 16			; 00000010H
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 306  : 		fclose(fp);

  000df	8b f4		 mov	 esi, esp
  000e1	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000eb	83 c4 04	 add	 esp, 4
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 307  : 		for (int i = 0; i < size; ++i) {

  000f5	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000fc	eb 09		 jmp	 SHORT $LN4@CompileSha
$LN2@CompileSha:
  000fe	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 45 b8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@CompileSha:
  00107	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  0010a	3b 45 dc	 cmp	 eax, DWORD PTR _size$[ebp]
  0010d	73 19		 jae	 SHORT $LN3@CompileSha

; 308  : 			if (shader_data[i] == '\n') {

  0010f	8b 45 f4	 mov	 eax, DWORD PTR _shader_data$[ebp]
  00112	03 45 b8	 add	 eax, DWORD PTR _i$1[ebp]
  00115	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00118	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0011b	75 09		 jne	 SHORT $LN5@CompileSha

; 309  : 				++linebreak_amount;

  0011d	8b 45 d0	 mov	 eax, DWORD PTR _linebreak_amount$[ebp]
  00120	83 c0 01	 add	 eax, 1
  00123	89 45 d0	 mov	 DWORD PTR _linebreak_amount$[ebp], eax
$LN5@CompileSha:

; 310  : 			}
; 311  : 		}

  00126	eb d6		 jmp	 SHORT $LN2@CompileSha
$LN3@CompileSha:

<<<<<<< HEAD
; 312  : 		shader_data[size - linebreak_amount] = '\0';
=======
; 321  : 		shader_data[size - linebreak_amount] = '\0'; //not really sure why it works but it does
>>>>>>> parent of 6a478d9... fixed?

  00128	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  0012b	2b 45 d0	 sub	 eax, DWORD PTR _linebreak_amount$[ebp]
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR _shader_data$[ebp]
  00131	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 313  : 		//printf("%s", shader_data);
; 314  : 		//printf("%d", size);
; 315  : 		//for debugging
; 316  : 	}
; 317  : 	shader_obj = glCreateShader(type);

  00135	8b f4		 mov	 esi, esp
  00137	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0013a	50		 push	 eax
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateShader
  00141	3b f4		 cmp	 esi, esp
  00143	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00148	89 45 e8	 mov	 DWORD PTR _shader_obj$[ebp], eax

; 318  : 	glShaderSource(shader_obj, 1, &shader_data, NULL);

  0014b	8b f4		 mov	 esi, esp
  0014d	6a 00		 push	 0
  0014f	8d 45 f4	 lea	 eax, DWORD PTR _shader_data$[ebp]
  00152	50		 push	 eax
  00153	6a 01		 push	 1
  00155	8b 4d e8	 mov	 ecx, DWORD PTR _shader_obj$[ebp]
  00158	51		 push	 ecx
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glShaderSource
  0015f	3b f4		 cmp	 esi, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 319  : 	glCompileShader(shader_obj);

  00166	8b f4		 mov	 esi, esp
  00168	8b 45 e8	 mov	 eax, DWORD PTR _shader_obj$[ebp]
  0016b	50		 push	 eax
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCompileShader
  00172	3b f4		 cmp	 esi, esp
  00174	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 320  : 	free(shader_data);

  00179	8b f4		 mov	 esi, esp
  0017b	8b 45 f4	 mov	 eax, DWORD PTR _shader_data$[ebp]
  0017e	50		 push	 eax
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00185	83 c4 04	 add	 esp, 4
  00188	3b f4		 cmp	 esi, esp
  0018a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 321  : 	return shader_obj;

  0018f	8b 45 e8	 mov	 eax, DWORD PTR _shader_obj$[ebp]

; 322  : }

  00192	52		 push	 edx
  00193	8b cd		 mov	 ecx, ebp
  00195	50		 push	 eax
  00196	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@CompileSha
  0019c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001a1	58		 pop	 eax
  001a2	5a		 pop	 edx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	33 cd		 xor	 ecx, ebp
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  001b6	3b ec		 cmp	 ebp, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
  001c1	0f 1f 00	 npad	 3
$LN9@CompileSha:
  001c4	01 00 00 00	 DD	 1
  001c8	00 00 00 00	 DD	 $LN8@CompileSha
$LN8@CompileSha:
  001cc	f4 ff ff ff	 DD	 -12			; fffffff4H
  001d0	04 00 00 00	 DD	 4
  001d4	00 00 00 00	 DD	 $LN7@CompileSha
$LN7@CompileSha:
  001d8	73		 DB	 115			; 00000073H
  001d9	68		 DB	 104			; 00000068H
  001da	61		 DB	 97			; 00000061H
  001db	64		 DB	 100			; 00000064H
  001dc	65		 DB	 101			; 00000065H
  001dd	72		 DB	 114			; 00000072H
  001de	5f		 DB	 95			; 0000005fH
  001df	64		 DB	 100			; 00000064H
  001e0	61		 DB	 97			; 00000061H
  001e1	74		 DB	 116			; 00000074H
  001e2	61		 DB	 97			; 00000061H
  001e3	00		 DB	 0
_CompileShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\linkedlist_h.h
;	COMDAT _LIST_At
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp_node$2 = -8					; size = 4
_list$ = 8						; size = 4
_location$ = 12						; size = 4
_LIST_At PROC						; COMDAT

; 54   : void* LIST_At(const linkedList* const list, int location) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A4B63AD5_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 55   : 	if (list->head) {

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	74 4a		 je	 SHORT $LN5@LIST_At

; 56   : 		listNode* tmp_node = list->head;

  00030	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx

; 57   : 		for (int i = 0; i < location; ++i) {

  00038	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0003f	eb 09		 jmp	 SHORT $LN4@LIST_At
$LN2@LIST_At:
  00041	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_At:
  0004a	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0004d	3b 45 0c	 cmp	 eax, DWORD PTR _location$[ebp]
  00050	7d 12		 jge	 SHORT $LN3@LIST_At

; 58   : 			if (tmp_node->next)

  00052	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00055	83 38 00	 cmp	 DWORD PTR [eax], 0
  00058	74 08		 je	 SHORT $LN7@LIST_At

; 59   : 				tmp_node = tmp_node->next;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx
$LN7@LIST_At:

; 60   : 			//else
; 61   : 			//	printf("element %d could not be found", location); return 2.0;
; 62   : 		}

  00062	eb dd		 jmp	 SHORT $LN2@LIST_At
$LN3@LIST_At:

; 63   : 		if (tmp_node)

  00064	83 7d f8 00	 cmp	 DWORD PTR _tmp_node$2[ebp], 0
  00068	74 0a		 je	 SHORT $LN8@LIST_At

; 64   : 			return tmp_node->data;

  0006a	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0006d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00070	eb 0a		 jmp	 SHORT $LN1@LIST_At
  00072	eb 04		 jmp	 SHORT $LN9@LIST_At
$LN8@LIST_At:

; 65   : 		else
; 66   : 			return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	eb 04		 jmp	 SHORT $LN1@LIST_At
$LN9@LIST_At:

; 67   : 	}

  00078	eb 02		 jmp	 SHORT $LN1@LIST_At
$LN5@LIST_At:

; 68   : 	else
; 69   : 		return NULL;

  0007a	33 c0		 xor	 eax, eax
$LN1@LIST_At:

; 70   : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_LIST_At ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\linkedlist_h.h
;	COMDAT _LIST_RemoveAt
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp_node$2 = -8					; size = 4
_list$ = 8						; size = 4
_location$ = 12						; size = 4
_remove_data$ = 16					; size = 1
_LIST_RemoveAt PROC					; COMDAT

; 27   : int LIST_RemoveAt(linkedList* list, int location, bool remove_data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A4B63AD5_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 28   : 	if (list->head) {

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	0f 84 ef 00 00
	00		 je	 $LN5@LIST_Remov

; 29   : 		listNode* tmp_node = list->head;

  00034	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx

; 30   : 		for (int i = 0; i < location; ++i) {

  0003c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN4@LIST_Remov
$LN2@LIST_Remov:
  00045	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_Remov:
  0004e	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00051	3b 45 0c	 cmp	 eax, DWORD PTR _location$[ebp]
  00054	7d 12		 jge	 SHORT $LN3@LIST_Remov

; 31   : 			if (tmp_node->next)

  00056	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00059	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005c	74 08		 je	 SHORT $LN6@LIST_Remov

; 32   : 				tmp_node = tmp_node->next;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx
$LN6@LIST_Remov:

; 33   : 			//else
; 34   : 			//	printf("element %d could not be found", location); return 1;
; 35   : 		}

  00066	eb dd		 jmp	 SHORT $LN2@LIST_Remov
$LN3@LIST_Remov:

; 36   : 		if (tmp_node->next && tmp_node->prev)

  00068	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0006b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0006e	74 26		 je	 SHORT $LN7@LIST_Remov
  00070	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00073	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00077	74 1d		 je	 SHORT $LN7@LIST_Remov

; 37   : 			tmp_node->prev->next = tmp_node->next, tmp_node->next->prev = tmp_node->prev;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0007c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$2[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	89 01		 mov	 DWORD PTR [ecx], eax
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$2[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0008e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00091	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00094	eb 47		 jmp	 SHORT $LN8@LIST_Remov
$LN7@LIST_Remov:

; 38   : 		else if (list->head == tmp_node) {

  00096	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	3b 4d f8	 cmp	 ecx, DWORD PTR _tmp_node$2[ebp]
  0009e	75 20		 jne	 SHORT $LN9@LIST_Remov

; 39   : 			list->head = tmp_node->next;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$2[ebp]
  000a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a8	89 10		 mov	 DWORD PTR [eax], edx

; 40   : 			if (tmp_node->next)

  000aa	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000ad	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b0	74 0c		 je	 SHORT $LN11@LIST_Remov

; 41   : 				tmp_node->next->prev = NULL;

  000b2	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
$LN11@LIST_Remov:

; 42   : 		}

  000be	eb 1d		 jmp	 SHORT $LN8@LIST_Remov
$LN9@LIST_Remov:

; 43   : 		else if (!tmp_node->next)

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000c3	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c6	75 0e		 jne	 SHORT $LN12@LIST_Remov

; 44   : 			tmp_node->prev->next = NULL;

  000c8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000cb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ce	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  000d4	eb 07		 jmp	 SHORT $LN8@LIST_Remov
$LN12@LIST_Remov:

; 45   : 		else
; 46   : 			return 1;

  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	eb 48		 jmp	 SHORT $LN1@LIST_Remov
$LN8@LIST_Remov:

; 47   : 		if (remove_data)

  000dd	0f b6 45 10	 movzx	 eax, BYTE PTR _remove_data$[ebp]
  000e1	85 c0		 test	 eax, eax
  000e3	74 19		 je	 SHORT $LN14@LIST_Remov

; 48   : 			free(tmp_node->data);

  000e5	8b f4		 mov	 esi, esp
  000e7	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000ea	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ed	51		 push	 ecx
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000f4	83 c4 04	 add	 esp, 4
  000f7	3b f4		 cmp	 esi, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN14@LIST_Remov:

; 49   : 		free(tmp_node);

  000fe	8b f4		 mov	 esi, esp
  00100	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00103	50		 push	 eax
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0010a	83 c4 04	 add	 esp, 4
  0010d	3b f4		 cmp	 esi, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 50   : 		list->count--;

  00114	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00117	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0011a	83 e9 01	 sub	 ecx, 1
  0011d	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  00120	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN5@LIST_Remov:

; 51   : 	}
; 52   : 	return 0;

  00123	33 c0		 xor	 eax, eax
$LN1@LIST_Remov:

; 53   : }

  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0012e	3b ec		 cmp	 ebp, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
_LIST_RemoveAt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\linkedlist_h.h
;	COMDAT _LIST_AddElement
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_tmp_node_travlist$2 = -20				; size = 4
_tmp_node$ = -8						; size = 4
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_LIST_AddElement PROC					; COMDAT

; 5    : void LIST_AddElement(linkedList* list, void* data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A4B63AD5_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 6    : 	listNode* tmp_node = calloc(1, sizeof(listNode));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0c		 push	 12			; 0000000cH
  0002c	6a 01		 push	 1
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00034	83 c4 08	 add	 esp, 8
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	89 45 f8	 mov	 DWORD PTR _tmp_node$[ebp], eax

; 7    : 	tmp_node->data = data;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  00047	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 8    : 	if (!list->head)

  0004a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0004d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00050	75 1d		 jne	 SHORT $LN5@LIST_AddEl

; 9    : 		list->head = tmp_node, tmp_node->next = NULL, tmp_node->prev = NULL;

  00052	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  00058	89 08		 mov	 DWORD PTR [eax], ecx
  0005a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  0005d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00063	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00066	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0006d	eb 7c		 jmp	 SHORT $LN6@LIST_AddEl
$LN5@LIST_AddEl:

; 10   : 	else { //travese the list until the end is found
; 11   : 		if (!list->head->next)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00077	75 21		 jne	 SHORT $LN7@LIST_AddEl

; 12   : 			tmp_node->prev = list->head, tmp_node->prev->next = tmp_node, tmp_node->next = NULL;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00084	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00087	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  0008d	89 11		 mov	 DWORD PTR [ecx], edx
  0008f	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00092	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00098	eb 51		 jmp	 SHORT $LN6@LIST_AddEl
$LN7@LIST_AddEl:

; 13   : 		else {
; 14   : 			listNode* tmp_node_travlist = list->head;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d ec	 mov	 DWORD PTR _tmp_node_travlist$2[ebp], ecx

; 15   : 			for (int i = 0; i < list->count; ++i) {

  000a2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000a9	eb 09		 jmp	 SHORT $LN4@LIST_AddEl
$LN2@LIST_AddEl:
  000ab	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 e0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_AddEl:
  000b4	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000b7	8b 4d e0	 mov	 ecx, DWORD PTR _i$1[ebp]
  000ba	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000bd	7d 12		 jge	 SHORT $LN3@LIST_AddEl

; 16   : 				if (tmp_node_travlist->next)

  000bf	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000c2	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c5	74 08		 je	 SHORT $LN9@LIST_AddEl

; 17   : 					tmp_node_travlist = tmp_node_travlist->next;

  000c7	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	89 4d ec	 mov	 DWORD PTR _tmp_node_travlist$2[ebp], ecx
$LN9@LIST_AddEl:

; 18   : 
; 19   : 					
; 20   : 			}

  000cf	eb da		 jmp	 SHORT $LN2@LIST_AddEl
$LN3@LIST_AddEl:

; 21   : 			tmp_node_travlist->next = tmp_node, tmp_node->prev = tmp_node_travlist, tmp_node->next = NULL;

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  000d7	89 08		 mov	 DWORD PTR [eax], ecx
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  000dc	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000df	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  000e5	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN6@LIST_AddEl:

; 22   : 		}
; 23   : 	
; 24   : 	}
; 25   : 	list->count += 1;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	83 c1 01	 add	 ecx, 1
  000f4	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  000f7	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 26   : }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00103	3b ec		 cmp	 ebp, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
_LIST_AddElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\cam.h
;	COMDAT _glm_ortho
_TEXT	SEGMENT
_fn$ = -32						; size = 4
_tb$ = -20						; size = 4
_rl$ = -8						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_nearVal$ = 24						; size = 4
_farVal$ = 28						; size = 4
_dest$ = 32						; size = 4
_glm_ortho PROC						; COMDAT

; 105  :           mat4  dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __40246743_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 106  :   float rl, tb, fn;
; 107  : 
; 108  :   glm_mat4_zero(dest);

  00028	8b 45 20	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_zero
  00031	83 c4 04	 add	 esp, 4

; 109  : 
; 110  :   rl = 1.0f / (right  - left);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  00039	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _left$[ebp]
  0003e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00046	f3 0f 5e c8	 divss	 xmm1, xmm0
  0004a	f3 0f 11 4d f8	 movss	 DWORD PTR _rl$[ebp], xmm1

; 111  :   tb = 1.0f / (top    - bottom);

  0004f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00054	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bottom$[ebp]
  00059	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00061	f3 0f 5e c8	 divss	 xmm1, xmm0
  00065	f3 0f 11 4d ec	 movss	 DWORD PTR _tb$[ebp], xmm1

; 112  :   fn =-1.0f / (farVal - nearVal);

  0006a	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  0006f	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _nearVal$[ebp]
  00074	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0007c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00080	f3 0f 11 4d e0	 movss	 DWORD PTR _fn$[ebp], xmm1

; 113  : 
; 114  :   dest[0][0] = 2.0f * rl;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00092	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	6b c2 00	 imul	 eax, edx, 0
  000a5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 115  :   dest[1][1] = 2.0f * tb;

  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000b2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  000b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000bc	c1 e0 00	 shl	 eax, 0
  000bf	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000c2	b9 04 00 00 00	 mov	 ecx, 4
  000c7	c1 e1 00	 shl	 ecx, 0
  000ca	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 116  :   dest[2][2] = 2.0f * fn;

  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000d7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  000dc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000e1	d1 e0		 shl	 eax, 1
  000e3	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000e6	b9 04 00 00 00	 mov	 ecx, 4
  000eb	d1 e1		 shl	 ecx, 1
  000ed	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 117  :   dest[3][0] =-(right  + left)    * rl;

  000f2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  000f7	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _left$[ebp]
  000fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00103	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00108	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0010d	6b c8 03	 imul	 ecx, eax, 3
  00110	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00113	ba 04 00 00 00	 mov	 edx, 4
  00118	6b c2 00	 imul	 eax, edx, 0
  0011b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 118  :   dest[3][1] =-(top    + bottom)  * tb;

  00120	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00125	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _bottom$[ebp]
  0012a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00131	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  00136	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013b	6b c8 03	 imul	 ecx, eax, 3
  0013e	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00141	ba 04 00 00 00	 mov	 edx, 4
  00146	c1 e2 00	 shl	 edx, 0
  00149	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 119  :   dest[3][2] = (farVal + nearVal) * fn;

  0014e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00153	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _nearVal$[ebp]
  00158	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  0015d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00162	6b c8 03	 imul	 ecx, eax, 3
  00165	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00168	ba 04 00 00 00	 mov	 edx, 4
  0016d	d1 e2		 shl	 edx, 1
  0016f	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 120  :   dest[3][3] = 1.0f;

  00174	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00179	6b c8 03	 imul	 ecx, eax, 3
  0017c	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0017f	ba 04 00 00 00	 mov	 edx, 4
  00184	6b c2 03	 imul	 eax, edx, 3
  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0018f	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 121  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_glm_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_zero
_TEXT	SEGMENT
_t$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat4_zero PROC					; COMDAT

; 189  : glm_mat4_zero(mat4 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 190  :   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_ZERO_INIT;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 45 b0	 movss	 DWORD PTR _t$[ebp], xmm0
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 b4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 45 b8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 bc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+32], xmm0
  0008c	0f 57 c0	 xorps	 xmm0, xmm0
  0008f	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+36], xmm0
  00094	0f 57 c0	 xorps	 xmm0, xmm0
  00097	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+40], xmm0
  0009c	0f 57 c0	 xorps	 xmm0, xmm0
  0009f	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+44], xmm0
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+48], xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+52], xmm0
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+56], xmm0
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+60], xmm0

; 191  :   glm_mat4_copy(t, mat);

  000c4	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  000c7	50		 push	 eax
  000c8	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _glm_mat4_copy
  000d1	83 c4 08	 add	 esp, 8

; 192  : }

  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_z
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	8b e3		 mov	 esp, ebx
  000f6	5b		 pop	 ebx
  000f7	c3		 ret	 0
$LN5@glm_mat4_z:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN4@glm_mat4_z
$LN4@glm_mat4_z:
  00100	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00104	40 00 00 00	 DD	 64			; 00000040H
  00108	00 00 00 00	 DD	 $LN3@glm_mat4_z
$LN3@glm_mat4_z:
  0010c	74		 DB	 116			; 00000074H
  0010d	00		 DB	 0
_glm_mat4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_copy PROC					; COMDAT

; 123  : glm_mat4_copy(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  : #ifdef __AVX__
; 125  :   glmm_store256(dest[0], glmm_load256(mat[0]));
; 126  :   glmm_store256(dest[2], glmm_load256(mat[2]));
; 127  : #elif defined( __SSE__ ) || defined( __SSE2__ )
; 128  :   glmm_store(dest[0], glmm_load(mat[0]));

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00036	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00041	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 129  :   glmm_store(dest[1], glmm_load(mat[1]));

  00044	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00049	c1 e0 00	 shl	 eax, 0
  0004c	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0004f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00052	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00057	c1 e1 00	 shl	 ecx, 0
  0005a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 130  :   glmm_store(dest[2], glmm_load(mat[2]));

  00060	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00065	d1 e0		 shl	 eax, 1
  00067	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00072	d1 e1		 shl	 ecx, 1
  00074	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00077	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 131  :   glmm_store(dest[3], glmm_load(mat[3]));

  0007a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00085	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00088	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0008d	6b c2 03	 imul	 eax, edx, 3
  00090	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00093	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 132  : #elif defined(CGLM_NEON_FP)
; 133  :   vst1q_f32(dest[0], vld1q_f32(mat[0]));
; 134  :   vst1q_f32(dest[1], vld1q_f32(mat[1]));
; 135  :   vst1q_f32(dest[2], vld1q_f32(mat[2]));
; 136  :   vst1q_f32(dest[3], vld1q_f32(mat[3]));
; 137  : #else
; 138  :   glm_mat4_ucopy(mat, dest);
; 139  : #endif
; 140  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_mat4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\src\main.c
;	COMDAT _SDL_main
_TEXT	SEGMENT
tv670 = -1236						; size = 4
tv657 = -1236						; size = 4
tv664 = -1232						; size = 4
tv651 = -1232						; size = 4
tv225 = -1232						; size = 4
_event_handle$ = -840					; size = 56
_key_input$ = -776					; size = 4
_loc$1 = -764						; size = 4
_shader_fragment$2 = -752				; size = 4
_shader_vertex$3 = -740					; size = 4
_shader_fragment$4 = -728				; size = 4
_shader_vertex$5 = -716					; size = 4
_ortho$ = -704						; size = 64
_test$ = -624						; size = 8
_error$ = -604						; size = 4
_buff$ = -592						; size = 512
_fp$ = -72						; size = 4
_format$ = -60						; size = 2
_channels$ = -48					; size = 4
_freq$ = -36						; size = 4
_i$6 = -24						; size = 4
_number_decoders$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_SDL_main PROC						; COMDAT

; 56   : int main(void) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec d8 04 00
	00		 sub	 esp, 1240		; 000004d8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 28 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1240]
  00024	b9 36 01 00 00	 mov	 ecx, 310		; 00000136H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __E7DCAAE8_main@c
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 57   : 	//Inititlze SDL stuff
; 58   : 	//TODO: rename some globals from "test" and choose better var names, also get controller support and haptic support before you start adding items and stuff
; 59   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);

  00044	6a 03		 push	 3
  00046	6a 11		 push	 17			; 00000011H
  00048	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  0004d	83 c4 08	 add	 esp, 8

; 60   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);

  00050	6a 03		 push	 3
  00052	6a 12		 push	 18			; 00000012H
  00054	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  00059	83 c4 08	 add	 esp, 8

; 61   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_COMPATIBILITY);

  0005c	6a 02		 push	 2
  0005e	6a 15		 push	 21			; 00000015H
  00060	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  00065	83 c4 08	 add	 esp, 8

; 62   : 	if (SDL_Init(SDL_INIT_AUDIO | SDL_INIT_HAPTIC | SDL_INIT_JOYSTICK)) {

  00068	68 10 12 00 00	 push	 4624			; 00001210H
  0006d	e8 00 00 00 00	 call	 _SDL_Init
  00072	83 c4 04	 add	 esp, 4
  00075	85 c0		 test	 eax, eax
  00077	74 13		 je	 SHORT $LN9@SDL_main

; 63   : 		printf("Couldn't inilize audio, %s", SDL_GetError());

  00079	e8 00 00 00 00	 call	 _SDL_GetError
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@
  00084	e8 00 00 00 00	 call	 _printf
  00089	83 c4 08	 add	 esp, 8
$LN9@SDL_main:

; 64   : 	}
; 65   : 	if (TTF_Init() == -1) {

  0008c	e8 00 00 00 00	 call	 _TTF_Init
  00091	83 f8 ff	 cmp	 eax, -1
  00094	75 17		 jne	 SHORT $LN10@SDL_main

; 66   : 		puts("Failed to load SDL_TTF font library");

  00096	8b f4		 mov	 esi, esp
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000a3	83 c4 04	 add	 esp, 4
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN10@SDL_main:

; 67   : 	}
; 68   : 	if ((Mix_Init(MIX_INIT_MP3) & MIX_INIT_MP3) != MIX_INIT_MP3) {

  000ad	6a 08		 push	 8
  000af	e8 00 00 00 00	 call	 _Mix_Init
  000b4	83 c4 04	 add	 esp, 4
  000b7	83 e0 08	 and	 eax, 8
  000ba	75 13		 jne	 SHORT $LN11@SDL_main

; 69   : 		printf("Failed to initilize mix, %s\n", Mix_GetError());

  000bc	e8 00 00 00 00	 call	 _SDL_GetError
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@
  000c7	e8 00 00 00 00	 call	 _printf
  000cc	83 c4 08	 add	 esp, 8
$LN11@SDL_main:

; 70   : 	}
; 71   : 	//set up fonts, load them and turn them into surfaces here
; 72   : 	font_1 = TTF_OpenFont("resources/font_1.ttf", 50);

  000cf	6a 32		 push	 50			; 00000032H
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IGFECFHO@resources?1font_1?4ttf@
  000d6	e8 00 00 00 00	 call	 _TTF_OpenFont
  000db	83 c4 08	 add	 esp, 8
  000de	a3 00 00 00 00	 mov	 DWORD PTR _font_1, eax

; 73   : 	wave_text = TTF_RenderText_Blended(font_1, "Wave:01", white);

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_07BJPGHBBO@Wave?301@
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _font_1
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fd	a3 00 00 00 00	 mov	 DWORD PTR _wave_text, eax

; 74   : 	overtime_text = TTF_RenderText_Blended(font_1, "OVERTIME", white);

  00102	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  00107	50		 push	 eax
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_08CCCPFIL@OVERTIME@
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _font_1
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011c	a3 00 00 00 00	 mov	 DWORD PTR _overtime_text, eax

; 75   : 	wave_text_quad.w = QUAD_TEXTURE_RECT_TEXT_CAL("Wave:01"), wave_text_quad.x = 0 - (QUAD_TEXTURE_RECT_TEXT_CAL("Wave:01") / 2);

  00121	68 00 00 00 00	 push	 OFFSET ??_C@_07BJPGHBBO@Wave?301@
  00126	e8 00 00 00 00	 call	 _strlen
  0012b	83 c4 04	 add	 esp, 4
  0012e	89 85 30 fb ff
	ff		 mov	 DWORD PTR tv651[ebp], eax
  00134	f2 0f 2a 85 30
	fb ff ff	 cvtsi2sd xmm0, DWORD PTR tv651[ebp]
  0013c	8b 85 30 fb ff
	ff		 mov	 eax, DWORD PTR tv651[ebp]
  00142	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00145	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0014e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00156	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015a	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _wave_text_quad+8, xmm0
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_07BJPGHBBO@Wave?301@
  00167	e8 00 00 00 00	 call	 _strlen
  0016c	83 c4 04	 add	 esp, 4
  0016f	89 85 2c fb ff
	ff		 mov	 DWORD PTR tv657[ebp], eax
  00175	f2 0f 2a 85 2c
	fb ff ff	 cvtsi2sd xmm0, DWORD PTR tv657[ebp]
  0017d	8b 8d 2c fb ff
	ff		 mov	 ecx, DWORD PTR tv657[ebp]
  00183	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00186	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0018f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00197	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  0019f	0f 57 c9	 xorps	 xmm1, xmm1
  001a2	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001a6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001aa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _wave_text_quad, xmm0

; 76   : 	overtime_quad.w = QUAD_TEXTURE_RECT_TEXT_CAL("OVERTIME"), overtime_quad.x = 0 - (QUAD_TEXTURE_RECT_TEXT_CAL("OVERTIME") / 2);

  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_08CCCPFIL@OVERTIME@
  001b7	e8 00 00 00 00	 call	 _strlen
  001bc	83 c4 04	 add	 esp, 4
  001bf	89 85 30 fb ff
	ff		 mov	 DWORD PTR tv664[ebp], eax
  001c5	f2 0f 2a 85 30
	fb ff ff	 cvtsi2sd xmm0, DWORD PTR tv664[ebp]
  001cd	8b 85 30 fb ff
	ff		 mov	 eax, DWORD PTR tv664[ebp]
  001d3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d6	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001df	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001eb	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _overtime_quad+8, xmm0
  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_08CCCPFIL@OVERTIME@
  001f8	e8 00 00 00 00	 call	 _strlen
  001fd	83 c4 04	 add	 esp, 4
  00200	89 85 2c fb ff
	ff		 mov	 DWORD PTR tv670[ebp], eax
  00206	f2 0f 2a 85 2c
	fb ff ff	 cvtsi2sd xmm0, DWORD PTR tv670[ebp]
  0020e	8b 8d 2c fb ff
	ff		 mov	 ecx, DWORD PTR tv670[ebp]
  00214	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00217	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00220	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00228	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00230	0f 57 c9	 xorps	 xmm1, xmm1
  00233	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00237	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0023b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _overtime_quad, xmm0

; 77   : 	//set up audio
; 78   : 	if(Mix_OpenAudio(22050, AUDIO_S16SYS, 2, 2048) < 0) {

  00243	68 00 08 00 00	 push	 2048			; 00000800H
  00248	6a 02		 push	 2
  0024a	68 10 80 00 00	 push	 32784			; 00008010H
  0024f	68 22 56 00 00	 push	 22050			; 00005622H
  00254	e8 00 00 00 00	 call	 _Mix_OpenAudio
  00259	83 c4 10	 add	 esp, 16			; 00000010H
  0025c	85 c0		 test	 eax, eax
  0025e	7d 13		 jge	 SHORT $LN12@SDL_main

; 79   : 		printf("Error opening audio device, %s\n", Mix_GetError());

  00260	e8 00 00 00 00	 call	 _SDL_GetError
  00265	50		 push	 eax
  00266	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@
  0026b	e8 00 00 00 00	 call	 _printf
  00270	83 c4 08	 add	 esp, 8
$LN12@SDL_main:

; 80   : 	}
; 81   : 	printf("amount of channels: %d\n", Mix_AllocateChannels(32));

  00273	6a 20		 push	 32			; 00000020H
  00275	e8 00 00 00 00	 call	 _Mix_AllocateChannels
  0027a	83 c4 04	 add	 esp, 4
  0027d	50		 push	 eax
  0027e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@
  00283	e8 00 00 00 00	 call	 _printf
  00288	83 c4 08	 add	 esp, 8

; 82   : 	//???
; 83   : 	int number_decoders = Mix_GetNumChunkDecoders();

  0028b	e8 00 00 00 00	 call	 _Mix_GetNumChunkDecoders
  00290	89 45 f4	 mov	 DWORD PTR _number_decoders$[ebp], eax

; 84   : 	for (int i = 0; i < number_decoders; ++i)

  00293	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  0029a	eb 09		 jmp	 SHORT $LN4@SDL_main
$LN2@SDL_main:
  0029c	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  0029f	83 c0 01	 add	 eax, 1
  002a2	89 45 e8	 mov	 DWORD PTR _i$6[ebp], eax
$LN4@SDL_main:
  002a5	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  002a8	3b 45 f4	 cmp	 eax, DWORD PTR _number_decoders$[ebp]
  002ab	7d 20		 jge	 SHORT $LN3@SDL_main

; 85   : 		printf("Sample chunk decoder %d is for %s\n", i, Mix_GetChunkDecoder(i));

  002ad	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 _Mix_GetChunkDecoder
  002b6	83 c4 04	 add	 esp, 4
  002b9	50		 push	 eax
  002ba	8b 4d e8	 mov	 ecx, DWORD PTR _i$6[ebp]
  002bd	51		 push	 ecx
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@
  002c3	e8 00 00 00 00	 call	 _printf
  002c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002cb	eb cf		 jmp	 SHORT $LN2@SDL_main
$LN3@SDL_main:

; 86   : 	//set up any audio loading here
; 87   : 	overtime_bell_audio = Mix_LoadWAV("resources/overtime_bell.wav");

  002cd	6a 01		 push	 1
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  002d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BIBBAEFM@resources?1overtime_bell?4wav@
  002d9	e8 00 00 00 00	 call	 _SDL_RWFromFile
  002de	83 c4 08	 add	 esp, 8
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 _Mix_LoadWAV_RW
  002e7	83 c4 08	 add	 esp, 8
  002ea	a3 00 00 00 00	 mov	 DWORD PTR _overtime_bell_audio, eax

; 88   : 	Mix_VolumeChunk(overtime_bell_audio, 64);

  002ef	6a 40		 push	 64			; 00000040H
  002f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _overtime_bell_audio
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _Mix_VolumeChunk
  002fc	83 c4 08	 add	 esp, 8

; 89   : 	//print out the current hardware format
; 90   : 	int freq, channels;
; 91   : 	Uint16 format;
; 92   : 	if (Mix_QuerySpec(&freq, &format, &channels)) {

  002ff	8d 45 d0	 lea	 eax, DWORD PTR _channels$[ebp]
  00302	50		 push	 eax
  00303	8d 4d c4	 lea	 ecx, DWORD PTR _format$[ebp]
  00306	51		 push	 ecx
  00307	8d 55 dc	 lea	 edx, DWORD PTR _freq$[ebp]
  0030a	52		 push	 edx
  0030b	e8 00 00 00 00	 call	 _Mix_QuerySpec
  00310	83 c4 0c	 add	 esp, 12			; 0000000cH
  00313	85 c0		 test	 eax, eax
  00315	74 1c		 je	 SHORT $LN13@SDL_main

; 93   : 		printf("Frequerncy:%d, audio format:%x, number of channels:%d\n", freq, format, channels);

  00317	8b 45 d0	 mov	 eax, DWORD PTR _channels$[ebp]
  0031a	50		 push	 eax
  0031b	0f b7 4d c4	 movzx	 ecx, WORD PTR _format$[ebp]
  0031f	51		 push	 ecx
  00320	8b 55 dc	 mov	 edx, DWORD PTR _freq$[ebp]
  00323	52		 push	 edx
  00324	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@
  00329	e8 00 00 00 00	 call	 _printf
  0032e	83 c4 10	 add	 esp, 16			; 00000010H

; 94   : 	}

  00331	eb 13		 jmp	 SHORT $LN14@SDL_main
$LN13@SDL_main:

; 95   : 	else
; 96   : 	{
; 97   : 		printf("Something bad happened...%s\n", Mix_GetError());

  00333	e8 00 00 00 00	 call	 _SDL_GetError
  00338	50		 push	 eax
  00339	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@
  0033e	e8 00 00 00 00	 call	 _printf
  00343	83 c4 08	 add	 esp, 8
$LN14@SDL_main:

; 98   : 	}
; 99   : 	//initilize lua and load scripts
; 100  : 	L = lua_open();

  00346	e8 00 00 00 00	 call	 _luaL_newstate
  0034b	a3 00 00 00 00	 mov	 DWORD PTR _L, eax

; 101  : 	luaL_openlibs(L);

  00350	a1 00 00 00 00	 mov	 eax, DWORD PTR _L
  00355	50		 push	 eax
  00356	e8 00 00 00 00	 call	 _luaL_openlibs
  0035b	83 c4 04	 add	 esp, 4

; 102  : 	FILE* fp = fopen("resources/lua/scripts/test.lua", "r+");

  0035e	8b f4		 mov	 esi, esp
  00360	68 00 00 00 00	 push	 OFFSET ??_C@_02CBLLGHLK@r?$CL@
  00365	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IAPMJAI@resources?1lua?1scripts?1test?4lua@
  0036a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00370	83 c4 08	 add	 esp, 8
  00373	3b f4		 cmp	 esi, esp
  00375	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037a	89 45 b8	 mov	 DWORD PTR _fp$[ebp], eax
$LN5@SDL_main:

; 103  : 	char buff[512];
; 104  : 	int error;  
; 105  : 	while (fgets(buff, sizeof(buff), fp) != NULL) {

  0037d	8b f4		 mov	 esi, esp
  0037f	8b 45 b8	 mov	 eax, DWORD PTR _fp$[ebp]
  00382	50		 push	 eax
  00383	68 00 02 00 00	 push	 512			; 00000200H
  00388	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR _buff$[ebp]
  0038e	51		 push	 ecx
  0038f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgets
  00395	83 c4 0c	 add	 esp, 12			; 0000000cH
  00398	3b f4		 cmp	 esi, esp
  0039a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039f	85 c0		 test	 eax, eax
  003a1	0f 84 bc 00 00
	00		 je	 $LN6@SDL_main

; 106  : 		error = luaL_loadbuffer(L, buff, strlen(buff), "line") || lua_pcall(L, 0, 0, 0);

  003a7	68 00 00 00 00	 push	 OFFSET ??_C@_04HJPCFDOP@line@
  003ac	8d 85 b0 fd ff
	ff		 lea	 eax, DWORD PTR _buff$[ebp]
  003b2	50		 push	 eax
  003b3	e8 00 00 00 00	 call	 _strlen
  003b8	83 c4 04	 add	 esp, 4
  003bb	50		 push	 eax
  003bc	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR _buff$[ebp]
  003c2	51		 push	 ecx
  003c3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _L
  003c9	52		 push	 edx
  003ca	e8 00 00 00 00	 call	 _luaL_loadbuffer
  003cf	83 c4 10	 add	 esp, 16			; 00000010H
  003d2	85 c0		 test	 eax, eax
  003d4	75 24		 jne	 SHORT $LN47@SDL_main
  003d6	6a 00		 push	 0
  003d8	6a 00		 push	 0
  003da	6a 00		 push	 0
  003dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _L
  003e1	50		 push	 eax
  003e2	e8 00 00 00 00	 call	 _lua_pcall
  003e7	83 c4 10	 add	 esp, 16			; 00000010H
  003ea	85 c0		 test	 eax, eax
  003ec	75 0c		 jne	 SHORT $LN47@SDL_main
  003ee	c7 85 30 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv225[ebp], 0
  003f8	eb 0a		 jmp	 SHORT $LN48@SDL_main
$LN47@SDL_main:
  003fa	c7 85 30 fb ff
	ff 01 00 00 00	 mov	 DWORD PTR tv225[ebp], 1
$LN48@SDL_main:
  00404	8b 8d 30 fb ff
	ff		 mov	 ecx, DWORD PTR tv225[ebp]
  0040a	89 8d a4 fd ff
	ff		 mov	 DWORD PTR _error$[ebp], ecx

; 107  : 		if (error) {

  00410	83 bd a4 fd ff
	ff 00		 cmp	 DWORD PTR _error$[ebp], 0
  00417	74 45		 je	 SHORT $LN15@SDL_main

; 108  : 			fprintf(stderr, "%s\n", lua_tostring(L, -1));

  00419	6a 00		 push	 0
  0041b	6a ff		 push	 -1
  0041d	a1 00 00 00 00	 mov	 eax, DWORD PTR _L
  00422	50		 push	 eax
  00423	e8 00 00 00 00	 call	 _lua_tolstring
  00428	83 c4 0c	 add	 esp, 12			; 0000000cH
  0042b	50		 push	 eax
  0042c	68 00 00 00 00	 push	 OFFSET ??_C@_03OFAPEBGM@?$CFs?6@
  00431	8b f4		 mov	 esi, esp
  00433	6a 02		 push	 2
  00435	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0043b	83 c4 04	 add	 esp, 4
  0043e	3b f4		 cmp	 esi, esp
  00440	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00445	50		 push	 eax
  00446	e8 00 00 00 00	 call	 _fprintf
  0044b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  : 			lua_pop(L, 1);  /* pop error message from the stack */

  0044e	6a fe		 push	 -2			; fffffffeH
  00450	a1 00 00 00 00	 mov	 eax, DWORD PTR _L
  00455	50		 push	 eax
  00456	e8 00 00 00 00	 call	 _lua_settop
  0045b	83 c4 08	 add	 esp, 8
$LN15@SDL_main:

; 110  : 		}
; 111  : 	}

  0045e	e9 1a ff ff ff	 jmp	 $LN5@SDL_main
$LN6@SDL_main:

; 112  : 	lua_getglobal(L, "ab");

  00463	68 00 00 00 00	 push	 OFFSET ??_C@_02BOGAIONP@ab@
  00468	68 ee d8 ff ff	 push	 -10002			; ffffd8eeH
  0046d	a1 00 00 00 00	 mov	 eax, DWORD PTR _L
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 _lua_getfield
  00478	83 c4 0c	 add	 esp, 12			; 0000000cH

; 113  : 	lua_pushstring(L, "b");

  0047b	68 00 00 00 00	 push	 OFFSET ??_C@_01OJONOECF@b@
  00480	a1 00 00 00 00	 mov	 eax, DWORD PTR _L
  00485	50		 push	 eax
  00486	e8 00 00 00 00	 call	 _lua_pushstring
  0048b	83 c4 08	 add	 esp, 8

; 114  : 	lua_gettable(L, -2);

  0048e	6a fe		 push	 -2			; fffffffeH
  00490	a1 00 00 00 00	 mov	 eax, DWORD PTR _L
  00495	50		 push	 eax
  00496	e8 00 00 00 00	 call	 _lua_gettable
  0049b	83 c4 08	 add	 esp, 8

; 115  : 	double test = lua_tonumber(L, -1);

  0049e	6a ff		 push	 -1
  004a0	a1 00 00 00 00	 mov	 eax, DWORD PTR _L
  004a5	50		 push	 eax
  004a6	e8 00 00 00 00	 call	 _lua_tonumber
  004ab	83 c4 08	 add	 esp, 8
  004ae	dd 9d 90 fd ff
	ff		 fstp	 QWORD PTR _test$[ebp]

; 116  : 	printf("%f\n", test);

  004b4	83 ec 08	 sub	 esp, 8
  004b7	f2 0f 10 85 90
	fd ff ff	 movsd	 xmm0, QWORD PTR _test$[ebp]
  004bf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004c4	68 00 00 00 00	 push	 OFFSET ??_C@_03PPOCCAPH@?$CFf?6@
  004c9	e8 00 00 00 00	 call	 _printf
  004ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  : 	fclose(fp);

  004d1	8b f4		 mov	 esi, esp
  004d3	8b 45 b8	 mov	 eax, DWORD PTR _fp$[ebp]
  004d6	50		 push	 eax
  004d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  004dd	83 c4 04	 add	 esp, 4
  004e0	3b f4		 cmp	 esi, esp
  004e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 118  : 	window = SDL_CreateWindow("SpaceMonster", 0, 100, WINDOW_WIDTH_START, WINDOW_HEIGHT_START, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);

  004e7	6a 22		 push	 34			; 00000022H
  004e9	68 d0 02 00 00	 push	 720			; 000002d0H
  004ee	68 00 05 00 00	 push	 1280			; 00000500H
  004f3	6a 64		 push	 100			; 00000064H
  004f5	6a 00		 push	 0
  004f7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CJFNGLCH@SpaceMonster@
  004fc	e8 00 00 00 00	 call	 _SDL_CreateWindow
  00501	83 c4 18	 add	 esp, 24			; 00000018H
  00504	a3 00 00 00 00	 mov	 DWORD PTR _window, eax

; 119  : 	if (!window) {

  00509	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _window, 0
  00510	75 17		 jne	 SHORT $LN16@SDL_main

; 120  : 		puts("Window creation failed!");

  00512	8b f4		 mov	 esi, esp
  00514	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@
  00519	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0051f	83 c4 04	 add	 esp, 4
  00522	3b f4		 cmp	 esi, esp
  00524	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN16@SDL_main:

; 121  : 	}
; 122  :     glcontext = SDL_GL_CreateContext(window);

  00529	a1 00 00 00 00	 mov	 eax, DWORD PTR _window
  0052e	50		 push	 eax
  0052f	e8 00 00 00 00	 call	 _SDL_GL_CreateContext
  00534	83 c4 04	 add	 esp, 4
  00537	a3 00 00 00 00	 mov	 DWORD PTR _glcontext, eax

; 123  : 	if (!glcontext) {

  0053c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _glcontext, 0
  00543	75 17		 jne	 SHORT $LN17@SDL_main

; 124  : 		puts("SDL/OPENGL thing failed!");

  00545	8b f4		 mov	 esi, esp
  00547	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@
  0054c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00552	83 c4 04	 add	 esp, 4
  00555	3b f4		 cmp	 esi, esp
  00557	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN17@SDL_main:

; 125  : 	}
; 126  : 	if (!gladLoadGL()) {

  0055c	e8 00 00 00 00	 call	 _gladLoadGL
  00561	85 c0		 test	 eax, eax
  00563	75 17		 jne	 SHORT $LN18@SDL_main

; 127  : 		puts("Failed to load openGL");

  00565	8b f4		 mov	 esi, esp
  00567	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@
  0056c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00572	83 c4 04	 add	 esp, 4
  00575	3b f4		 cmp	 esi, esp
  00577	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN18@SDL_main:

; 128  : 	}
; 129  : 	glEnable(GL_BLEND);

  0057c	8b f4		 mov	 esi, esp
  0057e	68 e2 0b 00 00	 push	 3042			; 00000be2H
  00583	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnable
  00589	3b f4		 cmp	 esi, esp
  0058b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 130  : 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  00590	8b f4		 mov	 esi, esp
  00592	68 03 03 00 00	 push	 771			; 00000303H
  00597	68 02 03 00 00	 push	 770			; 00000302H
  0059c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBlendFunc
  005a2	3b f4		 cmp	 esi, esp
  005a4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 131  : 	glViewport(0, 0, WINDOW_WIDTH_START, WINDOW_HEIGHT_START);

  005a9	8b f4		 mov	 esi, esp
  005ab	68 d0 02 00 00	 push	 720			; 000002d0H
  005b0	68 00 05 00 00	 push	 1280			; 00000500H
  005b5	6a 00		 push	 0
  005b7	6a 00		 push	 0
  005b9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glViewport
  005bf	3b f4		 cmp	 esi, esp
  005c1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 132  : 	glOrtho(0, WINDOW_WIDTH_START, 0, WINDOW_HEIGHT_START, 1.0, -1.0);

  005c6	8b f4		 mov	 esi, esp
  005c8	83 ec 08	 sub	 esp, 8
  005cb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  005d3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005d8	83 ec 08	 sub	 esp, 8
  005db	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  005e3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005e8	83 ec 08	 sub	 esp, 8
  005eb	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4086800000000000
  005f3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  005f8	83 ec 08	 sub	 esp, 8
  005fb	0f 57 c0	 xorps	 xmm0, xmm0
  005fe	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00603	83 ec 08	 sub	 esp, 8
  00606	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4094000000000000
  0060e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00613	83 ec 08	 sub	 esp, 8
  00616	0f 57 c0	 xorps	 xmm0, xmm0
  00619	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0061e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glOrtho
  00624	3b f4		 cmp	 esi, esp
  00626	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 133  : 	mat4 ortho;
; 134  : 	glm_ortho(0, WINDOW_WIDTH_START, 0, WINDOW_HEIGHT_START, 1.0, -1.0, ortho);

  0062b	8d 85 40 fd ff
	ff		 lea	 eax, DWORD PTR _ortho$[ebp]
  00631	50		 push	 eax
  00632	51		 push	 ecx
  00633	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0063b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00640	51		 push	 ecx
  00641	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00649	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064e	51		 push	 ecx
  0064f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44340000
  00657	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065c	51		 push	 ecx
  0065d	0f 57 c0	 xorps	 xmm0, xmm0
  00660	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00665	51		 push	 ecx
  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44a00000
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	51		 push	 ecx
  00674	0f 57 c0	 xorps	 xmm0, xmm0
  00677	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067c	e8 00 00 00 00	 call	 _glm_ortho
  00681	83 c4 1c	 add	 esp, 28			; 0000001cH

; 135  : 	if (glGetError()) {

  00684	8b f4		 mov	 esi, esp
  00686	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  0068c	3b f4		 cmp	 esi, esp
  0068e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00693	85 c0		 test	 eax, eax
  00695	74 1d		 je	 SHORT $LN19@SDL_main

; 136  : 		printf("Failed to initilize openGL, %x", glGetError());

  00697	8b f4		 mov	 esi, esp
  00699	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  0069f	3b f4		 cmp	 esi, esp
  006a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006a6	50		 push	 eax
  006a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@
  006ac	e8 00 00 00 00	 call	 _printf
  006b1	83 c4 08	 add	 esp, 8
$LN19@SDL_main:

; 137  : 	}
; 138  : 	shader_texturedobj = glCreateProgram();

  006b4	8b f4		 mov	 esi, esp
  006b6	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateProgram
  006bc	3b f4		 cmp	 esi, esp
  006be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006c3	a3 00 00 00 00	 mov	 DWORD PTR _shader_texturedobj, eax

; 139  : 	shader_colored = glCreateProgram();

  006c8	8b f4		 mov	 esi, esp
  006ca	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateProgram
  006d0	3b f4		 cmp	 esi, esp
  006d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006d7	a3 00 00 00 00	 mov	 DWORD PTR _shader_colored, eax

; 140  : 	{
; 141  : 		GLint shader_vertex;
; 142  : 		GLint shader_fragment;
; 143  : 		shader_vertex = CompileShader("resources/shaders/vertex1.txt", GL_VERTEX_SHADER);

  006dc	68 31 8b 00 00	 push	 35633			; 00008b31H
  006e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@HPNKKGGC@resources?1shaders?1vertex1?4txt@
  006e6	e8 00 00 00 00	 call	 _CompileShader
  006eb	83 c4 08	 add	 esp, 8
  006ee	89 85 34 fd ff
	ff		 mov	 DWORD PTR _shader_vertex$5[ebp], eax

; 144  : 		shader_fragment = CompileShader("resources/shaders/fragment1.txt", GL_FRAGMENT_SHADER);

  006f4	68 30 8b 00 00	 push	 35632			; 00008b30H
  006f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DHKGOHOF@resources?1shaders?1fragment1?4txt@
  006fe	e8 00 00 00 00	 call	 _CompileShader
  00703	83 c4 08	 add	 esp, 8
  00706	89 85 28 fd ff
	ff		 mov	 DWORD PTR _shader_fragment$4[ebp], eax

; 145  : 		glAttachShader(shader_texturedobj, shader_vertex);

  0070c	8b f4		 mov	 esi, esp
  0070e	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$5[ebp]
  00714	50		 push	 eax
  00715	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_texturedobj
  0071b	51		 push	 ecx
  0071c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  00722	3b f4		 cmp	 esi, esp
  00724	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 146  : 		glAttachShader(shader_texturedobj, shader_fragment);

  00729	8b f4		 mov	 esi, esp
  0072b	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$4[ebp]
  00731	50		 push	 eax
  00732	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_texturedobj
  00738	51		 push	 ecx
  00739	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  0073f	3b f4		 cmp	 esi, esp
  00741	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 147  : 		glDeleteShader(shader_vertex);

  00746	8b f4		 mov	 esi, esp
  00748	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$5[ebp]
  0074e	50		 push	 eax
  0074f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  00755	3b f4		 cmp	 esi, esp
  00757	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 148  : 		glDeleteShader(shader_fragment);

  0075c	8b f4		 mov	 esi, esp
  0075e	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$4[ebp]
  00764	50		 push	 eax
  00765	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  0076b	3b f4		 cmp	 esi, esp
  0076d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 149  : 	}        
; 150  : 	{
; 151  : 		GLint shader_vertex;
; 152  : 		GLint shader_fragment;
; 153  : 		shader_vertex = CompileShader("resources/shaders/vertex2.txt", GL_VERTEX_SHADER);

  00772	68 31 8b 00 00	 push	 35633			; 00008b31H
  00777	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PJEONEMM@resources?1shaders?1vertex2?4txt@
  0077c	e8 00 00 00 00	 call	 _CompileShader
  00781	83 c4 08	 add	 esp, 8
  00784	89 85 1c fd ff
	ff		 mov	 DWORD PTR _shader_vertex$3[ebp], eax

; 154  : 		shader_fragment = CompileShader("resources/shaders/fragment2.txt", GL_FRAGMENT_SHADER);

  0078a	68 30 8b 00 00	 push	 35632			; 00008b30H
  0078f	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LBDCJFEL@resources?1shaders?1fragment2?4txt@
  00794	e8 00 00 00 00	 call	 _CompileShader
  00799	83 c4 08	 add	 esp, 8
  0079c	89 85 10 fd ff
	ff		 mov	 DWORD PTR _shader_fragment$2[ebp], eax

; 155  : 		glAttachShader(shader_colored, shader_vertex);

  007a2	8b f4		 mov	 esi, esp
  007a4	8b 85 1c fd ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$3[ebp]
  007aa	50		 push	 eax
  007ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_colored
  007b1	51		 push	 ecx
  007b2	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  007b8	3b f4		 cmp	 esi, esp
  007ba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 156  : 		glAttachShader(shader_colored, shader_fragment);

  007bf	8b f4		 mov	 esi, esp
  007c1	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$2[ebp]
  007c7	50		 push	 eax
  007c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_colored
  007ce	51		 push	 ecx
  007cf	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  007d5	3b f4		 cmp	 esi, esp
  007d7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 157  : 		glDeleteShader(shader_vertex);

  007dc	8b f4		 mov	 esi, esp
  007de	8b 85 1c fd ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$3[ebp]
  007e4	50		 push	 eax
  007e5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  007eb	3b f4		 cmp	 esi, esp
  007ed	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 158  : 		glDeleteShader(shader_fragment);

  007f2	8b f4		 mov	 esi, esp
  007f4	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$2[ebp]
  007fa	50		 push	 eax
  007fb	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  00801	3b f4		 cmp	 esi, esp
  00803	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 159  : 	}
; 160  : 	glLinkProgram(shader_texturedobj);

  00808	8b f4		 mov	 esi, esp
  0080a	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0080f	50		 push	 eax
  00810	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLinkProgram
  00816	3b f4		 cmp	 esi, esp
  00818	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 161  : 	glLinkProgram(shader_colored);

  0081d	8b f4		 mov	 esi, esp
  0081f	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  00824	50		 push	 eax
  00825	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLinkProgram
  0082b	3b f4		 cmp	 esi, esp
  0082d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 162  : 	if (glGetError()) {

  00832	8b f4		 mov	 esi, esp
  00834	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  0083a	3b f4		 cmp	 esi, esp
  0083c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00841	85 c0		 test	 eax, eax
  00843	74 1d		 je	 SHORT $LN20@SDL_main

; 163  : 		printf("Failed to initilize shaders, %x", glGetError());

  00845	8b f4		 mov	 esi, esp
  00847	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  0084d	3b f4		 cmp	 esi, esp
  0084f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00854	50		 push	 eax
  00855	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@
  0085a	e8 00 00 00 00	 call	 _printf
  0085f	83 c4 08	 add	 esp, 8
$LN20@SDL_main:

; 164  : 	}
; 165  : 	//setting global light
; 166  : 	{
; 167  : 		glUseProgram(shader_colored);

  00862	8b f4		 mov	 esi, esp
  00864	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  00869	50		 push	 eax
  0086a	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00870	3b f4		 cmp	 esi, esp
  00872	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 168  : 		GLint loc = glGetUniformLocation(shader_colored, "global_light");

  00877	8b f4		 mov	 esi, esp
  00879	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OBNOHIMB@global_light@
  0087e	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  00883	50		 push	 eax
  00884	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetUniformLocation
  0088a	3b f4		 cmp	 esi, esp
  0088c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00891	89 85 04 fd ff
	ff		 mov	 DWORD PTR _loc$1[ebp], eax

; 169  : 		glUniform3f(loc, 1, 1, 1);

  00897	8b f4		 mov	 esi, esp
  00899	51		 push	 ecx
  0089a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a7	51		 push	 ecx
  008a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b5	51		 push	 ecx
  008b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c3	8b 85 04 fd ff
	ff		 mov	 eax, DWORD PTR _loc$1[ebp]
  008c9	50		 push	 eax
  008ca	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUniform3f
  008d0	3b f4		 cmp	 esi, esp
  008d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 170  : 		glUseProgram(shader_texturedobj);

  008d7	8b f4		 mov	 esi, esp
  008d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  008de	50		 push	 eax
  008df	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  008e5	3b f4		 cmp	 esi, esp
  008e7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 171  : 		loc = glGetUniformLocation(shader_texturedobj, "global_light");

  008ec	8b f4		 mov	 esi, esp
  008ee	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OBNOHIMB@global_light@
  008f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  008f8	50		 push	 eax
  008f9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetUniformLocation
  008ff	3b f4		 cmp	 esi, esp
  00901	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00906	89 85 04 fd ff
	ff		 mov	 DWORD PTR _loc$1[ebp], eax

; 172  : 		glUniform3f(loc, 1, 1, 1);

  0090c	8b f4		 mov	 esi, esp
  0090e	51		 push	 ecx
  0090f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00917	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0091c	51		 push	 ecx
  0091d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00925	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092a	51		 push	 ecx
  0092b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00933	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00938	8b 85 04 fd ff
	ff		 mov	 eax, DWORD PTR _loc$1[ebp]
  0093e	50		 push	 eax
  0093f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUniform3f
  00945	3b f4		 cmp	 esi, esp
  00947	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 173  : 		if (glGetError()) {

  0094c	8b f4		 mov	 esi, esp
  0094e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00954	3b f4		 cmp	 esi, esp
  00956	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0095b	85 c0		 test	 eax, eax
  0095d	74 1d		 je	 SHORT $LN21@SDL_main

; 174  : 			printf("Failed to initilize shader uniforms, %x", glGetError());

  0095f	8b f4		 mov	 esi, esp
  00961	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00967	3b f4		 cmp	 esi, esp
  00969	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0096e	50		 push	 eax
  0096f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@
  00974	e8 00 00 00 00	 call	 _printf
  00979	83 c4 08	 add	 esp, 8
$LN21@SDL_main:

; 175  : 		}
; 176  : 		//unless you need it for somereason
; 177  : 		//GLint tex0 = glGetUniformLocation(shader_texturedobj, "Texture0");
; 178  : 		//GLint tex1 = glGetUniformLocation(shader_texturedobj, "Texture1");
; 179  : 		//glUniform1i(tex0, 0);
; 180  : 		//glUniform1i(tex1, 1);
; 181  : 	}
; 182  : 	glUseProgram(shader_texturedobj);

  0097c	8b f4		 mov	 esi, esp
  0097e	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00983	50		 push	 eax
  00984	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  0098a	3b f4		 cmp	 esi, esp
  0098c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 183  : 	Init_GL();

  00991	e8 00 00 00 00	 call	 _Init_GL

; 184  : 	active_en |= FEDERATION_SCOUT;

  00996	a1 00 00 00 00	 mov	 eax, DWORD PTR _active_en
  0099b	83 c8 01	 or	 eax, 1
  0099e	a3 00 00 00 00	 mov	 DWORD PTR _active_en, eax

; 185  : 	GAME_WaveInit();

  009a3	e8 00 00 00 00	 call	 _GAME_WaveInit

; 186  : 	//other misc texture init
; 187  : 	player_quad.x = -1.0, player_quad.y = 1.0, player_quad.w = 0.05, player_quad.h = 0.1;

  009a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009b0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
  009b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009c0	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
  009c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  009d0	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _player_quad+8, xmm0
  009d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  009e0	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR _player_quad+12, xmm0

; 188  : 	player_quad.textid = texture[0];

  009e8	b8 04 00 00 00	 mov	 eax, 4
  009ed	6b c8 00	 imul	 ecx, eax, 0
  009f0	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  009f6	89 15 10 00 00
	00		 mov	 DWORD PTR _player_quad+16, edx

; 189  : 	wave_text_quad.textid = texture[3];

  009fc	b8 04 00 00 00	 mov	 eax, 4
  00a01	6b c8 03	 imul	 ecx, eax, 3
  00a04	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  00a0a	89 15 10 00 00
	00		 mov	 DWORD PTR _wave_text_quad+16, edx

; 190  : 	wave_num[0] = '0', wave_num[1] = '1';

  00a10	b8 01 00 00 00	 mov	 eax, 1
  00a15	6b c8 00	 imul	 ecx, eax, 0
  00a18	c6 81 00 00 00
	00 30		 mov	 BYTE PTR _wave_num[ecx], 48 ; 00000030H
  00a1f	ba 01 00 00 00	 mov	 edx, 1
  00a24	c1 e2 00	 shl	 edx, 0
  00a27	c6 82 00 00 00
	00 31		 mov	 BYTE PTR _wave_num[edx], 49 ; 00000031H

; 191  : 	overtime_quad.textid = texture[4];

  00a2e	b8 04 00 00 00	 mov	 eax, 4
  00a33	c1 e0 02	 shl	 eax, 2
  00a36	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00a3c	89 0d 10 00 00
	00		 mov	 DWORD PTR _overtime_quad+16, ecx

; 192  : 	glClearColor(0, 0, 0, 1);

  00a42	8b f4		 mov	 esi, esp
  00a44	51		 push	 ecx
  00a45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a52	51		 push	 ecx
  00a53	0f 57 c0	 xorps	 xmm0, xmm0
  00a56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a5b	51		 push	 ecx
  00a5c	0f 57 c0	 xorps	 xmm0, xmm0
  00a5f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a64	51		 push	 ecx
  00a65	0f 57 c0	 xorps	 xmm0, xmm0
  00a68	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a6d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glClearColor
  00a73	3b f4		 cmp	 esi, esp
  00a75	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 193  : 	//Stuff that needs to be outside of the while loop
; 194  : 	Uint8* key_input = SDL_GetKeyboardState(NULL);

  00a7a	6a 00		 push	 0
  00a7c	e8 00 00 00 00	 call	 _SDL_GetKeyboardState
  00a81	83 c4 04	 add	 esp, 4
  00a84	89 85 f8 fc ff
	ff		 mov	 DWORD PTR _key_input$[ebp], eax
$LN7@SDL_main:

; 195  : 	SDL_Event event_handle;
; 196  : 	while (1) {

  00a8a	b8 01 00 00 00	 mov	 eax, 1
  00a8f	85 c0		 test	 eax, eax
  00a91	0f 84 08 07 00
	00		 je	 $SHUTDOWN$57

; 197  : 		start = clock();

  00a97	8b f4		 mov	 esi, esp
  00a99	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  00a9f	3b f4		 cmp	 esi, esp
  00aa1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aa6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00aaa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _start, xmm0

; 198  : 		if (SDL_PollEvent(&event_handle)) {

  00ab2	8d 85 b8 fc ff
	ff		 lea	 eax, DWORD PTR _event_handle$[ebp]
  00ab8	50		 push	 eax
  00ab9	e8 00 00 00 00	 call	 _SDL_PollEvent
  00abe	83 c4 04	 add	 esp, 4
  00ac1	85 c0		 test	 eax, eax
  00ac3	0f 84 27 01 00
	00		 je	 $LN25@SDL_main

; 199  : 			if (event_handle.type == SDL_WINDOWEVENT) {

  00ac9	81 bd b8 fc ff
	ff 00 02 00 00	 cmp	 DWORD PTR _event_handle$[ebp], 512 ; 00000200H
  00ad3	0f 85 17 01 00
	00		 jne	 $LN25@SDL_main

; 200  : 				if (event_handle.window.event == SDL_WINDOWEVENT_CLOSE) {

  00ad9	0f b6 85 c4 fc
	ff ff		 movzx	 eax, BYTE PTR _event_handle$[ebp+12]
  00ae0	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00ae3	75 05		 jne	 SHORT $LN24@SDL_main

; 201  : 					goto SHUTDOWN;

  00ae5	e9 b5 06 00 00	 jmp	 $SHUTDOWN$57
$LN24@SDL_main:

; 202  : 				}
; 203  : 				if (event_handle.window.event == SDL_WINDOWEVENT_RESIZED) {

  00aea	0f b6 85 c4 fc
	ff ff		 movzx	 eax, BYTE PTR _event_handle$[ebp+12]
  00af1	83 f8 05	 cmp	 eax, 5
  00af4	0f 85 f6 00 00
	00		 jne	 $LN25@SDL_main

; 204  : 					glViewport(0, 0, event_handle.window.data1, event_handle.window.data2);

  00afa	8b f4		 mov	 esi, esp
  00afc	8b 85 cc fc ff
	ff		 mov	 eax, DWORD PTR _event_handle$[ebp+20]
  00b02	50		 push	 eax
  00b03	8b 8d c8 fc ff
	ff		 mov	 ecx, DWORD PTR _event_handle$[ebp+16]
  00b09	51		 push	 ecx
  00b0a	6a 00		 push	 0
  00b0c	6a 00		 push	 0
  00b0e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glViewport
  00b14	3b f4		 cmp	 esi, esp
  00b16	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 205  : 					glOrtho(0, event_handle.window.data1, 0, event_handle.window.data2, 1.0, -1.0);

  00b1b	8b f4		 mov	 esi, esp
  00b1d	83 ec 08	 sub	 esp, 8
  00b20	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00b28	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b2d	83 ec 08	 sub	 esp, 8
  00b30	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00b38	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b3d	f2 0f 2a 85 cc
	fc ff ff	 cvtsi2sd xmm0, DWORD PTR _event_handle$[ebp+20]
  00b45	83 ec 08	 sub	 esp, 8
  00b48	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b4d	83 ec 08	 sub	 esp, 8
  00b50	0f 57 c0	 xorps	 xmm0, xmm0
  00b53	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b58	f2 0f 2a 85 c8
	fc ff ff	 cvtsi2sd xmm0, DWORD PTR _event_handle$[ebp+16]
  00b60	83 ec 08	 sub	 esp, 8
  00b63	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b68	83 ec 08	 sub	 esp, 8
  00b6b	0f 57 c0	 xorps	 xmm0, xmm0
  00b6e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00b73	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glOrtho
  00b79	3b f4		 cmp	 esi, esp
  00b7b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 206  : 					glm_ortho(0, event_handle.window.data1, 0, event_handle.window.data2, 1.0, -1.0, ortho);

  00b80	8d 85 40 fd ff
	ff		 lea	 eax, DWORD PTR _ortho$[ebp]
  00b86	50		 push	 eax
  00b87	51		 push	 ecx
  00b88	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b90	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b95	51		 push	 ecx
  00b96	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba3	f3 0f 2a 85 cc
	fc ff ff	 cvtsi2ss xmm0, DWORD PTR _event_handle$[ebp+20]
  00bab	51		 push	 ecx
  00bac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb1	51		 push	 ecx
  00bb2	0f 57 c0	 xorps	 xmm0, xmm0
  00bb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bba	f3 0f 2a 85 c8
	fc ff ff	 cvtsi2ss xmm0, DWORD PTR _event_handle$[ebp+16]
  00bc2	51		 push	 ecx
  00bc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc8	51		 push	 ecx
  00bc9	0f 57 c0	 xorps	 xmm0, xmm0
  00bcc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bd1	e8 00 00 00 00	 call	 _glm_ortho
  00bd6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 207  : 					window_width = event_handle.window.data1, window_height = event_handle.window.data2;

  00bd9	8b 85 c8 fc ff
	ff		 mov	 eax, DWORD PTR _event_handle$[ebp+16]
  00bdf	a3 00 00 00 00	 mov	 DWORD PTR _window_width, eax
  00be4	8b 8d cc fc ff
	ff		 mov	 ecx, DWORD PTR _event_handle$[ebp+20]
  00bea	89 0d 00 00 00
	00		 mov	 DWORD PTR _window_height, ecx
$LN25@SDL_main:

; 208  : 				}
; 209  : 			}
; 210  : 		}
; 211  : 
; 212  : 		glClear(GL_COLOR_BUFFER_BIT);

  00bf0	8b f4		 mov	 esi, esp
  00bf2	68 00 40 00 00	 push	 16384			; 00004000H
  00bf7	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glClear
  00bfd	3b f4		 cmp	 esi, esp
  00bff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 213  : 		//cycle the background
; 214  : 		background_vertexes[6] = background_vertexes[6] + 1 * delta_time, background_vertexes[14] = background_vertexes[14] + 1 * delta_time;

  00c04	b8 04 00 00 00	 mov	 eax, 4
  00c09	6b c8 06	 imul	 ecx, eax, 6
  00c0c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c14	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00c1c	f3 0f 58 81 00
	00 00 00	 addss	 xmm0, DWORD PTR _background_vertexes[ecx]
  00c24	ba 04 00 00 00	 mov	 edx, 4
  00c29	6b c2 06	 imul	 eax, edx, 6
  00c2c	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00c34	b9 04 00 00 00	 mov	 ecx, 4
  00c39	6b d1 0e	 imul	 edx, ecx, 14
  00c3c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c44	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00c4c	f3 0f 58 82 00
	00 00 00	 addss	 xmm0, DWORD PTR _background_vertexes[edx]
  00c54	b8 04 00 00 00	 mov	 eax, 4
  00c59	6b c8 0e	 imul	 ecx, eax, 14
  00c5c	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0

; 215  : 		background_vertexes[22] = background_vertexes[22] + 1 * delta_time, background_vertexes[30] = background_vertexes[30] + 1 * delta_time;

  00c64	b8 04 00 00 00	 mov	 eax, 4
  00c69	6b c8 16	 imul	 ecx, eax, 22
  00c6c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c74	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00c7c	f3 0f 58 81 00
	00 00 00	 addss	 xmm0, DWORD PTR _background_vertexes[ecx]
  00c84	ba 04 00 00 00	 mov	 edx, 4
  00c89	6b c2 16	 imul	 eax, edx, 22
  00c8c	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00c94	b9 04 00 00 00	 mov	 ecx, 4
  00c99	6b d1 1e	 imul	 edx, ecx, 30
  00c9c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ca4	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00cac	f3 0f 58 82 00
	00 00 00	 addss	 xmm0, DWORD PTR _background_vertexes[edx]
  00cb4	b8 04 00 00 00	 mov	 eax, 4
  00cb9	6b c8 1e	 imul	 ecx, eax, 30
  00cbc	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0

; 216  : 		if (background_vertexes[6] > 1)

  00cc4	b8 04 00 00 00	 mov	 eax, 4
  00cc9	6b c8 06	 imul	 ecx, eax, 6
  00ccc	f3 0f 10 81 00
	00 00 00	 movss	 xmm0, DWORD PTR _background_vertexes[ecx]
  00cd4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00cdb	76 56		 jbe	 SHORT $LN26@SDL_main

; 217  : 			background_vertexes[6] = 0, background_vertexes[14] = 1, background_vertexes[22] = 1, background_vertexes[30] = 0;

  00cdd	b8 04 00 00 00	 mov	 eax, 4
  00ce2	6b c8 06	 imul	 ecx, eax, 6
  00ce5	0f 57 c0	 xorps	 xmm0, xmm0
  00ce8	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0
  00cf0	ba 04 00 00 00	 mov	 edx, 4
  00cf5	6b c2 0e	 imul	 eax, edx, 14
  00cf8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d00	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00d08	b9 04 00 00 00	 mov	 ecx, 4
  00d0d	6b d1 16	 imul	 edx, ecx, 22
  00d10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d18	f3 0f 11 82 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[edx], xmm0
  00d20	b8 04 00 00 00	 mov	 eax, 4
  00d25	6b c8 1e	 imul	 ecx, eax, 30
  00d28	0f 57 c0	 xorps	 xmm0, xmm0
  00d2b	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0
$LN26@SDL_main:

; 218  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), background_vertexes);

  00d33	8b f4		 mov	 esi, esp
  00d35	68 00 00 00 00	 push	 OFFSET _background_vertexes
  00d3a	68 80 00 00 00	 push	 128			; 00000080H
  00d3f	6a 00		 push	 0
  00d41	68 92 88 00 00	 push	 34962			; 00008892H
  00d46	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00d4c	3b f4		 cmp	 esi, esp
  00d4e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 219  : 		glBindTexture(GL_TEXTURE_2D, texture[1]);

  00d53	b8 04 00 00 00	 mov	 eax, 4
  00d58	c1 e0 00	 shl	 eax, 0
  00d5b	8b f4		 mov	 esi, esp
  00d5d	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00d63	51		 push	 ecx
  00d64	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00d69	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00d6f	3b f4		 cmp	 esi, esp
  00d71	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 220  : 		glDrawArrays(GL_QUADS, 0, 4);

  00d76	8b f4		 mov	 esi, esp
  00d78	6a 04		 push	 4
  00d7a	6a 00		 push	 0
  00d7c	6a 07		 push	 7
  00d7e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00d84	3b f4		 cmp	 esi, esp
  00d86	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 221  : 		//input processing
; 222  : 		if (SDL_GetMouseState(NULL, NULL) & SDL_BUTTON(SDL_BUTTON_LEFT)) {

  00d8b	6a 00		 push	 0
  00d8d	6a 00		 push	 0
  00d8f	e8 00 00 00 00	 call	 _SDL_GetMouseState
  00d94	83 c4 08	 add	 esp, 8
  00d97	83 e0 01	 and	 eax, 1
  00d9a	74 10		 je	 SHORT $LN27@SDL_main

; 223  : 			SDL_SetCursor(mouse_closed);

  00d9c	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse_closed
  00da1	50		 push	 eax
  00da2	e8 00 00 00 00	 call	 _SDL_SetCursor
  00da7	83 c4 04	 add	 esp, 4

; 224  : 		}

  00daa	eb 0e		 jmp	 SHORT $LN28@SDL_main
$LN27@SDL_main:

; 225  : 		else {
; 226  : 			SDL_SetCursor(mouse_opened);

  00dac	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse_opened
  00db1	50		 push	 eax
  00db2	e8 00 00 00 00	 call	 _SDL_SetCursor
  00db7	83 c4 04	 add	 esp, 4
$LN28@SDL_main:

; 227  : 		}
; 228  : 		if (key_input[SDL_SCANCODE_UP]) {

  00dba	b8 01 00 00 00	 mov	 eax, 1
  00dbf	6b c8 52	 imul	 ecx, eax, 82
  00dc2	8b 95 f8 fc ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00dc8	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00dcc	85 c0		 test	 eax, eax
  00dce	74 0d		 je	 SHORT $LN29@SDL_main

; 229  : 			++score;

  00dd0	a1 00 00 00 00	 mov	 eax, DWORD PTR _score
  00dd5	83 c0 01	 add	 eax, 1
  00dd8	a3 00 00 00 00	 mov	 DWORD PTR _score, eax
$LN29@SDL_main:

; 230  : 		}
; 231  : 		if (key_input[SDL_SCANCODE_DOWN]) {

  00ddd	b8 01 00 00 00	 mov	 eax, 1
  00de2	6b c8 51	 imul	 ecx, eax, 81
  00de5	8b 95 f8 fc ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00deb	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00def	85 c0		 test	 eax, eax
  00df1	74 13		 je	 SHORT $LN30@SDL_main

; 232  : 			printf("score is now: %d\n", score);

  00df3	a1 00 00 00 00	 mov	 eax, DWORD PTR _score
  00df8	50		 push	 eax
  00df9	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@
  00dfe	e8 00 00 00 00	 call	 _printf
  00e03	83 c4 08	 add	 esp, 8
$LN30@SDL_main:

; 233  : 		}
; 234  : 		if (key_input[SDL_SCANCODE_D]) {

  00e06	b8 01 00 00 00	 mov	 eax, 1
  00e0b	6b c8 07	 imul	 ecx, eax, 7
  00e0e	8b 95 f8 fc ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00e14	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00e18	85 c0		 test	 eax, eax
  00e1a	74 20		 je	 SHORT $LN31@SDL_main

; 235  : 			player_quad.x = player_quad.x + player_wasd_speed * delta_time;

  00e1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00e24	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00e2c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad
  00e34	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
$LN31@SDL_main:

; 236  : 		}
; 237  : 		if (key_input[SDL_SCANCODE_A]) {

  00e3c	b8 01 00 00 00	 mov	 eax, 1
  00e41	c1 e0 02	 shl	 eax, 2
  00e44	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR _key_input$[ebp]
  00e4a	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00e4e	85 d2		 test	 edx, edx
  00e50	74 24		 je	 SHORT $LN32@SDL_main

; 238  : 			player_quad.x = player_quad.x - player_wasd_speed * delta_time;

  00e52	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00e5a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00e62	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR _player_quad
  00e6a	f3 0f 5c c8	 subss	 xmm1, xmm0
  00e6e	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm1
$LN32@SDL_main:

; 239  : 		}
; 240  : 		if (key_input[SDL_SCANCODE_S]) {

  00e76	b8 01 00 00 00	 mov	 eax, 1
  00e7b	6b c8 16	 imul	 ecx, eax, 22
  00e7e	8b 95 f8 fc ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00e84	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00e88	85 c0		 test	 eax, eax
  00e8a	74 24		 je	 SHORT $LN33@SDL_main

; 241  : 			player_quad.y = player_quad.y - player_wasd_speed * delta_time;

  00e8c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00e94	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00e9c	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR _player_quad+4
  00ea4	f3 0f 5c c8	 subss	 xmm1, xmm0
  00ea8	f3 0f 11 0d 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm1
$LN33@SDL_main:

; 242  : 		}
; 243  : 		if (key_input[SDL_SCANCODE_W]) {

  00eb0	b8 01 00 00 00	 mov	 eax, 1
  00eb5	6b c8 1a	 imul	 ecx, eax, 26
  00eb8	8b 95 f8 fc ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00ebe	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00ec2	85 c0		 test	 eax, eax
  00ec4	74 20		 je	 SHORT $LN34@SDL_main

; 244  : 			player_quad.y = player_quad.y + player_wasd_speed * delta_time;

  00ec6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00ece	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00ed6	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+4
  00ede	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
$LN34@SDL_main:

; 245  : 		}
; 246  : 		//make sure player is not outside of the window
; 247  : 		if (player_quad.x < -1) {

  00ee6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00eee	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR _player_quad
  00ef5	76 12		 jbe	 SHORT $LN35@SDL_main

; 248  : 			player_quad.x = -1;

  00ef7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00eff	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0

; 249  : 
; 250  : 		}

  00f07	eb 31		 jmp	 SHORT $LN37@SDL_main
$LN35@SDL_main:

; 251  : 		else if (player_quad.x + player_quad.w > 1) {

  00f09	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_quad
  00f11	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+8
  00f19	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00f20	76 18		 jbe	 SHORT $LN37@SDL_main

; 252  : 			player_quad.x = 1 - player_quad.w;

  00f22	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f2a	f3 0f 5c 05 08
	00 00 00	 subss	 xmm0, DWORD PTR _player_quad+8
  00f32	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
$LN37@SDL_main:

; 253  : 
; 254  : 		}
; 255  : 		if (player_quad.y > 1) {

  00f3a	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR _player_quad+4
  00f42	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00f49	76 12		 jbe	 SHORT $LN38@SDL_main

; 256  : 			player_quad.y = 1;

  00f4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f53	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0

; 257  : 
; 258  : 		}

  00f5b	eb 31		 jmp	 SHORT $LN40@SDL_main
$LN38@SDL_main:

; 259  : 		else if (player_quad.y < -1 + player_quad.h) {

  00f5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00f65	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+12
  00f6d	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR _player_quad+4
  00f74	76 18		 jbe	 SHORT $LN40@SDL_main

; 260  : 			player_quad.y = -1 + player_quad.h;

  00f76	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00f7e	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+12
  00f86	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
$LN40@SDL_main:

; 261  : 
; 262  : 		}
; 263  : 		//check if wave should increase
; 264  : 		if (score == (32 << wave))

  00f8e	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00f93	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _wave
  00f99	d3 e0		 shl	 eax, cl
  00f9b	39 05 00 00 00
	00		 cmp	 DWORD PTR _score, eax
  00fa1	75 2d		 jne	 SHORT $LN41@SDL_main

; 265  : 			++wave, GAME_WaveInit(), printf("score requirement: %d\n", 32 << wave);

  00fa3	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00fa8	83 c0 01	 add	 eax, 1
  00fab	a3 00 00 00 00	 mov	 DWORD PTR _wave, eax
  00fb0	e8 00 00 00 00	 call	 _GAME_WaveInit
  00fb5	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00fba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _wave
  00fc0	d3 e2		 shl	 edx, cl
  00fc2	52		 push	 edx
  00fc3	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@
  00fc8	e8 00 00 00 00	 call	 _printf
  00fcd	83 c4 08	 add	 esp, 8
$LN41@SDL_main:

; 266  : 		GAME_AddEnemies();

  00fd0	e8 00 00 00 00	 call	 _GAME_AddEnemies

; 267  : 		GAME_HandleEnemies(&enemies);

  00fd5	68 00 00 00 00	 push	 OFFSET _enemies
  00fda	e8 00 00 00 00	 call	 _GAME_HandleEnemies
  00fdf	83 c4 04	 add	 esp, 4

; 268  : 		RENDER_List(&enemies);

  00fe2	68 00 00 00 00	 push	 OFFSET _enemies
  00fe7	e8 00 00 00 00	 call	 _RENDER_List
  00fec	83 c4 04	 add	 esp, 4

; 269  : 		RENDER_TexturedQuad(player_quad, 1, 1, 1, false);

  00fef	6a 00		 push	 0
  00ff1	51		 push	 ecx
  00ff2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ffa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fff	51		 push	 ecx
  01000	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01008	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0100d	51		 push	 ecx
  0100e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0101b	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0101e	b9 07 00 00 00	 mov	 ecx, 7
  01023	be 00 00 00 00	 mov	 esi, OFFSET _player_quad
  01028	8b fc		 mov	 edi, esp
  0102a	f3 a5		 rep movsd
  0102c	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  01031	83 c4 2c	 add	 esp, 44			; 0000002cH

; 270  : 		RENDER_TexturedQuad(wave_text_quad, 1, 0.1, 0.1, false);

  01034	6a 00		 push	 0
  01036	51		 push	 ecx
  01037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0103f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01044	51		 push	 ecx
  01045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0104d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01052	51		 push	 ecx
  01053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0105b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01060	83 ec 1c	 sub	 esp, 28			; 0000001cH
  01063	b9 07 00 00 00	 mov	 ecx, 7
  01068	be 00 00 00 00	 mov	 esi, OFFSET _wave_text_quad
  0106d	8b fc		 mov	 edi, esp
  0106f	f3 a5		 rep movsd
  01071	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  01076	83 c4 2c	 add	 esp, 44			; 0000002cH

; 271  : 		if (reserve < 0) {

  01079	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reserve, 0
  01080	7d 6c		 jge	 SHORT $LN43@SDL_main

; 272  : 			RENDER_TexturedQuad(overtime_quad, 1, 0.9, 0.1, false);

  01082	6a 00		 push	 0
  01084	51		 push	 ecx
  01085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0108d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01092	51		 push	 ecx
  01093	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0109b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010a0	51		 push	 ecx
  010a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  010a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010ae	83 ec 1c	 sub	 esp, 28			; 0000001cH
  010b1	b9 07 00 00 00	 mov	 ecx, 7
  010b6	be 00 00 00 00	 mov	 esi, OFFSET _overtime_quad
  010bb	8b fc		 mov	 edi, esp
  010bd	f3 a5		 rep movsd
  010bf	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  010c4	83 c4 2c	 add	 esp, 44			; 0000002cH

; 273  : 			if (!overtime_bell_rung) {

  010c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _overtime_bell_rung, 0
  010ce	75 1e		 jne	 SHORT $LN43@SDL_main

; 274  : 				Mix_PlayChannel(-1, overtime_bell_audio, 0);

  010d0	6a ff		 push	 -1
  010d2	6a 00		 push	 0
  010d4	a1 00 00 00 00	 mov	 eax, DWORD PTR _overtime_bell_audio
  010d9	50		 push	 eax
  010da	6a ff		 push	 -1
  010dc	e8 00 00 00 00	 call	 _Mix_PlayChannelTimed
  010e1	83 c4 10	 add	 esp, 16			; 00000010H

; 275  : 				overtime_bell_rung = true;

  010e4	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _overtime_bell_rung, 1
$LN43@SDL_main:

; 276  : 			}
; 277  : 		}
; 278  : 		if (glGetError()) {

  010ee	8b f4		 mov	 esi, esp
  010f0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  010f6	3b f4		 cmp	 esi, esp
  010f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  010fd	85 c0		 test	 eax, eax
  010ff	74 1d		 je	 SHORT $LN44@SDL_main

; 279  : 			printf("Failed to do something, %x", glGetError());

  01101	8b f4		 mov	 esi, esp
  01103	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  01109	3b f4		 cmp	 esi, esp
  0110b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01110	50		 push	 eax
  01111	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@
  01116	e8 00 00 00 00	 call	 _printf
  0111b	83 c4 08	 add	 esp, 8
$LN44@SDL_main:

; 280  : 		}
; 281  : 		SDL_GL_SwapWindow(window);

  0111e	a1 00 00 00 00	 mov	 eax, DWORD PTR _window
  01123	50		 push	 eax
  01124	e8 00 00 00 00	 call	 _SDL_GL_SwapWindow
  01129	83 c4 04	 add	 esp, 4

; 282  : 		delta_time = clock() - start;

  0112c	8b f4		 mov	 esi, esp
  0112e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  01134	3b f4		 cmp	 esi, esp
  01136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0113b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  0113f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR _start
  01147	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _delta_time, xmm0

; 283  : 		delta_time /= CLOCKS_PER_SEC;

  0114f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _delta_time
  01157	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0115f	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _delta_time, xmm0

; 284  : 		if (key_input[SDL_SCANCODE_F]) {

  01167	b8 01 00 00 00	 mov	 eax, 1
  0116c	6b c8 09	 imul	 ecx, eax, 9
  0116f	8b 95 f8 fc ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  01175	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  01179	85 c0		 test	 eax, eax
  0117b	74 1d		 je	 SHORT $LN45@SDL_main

; 285  : 			printf("time:%f\n", delta_time);

  0117d	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _delta_time
  01185	83 ec 08	 sub	 esp, 8
  01188	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0118d	68 00 00 00 00	 push	 OFFSET ??_C@_08DINNBOH@time?3?$CFf?6@
  01192	e8 00 00 00 00	 call	 _printf
  01197	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN45@SDL_main:

; 286  : 		}
; 287  : 		
; 288  : 	}	

  0119a	e9 eb f8 ff ff	 jmp	 $LN7@SDL_main
$SHUTDOWN$57:

; 289  : SHUTDOWN:
; 290  : 	return 0;

  0119f	33 c0		 xor	 eax, eax

; 291  : }

  011a1	52		 push	 edx
  011a2	8b cd		 mov	 ecx, ebp
  011a4	50		 push	 eax
  011a5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN56@SDL_main
  011ab	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  011b0	58		 pop	 eax
  011b1	5a		 pop	 edx
  011b2	5f		 pop	 edi
  011b3	5e		 pop	 esi
  011b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  011b7	33 cd		 xor	 ecx, ebp
  011b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  011be	8b e5		 mov	 esp, ebp
  011c0	5d		 pop	 ebp
  011c1	8b e3		 mov	 esp, ebx
  011c3	5b		 pop	 ebx
  011c4	c3		 ret	 0
  011c5	0f 1f 00	 npad	 3
$LN56@SDL_main:
  011c8	06 00 00 00	 DD	 6
  011cc	00 00 00 00	 DD	 $LN55@SDL_main
$LN55@SDL_main:
  011d0	dc ff ff ff	 DD	 -36			; ffffffdcH
  011d4	04 00 00 00	 DD	 4
  011d8	00 00 00 00	 DD	 $LN49@SDL_main
  011dc	d0 ff ff ff	 DD	 -48			; ffffffd0H
  011e0	04 00 00 00	 DD	 4
  011e4	00 00 00 00	 DD	 $LN50@SDL_main
  011e8	c4 ff ff ff	 DD	 -60			; ffffffc4H
  011ec	02 00 00 00	 DD	 2
  011f0	00 00 00 00	 DD	 $LN51@SDL_main
  011f4	b0 fd ff ff	 DD	 -592			; fffffdb0H
  011f8	00 02 00 00	 DD	 512			; 00000200H
  011fc	00 00 00 00	 DD	 $LN52@SDL_main
  01200	40 fd ff ff	 DD	 -704			; fffffd40H
  01204	40 00 00 00	 DD	 64			; 00000040H
  01208	00 00 00 00	 DD	 $LN53@SDL_main
  0120c	b8 fc ff ff	 DD	 -840			; fffffcb8H
  01210	38 00 00 00	 DD	 56			; 00000038H
  01214	00 00 00 00	 DD	 $LN54@SDL_main
$LN54@SDL_main:
  01218	65		 DB	 101			; 00000065H
  01219	76		 DB	 118			; 00000076H
  0121a	65		 DB	 101			; 00000065H
  0121b	6e		 DB	 110			; 0000006eH
  0121c	74		 DB	 116			; 00000074H
  0121d	5f		 DB	 95			; 0000005fH
  0121e	68		 DB	 104			; 00000068H
  0121f	61		 DB	 97			; 00000061H
  01220	6e		 DB	 110			; 0000006eH
  01221	64		 DB	 100			; 00000064H
  01222	6c		 DB	 108			; 0000006cH
  01223	65		 DB	 101			; 00000065H
  01224	00		 DB	 0
$LN53@SDL_main:
  01225	6f		 DB	 111			; 0000006fH
  01226	72		 DB	 114			; 00000072H
  01227	74		 DB	 116			; 00000074H
  01228	68		 DB	 104			; 00000068H
  01229	6f		 DB	 111			; 0000006fH
  0122a	00		 DB	 0
$LN52@SDL_main:
  0122b	62		 DB	 98			; 00000062H
  0122c	75		 DB	 117			; 00000075H
  0122d	66		 DB	 102			; 00000066H
  0122e	66		 DB	 102			; 00000066H
  0122f	00		 DB	 0
$LN51@SDL_main:
  01230	66		 DB	 102			; 00000066H
  01231	6f		 DB	 111			; 0000006fH
  01232	72		 DB	 114			; 00000072H
  01233	6d		 DB	 109			; 0000006dH
  01234	61		 DB	 97			; 00000061H
  01235	74		 DB	 116			; 00000074H
  01236	00		 DB	 0
$LN50@SDL_main:
  01237	63		 DB	 99			; 00000063H
  01238	68		 DB	 104			; 00000068H
  01239	61		 DB	 97			; 00000061H
  0123a	6e		 DB	 110			; 0000006eH
  0123b	6e		 DB	 110			; 0000006eH
  0123c	65		 DB	 101			; 00000065H
  0123d	6c		 DB	 108			; 0000006cH
  0123e	73		 DB	 115			; 00000073H
  0123f	00		 DB	 0
$LN49@SDL_main:
  01240	66		 DB	 102			; 00000066H
  01241	72		 DB	 114			; 00000072H
  01242	65		 DB	 101			; 00000065H
  01243	71		 DB	 113			; 00000071H
  01244	00		 DB	 0
_SDL_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vfprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
