; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_window_width
PUBLIC	_window_height
PUBLIC	_wave
PUBLIC	_score
PUBLIC	_active_en
PUBLIC	_enemy_counter
PUBLIC	_reserve
PUBLIC	_white
PUBLIC	_wave_text_quad
PUBLIC	_overtime_quad
PUBLIC	_overtime_bell_rung
PUBLIC	_source_rect_nothing
PUBLIC	_player_wasd_speed
PUBLIC	_delta_time
PUBLIC	_background_vertexes
_DATA	SEGMENT
COMM	_window:DWORD
COMM	_glcontext:DWORD
COMM	_test_font_surface:DWORD
_DATA	ENDS
_BSS	SEGMENT
_score	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_cash:DWORD
_DATA	ENDS
_BSS	SEGMENT
_reserve DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_enemies:QWORD
COMM	_texturesizeswh:DWORD:02H
COMM	_texture:DWORD:05H
COMM	_VAO:DWORD
COMM	_VERTEXES_VBO:DWORD
COMM	_overtime_bell_audio:DWORD
COMM	_font_1:DWORD
COMM	_wave_text:DWORD
COMM	_overtime_text:DWORD
COMM	_wave_num:BYTE:02H
_DATA	ENDS
_BSS	SEGMENT
_overtime_bell_rung DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_shader_texturedobj:DWORD
COMM	_shader_colored:DWORD
COMM	_player_quad:BYTE:01cH
_DATA	ENDS
_BSS	SEGMENT
_delta_time DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_start:DWORD
COMM	_mouse_opened:DWORD
COMM	_mouse_closed:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__186FF47F_stat@h DB 01H
__8C55BF2C_SDL_stdinc@h DB 01H
__A594C705_SDL_endian@h DB 01H
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__6853117E_SDL_rect@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__03C282FB_linkedlist_h@h DB 01H
__88262B53_main@c DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
_window_width DD 0500H
_window_height DD 02d0H
_wave	DD	01H
_active_en DD	01H
_enemy_counter DD 01H
_white	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
_wave_text_quad DD 000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03dcccccdr			; 0.1
	ORG $+12
_overtime_quad DD 000000000r			; 0
	DD	03f4ccccdr			; 0.8
	DD	000000000r			; 0
	DD	03dcccccdr			; 0.1
	ORG $+12
_source_rect_nothing DD 000000000r		; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
_player_wasd_speed DD 03faccccdr		; 1.35
	ORG $+4
_background_vertexes DD 0bf800000r		; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_SDL_main
PUBLIC	_glm_mat4_copy
PUBLIC	_glm_mat4_zero
PUBLIC	_glm_ortho
PUBLIC	_LIST_AddElement
PUBLIC	_LIST_RemoveAt
PUBLIC	_LIST_At
PUBLIC	_RENDER_TexturedQuad
PUBLIC	_RENDER_TexturedQuadSheet
PUBLIC	_RENDER_Quad
PUBLIC	_CompileShader
PUBLIC	_SetTextureBoundedParams
PUBLIC	_GAME_WaveInit
PUBLIC	_GAME_AddEnemies
PUBLIC	_RENDER_List
PUBLIC	_CreateTexture2D
PUBLIC	_Init_GL
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@ ; `string'
PUBLIC	??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@ ; `string'
PUBLIC	??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BF@IGFECFHO@resources?1font_1?4ttf@	; `string'
PUBLIC	??_C@_07BJPGHBBO@Wave?301@			; `string'
PUBLIC	??_C@_08CCCPFIL@OVERTIME@			; `string'
PUBLIC	??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0BM@BIBBAEFM@resources?1overtime_bell?4wav@ ; `string'
PUBLIC	??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@ ; `string'
PUBLIC	??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@ ; `string'
PUBLIC	??_C@_0N@CJFNGLCH@SpaceMonster@			; `string'
PUBLIC	??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@ ; `string'
PUBLIC	??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@ ; `string'
PUBLIC	??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@	; `string'
PUBLIC	??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@ ; `string'
PUBLIC	??_C@_0M@DCJKCHKN@vertex1?4txt@			; `string'
PUBLIC	??_C@_0O@OBHLNCJC@fragment1?4txt@		; `string'
PUBLIC	??_C@_0M@LEAOFFAD@vertex2?4txt@			; `string'
PUBLIC	??_C@_0O@GHOPKADM@fragment2?4txt@		; `string'
PUBLIC	??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@ ; `string'
PUBLIC	??_C@_0N@OBNOHIMB@global_light@			; `string'
PUBLIC	??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@ ; `string'
PUBLIC	??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@	; `string'
PUBLIC	??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@ ; `string'
PUBLIC	??_C@_08DINNBOH@time?3?$CFf?6@			; `string'
PUBLIC	??_C@_01KDCPPGHE@r@				; `string'
PUBLIC	??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@		; `string'
PUBLIC	??_C@_09NOIJFDFO@added?5?$CFd?6@		; `string'
PUBLIC	??_C@_0M@KDJLAENM@exotic?5shop@			; `string'
PUBLIC	??_C@_0M@KCFKOELE@normal?5shop@			; `string'
PUBLIC	??_C@_06BENPFJFP@Wave?3?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0M@JGOKHPLJ@reserve?3?$CFd?6@		; `string'
PUBLIC	??_C@_0BK@EBIFNHNF@resources?1character_1?4png@	; `string'
PUBLIC	??_C@_0BL@PILEEGNE@resources?1background_1?4png@ ; `string'
PUBLIC	??_C@_0BL@EHIMIKAH@resources?1character_ic?4png@ ; `string'
PUBLIC	??_C@_0BM@DGPFILOH@resources?1cursor_f_open?4png@ ; `string'
PUBLIC	??_C@_0BO@NMOBJJI@resources?1cursor_f_closed?4png@ ; `string'
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f9eb851eb851eb8
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4086800000000000
PUBLIC	__real@4094000000000000
PUBLIC	__real@44340000
PUBLIC	__real@447a0000
PUBLIC	__real@44a00000
PUBLIC	__real@bf4ccccd
PUBLIC	__real@bf800000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__ftell:PROC
EXTRN	__imp__puts:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__rand:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__clock:PROC
EXTRN	_gladLoadGL:PROC
EXTRN	_SDL_GetError:PROC
EXTRN	_SDL_RWFromFile:PROC
EXTRN	_SDL_FreeSurface:PROC
EXTRN	_SDL_CreateWindow:PROC
EXTRN	_SDL_SetWindowIcon:PROC
EXTRN	_SDL_GL_SetAttribute:PROC
EXTRN	_SDL_GL_CreateContext:PROC
EXTRN	_SDL_GL_SwapWindow:PROC
EXTRN	_SDL_GetKeyboardState:PROC
EXTRN	_SDL_GetMouseState:PROC
EXTRN	_SDL_CreateColorCursor:PROC
EXTRN	_SDL_SetCursor:PROC
EXTRN	_SDL_PollEvent:PROC
EXTRN	_SDL_Init:PROC
EXTRN	_IMG_Load:PROC
EXTRN	_TTF_Init:PROC
EXTRN	_TTF_OpenFont:PROC
EXTRN	_TTF_RenderText_Blended:PROC
EXTRN	_Mix_Init:PROC
EXTRN	_Mix_OpenAudio:PROC
EXTRN	_Mix_AllocateChannels:PROC
EXTRN	_Mix_QuerySpec:PROC
EXTRN	_Mix_LoadWAV_RW:PROC
EXTRN	_Mix_GetNumChunkDecoders:PROC
EXTRN	_Mix_GetChunkDecoder:PROC
EXTRN	_Mix_PlayChannelTimed:PROC
EXTRN	_Mix_VolumeChunk:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_glad_glTexParameteri:DWORD
EXTRN	_glad_glTexImage2D:DWORD
EXTRN	_glad_glClear:DWORD
EXTRN	_glad_glClearColor:DWORD
EXTRN	_glad_glEnable:DWORD
EXTRN	_glad_glBlendFunc:DWORD
EXTRN	_glad_glGetError:DWORD
EXTRN	_glad_glViewport:DWORD
EXTRN	_glad_glOrtho:DWORD
EXTRN	_glad_glDrawArrays:DWORD
EXTRN	_glad_glBindTexture:DWORD
EXTRN	_glad_glGenTextures:DWORD
EXTRN	_glad_glActiveTexture:DWORD
EXTRN	_glad_glBindBuffer:DWORD
EXTRN	_glad_glGenBuffers:DWORD
EXTRN	_glad_glBufferData:DWORD
EXTRN	_glad_glBufferSubData:DWORD
EXTRN	_glad_glAttachShader:DWORD
EXTRN	_glad_glCompileShader:DWORD
EXTRN	_glad_glCreateProgram:DWORD
EXTRN	_glad_glCreateShader:DWORD
EXTRN	_glad_glDeleteShader:DWORD
EXTRN	_glad_glEnableVertexAttribArray:DWORD
EXTRN	_glad_glGetUniformLocation:DWORD
EXTRN	_glad_glLinkProgram:DWORD
EXTRN	_glad_glShaderSource:DWORD
EXTRN	_glad_glUseProgram:DWORD
EXTRN	_glad_glUniform3f:DWORD
EXTRN	_glad_glVertexAttribPointer:DWORD
EXTRN	_glad_glBindVertexArray:DWORD
EXTRN	_glad_glGenVertexArrays:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
?timer@?1??GAME_AddEnemies@@9@9 DD 01H DUP (?)		; `GAME_AddEnemies'::`2'::timer
?time_withoutreserve@?1??GAME_AddEnemies@@9@9 DD 01H DUP (?) ; `GAME_AddEnemies'::`2'::time_withoutreserve
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf4ccccd
CONST	SEGMENT
__real@bf4ccccd DD 0bf4ccccdr			; -0.8
CONST	ENDS
;	COMDAT __real@44a00000
CONST	SEGMENT
__real@44a00000 DD 044a00000r			; 1280
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44340000
CONST	SEGMENT
__real@44340000 DD 044340000r			; 720
CONST	ENDS
;	COMDAT __real@4094000000000000
CONST	SEGMENT
__real@4094000000000000 DQ 04094000000000000r	; 1280
CONST	ENDS
;	COMDAT __real@4086800000000000
CONST	SEGMENT
__real@4086800000000000 DQ 04086800000000000r	; 720
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f9eb851eb851eb8
CONST	SEGMENT
__real@3f9eb851eb851eb8 DQ 03f9eb851eb851eb8r	; 0.03
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BO@NMOBJJI@resources?1cursor_f_closed?4png@
CONST	SEGMENT
??_C@_0BO@NMOBJJI@resources?1cursor_f_closed?4png@ DB 'resources/cursor_f'
	DB	'_closed.png', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DGPFILOH@resources?1cursor_f_open?4png@
CONST	SEGMENT
??_C@_0BM@DGPFILOH@resources?1cursor_f_open?4png@ DB 'resources/cursor_f_'
	DB	'open.png', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EHIMIKAH@resources?1character_ic?4png@
CONST	SEGMENT
??_C@_0BL@EHIMIKAH@resources?1character_ic?4png@ DB 'resources/character_'
	DB	'ic.png', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PILEEGNE@resources?1background_1?4png@
CONST	SEGMENT
??_C@_0BL@PILEEGNE@resources?1background_1?4png@ DB 'resources/background'
	DB	'_1.png', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EBIFNHNF@resources?1character_1?4png@
CONST	SEGMENT
??_C@_0BK@EBIFNHNF@resources?1character_1?4png@ DB 'resources/character_1'
	DB	'.png', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JGOKHPLJ@reserve?3?$CFd?6@
CONST	SEGMENT
??_C@_0M@JGOKHPLJ@reserve?3?$CFd?6@ DB 'reserve:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BENPFJFP@Wave?3?$AA@
CONST	SEGMENT
??_C@_06BENPFJFP@Wave?3?$AA@ DB 'Wave:', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCFKOELE@normal?5shop@
CONST	SEGMENT
??_C@_0M@KCFKOELE@normal?5shop@ DB 'normal shop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KDJLAENM@exotic?5shop@
CONST	SEGMENT
??_C@_0M@KDJLAENM@exotic?5shop@ DB 'exotic shop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NOIJFDFO@added?5?$CFd?6@
CONST	SEGMENT
??_C@_09NOIJFDFO@added?5?$CFd?6@ DB 'added %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@
CONST	SEGMENT
??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@ DB 'reserve is %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r@
CONST	SEGMENT
??_C@_01KDCPPGHE@r@ DB 'r', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08DINNBOH@time?3?$CFf?6@
CONST	SEGMENT
??_C@_08DINNBOH@time?3?$CFf?6@ DB 'time:%f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@
CONST	SEGMENT
??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@ DB 'Failed to do s'
	DB	'omething, %x', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@ DB 'score requirement: '
	DB	'%d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@ DB 'score is now: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@
CONST	SEGMENT
??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@ DB 'Failed to ini'
	DB	'tilize shader uniforms, %x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OBNOHIMB@global_light@
CONST	SEGMENT
??_C@_0N@OBNOHIMB@global_light@ DB 'global_light', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@
CONST	SEGMENT
??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@ DB 'Failed to '
	DB	'initilize shaders, %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GHOPKADM@fragment2?4txt@
CONST	SEGMENT
??_C@_0O@GHOPKADM@fragment2?4txt@ DB 'fragment2.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LEAOFFAD@vertex2?4txt@
CONST	SEGMENT
??_C@_0M@LEAOFFAD@vertex2?4txt@ DB 'vertex2.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OBHLNCJC@fragment1?4txt@
CONST	SEGMENT
??_C@_0O@OBHLNCJC@fragment1?4txt@ DB 'fragment1.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DCJKCHKN@vertex1?4txt@
CONST	SEGMENT
??_C@_0M@DCJKCHKN@vertex1?4txt@ DB 'vertex1.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@
CONST	SEGMENT
??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@ DB 'Failed to '
	DB	'initilize openGL, %x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@
CONST	SEGMENT
??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@ DB 'Failed to load openGL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@
CONST	SEGMENT
??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@ DB 'SDL/OPENGL thing f'
	DB	'ailed!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@
CONST	SEGMENT
??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@ DB 'Window creation fail'
	DB	'ed!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CJFNGLCH@SpaceMonster@
CONST	SEGMENT
??_C@_0N@CJFNGLCH@SpaceMonster@ DB 'SpaceMonster', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@
CONST	SEGMENT
??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@ DB 'Something b'
	DB	'ad happened...%s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@
CONST	SEGMENT
??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@ DB 'Freque'
	DB	'rncy:%d, audio format:%x, number of channels:%d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BIBBAEFM@resources?1overtime_bell?4wav@
CONST	SEGMENT
??_C@_0BM@BIBBAEFM@resources?1overtime_bell?4wav@ DB 'resources/overtime_'
	DB	'bell.wav', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@
CONST	SEGMENT
??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@ DB 'Sample c'
	DB	'hunk decoder %d is for %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@ DB 'amount of channel'
	DB	's: %d', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@ DB 'Error op'
	DB	'ening audio device, %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCCPFIL@OVERTIME@
CONST	SEGMENT
??_C@_08CCCPFIL@OVERTIME@ DB 'OVERTIME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BJPGHBBO@Wave?301@
CONST	SEGMENT
??_C@_07BJPGHBBO@Wave?301@ DB 'Wave:01', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IGFECFHO@resources?1font_1?4ttf@
CONST	SEGMENT
??_C@_0BF@IGFECFHO@resources?1font_1?4ttf@ DB 'resources/font_1.ttf', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@
CONST	SEGMENT
??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@ DB 'Failed to i'
	DB	'nitilize mix, %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@
CONST	SEGMENT
??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@ DB 'Failed to lo'
	DB	'ad SDL_TTF font library', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@
CONST	SEGMENT
??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@ DB 'Couldn''t inil'
	DB	'ize audio, %s', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _Init_GL
_TEXT	SEGMENT
_tmp_surface$ = -8					; size = 4
_Init_GL PROC						; COMDAT

; 422  : void Init_GL(void){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 423  : 	SDL_Surface* tmp_surface = IMG_Load("resources/character_1.png");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EBIFNHNF@resources?1character_1?4png@
  0002d	e8 00 00 00 00	 call	 _IMG_Load
  00032	83 c4 04	 add	 esp, 4
  00035	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 424  : 	glGenVertexArrays(1, &VAO);

  00038	8b f4		 mov	 esi, esp
  0003a	68 00 00 00 00	 push	 OFFSET _VAO
  0003f	6a 01		 push	 1
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenVertexArrays
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 425  : 	glBindVertexArray(VAO);

  0004e	8b f4		 mov	 esi, esp
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR _VAO
  00055	50		 push	 eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindVertexArray
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 426  : 	glGenBuffers(1, &VERTEXES_VBO);

  00063	8b f4		 mov	 esi, esp
  00065	68 00 00 00 00	 push	 OFFSET _VERTEXES_VBO
  0006a	6a 01		 push	 1
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenBuffers
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 427  : 	glBindBuffer(GL_ARRAY_BUFFER, VERTEXES_VBO);

  00079	8b f4		 mov	 esi, esp
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _VERTEXES_VBO
  00080	50		 push	 eax
  00081	68 92 88 00 00	 push	 34962			; 00008892H
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindBuffer
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 428  : 	glBufferData(GL_ARRAY_BUFFER, 32 * sizeof(float), NULL, GL_DYNAMIC_DRAW);

  00093	8b f4		 mov	 esi, esp
  00095	68 e8 88 00 00	 push	 35048			; 000088e8H
  0009a	6a 00		 push	 0
  0009c	68 80 00 00 00	 push	 128			; 00000080H
  000a1	68 92 88 00 00	 push	 34962			; 00008892H
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferData
  000ac	3b f4		 cmp	 esi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 429  : 	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);

  000b3	8b f4		 mov	 esi, esp
  000b5	6a 00		 push	 0
  000b7	6a 20		 push	 32			; 00000020H
  000b9	6a 00		 push	 0
  000bb	68 06 14 00 00	 push	 5126			; 00001406H
  000c0	6a 03		 push	 3
  000c2	6a 00		 push	 0
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 430  : 	glEnableVertexAttribArray(0);

  000d1	8b f4		 mov	 esi, esp
  000d3	6a 00		 push	 0
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 431  : 	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));

  000e2	8b f4		 mov	 esi, esp
  000e4	6a 0c		 push	 12			; 0000000cH
  000e6	6a 20		 push	 32			; 00000020H
  000e8	6a 00		 push	 0
  000ea	68 06 14 00 00	 push	 5126			; 00001406H
  000ef	6a 03		 push	 3
  000f1	6a 01		 push	 1
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 432  : 	glEnableVertexAttribArray(1);

  00100	8b f4		 mov	 esi, esp
  00102	6a 01		 push	 1
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 433  : 	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));

  00111	8b f4		 mov	 esi, esp
  00113	6a 18		 push	 24			; 00000018H
  00115	6a 20		 push	 32			; 00000020H
  00117	6a 00		 push	 0
  00119	68 06 14 00 00	 push	 5126			; 00001406H
  0011e	6a 03		 push	 3
  00120	6a 02		 push	 2
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glVertexAttribPointer
  00128	3b f4		 cmp	 esi, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 434  : 	glEnableVertexAttribArray(2);

  0012f	8b f4		 mov	 esi, esp
  00131	6a 02		 push	 2
  00133	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnableVertexAttribArray
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 435  : 	//textures, player texture
; 436  : 	glActiveTexture(GL_TEXTURE0);

  00140	8b f4		 mov	 esi, esp
  00142	68 c0 84 00 00	 push	 33984			; 000084c0H
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glActiveTexture
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 437  : 	glGenTextures(4, texture);

  00154	8b f4		 mov	 esi, esp
  00156	68 00 00 00 00	 push	 OFFSET _texture
  0015b	6a 04		 push	 4
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGenTextures
  00163	3b f4		 cmp	 esi, esp
  00165	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 438  : 	glBindTexture(GL_TEXTURE_2D, texture[0]);

  0016a	b8 04 00 00 00	 mov	 eax, 4
  0016f	6b c8 00	 imul	 ecx, eax, 0
  00172	8b f4		 mov	 esi, esp
  00174	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  0017a	52		 push	 edx
  0017b	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 439  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  0018d	8b f4		 mov	 esi, esp
  0018f	68 01 29 00 00	 push	 10497			; 00002901H
  00194	68 02 28 00 00	 push	 10242			; 00002802H
  00199	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0019e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001a4	3b f4		 cmp	 esi, esp
  001a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 440  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  001ab	8b f4		 mov	 esi, esp
  001ad	68 01 29 00 00	 push	 10497			; 00002901H
  001b2	68 03 28 00 00	 push	 10243			; 00002803H
  001b7	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 441  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  001c9	8b f4		 mov	 esi, esp
  001cb	68 01 26 00 00	 push	 9729			; 00002601H
  001d0	68 01 28 00 00	 push	 10241			; 00002801H
  001d5	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001e0	3b f4		 cmp	 esi, esp
  001e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 442  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  001e7	8b f4		 mov	 esi, esp
  001e9	68 01 26 00 00	 push	 9729			; 00002601H
  001ee	68 00 28 00 00	 push	 10240			; 00002800H
  001f3	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  001fe	3b f4		 cmp	 esi, esp
  00200	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 443  : 	CreateTexture2D(tmp_surface, GL_RGBA, true, &player_quad.texw, &player_quad.texh);

  00205	68 18 00 00 00	 push	 OFFSET _player_quad+24
  0020a	68 14 00 00 00	 push	 OFFSET _player_quad+20
  0020f	6a 01		 push	 1
  00211	68 08 19 00 00	 push	 6408			; 00001908H
  00216	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 _CreateTexture2D
  0021f	83 c4 14	 add	 esp, 20			; 00000014H

; 444  : 	//first bacground
; 445  : 	tmp_surface = IMG_Load("resources/background_1.png");

  00222	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PILEEGNE@resources?1background_1?4png@
  00227	e8 00 00 00 00	 call	 _IMG_Load
  0022c	83 c4 04	 add	 esp, 4
  0022f	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 446  : 	glBindTexture(GL_TEXTURE_2D, texture[1]);

  00232	b8 04 00 00 00	 mov	 eax, 4
  00237	c1 e0 00	 shl	 eax, 0
  0023a	8b f4		 mov	 esi, esp
  0023c	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00242	51		 push	 ecx
  00243	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0024e	3b f4		 cmp	 esi, esp
  00250	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 447  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  00255	8b f4		 mov	 esi, esp
  00257	68 01 29 00 00	 push	 10497			; 00002901H
  0025c	68 02 28 00 00	 push	 10242			; 00002802H
  00261	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00266	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0026c	3b f4		 cmp	 esi, esp
  0026e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 448  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  00273	8b f4		 mov	 esi, esp
  00275	68 01 29 00 00	 push	 10497			; 00002901H
  0027a	68 03 28 00 00	 push	 10243			; 00002803H
  0027f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 449  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  00291	8b f4		 mov	 esi, esp
  00293	68 01 26 00 00	 push	 9729			; 00002601H
  00298	68 01 28 00 00	 push	 10241			; 00002801H
  0029d	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002a8	3b f4		 cmp	 esi, esp
  002aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 450  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  002af	8b f4		 mov	 esi, esp
  002b1	68 01 26 00 00	 push	 9729			; 00002601H
  002b6	68 00 28 00 00	 push	 10240			; 00002800H
  002bb	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002c0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  002c6	3b f4		 cmp	 esi, esp
  002c8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 451  : 	CreateTexture2D(tmp_surface, GL_RGB, true, NULL, NULL);

  002cd	6a 00		 push	 0
  002cf	6a 00		 push	 0
  002d1	6a 01		 push	 1
  002d3	68 07 19 00 00	 push	 6407			; 00001907H
  002d8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  002db	50		 push	 eax
  002dc	e8 00 00 00 00	 call	 _CreateTexture2D
  002e1	83 c4 14	 add	 esp, 20			; 00000014H

; 452  : 	/*tmp_surface = IMG_Load("fed_scout.png");
; 453  : 	glBindTexture(GL_TEXTURE_2D, texture[2]);
; 454  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
; 455  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
; 456  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
; 457  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
; 458  : 	CreateTexture2D(tmp_surface, GL_RGBA, true);*/
; 459  : 	glBindTexture(GL_TEXTURE_2D, texture[3]);

  002e4	b8 04 00 00 00	 mov	 eax, 4
  002e9	6b c8 03	 imul	 ecx, eax, 3
  002ec	8b f4		 mov	 esi, esp
  002ee	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  002f4	52		 push	 edx
  002f5	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002fa	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 460  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  00307	8b f4		 mov	 esi, esp
  00309	68 01 29 00 00	 push	 10497			; 00002901H
  0030e	68 02 28 00 00	 push	 10242			; 00002802H
  00313	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00318	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0031e	3b f4		 cmp	 esi, esp
  00320	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 461  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  00325	8b f4		 mov	 esi, esp
  00327	68 01 29 00 00	 push	 10497			; 00002901H
  0032c	68 03 28 00 00	 push	 10243			; 00002803H
  00331	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0033c	3b f4		 cmp	 esi, esp
  0033e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 462  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  00343	8b f4		 mov	 esi, esp
  00345	68 01 26 00 00	 push	 9729			; 00002601H
  0034a	68 01 28 00 00	 push	 10241			; 00002801H
  0034f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0035a	3b f4		 cmp	 esi, esp
  0035c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 463  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  00361	8b f4		 mov	 esi, esp
  00363	68 01 26 00 00	 push	 9729			; 00002601H
  00368	68 00 28 00 00	 push	 10240			; 00002800H
  0036d	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00372	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00378	3b f4		 cmp	 esi, esp
  0037a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 464  : 	CreateTexture2D(wave_text, GL_RGBA, true, NULL, NULL); //but we want to keep the surface around so we can change the text after every wave

  0037f	6a 00		 push	 0
  00381	6a 00		 push	 0
  00383	6a 01		 push	 1
  00385	68 08 19 00 00	 push	 6408			; 00001908H
  0038a	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave_text
  0038f	50		 push	 eax
  00390	e8 00 00 00 00	 call	 _CreateTexture2D
  00395	83 c4 14	 add	 esp, 20			; 00000014H

; 465  : 	glBindTexture(GL_TEXTURE_2D, texture[4]);

  00398	b8 04 00 00 00	 mov	 eax, 4
  0039d	c1 e0 02	 shl	 eax, 2
  003a0	8b f4		 mov	 esi, esp
  003a2	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  003a8	51		 push	 ecx
  003a9	68 e1 0d 00 00	 push	 3553			; 00000de1H
  003ae	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  003b4	3b f4		 cmp	 esi, esp
  003b6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 466  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);

  003bb	8b f4		 mov	 esi, esp
  003bd	68 01 29 00 00	 push	 10497			; 00002901H
  003c2	68 02 28 00 00	 push	 10242			; 00002802H
  003c7	68 e1 0d 00 00	 push	 3553			; 00000de1H
  003cc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  003d2	3b f4		 cmp	 esi, esp
  003d4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 467  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  003d9	8b f4		 mov	 esi, esp
  003db	68 01 29 00 00	 push	 10497			; 00002901H
  003e0	68 03 28 00 00	 push	 10243			; 00002803H
  003e5	68 e1 0d 00 00	 push	 3553			; 00000de1H
  003ea	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  003f0	3b f4		 cmp	 esi, esp
  003f2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 468  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

  003f7	8b f4		 mov	 esi, esp
  003f9	68 01 26 00 00	 push	 9729			; 00002601H
  003fe	68 01 28 00 00	 push	 10241			; 00002801H
  00403	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00408	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0040e	3b f4		 cmp	 esi, esp
  00410	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 469  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

  00415	8b f4		 mov	 esi, esp
  00417	68 01 26 00 00	 push	 9729			; 00002601H
  0041c	68 00 28 00 00	 push	 10240			; 00002800H
  00421	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00426	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0042c	3b f4		 cmp	 esi, esp
  0042e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 470  : 	CreateTexture2D(overtime_text, GL_RGBA, true, NULL, NULL); 

  00433	6a 00		 push	 0
  00435	6a 00		 push	 0
  00437	6a 01		 push	 1
  00439	68 08 19 00 00	 push	 6408			; 00001908H
  0043e	a1 00 00 00 00	 mov	 eax, DWORD PTR _overtime_text
  00443	50		 push	 eax
  00444	e8 00 00 00 00	 call	 _CreateTexture2D
  00449	83 c4 14	 add	 esp, 20			; 00000014H

; 471  : 	tmp_surface = IMG_Load("resources/character_ic.png"); //for the program icon

  0044c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EHIMIKAH@resources?1character_ic?4png@
  00451	e8 00 00 00 00	 call	 _IMG_Load
  00456	83 c4 04	 add	 esp, 4
  00459	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 472  : 	SDL_SetWindowIcon(window, tmp_surface);

  0045c	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0045f	50		 push	 eax
  00460	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _window
  00466	51		 push	 ecx
  00467	e8 00 00 00 00	 call	 _SDL_SetWindowIcon
  0046c	83 c4 08	 add	 esp, 8

; 473  : 	SDL_FreeSurface(tmp_surface);

  0046f	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00472	50		 push	 eax
  00473	e8 00 00 00 00	 call	 _SDL_FreeSurface
  00478	83 c4 04	 add	 esp, 4

; 474  : 	tmp_surface = IMG_Load("resources/cursor_f_open.png"); //for the mouse when left mouse button is not pressed

  0047b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DGPFILOH@resources?1cursor_f_open?4png@
  00480	e8 00 00 00 00	 call	 _IMG_Load
  00485	83 c4 04	 add	 esp, 4
  00488	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 475  : 	mouse_opened  = SDL_CreateColorCursor(tmp_surface, 0, 0);

  0048b	6a 00		 push	 0
  0048d	6a 00		 push	 0
  0048f	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00492	50		 push	 eax
  00493	e8 00 00 00 00	 call	 _SDL_CreateColorCursor
  00498	83 c4 0c	 add	 esp, 12			; 0000000cH
  0049b	a3 00 00 00 00	 mov	 DWORD PTR _mouse_opened, eax

; 476  : 	SDL_FreeSurface(tmp_surface);

  004a0	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  004a3	50		 push	 eax
  004a4	e8 00 00 00 00	 call	 _SDL_FreeSurface
  004a9	83 c4 04	 add	 esp, 4

; 477  : 	tmp_surface = IMG_Load("resources/cursor_f_closed.png"); //for the mouse when left mouse button is pressed

  004ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@NMOBJJI@resources?1cursor_f_closed?4png@
  004b1	e8 00 00 00 00	 call	 _IMG_Load
  004b6	83 c4 04	 add	 esp, 4
  004b9	89 45 f8	 mov	 DWORD PTR _tmp_surface$[ebp], eax

; 478  : 	mouse_closed = SDL_CreateColorCursor(tmp_surface, 0, 0);

  004bc	6a 00		 push	 0
  004be	6a 00		 push	 0
  004c0	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  004c3	50		 push	 eax
  004c4	e8 00 00 00 00	 call	 _SDL_CreateColorCursor
  004c9	83 c4 0c	 add	 esp, 12			; 0000000cH
  004cc	a3 00 00 00 00	 mov	 DWORD PTR _mouse_closed, eax

; 479  : 	SDL_FreeSurface(tmp_surface);

  004d1	8b 45 f8	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  004d4	50		 push	 eax
  004d5	e8 00 00 00 00	 call	 _SDL_FreeSurface
  004da	83 c4 04	 add	 esp, 4

; 480  : 
; 481  : }

  004dd	5f		 pop	 edi
  004de	5e		 pop	 esi
  004df	5b		 pop	 ebx
  004e0	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  004e6	3b ec		 cmp	 ebp, esp
  004e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004ed	8b e5		 mov	 esp, ebp
  004ef	5d		 pop	 ebp
  004f0	c3		 ret	 0
_Init_GL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _CreateTexture2D
_TEXT	SEGMENT
_tmp_surface$ = 8					; size = 4
_format$ = 12						; size = 4
_free_surface$ = 16					; size = 4
_w$ = 20						; size = 4
_h$ = 24						; size = 4
_CreateTexture2D PROC					; COMDAT

; 412  : void CreateTexture2D(SDL_Surface* tmp_surface, GLenum format, SDL_bool free_surface, int* w, int* h) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 413  : 	glTexImage2D(GL_TEXTURE_2D, 0, format, tmp_surface->w, tmp_surface->h, 0, format, GL_UNSIGNED_BYTE, tmp_surface->pixels);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0002d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00030	51		 push	 ecx
  00031	68 01 14 00 00	 push	 5121			; 00001401H
  00036	8b 55 0c	 mov	 edx, DWORD PTR _format$[ebp]
  00039	52		 push	 edx
  0003a	6a 00		 push	 0
  0003c	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0003f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR _tmp_surface$[ebp]
  00046	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00049	50		 push	 eax
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _format$[ebp]
  0004d	51		 push	 ecx
  0004e	6a 00		 push	 0
  00050	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexImage2D
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 414  : 	if(w)

  00062	83 7d 14 00	 cmp	 DWORD PTR _w$[ebp], 0
  00066	74 09		 je	 SHORT $LN2@CreateText

; 415  : 		w = tmp_surface->w;

  00068	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0006b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006e	89 4d 14	 mov	 DWORD PTR _w$[ebp], ecx
$LN2@CreateText:

; 416  : 	if(h)

  00071	83 7d 18 00	 cmp	 DWORD PTR _h$[ebp], 0
  00075	74 09		 je	 SHORT $LN3@CreateText

; 417  : 		h = tmp_surface->h;

  00077	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  0007a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007d	89 4d 18	 mov	 DWORD PTR _h$[ebp], ecx
$LN3@CreateText:

; 418  : 	if (free_surface)

  00080	83 7d 10 00	 cmp	 DWORD PTR _free_surface$[ebp], 0
  00084	74 0c		 je	 SHORT $LN1@CreateText

; 419  : 		SDL_FreeSurface(tmp_surface);

  00086	8b 45 08	 mov	 eax, DWORD PTR _tmp_surface$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 _SDL_FreeSurface
  0008f	83 c4 04	 add	 esp, 4
$LN1@CreateText:

; 420  : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_CreateTexture2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_List
_TEXT	SEGMENT
_tmp_enemy$1 = -20					; size = 4
_i$2 = -8						; size = 4
_list$ = 8						; size = 4
_RENDER_List PROC					; COMDAT

; 351  : void RENDER_List(const linkedList* const list) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 352  : 	for (int i = 0; i < list->count; ++i) {

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@RENDER_Lis
$LN2@RENDER_Lis:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@RENDER_Lis:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _i$2[ebp]
  00040	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00043	7d 59		 jge	 SHORT $LN3@RENDER_Lis

; 353  : 		enemy* tmp_enemy = LIST_At(&enemies, i);

  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$2[ebp]
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET _enemies
  0004e	e8 00 00 00 00	 call	 _LIST_At
  00053	83 c4 08	 add	 esp, 8
  00056	89 45 ec	 mov	 DWORD PTR _tmp_enemy$1[ebp], eax

; 354  : 		RENDER_TexturedQuad(tmp_enemy->sprite, 1, 1, 1, true); 

  00059	6a 01		 push	 1
  0005b	51		 push	 ecx
  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	51		 push	 ecx
  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	51		 push	 ecx
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	8b 75 ec	 mov	 esi, DWORD PTR _tmp_enemy$1[ebp]
  00088	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0008b	b9 07 00 00 00	 mov	 ecx, 7
  00090	8b fc		 mov	 edi, esp
  00092	f3 a5		 rep movsd
  00094	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  00099	83 c4 2c	 add	 esp, 44			; 0000002cH

; 355  : 	}

  0009c	eb 93		 jmp	 SHORT $LN2@RENDER_Lis
$LN3@RENDER_Lis:

; 356  : }

  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_RENDER_List ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _GAME_AddEnemies
_TEXT	SEGMENT
tv206 = -316						; size = 8
tv202 = -308						; size = 4
tv197 = -304						; size = 8
tv194 = -296						; size = 4
tv232 = -292						; size = 4
tv183 = -288						; size = 8
tv179 = -280						; size = 4
_tmp_enemy$1 = -80					; size = 4
_tmp_text_quad$2 = -68					; size = 28
_tmp_bitshift$3 = -32					; size = 4
_tmp$4 = -20						; size = 4
_time$ = -8						; size = 4
_GAME_AddEnemies PROC					; COMDAT

; 322  : void GAME_AddEnemies(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00012	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 323  : 	static float timer = 0;
; 324  : 	static time_withoutreserve = 0;
; 325  : 	clock_t time = clock() + 1000;

  00028	8b f4		 mov	 esi, esp
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  0003c	89 45 f8	 mov	 DWORD PTR _time$[ebp], eax

; 326  : 	time /= CLOCKS_PER_SEC;

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _time$[ebp]
  00042	99		 cdq
  00043	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00048	f7 f9		 idiv	 ecx
  0004a	89 45 f8	 mov	 DWORD PTR _time$[ebp], eax

; 327  : 	if ((timer <= 0 && (!(time % (9 - enemy_counter)))) && reserve > 0) {

  0004d	0f 57 c0	 xorps	 xmm0, xmm0
  00050	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9
  00057	0f 82 19 02 00
	00		 jb	 $LN2@GAME_AddEn
  0005d	b9 09 00 00 00	 mov	 ecx, 9
  00062	2b 0d 00 00 00
	00		 sub	 ecx, DWORD PTR _enemy_counter
  00068	8b 45 f8	 mov	 eax, DWORD PTR _time$[ebp]
  0006b	33 d2		 xor	 edx, edx
  0006d	f7 f1		 div	 ecx
  0006f	85 d2		 test	 edx, edx
  00071	0f 85 ff 01 00
	00		 jne	 $LN2@GAME_AddEn
  00077	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reserve, 0
  0007e	0f 8e f2 01 00
	00		 jle	 $LN2@GAME_AddEn
$ADDEN$13:

; 328  : 	ADDEN:
; 329  : 		timer = 1000; //so that it doesn't place 500 enemys every 9 - enemy_count seconds

  00084	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  0008c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9, xmm0

; 330  : 		unsigned int tmp = rand() % enemy_counter, tmp_bitshift = 0;

  00094	8b f4		 mov	 esi, esp
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	33 d2		 xor	 edx, edx
  000a5	f7 35 00 00 00
	00		 div	 DWORD PTR _enemy_counter
  000ab	89 55 ec	 mov	 DWORD PTR _tmp$4[ebp], edx
  000ae	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _tmp_bitshift$3[ebp], 0

; 331  : 		tmp_bitshift = FEDERATION_SCOUT << tmp;

  000b5	b8 01 00 00 00	 mov	 eax, 1
  000ba	8b 4d ec	 mov	 ecx, DWORD PTR _tmp$4[ebp]
  000bd	d3 e0		 shl	 eax, cl
  000bf	89 45 e0	 mov	 DWORD PTR _tmp_bitshift$3[ebp], eax

; 332  : 		if (!(active_en & tmp_bitshift))

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _active_en
  000c7	23 45 e0	 and	 eax, DWORD PTR _tmp_bitshift$3[ebp]
  000ca	75 0d		 jne	 SHORT $LN4@GAME_AddEn

; 333  : 			tmp_bitshift = CIVILIAN_RANCHER << tmp;

  000cc	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  000d1	8b 4d ec	 mov	 ecx, DWORD PTR _tmp$4[ebp]
  000d4	d3 e0		 shl	 eax, cl
  000d6	89 45 e0	 mov	 DWORD PTR _tmp_bitshift$3[ebp], eax
$LN4@GAME_AddEn:

; 334  : 
; 335  : 		text_quad tmp_text_quad = { 0.9,PIXEL_TO_NDCY((float)(rand() % window_height), window_height),0.1,0.1,texture[0],0,0 }; //texture width and height not relevant... yet

  000d9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000e1	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_text_quad$2[ebp], xmm0
  000e6	a1 00 00 00 00	 mov	 eax, DWORD PTR _window_height
  000eb	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv179[ebp], eax
  000f1	f2 0f 2a 85 e8
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv179[ebp]
  000f9	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv179[ebp]
  000ff	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00102	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0010b	f2 0f 11 85 e0
	fe ff ff	 movsd	 QWORD PTR tv183[ebp], xmm0
  00113	f2 0f 5a 85 e0
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv183[ebp]
  0011b	8b f4		 mov	 esi, esp
  0011d	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR tv232[ebp], xmm0
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0012b	3b f4		 cmp	 esi, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	33 d2		 xor	 edx, edx
  00134	f7 35 00 00 00
	00		 div	 DWORD PTR _window_height
  0013a	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv194[ebp], edx
  00140	f2 0f 2a 85 d8
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv194[ebp]
  00148	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR tv194[ebp]
  0014e	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  00151	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  0015a	f2 0f 11 85 d0
	fe ff ff	 movsd	 QWORD PTR tv197[ebp], xmm0
  00162	f2 0f 5a 85 d0
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv197[ebp]
  0016a	f3 0f 10 8d dc
	fe ff ff	 movss	 xmm1, DWORD PTR tv232[ebp]
  00172	f3 0f 5c c8	 subss	 xmm1, xmm0
  00176	a1 00 00 00 00	 mov	 eax, DWORD PTR _window_height
  0017b	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv202[ebp], eax
  00181	f2 0f 2a 85 cc
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv202[ebp]
  00189	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv202[ebp]
  0018f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00192	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0019b	f2 0f 11 85 c4
	fe ff ff	 movsd	 QWORD PTR tv206[ebp], xmm0
  001a3	f2 0f 5a 85 c4
	fe ff ff	 cvtsd2ss xmm0, QWORD PTR tv206[ebp]
  001ab	f3 0f 5e c8	 divss	 xmm1, xmm0
  001af	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  001b7	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  001bf	f3 0f 11 4d c0	 movss	 DWORD PTR _tmp_text_quad$2[ebp+4], xmm1
  001c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001cc	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_text_quad$2[ebp+8], xmm0
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  001d9	f3 0f 11 45 c8	 movss	 DWORD PTR _tmp_text_quad$2[ebp+12], xmm0
  001de	b8 04 00 00 00	 mov	 eax, 4
  001e3	6b c8 00	 imul	 ecx, eax, 0
  001e6	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  001ec	89 55 cc	 mov	 DWORD PTR _tmp_text_quad$2[ebp+16], edx
  001ef	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _tmp_text_quad$2[ebp+20], 0
  001f6	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _tmp_text_quad$2[ebp+24], 0

; 336  : 		enemy* tmp_enemy = calloc(1, sizeof(enemy));

  001fd	8b f4		 mov	 esi, esp
  001ff	6a 28		 push	 40			; 00000028H
  00201	6a 01		 push	 1
  00203	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00209	83 c4 08	 add	 esp, 8
  0020c	3b f4		 cmp	 esi, esp
  0020e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00213	89 45 b0	 mov	 DWORD PTR _tmp_enemy$1[ebp], eax

; 337  : 		tmp_enemy->sprite = tmp_text_quad, tmp_enemy->health = 20 * tmp_bitshift, tmp_enemy->score = 10 * tmp_bitshift * 3, tmp_enemy->id = tmp_bitshift;

  00216	b9 07 00 00 00	 mov	 ecx, 7
  0021b	8d 75 bc	 lea	 esi, DWORD PTR _tmp_text_quad$2[ebp]
  0021e	8b 7d b0	 mov	 edi, DWORD PTR _tmp_enemy$1[ebp]
  00221	f3 a5		 rep movsd
  00223	6b 45 e0 14	 imul	 eax, DWORD PTR _tmp_bitshift$3[ebp], 20
  00227	8b 4d b0	 mov	 ecx, DWORD PTR _tmp_enemy$1[ebp]
  0022a	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0022d	6b 55 e0 0a	 imul	 edx, DWORD PTR _tmp_bitshift$3[ebp], 10
  00231	6b c2 03	 imul	 eax, edx, 3
  00234	8b 4d b0	 mov	 ecx, DWORD PTR _tmp_enemy$1[ebp]
  00237	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0023a	8b 55 b0	 mov	 edx, DWORD PTR _tmp_enemy$1[ebp]
  0023d	8b 45 e0	 mov	 eax, DWORD PTR _tmp_bitshift$3[ebp]
  00240	89 42 24	 mov	 DWORD PTR [edx+36], eax

; 338  : 		LIST_AddElement(&enemies, tmp_enemy);

  00243	8b 45 b0	 mov	 eax, DWORD PTR _tmp_enemy$1[ebp]
  00246	50		 push	 eax
  00247	68 00 00 00 00	 push	 OFFSET _enemies
  0024c	e8 00 00 00 00	 call	 _LIST_AddElement
  00251	83 c4 08	 add	 esp, 8

; 339  : 		reserve -= tmp_bitshift;

  00254	a1 00 00 00 00	 mov	 eax, DWORD PTR _reserve
  00259	2b 45 e0	 sub	 eax, DWORD PTR _tmp_bitshift$3[ebp]
  0025c	a3 00 00 00 00	 mov	 DWORD PTR _reserve, eax

; 340  : 		printf("reserve:%d\n", reserve);

  00261	a1 00 00 00 00	 mov	 eax, DWORD PTR _reserve
  00266	50		 push	 eax
  00267	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JGOKHPLJ@reserve?3?$CFd?6@
  0026c	e8 00 00 00 00	 call	 _printf
  00271	83 c4 08	 add	 esp, 8

; 341  : 	}

  00274	eb 45		 jmp	 SHORT $LN7@GAME_AddEn
$LN2@GAME_AddEn:

; 342  : 	else if (time_withoutreserve >= 100 && !(time % 2) && timer <= 0) {

  00276	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR ?time_withoutreserve@?1??GAME_AddEnemies@@9@9, 100 ; 00000064H
  0027d	7c 26		 jl	 SHORT $LN5@GAME_AddEn
  0027f	8b 45 f8	 mov	 eax, DWORD PTR _time$[ebp]
  00282	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00287	79 05		 jns	 SHORT $LN12@GAME_AddEn
  00289	48		 dec	 eax
  0028a	83 c8 fe	 or	 eax, -2			; fffffffeH
  0028d	40		 inc	 eax
$LN12@GAME_AddEn:
  0028e	85 c0		 test	 eax, eax
  00290	75 13		 jne	 SHORT $LN5@GAME_AddEn
  00292	0f 57 c0	 xorps	 xmm0, xmm0
  00295	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9
  0029c	72 07		 jb	 SHORT $LN5@GAME_AddEn

; 343  : 		goto ADDEN;

  0029e	e9 e1 fd ff ff	 jmp	 $ADDEN$13

; 344  : 	}

  002a3	eb 16		 jmp	 SHORT $LN7@GAME_AddEn
$LN5@GAME_AddEn:

; 345  : 	else if (reserve <= 0) {

  002a5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reserve, 0
  002ac	7f 0d		 jg	 SHORT $LN7@GAME_AddEn

; 346  : 		time_withoutreserve = time_withoutreserve + 1;

  002ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?time_withoutreserve@?1??GAME_AddEnemies@@9@9
  002b3	83 c0 01	 add	 eax, 1
  002b6	a3 00 00 00 00	 mov	 DWORD PTR ?time_withoutreserve@?1??GAME_AddEnemies@@9@9, eax
$LN7@GAME_AddEn:

; 347  : 	}
; 348  : 		
; 349  : 	--timer;

  002bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9
  002c3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  002cb	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?timer@?1??GAME_AddEnemies@@9@9, xmm0

; 350  : }

  002d3	52		 push	 edx
  002d4	8b cd		 mov	 ecx, ebp
  002d6	50		 push	 eax
  002d7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@GAME_AddEn
  002dd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002e2	58		 pop	 eax
  002e3	5a		 pop	 edx
  002e4	5f		 pop	 edi
  002e5	5e		 pop	 esi
  002e6	5b		 pop	 ebx
  002e7	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  002ed	3b ec		 cmp	 ebp, esp
  002ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f4	8b e5		 mov	 esp, ebp
  002f6	5d		 pop	 ebp
  002f7	c3		 ret	 0
$LN11@GAME_AddEn:
  002f8	01 00 00 00	 DD	 1
  002fc	00 00 00 00	 DD	 $LN10@GAME_AddEn
$LN10@GAME_AddEn:
  00300	bc ff ff ff	 DD	 -68			; ffffffbcH
  00304	1c 00 00 00	 DD	 28			; 0000001cH
  00308	00 00 00 00	 DD	 $LN9@GAME_AddEn
$LN9@GAME_AddEn:
  0030c	74		 DB	 116			; 00000074H
  0030d	6d		 DB	 109			; 0000006dH
  0030e	70		 DB	 112			; 00000070H
  0030f	5f		 DB	 95			; 0000005fH
  00310	74		 DB	 116			; 00000074H
  00311	65		 DB	 101			; 00000065H
  00312	78		 DB	 120			; 00000078H
  00313	74		 DB	 116			; 00000074H
  00314	5f		 DB	 95			; 0000005fH
  00315	71		 DB	 113			; 00000071H
  00316	75		 DB	 117			; 00000075H
  00317	61		 DB	 97			; 00000061H
  00318	64		 DB	 100			; 00000064H
  00319	00		 DB	 0
_GAME_AddEnemies ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _GAME_WaveInit
_TEXT	SEGMENT
_tmp_buffer$ = -28					; size = 8
_tmp$1 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_GAME_WaveInit PROC					; COMDAT

; 295  : void GAME_WaveInit(void) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 296  : 	reserve = wave * 20;

  00032	6b 05 00 00 00
	00 14		 imul	 eax, DWORD PTR _wave, 20
  00039	a3 00 00 00 00	 mov	 DWORD PTR _reserve, eax

; 297  : 	overtime_bell_rung = false;

  0003e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _overtime_bell_rung, 0

; 298  : 	printf("reserve is %d\n", reserve);

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR _reserve
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLFIEIEE@reserve?5is?5?$CFd?6@
  00053	e8 00 00 00 00	 call	 _printf
  00058	83 c4 08	 add	 esp, 8

; 299  : 	if (!(wave % 3)) { // reforcement round

  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00060	33 d2		 xor	 edx, edx
  00062	b9 03 00 00 00	 mov	 ecx, 3
  00067	f7 f1		 div	 ecx
  00069	85 d2		 test	 edx, edx
  0006b	0f 85 b7 00 00
	00		 jne	 $LN2@GAME_WaveI

; 300  : 		unsigned int tmp = rand() % 2;

  00071	8b f4		 mov	 esi, esp
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00085	79 05		 jns	 SHORT $LN12@GAME_WaveI
  00087	48		 dec	 eax
  00088	83 c8 fe	 or	 eax, -2			; fffffffeH
  0008b	40		 inc	 eax
$LN12@GAME_WaveI:
  0008c	89 45 f4	 mov	 DWORD PTR _tmp$1[ebp], eax

; 301  : 		//can add federation ship or civilian ship based on chance, players should hope for civilian ships
; 302  : 		if (tmp)

  0008f	83 7d f4 00	 cmp	 DWORD PTR _tmp$1[ebp], 0
  00093	74 44		 je	 SHORT $LN3@GAME_WaveI

; 303  : 			active_en = FEDERATION_SCOUT << (wave / 3), printf("added %d\n", FEDERATION_SCOUT << (wave / 3));

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  0009a	33 d2		 xor	 edx, edx
  0009c	b9 03 00 00 00	 mov	 ecx, 3
  000a1	f7 f1		 div	 ecx
  000a3	ba 01 00 00 00	 mov	 edx, 1
  000a8	8b c8		 mov	 ecx, eax
  000aa	d3 e2		 shl	 edx, cl
  000ac	89 15 00 00 00
	00		 mov	 DWORD PTR _active_en, edx
  000b2	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000b7	33 d2		 xor	 edx, edx
  000b9	b9 03 00 00 00	 mov	 ecx, 3
  000be	f7 f1		 div	 ecx
  000c0	ba 01 00 00 00	 mov	 edx, 1
  000c5	8b c8		 mov	 ecx, eax
  000c7	d3 e2		 shl	 edx, cl
  000c9	52		 push	 edx
  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_09NOIJFDFO@added?5?$CFd?6@
  000cf	e8 00 00 00 00	 call	 _printf
  000d4	83 c4 08	 add	 esp, 8
  000d7	eb 42		 jmp	 SHORT $LN4@GAME_WaveI
$LN3@GAME_WaveI:

; 304  : 		else
; 305  : 			active_en = FEDERATION_FLAGSHIP << (wave / 3), printf("added %d\n", FEDERATION_FLAGSHIP << (wave / 3)); //the next bit shift will make it a civilian rancher

  000d9	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000de	33 d2		 xor	 edx, edx
  000e0	b9 03 00 00 00	 mov	 ecx, 3
  000e5	f7 f1		 div	 ecx
  000e7	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000ec	8b c8		 mov	 ecx, eax
  000ee	d3 e2		 shl	 edx, cl
  000f0	89 15 00 00 00
	00		 mov	 DWORD PTR _active_en, edx
  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  000fb	33 d2		 xor	 edx, edx
  000fd	b9 03 00 00 00	 mov	 ecx, 3
  00102	f7 f1		 div	 ecx
  00104	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00109	8b c8		 mov	 ecx, eax
  0010b	d3 e2		 shl	 edx, cl
  0010d	52		 push	 edx
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_09NOIJFDFO@added?5?$CFd?6@
  00113	e8 00 00 00 00	 call	 _printf
  00118	83 c4 08	 add	 esp, 8
$LN4@GAME_WaveI:

; 306  : 		enemy_counter++;

  0011b	a1 00 00 00 00	 mov	 eax, DWORD PTR _enemy_counter
  00120	83 c0 01	 add	 eax, 1
  00123	a3 00 00 00 00	 mov	 DWORD PTR _enemy_counter, eax
$LN2@GAME_WaveI:

; 307  : 	}
; 308  : 	if (!(wave % 5)) { //exotic shop appears every 5 waves

  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  0012d	33 d2		 xor	 edx, edx
  0012f	b9 05 00 00 00	 mov	 ecx, 5
  00134	f7 f1		 div	 ecx
  00136	85 d2		 test	 edx, edx
  00138	75 19		 jne	 SHORT $LN5@GAME_WaveI

; 309  : 		puts("exotic shop");

  0013a	8b f4		 mov	 esi, esp
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KDJLAENM@exotic?5shop@
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00147	83 c4 04	 add	 esp, 4
  0014a	3b f4		 cmp	 esi, esp
  0014c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 310  : 	}

  00151	eb 20		 jmp	 SHORT $LN6@GAME_WaveI
$LN5@GAME_WaveI:

; 311  : 	else if (wave > 1) { //opens the normal shop, makes sure that it opens it after you complete the first wave 

  00153	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _wave, 1
  0015a	76 17		 jbe	 SHORT $LN6@GAME_WaveI

; 312  : 		puts("normal shop");

  0015c	8b f4		 mov	 esi, esp
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KCFKOELE@normal?5shop@
  00163	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  00169	83 c4 04	 add	 esp, 4
  0016c	3b f4		 cmp	 esi, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@GAME_WaveI:

; 313  : 	}
; 314  : 	//update the wave counter onscreen
; 315  : 	char tmp_buffer[8] = "Wave:\0";

  00173	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06BENPFJFP@Wave?3?$AA@
  00178	89 45 e4	 mov	 DWORD PTR _tmp_buffer$[ebp], eax
  0017b	66 8b 0d 04 00
	00 00		 mov	 cx, WORD PTR ??_C@_06BENPFJFP@Wave?3?$AA@+4
  00182	66 89 4d e8	 mov	 WORD PTR _tmp_buffer$[ebp+4], cx
  00186	8a 15 06 00 00
	00		 mov	 dl, BYTE PTR ??_C@_06BENPFJFP@Wave?3?$AA@+6
  0018c	88 55 ea	 mov	 BYTE PTR _tmp_buffer$[ebp+6], dl
  0018f	33 c0		 xor	 eax, eax
  00191	88 45 eb	 mov	 BYTE PTR _tmp_buffer$[ebp+7], al

; 316  : 	sprintf(wave_num, "%d", wave);

  00194	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00199	50		 push	 eax
  0019a	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0019f	68 00 00 00 00	 push	 OFFSET _wave_num
  001a4	e8 00 00 00 00	 call	 _sprintf
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 317  : 	strcat(tmp_buffer, wave_num);

  001ac	68 00 00 00 00	 push	 OFFSET _wave_num
  001b1	8d 45 e4	 lea	 eax, DWORD PTR _tmp_buffer$[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _strcat
  001ba	83 c4 08	 add	 esp, 8

; 318  : 	wave_text = TTF_RenderText_Blended(font_1, tmp_buffer, white);

  001bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  001c2	50		 push	 eax
  001c3	8d 4d e4	 lea	 ecx, DWORD PTR _tmp_buffer$[ebp]
  001c6	51		 push	 ecx
  001c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _font_1
  001cd	52		 push	 edx
  001ce	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d6	a3 00 00 00 00	 mov	 DWORD PTR _wave_text, eax

; 319  : 	glBindTexture(GL_TEXTURE_2D, texture[3]);

  001db	b8 04 00 00 00	 mov	 eax, 4
  001e0	6b c8 03	 imul	 ecx, eax, 3
  001e3	8b f4		 mov	 esi, esp
  001e5	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  001eb	52		 push	 edx
  001ec	68 e1 0d 00 00	 push	 3553			; 00000de1H
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  001f7	3b f4		 cmp	 esi, esp
  001f9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 320  : 	CreateTexture2D(wave_text, GL_RGBA, true, NULL, NULL);

  001fe	6a 00		 push	 0
  00200	6a 00		 push	 0
  00202	6a 01		 push	 1
  00204	68 08 19 00 00	 push	 6408			; 00001908H
  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave_text
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 _CreateTexture2D
  00214	83 c4 14	 add	 esp, 20			; 00000014H

; 321  : }

  00217	52		 push	 edx
  00218	8b cd		 mov	 ecx, ebp
  0021a	50		 push	 eax
  0021b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@GAME_WaveI
  00221	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00226	58		 pop	 eax
  00227	5a		 pop	 edx
  00228	5f		 pop	 edi
  00229	5e		 pop	 esi
  0022a	5b		 pop	 ebx
  0022b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022e	33 cd		 xor	 ecx, ebp
  00230	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00235	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0023b	3b ec		 cmp	 ebp, esp
  0023d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00242	8b e5		 mov	 esp, ebp
  00244	5d		 pop	 ebp
  00245	c3		 ret	 0
  00246	66 90		 npad	 2
$LN11@GAME_WaveI:
  00248	01 00 00 00	 DD	 1
  0024c	00 00 00 00	 DD	 $LN10@GAME_WaveI
$LN10@GAME_WaveI:
  00250	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00254	08 00 00 00	 DD	 8
  00258	00 00 00 00	 DD	 $LN9@GAME_WaveI
$LN9@GAME_WaveI:
  0025c	74		 DB	 116			; 00000074H
  0025d	6d		 DB	 109			; 0000006dH
  0025e	70		 DB	 112			; 00000070H
  0025f	5f		 DB	 95			; 0000005fH
  00260	62		 DB	 98			; 00000062H
  00261	75		 DB	 117			; 00000075H
  00262	66		 DB	 102			; 00000066H
  00263	66		 DB	 102			; 00000066H
  00264	65		 DB	 101			; 00000065H
  00265	72		 DB	 114			; 00000072H
  00266	00		 DB	 0
_GAME_WaveInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _SetTextureBoundedParams
_TEXT	SEGMENT
_sampler_target$ = 8					; size = 4
_filter$ = 12						; size = 4
_repeat_type$ = 16					; size = 4
_SetTextureBoundedParams PROC				; COMDAT

; 406  : void SetTextureBoundedParams(GLenum sampler_target, GLenum filter, GLfloat repeat_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 407  : 	glTexParameteri(sampler_target, GL_TEXTURE_WRAP_S, repeat_type);

  00028	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _repeat_type$[ebp]
  0002d	8b f4		 mov	 esi, esp
  0002f	50		 push	 eax
  00030	68 02 28 00 00	 push	 10242			; 00002802H
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00038	51		 push	 ecx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 408  : 	glTexParameteri(sampler_target, GL_TEXTURE_WRAP_T, repeat_type);

  00046	f3 0f 2c 45 10	 cvttss2si eax, DWORD PTR _repeat_type$[ebp]
  0004b	8b f4		 mov	 esi, esp
  0004d	50		 push	 eax
  0004e	68 03 28 00 00	 push	 10243			; 00002803H
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00056	51		 push	 ecx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 409  : 	glTexParameteri(sampler_target, GL_TEXTURE_MIN_FILTER, filter);

  00064	8b f4		 mov	 esi, esp
  00066	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  00069	50		 push	 eax
  0006a	68 01 28 00 00	 push	 10241			; 00002801H
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  00072	51		 push	 ecx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 410  : 	glTexParameteri(sampler_target, GL_TEXTURE_MAG_FILTER, filter);

  00080	8b f4		 mov	 esi, esp
  00082	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  00085	50		 push	 eax
  00086	68 00 28 00 00	 push	 10240			; 00002800H
  0008b	8b 4d 08	 mov	 ecx, DWORD PTR _sampler_target$[ebp]
  0008e	51		 push	 ecx
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glTexParameteri
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 411  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_SetTextureBoundedParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _CompileShader
_TEXT	SEGMENT
_i$1 = -72						; size = 4
_fp$2 = -60						; size = 4
_linebreak_amount$ = -48				; size = 4
_size$ = -36						; size = 4
_shader_obj$ = -24					; size = 4
_shader_data$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_shader_fname$ = 8					; size = 4
_type$ = 12						; size = 4
_CompileShader PROC					; COMDAT

; 265  : GLint CompileShader(char* shader_fname, GLenum type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00012	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 266  : 	char* shader_data;
; 267  : 	GLint shader_obj;
; 268  : 	size_t size;
; 269  : 	int linebreak_amount = 0;

  00032	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _linebreak_amount$[ebp], 0

; 270  : 	{
; 271  : 		FILE* fp; 
; 272  : 		fp = fopen(shader_fname, "r");

  00039	8b f4		 mov	 esi, esp
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r@
  00040	8b 45 08	 mov	 eax, DWORD PTR _shader_fname$[ebp]
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	89 45 c4	 mov	 DWORD PTR _fp$2[ebp], eax

; 273  : 		fseek(fp, SEEK_SET, SEEK_END);

  00057	8b f4		 mov	 esi, esp
  00059	6a 02		 push	 2
  0005b	6a 00		 push	 0
  0005d	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00060	50		 push	 eax
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 274  : 		size = ftell(fp);

  00071	8b f4		 mov	 esi, esp
  00073	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00076	50		 push	 eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ftell
  0007d	83 c4 04	 add	 esp, 4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	89 45 dc	 mov	 DWORD PTR _size$[ebp], eax

; 275  : 		fseek(fp, SEEK_SET, SEEK_SET);

  0008a	8b f4		 mov	 esi, esp
  0008c	6a 00		 push	 0
  0008e	6a 00		 push	 0
  00090	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  00093	50		 push	 eax
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 276  : 		shader_data = calloc(1, size);

  000a4	8b f4		 mov	 esi, esp
  000a6	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  000a9	50		 push	 eax
  000aa	6a 01		 push	 1
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  000b2	83 c4 08	 add	 esp, 8
  000b5	3b f4		 cmp	 esi, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	89 45 f4	 mov	 DWORD PTR _shader_data$[ebp], eax

; 277  : 		fread(shader_data, 1, size, fp);

  000bf	8b f4		 mov	 esi, esp
  000c1	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  000c4	50		 push	 eax
  000c5	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  000c8	51		 push	 ecx
  000c9	6a 01		 push	 1
  000cb	8b 55 f4	 mov	 edx, DWORD PTR _shader_data$[ebp]
  000ce	52		 push	 edx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  000d5	83 c4 10	 add	 esp, 16			; 00000010H
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 278  : 		fclose(fp);

  000df	8b f4		 mov	 esi, esp
  000e1	8b 45 c4	 mov	 eax, DWORD PTR _fp$2[ebp]
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  000eb	83 c4 04	 add	 esp, 4
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 279  : 		for (int i = 0; i < size; ++i) {

  000f5	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000fc	eb 09		 jmp	 SHORT $LN4@CompileSha
$LN2@CompileSha:
  000fe	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 45 b8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@CompileSha:
  00107	8b 45 b8	 mov	 eax, DWORD PTR _i$1[ebp]
  0010a	3b 45 dc	 cmp	 eax, DWORD PTR _size$[ebp]
  0010d	73 19		 jae	 SHORT $LN3@CompileSha

; 280  : 			if (shader_data[i] == '\n') {

  0010f	8b 45 f4	 mov	 eax, DWORD PTR _shader_data$[ebp]
  00112	03 45 b8	 add	 eax, DWORD PTR _i$1[ebp]
  00115	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00118	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0011b	75 09		 jne	 SHORT $LN5@CompileSha

; 281  : 				++linebreak_amount;

  0011d	8b 45 d0	 mov	 eax, DWORD PTR _linebreak_amount$[ebp]
  00120	83 c0 01	 add	 eax, 1
  00123	89 45 d0	 mov	 DWORD PTR _linebreak_amount$[ebp], eax
$LN5@CompileSha:

; 282  : 			}
; 283  : 		}

  00126	eb d6		 jmp	 SHORT $LN2@CompileSha
$LN3@CompileSha:

; 284  : 		shader_data[size - linebreak_amount] = '\0';

  00128	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  0012b	2b 45 d0	 sub	 eax, DWORD PTR _linebreak_amount$[ebp]
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR _shader_data$[ebp]
  00131	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 285  : 		//printf("%s", shader_data);
; 286  : 		//printf("%d", size);
; 287  : 		//for debugging
; 288  : 	}
; 289  : 	shader_obj = glCreateShader(type);

  00135	8b f4		 mov	 esi, esp
  00137	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  0013a	50		 push	 eax
  0013b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateShader
  00141	3b f4		 cmp	 esi, esp
  00143	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00148	89 45 e8	 mov	 DWORD PTR _shader_obj$[ebp], eax

; 290  : 	glShaderSource(shader_obj, 1, &shader_data, NULL);

  0014b	8b f4		 mov	 esi, esp
  0014d	6a 00		 push	 0
  0014f	8d 45 f4	 lea	 eax, DWORD PTR _shader_data$[ebp]
  00152	50		 push	 eax
  00153	6a 01		 push	 1
  00155	8b 4d e8	 mov	 ecx, DWORD PTR _shader_obj$[ebp]
  00158	51		 push	 ecx
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glShaderSource
  0015f	3b f4		 cmp	 esi, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 291  : 	glCompileShader(shader_obj);

  00166	8b f4		 mov	 esi, esp
  00168	8b 45 e8	 mov	 eax, DWORD PTR _shader_obj$[ebp]
  0016b	50		 push	 eax
  0016c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCompileShader
  00172	3b f4		 cmp	 esi, esp
  00174	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 292  : 	free(shader_data);

  00179	8b f4		 mov	 esi, esp
  0017b	8b 45 f4	 mov	 eax, DWORD PTR _shader_data$[ebp]
  0017e	50		 push	 eax
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00185	83 c4 04	 add	 esp, 4
  00188	3b f4		 cmp	 esi, esp
  0018a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 293  : 	return shader_obj;

  0018f	8b 45 e8	 mov	 eax, DWORD PTR _shader_obj$[ebp]

; 294  : }

  00192	52		 push	 edx
  00193	8b cd		 mov	 ecx, ebp
  00195	50		 push	 eax
  00196	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@CompileSha
  0019c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001a1	58		 pop	 eax
  001a2	5a		 pop	 edx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	5b		 pop	 ebx
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	33 cd		 xor	 ecx, ebp
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  001b6	3b ec		 cmp	 ebp, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c3		 ret	 0
  001c1	0f 1f 00	 npad	 3
$LN9@CompileSha:
  001c4	01 00 00 00	 DD	 1
  001c8	00 00 00 00	 DD	 $LN8@CompileSha
$LN8@CompileSha:
  001cc	f4 ff ff ff	 DD	 -12			; fffffff4H
  001d0	04 00 00 00	 DD	 4
  001d4	00 00 00 00	 DD	 $LN7@CompileSha
$LN7@CompileSha:
  001d8	73		 DB	 115			; 00000073H
  001d9	68		 DB	 104			; 00000068H
  001da	61		 DB	 97			; 00000061H
  001db	64		 DB	 100			; 00000064H
  001dc	65		 DB	 101			; 00000065H
  001dd	72		 DB	 114			; 00000072H
  001de	5f		 DB	 95			; 0000005fH
  001df	64		 DB	 100			; 00000064H
  001e0	61		 DB	 97			; 00000061H
  001e1	74		 DB	 116			; 00000074H
  001e2	61		 DB	 97			; 00000061H
  001e3	00		 DB	 0
_CompileShader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_Quad
_TEXT	SEGMENT
_tmp_vertexes$ = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 16
_r$ = 24						; size = 4
_g$ = 28						; size = 4
_b$ = 32						; size = 4
_RENDER_Quad PROC					; COMDAT

; 399  : void RENDER_Quad(quad target, float r, float g, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 84 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-380]
  00012	b9 5f 00 00 00	 mov	 ecx, 95			; 0000005fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 400  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 401  : 	float tmp_vertexes[32] = { x,y,0,r,g,b,0,0, x + w,y,0,r,g,b,1,0, x + w,y - h,0,r,g,b,1,1, x,y - h,0,r,g,b,0,1 };

  0005a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0005f	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp], xmm0
  00067	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0006c	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+4], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+8], xmm0
  0007f	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  00084	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+12], xmm0
  0008c	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00091	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+16], xmm0
  00099	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  0009e	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+20], xmm0
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+24], xmm0
  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+28], xmm0
  000bc	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000c1	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  000c6	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+32], xmm0
  000ce	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d3	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+36], xmm0
  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+40], xmm0
  000e6	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  000eb	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+44], xmm0
  000f3	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  000f8	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+48], xmm0
  00100	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  00105	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$[ebp+52], xmm0
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00115	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$[ebp+56], xmm0
  0011a	0f 57 c0	 xorps	 xmm0, xmm0
  0011d	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$[ebp+60], xmm0
  00122	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00127	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0012c	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$[ebp+64], xmm0
  00131	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00136	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0013b	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$[ebp+68], xmm0
  00140	0f 57 c0	 xorps	 xmm0, xmm0
  00143	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$[ebp+72], xmm0
  00148	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  0014d	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$[ebp+76], xmm0
  00152	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00157	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$[ebp+80], xmm0
  0015c	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  00161	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$[ebp+84], xmm0
  00166	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0016e	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$[ebp+88], xmm0
  00173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0017b	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$[ebp+92], xmm0
  00180	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00185	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$[ebp+96], xmm0
  0018a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0018f	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00194	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$[ebp+100], xmm0
  00199	0f 57 c0	 xorps	 xmm0, xmm0
  0019c	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$[ebp+104], xmm0
  001a1	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _r$[ebp]
  001a6	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$[ebp+108], xmm0
  001ab	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _g$[ebp]
  001b0	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$[ebp+112], xmm0
  001b5	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _b$[ebp]
  001ba	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$[ebp+116], xmm0
  001bf	0f 57 c0	 xorps	 xmm0, xmm0
  001c2	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$[ebp+120], xmm0
  001c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cf	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$[ebp+124], xmm0

; 402  : 	glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001d4	8b f4		 mov	 esi, esp
  001d6	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$[ebp]
  001dc	50		 push	 eax
  001dd	68 80 00 00 00	 push	 128			; 00000080H
  001e2	6a 00		 push	 0
  001e4	68 92 88 00 00	 push	 34962			; 00008892H
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  001ef	3b f4		 cmp	 esi, esp
  001f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 403  : 	glUseProgram(shader_colored);

  001f6	8b f4		 mov	 esi, esp
  001f8	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  001fd	50		 push	 eax
  001fe	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 404  : 	glDrawArrays(GL_QUADS, 0, 4);

  0020b	8b f4		 mov	 esi, esp
  0020d	6a 04		 push	 4
  0020f	6a 00		 push	 0
  00211	6a 07		 push	 7
  00213	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00219	3b f4		 cmp	 esi, esp
  0021b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 405  : }

  00220	52		 push	 edx
  00221	8b cd		 mov	 ecx, ebp
  00223	50		 push	 eax
  00224	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@RENDER_Qua
  0022a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0022f	58		 pop	 eax
  00230	5a		 pop	 edx
  00231	5f		 pop	 edi
  00232	5e		 pop	 esi
  00233	5b		 pop	 ebx
  00234	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00237	33 cd		 xor	 ecx, ebp
  00239	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023e	81 c4 7c 01 00
	00		 add	 esp, 380		; 0000017cH
  00244	3b ec		 cmp	 ebp, esp
  00246	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
  0024f	90		 npad	 1
$LN5@RENDER_Qua:
  00250	01 00 00 00	 DD	 1
  00254	00 00 00 00	 DD	 $LN4@RENDER_Qua
$LN4@RENDER_Qua:
  00258	48 ff ff ff	 DD	 -184			; ffffff48H
  0025c	80 00 00 00	 DD	 128			; 00000080H
  00260	00 00 00 00	 DD	 $LN3@RENDER_Qua
$LN3@RENDER_Qua:
  00264	74		 DB	 116			; 00000074H
  00265	6d		 DB	 109			; 0000006dH
  00266	70		 DB	 112			; 00000070H
  00267	5f		 DB	 95			; 0000005fH
  00268	76		 DB	 118			; 00000076H
  00269	65		 DB	 101			; 00000065H
  0026a	72		 DB	 114			; 00000072H
  0026b	74		 DB	 116			; 00000074H
  0026c	65		 DB	 101			; 00000065H
  0026d	78		 DB	 120			; 00000078H
  0026e	65		 DB	 101			; 00000065H
  0026f	73		 DB	 115			; 00000073H
  00270	00		 DB	 0
_RENDER_Quad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_TexturedQuadSheet
_TEXT	SEGMENT
_tmp_vertexes$1 = -368					; size = 128
_tmp_vertexes$2 = -232					; size = 128
_texth$ = -96						; size = 4
_texty$ = -84						; size = 4
_textw$ = -72						; size = 4
_textx$ = -60						; size = 4
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 28
_source_rect$ = 36					; size = 16
_r$ = 52						; size = 4
_g$ = 56						; size = 4
_b$ = 60						; size = 4
_normalized$ = 64					; size = 4
_reverse_rendering$ = 68				; size = 4
_RENDER_TexturedQuadSheet PROC				; COMDAT

; 374  : void RENDER_TexturedQuadSheet(text_quad target, quad source_rect, float r, float g, float b, SDL_bool normalized, SDL_bool reverse_rendering) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 02 00
	00		 sub	 esp, 564		; 00000234H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd cc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-564]
  00012	b9 8d 00 00 00	 mov	 ecx, 141		; 0000008dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 375  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 376  : 	float textx, textw;
; 377  : 	float texty, texth;
; 378  : 	if (normalized)

  0005a	83 7d 40 00	 cmp	 DWORD PTR _normalized$[ebp], 0
  0005e	74 2a		 je	 SHORT $LN2@RENDER_Tex

; 379  : 		textx = source_rect.x, texty = source_rect.y, textw = source_rect.w, texth = source_rect.h;

  00060	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _source_rect$[ebp]
  00065	f3 0f 11 45 c4	 movss	 DWORD PTR _textx$[ebp], xmm0
  0006a	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  0006f	f3 0f 11 45 ac	 movss	 DWORD PTR _texty$[ebp], xmm0
  00074	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _source_rect$[ebp+8]
  00079	f3 0f 11 45 b8	 movss	 DWORD PTR _textw$[ebp], xmm0
  0007e	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _source_rect$[ebp+12]
  00083	f3 0f 11 45 a0	 movss	 DWORD PTR _texth$[ebp], xmm0
  00088	eb 4c		 jmp	 SHORT $LN3@RENDER_Tex
$LN2@RENDER_Tex:

; 380  : 	else
; 381  : 		textx = source_rect.x / target.texw, texty = source_rect.y / target.texh, textw = source_rect.w / target.texw, texth = source_rect.h / target.texh;

  0008a	f3 0f 2a 45 1c	 cvtsi2ss xmm0, DWORD PTR _target$[ebp+20]
  0008f	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR _source_rect$[ebp]
  00094	f3 0f 5e c8	 divss	 xmm1, xmm0
  00098	f3 0f 11 4d c4	 movss	 DWORD PTR _textx$[ebp], xmm1
  0009d	f3 0f 2a 45 20	 cvtsi2ss xmm0, DWORD PTR _target$[ebp+24]
  000a2	f3 0f 10 4d 28	 movss	 xmm1, DWORD PTR _source_rect$[ebp+4]
  000a7	f3 0f 5e c8	 divss	 xmm1, xmm0
  000ab	f3 0f 11 4d ac	 movss	 DWORD PTR _texty$[ebp], xmm1
  000b0	f3 0f 2a 45 1c	 cvtsi2ss xmm0, DWORD PTR _target$[ebp+20]
  000b5	f3 0f 10 4d 2c	 movss	 xmm1, DWORD PTR _source_rect$[ebp+8]
  000ba	f3 0f 5e c8	 divss	 xmm1, xmm0
  000be	f3 0f 11 4d b8	 movss	 DWORD PTR _textw$[ebp], xmm1
  000c3	f3 0f 2a 45 20	 cvtsi2ss xmm0, DWORD PTR _target$[ebp+24]
  000c8	f3 0f 10 4d 30	 movss	 xmm1, DWORD PTR _source_rect$[ebp+12]
  000cd	f3 0f 5e c8	 divss	 xmm1, xmm0
  000d1	f3 0f 11 4d a0	 movss	 DWORD PTR _texth$[ebp], xmm1
$LN3@RENDER_Tex:

; 382  : 
; 383  : 	if (reverse_rendering) {

  000d6	83 7d 44 00	 cmp	 DWORD PTR _reverse_rendering$[ebp], 0
  000da	0f 84 17 02 00
	00		 je	 $LN4@RENDER_Tex

; 384  : 		float tmp_vertexes[32] = { x + w,y,0,r,g,b,textx,texty, x,y,0,r,g,b,textx + textw,texty, x,y - h,0,r,g,b,textx + textw,textx + texth, x + w,y - h,0,r,g,b,textx,textx + texth};

  000e0	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000e5	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  000ea	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp], xmm0
  000f2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000f7	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+4], xmm0
  000ff	0f 57 c0	 xorps	 xmm0, xmm0
  00102	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+8], xmm0
  0010a	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  0010f	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+12], xmm0
  00117	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0011c	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+16], xmm0
  00124	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00129	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+20], xmm0
  00131	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00136	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+24], xmm0
  0013e	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  00143	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+28], xmm0
  0014b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00150	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+32], xmm0
  00158	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0015d	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+36], xmm0
  00165	0f 57 c0	 xorps	 xmm0, xmm0
  00168	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+40], xmm0
  00170	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00175	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+44], xmm0
  0017d	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00182	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+48], xmm0
  0018a	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0018f	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+52], xmm0
  00197	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0019c	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  001a1	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+56], xmm0
  001a9	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  001ae	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+60], xmm0
  001b6	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  001bb	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+64], xmm0
  001c3	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  001c8	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  001cd	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+68], xmm0
  001d5	0f 57 c0	 xorps	 xmm0, xmm0
  001d8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+72], xmm0
  001e0	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  001e5	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+76], xmm0
  001ed	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  001f2	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+80], xmm0
  001fa	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  001ff	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+84], xmm0
  00207	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0020c	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  00211	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+88], xmm0
  00219	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0021e	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  00223	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+92], xmm0
  0022b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00230	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  00235	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+96], xmm0
  0023d	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00242	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00247	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+100], xmm0
  0024f	0f 57 c0	 xorps	 xmm0, xmm0
  00252	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$2[ebp+104], xmm0
  00257	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  0025c	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$2[ebp+108], xmm0
  00261	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00266	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$2[ebp+112], xmm0
  0026b	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00270	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+116], xmm0
  00275	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0027a	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$2[ebp+120], xmm0
  0027f	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00284	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  00289	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$2[ebp+124], xmm0

; 385  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  0028e	8b f4		 mov	 esi, esp
  00290	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$2[ebp]
  00296	50		 push	 eax
  00297	68 80 00 00 00	 push	 128			; 00000080H
  0029c	6a 00		 push	 0
  0029e	68 92 88 00 00	 push	 34962			; 00008892H
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  002a9	3b f4		 cmp	 esi, esp
  002ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 386  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  002b0	8b f4		 mov	 esi, esp
  002b2	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  002b5	50		 push	 eax
  002b6	68 e1 0d 00 00	 push	 3553			; 00000de1H
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  002c1	3b f4		 cmp	 esi, esp
  002c3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 387  : 		glUseProgram(shader_texturedobj);

  002c8	8b f4		 mov	 esi, esp
  002ca	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  002cf	50		 push	 eax
  002d0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  002d6	3b f4		 cmp	 esi, esp
  002d8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 388  : 		glDrawArrays(GL_QUADS, 0, 4);

  002dd	8b f4		 mov	 esi, esp
  002df	6a 04		 push	 4
  002e1	6a 00		 push	 0
  002e3	6a 07		 push	 7
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 389  : 	}

  002f2	e9 24 02 00 00	 jmp	 $LN5@RENDER_Tex
$LN4@RENDER_Tex:

; 390  : 	else {
; 391  : 		//this is so unreadable, definitly clean this up later
; 392  : 		float tmp_vertexes[32] = { x,y,0,r,g,b,textx,texty, x + w,y,0,r,g,b,textx + textw,source_rect.y, x + w,y - h,0,r,g,b,textx + textw,texty + texth, x,y - h,0,r,g,b,textx,texty + texth };

  002f7	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  002fc	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp], xmm0
  00304	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00309	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+4], xmm0
  00311	0f 57 c0	 xorps	 xmm0, xmm0
  00314	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+8], xmm0
  0031c	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00321	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+12], xmm0
  00329	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0032e	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+16], xmm0
  00336	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0033b	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+20], xmm0
  00343	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00348	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+24], xmm0
  00350	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  00355	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+28], xmm0
  0035d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00362	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  00367	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+32], xmm0
  0036f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00374	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+36], xmm0
  0037c	0f 57 c0	 xorps	 xmm0, xmm0
  0037f	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+40], xmm0
  00387	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  0038c	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+44], xmm0
  00394	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00399	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+48], xmm0
  003a1	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  003a6	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+52], xmm0
  003ae	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  003b3	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  003b8	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+56], xmm0
  003c0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _source_rect$[ebp+4]
  003c5	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+60], xmm0
  003cd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  003d2	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  003d7	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+64], xmm0
  003df	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  003e4	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  003e9	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+68], xmm0
  003f1	0f 57 c0	 xorps	 xmm0, xmm0
  003f4	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+72], xmm0
  003fc	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00401	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+76], xmm0
  00409	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  0040e	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+80], xmm0
  00416	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0041b	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+84], xmm0
  00423	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  00428	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _textw$[ebp]
  0042d	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+88], xmm0
  00435	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  0043a	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  0043f	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+92], xmm0
  00447	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0044c	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+96], xmm0
  00454	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00459	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0045e	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+100], xmm0
  00466	0f 57 c0	 xorps	 xmm0, xmm0
  00469	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+104], xmm0
  00471	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _r$[ebp]
  00476	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+108], xmm0
  0047e	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _g$[ebp]
  00483	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+112], xmm0
  0048b	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00490	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+116], xmm0
  00498	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _textx$[ebp]
  0049d	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+120], xmm0
  004a5	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _texty$[ebp]
  004aa	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _texth$[ebp]
  004af	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+124], xmm0

; 393  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  004b7	8b f4		 mov	 esi, esp
  004b9	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$1[ebp]
  004bf	50		 push	 eax
  004c0	68 80 00 00 00	 push	 128			; 00000080H
  004c5	6a 00		 push	 0
  004c7	68 92 88 00 00	 push	 34962			; 00008892H
  004cc	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  004d2	3b f4		 cmp	 esi, esp
  004d4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 394  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  004d9	8b f4		 mov	 esi, esp
  004db	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  004de	50		 push	 eax
  004df	68 e1 0d 00 00	 push	 3553			; 00000de1H
  004e4	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  004ea	3b f4		 cmp	 esi, esp
  004ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 395  : 		glUseProgram(shader_texturedobj);

  004f1	8b f4		 mov	 esi, esp
  004f3	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  004f8	50		 push	 eax
  004f9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  004ff	3b f4		 cmp	 esi, esp
  00501	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 396  : 		glDrawArrays(GL_QUADS, 0, 4);

  00506	8b f4		 mov	 esi, esp
  00508	6a 04		 push	 4
  0050a	6a 00		 push	 0
  0050c	6a 07		 push	 7
  0050e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00514	3b f4		 cmp	 esi, esp
  00516	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@RENDER_Tex:

; 397  : 	}
; 398  : }

  0051b	52		 push	 edx
  0051c	8b cd		 mov	 ecx, ebp
  0051e	50		 push	 eax
  0051f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@RENDER_Tex
  00525	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0052a	58		 pop	 eax
  0052b	5a		 pop	 edx
  0052c	5f		 pop	 edi
  0052d	5e		 pop	 esi
  0052e	5b		 pop	 ebx
  0052f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00532	33 cd		 xor	 ecx, ebp
  00534	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00539	81 c4 34 02 00
	00		 add	 esp, 564		; 00000234H
  0053f	3b ec		 cmp	 ebp, esp
  00541	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00546	8b e5		 mov	 esp, ebp
  00548	5d		 pop	 ebp
  00549	c3		 ret	 0
  0054a	66 90		 npad	 2
$LN10@RENDER_Tex:
  0054c	02 00 00 00	 DD	 2
  00550	00 00 00 00	 DD	 $LN9@RENDER_Tex
$LN9@RENDER_Tex:
  00554	18 ff ff ff	 DD	 -232			; ffffff18H
  00558	80 00 00 00	 DD	 128			; 00000080H
  0055c	00 00 00 00	 DD	 $LN7@RENDER_Tex
  00560	90 fe ff ff	 DD	 -368			; fffffe90H
  00564	80 00 00 00	 DD	 128			; 00000080H
  00568	00 00 00 00	 DD	 $LN8@RENDER_Tex
$LN8@RENDER_Tex:
  0056c	74		 DB	 116			; 00000074H
  0056d	6d		 DB	 109			; 0000006dH
  0056e	70		 DB	 112			; 00000070H
  0056f	5f		 DB	 95			; 0000005fH
  00570	76		 DB	 118			; 00000076H
  00571	65		 DB	 101			; 00000065H
  00572	72		 DB	 114			; 00000072H
  00573	74		 DB	 116			; 00000074H
  00574	65		 DB	 101			; 00000065H
  00575	78		 DB	 120			; 00000078H
  00576	65		 DB	 101			; 00000065H
  00577	73		 DB	 115			; 00000073H
  00578	00		 DB	 0
$LN7@RENDER_Tex:
  00579	74		 DB	 116			; 00000074H
  0057a	6d		 DB	 109			; 0000006dH
  0057b	70		 DB	 112			; 00000070H
  0057c	5f		 DB	 95			; 0000005fH
  0057d	76		 DB	 118			; 00000076H
  0057e	65		 DB	 101			; 00000065H
  0057f	72		 DB	 114			; 00000072H
  00580	74		 DB	 116			; 00000074H
  00581	65		 DB	 101			; 00000065H
  00582	78		 DB	 120			; 00000078H
  00583	65		 DB	 101			; 00000065H
  00584	73		 DB	 115			; 00000073H
  00585	00		 DB	 0
_RENDER_TexturedQuadSheet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _RENDER_TexturedQuad
_TEXT	SEGMENT
_tmp_vertexes$1 = -320					; size = 128
_tmp_vertexes$2 = -184					; size = 128
_h$ = -48						; size = 4
_w$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 28
_r$ = 36						; size = 4
_g$ = 40						; size = 4
_b$ = 44						; size = 4
_reverse_rendering$ = 48				; size = 4
_RENDER_TexturedQuad PROC				; COMDAT

; 357  : void RENDER_TexturedQuad(text_quad target, float r, float g, float b, SDL_bool reverse_rendering) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-516]
  00012	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 358  : 	float x = target.x, y = target.y, w = target.w, h = target.h;

  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _target$[ebp]
  00037	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _target$[ebp+4]
  00041	f3 0f 11 45 e8	 movss	 DWORD PTR _y$[ebp], xmm0
  00046	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _target$[ebp+8]
  0004b	f3 0f 11 45 dc	 movss	 DWORD PTR _w$[ebp], xmm0
  00050	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _target$[ebp+12]
  00055	f3 0f 11 45 d0	 movss	 DWORD PTR _h$[ebp], xmm0

; 359  : 	if (reverse_rendering) {

  0005a	83 7d 30 00	 cmp	 DWORD PTR _reverse_rendering$[ebp], 0
  0005e	0f 84 e3 01 00
	00		 je	 $LN2@RENDER_Tex

; 360  : 		float tmp_vertexes[32] = { x+w,y,0,r,g,b,0,0, x,y,0,r,g,b,1,0, x,y - h,0,r,g,b,1,1, x + w,y - h,0,r,g,b,0,1 };

  00064	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00069	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0006e	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp], xmm0
  00076	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0007b	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+4], xmm0
  00083	0f 57 c0	 xorps	 xmm0, xmm0
  00086	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+8], xmm0
  0008e	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00093	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+12], xmm0
  0009b	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  000a0	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+16], xmm0
  000a8	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  000ad	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+20], xmm0
  000b5	0f 57 c0	 xorps	 xmm0, xmm0
  000b8	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+24], xmm0
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+28], xmm0
  000cb	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  000d0	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+32], xmm0
  000d8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000dd	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+36], xmm0
  000e5	0f 57 c0	 xorps	 xmm0, xmm0
  000e8	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+40], xmm0
  000f0	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  000f5	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+44], xmm0
  000fd	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  00102	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+48], xmm0
  0010a	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0010f	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$2[ebp+52], xmm0
  00117	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011f	f3 0f 11 45 80	 movss	 DWORD PTR _tmp_vertexes$2[ebp+56], xmm0
  00124	0f 57 c0	 xorps	 xmm0, xmm0
  00127	f3 0f 11 45 84	 movss	 DWORD PTR _tmp_vertexes$2[ebp+60], xmm0
  0012c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00131	f3 0f 11 45 88	 movss	 DWORD PTR _tmp_vertexes$2[ebp+64], xmm0
  00136	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0013b	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00140	f3 0f 11 45 8c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+68], xmm0
  00145	0f 57 c0	 xorps	 xmm0, xmm0
  00148	f3 0f 11 45 90	 movss	 DWORD PTR _tmp_vertexes$2[ebp+72], xmm0
  0014d	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00152	f3 0f 11 45 94	 movss	 DWORD PTR _tmp_vertexes$2[ebp+76], xmm0
  00157	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  0015c	f3 0f 11 45 98	 movss	 DWORD PTR _tmp_vertexes$2[ebp+80], xmm0
  00161	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00166	f3 0f 11 45 9c	 movss	 DWORD PTR _tmp_vertexes$2[ebp+84], xmm0
  0016b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00173	f3 0f 11 45 a0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+88], xmm0
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00180	f3 0f 11 45 a4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+92], xmm0
  00185	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0018a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0018f	f3 0f 11 45 a8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+96], xmm0
  00194	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00199	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  0019e	f3 0f 11 45 ac	 movss	 DWORD PTR _tmp_vertexes$2[ebp+100], xmm0
  001a3	0f 57 c0	 xorps	 xmm0, xmm0
  001a6	f3 0f 11 45 b0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+104], xmm0
  001ab	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  001b0	f3 0f 11 45 b4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+108], xmm0
  001b5	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  001ba	f3 0f 11 45 b8	 movss	 DWORD PTR _tmp_vertexes$2[ebp+112], xmm0
  001bf	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  001c4	f3 0f 11 45 bc	 movss	 DWORD PTR _tmp_vertexes$2[ebp+116], xmm0
  001c9	0f 57 c0	 xorps	 xmm0, xmm0
  001cc	f3 0f 11 45 c0	 movss	 DWORD PTR _tmp_vertexes$2[ebp+120], xmm0
  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001d9	f3 0f 11 45 c4	 movss	 DWORD PTR _tmp_vertexes$2[ebp+124], xmm0

; 361  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  001de	8b f4		 mov	 esi, esp
  001e0	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$2[ebp]
  001e6	50		 push	 eax
  001e7	68 80 00 00 00	 push	 128			; 00000080H
  001ec	6a 00		 push	 0
  001ee	68 92 88 00 00	 push	 34962			; 00008892H
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  001f9	3b f4		 cmp	 esi, esp
  001fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 362  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00200	8b f4		 mov	 esi, esp
  00202	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  00205	50		 push	 eax
  00206	68 e1 0d 00 00	 push	 3553			; 00000de1H
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00211	3b f4		 cmp	 esi, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 363  : 		glUseProgram(shader_texturedobj);

  00218	8b f4		 mov	 esi, esp
  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0021f	50		 push	 eax
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 364  : 		glDrawArrays(GL_QUADS, 0, 4);

  0022d	8b f4		 mov	 esi, esp
  0022f	6a 04		 push	 4
  00231	6a 00		 push	 0
  00233	6a 07		 push	 7
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  0023b	3b f4		 cmp	 esi, esp
  0023d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 365  : 	}

  00242	e9 14 02 00 00	 jmp	 $LN3@RENDER_Tex
$LN2@RENDER_Tex:

; 366  : 	else {
; 367  : 		float tmp_vertexes[32] = { x,y,0,r,g,b,0,0, x + w,y,0,r,g,b,1,0, x + w,y - h,0,r,g,b,1,1, x,y - h,0,r,g,b,0,1 };

  00247	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0024c	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp], xmm0
  00254	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00259	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+4], xmm0
  00261	0f 57 c0	 xorps	 xmm0, xmm0
  00264	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+8], xmm0
  0026c	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00271	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+12], xmm0
  00279	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  0027e	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+16], xmm0
  00286	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0028b	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+20], xmm0
  00293	0f 57 c0	 xorps	 xmm0, xmm0
  00296	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+24], xmm0
  0029e	0f 57 c0	 xorps	 xmm0, xmm0
  002a1	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+28], xmm0
  002a9	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  002ae	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  002b3	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+32], xmm0
  002bb	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  002c0	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+36], xmm0
  002c8	0f 57 c0	 xorps	 xmm0, xmm0
  002cb	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+40], xmm0
  002d3	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  002d8	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+44], xmm0
  002e0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  002e5	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+48], xmm0
  002ed	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  002f2	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+52], xmm0
  002fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00302	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+56], xmm0
  0030a	0f 57 c0	 xorps	 xmm0, xmm0
  0030d	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+60], xmm0
  00315	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  0031a	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _w$[ebp]
  0031f	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+64], xmm0
  00327	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0032c	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  00331	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+68], xmm0
  00339	0f 57 c0	 xorps	 xmm0, xmm0
  0033c	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+72], xmm0
  00344	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  00349	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+76], xmm0
  00351	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  00356	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+80], xmm0
  0035e	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  00363	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+84], xmm0
  0036b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00373	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+88], xmm0
  0037b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00383	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+92], xmm0
  0038b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _x$[ebp]
  00390	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+96], xmm0
  00398	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _y$[ebp]
  0039d	f3 0f 5c 45 d0	 subss	 xmm0, DWORD PTR _h$[ebp]
  003a2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+100], xmm0
  003aa	0f 57 c0	 xorps	 xmm0, xmm0
  003ad	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+104], xmm0
  003b5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _r$[ebp]
  003ba	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+108], xmm0
  003c2	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _g$[ebp]
  003c7	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+112], xmm0
  003cf	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _b$[ebp]
  003d4	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+116], xmm0
  003dc	0f 57 c0	 xorps	 xmm0, xmm0
  003df	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+120], xmm0
  003e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003ef	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR _tmp_vertexes$1[ebp+124], xmm0

; 368  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), tmp_vertexes);

  003f7	8b f4		 mov	 esi, esp
  003f9	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _tmp_vertexes$1[ebp]
  003ff	50		 push	 eax
  00400	68 80 00 00 00	 push	 128			; 00000080H
  00405	6a 00		 push	 0
  00407	68 92 88 00 00	 push	 34962			; 00008892H
  0040c	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00412	3b f4		 cmp	 esi, esp
  00414	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 369  : 		glBindTexture(GL_TEXTURE_2D, target.textid);

  00419	8b f4		 mov	 esi, esp
  0041b	8b 45 18	 mov	 eax, DWORD PTR _target$[ebp+16]
  0041e	50		 push	 eax
  0041f	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00424	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  0042a	3b f4		 cmp	 esi, esp
  0042c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 370  : 		glUseProgram(shader_texturedobj);

  00431	8b f4		 mov	 esi, esp
  00433	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00438	50		 push	 eax
  00439	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  0043f	3b f4		 cmp	 esi, esp
  00441	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 371  : 		glDrawArrays(GL_QUADS, 0, 4);

  00446	8b f4		 mov	 esi, esp
  00448	6a 04		 push	 4
  0044a	6a 00		 push	 0
  0044c	6a 07		 push	 7
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00454	3b f4		 cmp	 esi, esp
  00456	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@RENDER_Tex:

; 372  : 	}
; 373  : }

  0045b	52		 push	 edx
  0045c	8b cd		 mov	 ecx, ebp
  0045e	50		 push	 eax
  0045f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RENDER_Tex
  00465	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0046a	58		 pop	 eax
  0046b	5a		 pop	 edx
  0046c	5f		 pop	 edi
  0046d	5e		 pop	 esi
  0046e	5b		 pop	 ebx
  0046f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00472	33 cd		 xor	 ecx, ebp
  00474	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00479	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  0047f	3b ec		 cmp	 ebp, esp
  00481	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00486	8b e5		 mov	 esp, ebp
  00488	5d		 pop	 ebp
  00489	c3		 ret	 0
  0048a	66 90		 npad	 2
$LN8@RENDER_Tex:
  0048c	02 00 00 00	 DD	 2
  00490	00 00 00 00	 DD	 $LN7@RENDER_Tex
$LN7@RENDER_Tex:
  00494	48 ff ff ff	 DD	 -184			; ffffff48H
  00498	80 00 00 00	 DD	 128			; 00000080H
  0049c	00 00 00 00	 DD	 $LN5@RENDER_Tex
  004a0	c0 fe ff ff	 DD	 -320			; fffffec0H
  004a4	80 00 00 00	 DD	 128			; 00000080H
  004a8	00 00 00 00	 DD	 $LN6@RENDER_Tex
$LN6@RENDER_Tex:
  004ac	74		 DB	 116			; 00000074H
  004ad	6d		 DB	 109			; 0000006dH
  004ae	70		 DB	 112			; 00000070H
  004af	5f		 DB	 95			; 0000005fH
  004b0	76		 DB	 118			; 00000076H
  004b1	65		 DB	 101			; 00000065H
  004b2	72		 DB	 114			; 00000072H
  004b3	74		 DB	 116			; 00000074H
  004b4	65		 DB	 101			; 00000065H
  004b5	78		 DB	 120			; 00000078H
  004b6	65		 DB	 101			; 00000065H
  004b7	73		 DB	 115			; 00000073H
  004b8	00		 DB	 0
$LN5@RENDER_Tex:
  004b9	74		 DB	 116			; 00000074H
  004ba	6d		 DB	 109			; 0000006dH
  004bb	70		 DB	 112			; 00000070H
  004bc	5f		 DB	 95			; 0000005fH
  004bd	76		 DB	 118			; 00000076H
  004be	65		 DB	 101			; 00000065H
  004bf	72		 DB	 114			; 00000072H
  004c0	74		 DB	 116			; 00000074H
  004c1	65		 DB	 101			; 00000065H
  004c2	78		 DB	 120			; 00000078H
  004c3	65		 DB	 101			; 00000065H
  004c4	73		 DB	 115			; 00000073H
  004c5	00		 DB	 0
_RENDER_TexturedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_At
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp_node$2 = -8					; size = 4
_list$ = 8						; size = 4
_location$ = 12						; size = 4
_LIST_At PROC						; COMDAT

; 61   : void* LIST_At(const linkedList* const list, int location) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   : 	if (list->head) {

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	74 3e		 je	 SHORT $LN5@LIST_At

; 63   : 		listNode* tmp_node = list->head;

  00030	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00033	8b 08		 mov	 ecx, DWORD PTR [eax]
  00035	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx

; 64   : 		for (int i = 0; i < location; ++i) {

  00038	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0003f	eb 09		 jmp	 SHORT $LN4@LIST_At
$LN2@LIST_At:
  00041	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_At:
  0004a	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0004d	3b 45 0c	 cmp	 eax, DWORD PTR _location$[ebp]
  00050	7d 12		 jge	 SHORT $LN3@LIST_At

; 65   : 			if (tmp_node->next)

  00052	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00055	83 38 00	 cmp	 DWORD PTR [eax], 0
  00058	74 08		 je	 SHORT $LN7@LIST_At

; 66   : 				tmp_node = tmp_node->next;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx
$LN7@LIST_At:

; 67   : 			//else
; 68   : 			//	printf("element %d could not be found", location); return 2.0;
; 69   : 		}

  00062	eb dd		 jmp	 SHORT $LN2@LIST_At
$LN3@LIST_At:

; 70   : 		return tmp_node->data;

  00064	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00067	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006a	eb 04		 jmp	 SHORT $LN1@LIST_At

; 71   : 	}

  0006c	eb 02		 jmp	 SHORT $LN1@LIST_At
$LN5@LIST_At:

; 72   : 	else
; 73   : 		return NULL;

  0006e	33 c0		 xor	 eax, eax
$LN1@LIST_At:

; 74   : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_LIST_At ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_RemoveAt
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp_node$2 = -8					; size = 4
_list$ = 8						; size = 4
_location$ = 12						; size = 4
_remove_data$ = 16					; size = 1
_LIST_RemoveAt PROC					; COMDAT

; 38   : int LIST_RemoveAt(linkedList* list, int location, bool remove_data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   : 	if (list->head) {

  00028	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	0f 84 d8 00 00
	00		 je	 $LN5@LIST_Remov

; 40   : 		listNode* tmp_node = list->head;

  00034	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx

; 41   : 		for (int i = 0; i < location; ++i) {

  0003c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00043	eb 09		 jmp	 SHORT $LN4@LIST_Remov
$LN2@LIST_Remov:
  00045	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00048	83 c0 01	 add	 eax, 1
  0004b	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_Remov:
  0004e	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00051	3b 45 0c	 cmp	 eax, DWORD PTR _location$[ebp]
  00054	7d 12		 jge	 SHORT $LN3@LIST_Remov

; 42   : 			if (tmp_node->next)

  00056	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00059	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005c	74 08		 je	 SHORT $LN6@LIST_Remov

; 43   : 				tmp_node = tmp_node->next;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	89 4d f8	 mov	 DWORD PTR _tmp_node$2[ebp], ecx
$LN6@LIST_Remov:

; 44   : 			//else
; 45   : 			//	printf("element %d could not be found", location); return 1;
; 46   : 		}

  00066	eb dd		 jmp	 SHORT $LN2@LIST_Remov
$LN3@LIST_Remov:

; 47   : 		if (tmp_node->next && tmp_node->prev)

  00068	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0006b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0006e	74 26		 je	 SHORT $LN7@LIST_Remov
  00070	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  00073	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00077	74 1d		 je	 SHORT $LN7@LIST_Remov

; 48   : 			tmp_node->prev->next = tmp_node->next, tmp_node->next->prev = tmp_node->prev;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0007c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$2[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	89 01		 mov	 DWORD PTR [ecx], eax
  00086	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$2[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  0008e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00091	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00094	eb 3f		 jmp	 SHORT $LN8@LIST_Remov
$LN7@LIST_Remov:

; 49   : 		else if (list->head == tmp_node)

  00096	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	3b 4d f8	 cmp	 ecx, DWORD PTR _tmp_node$2[ebp]
  0009e	75 18		 jne	 SHORT $LN9@LIST_Remov

; 50   : 			list->head = tmp_node->next, tmp_node->next->prev = NULL;

  000a0	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$2[ebp]
  000a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a8	89 10		 mov	 DWORD PTR [eax], edx
  000aa	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  000b6	eb 1d		 jmp	 SHORT $LN8@LIST_Remov
$LN9@LIST_Remov:

; 51   : 		else if (!tmp_node->next)

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000bb	83 38 00	 cmp	 DWORD PTR [eax], 0
  000be	75 0e		 jne	 SHORT $LN11@LIST_Remov

; 52   : 			tmp_node->prev->next = NULL;

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c6	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  000cc	eb 07		 jmp	 SHORT $LN8@LIST_Remov
$LN11@LIST_Remov:

; 53   : 		else
; 54   : 			return 1;

  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	eb 39		 jmp	 SHORT $LN1@LIST_Remov
$LN8@LIST_Remov:

; 55   : 		if (remove_data)

  000d5	0f b6 45 10	 movzx	 eax, BYTE PTR _remove_data$[ebp]
  000d9	85 c0		 test	 eax, eax
  000db	74 19		 je	 SHORT $LN13@LIST_Remov

; 56   : 			free(tmp_node->data);

  000dd	8b f4		 mov	 esi, esp
  000df	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000e2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000e5	51		 push	 ecx
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000ec	83 c4 04	 add	 esp, 4
  000ef	3b f4		 cmp	 esi, esp
  000f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@LIST_Remov:

; 57   : 		free(tmp_node);

  000f6	8b f4		 mov	 esi, esp
  000f8	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$2[ebp]
  000fb	50		 push	 eax
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00102	83 c4 04	 add	 esp, 4
  00105	3b f4		 cmp	 esi, esp
  00107	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@LIST_Remov:

; 58   : 	}
; 59   : 	return 0;

  0010c	33 c0		 xor	 eax, eax
$LN1@LIST_Remov:

; 60   : }

  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi
  00110	5b		 pop	 ebx
  00111	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00117	3b ec		 cmp	 ebp, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
_LIST_RemoveAt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\linkedlist_h.h
;	COMDAT _LIST_AddElement
_TEXT	SEGMENT
_i$1 = -32						; size = 4
_tmp_node_travlist$2 = -20				; size = 4
_tmp_node$ = -8						; size = 4
_list$ = 8						; size = 4
_data$ = 12						; size = 4
_LIST_AddElement PROC					; COMDAT

; 16   : void LIST_AddElement(linkedList* list, void* data) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __03C282FB_linkedlist_h@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 17   : 	listNode* tmp_node = calloc(1, sizeof(listNode));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0c		 push	 12			; 0000000cH
  0002c	6a 01		 push	 1
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00034	83 c4 08	 add	 esp, 8
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	89 45 f8	 mov	 DWORD PTR _tmp_node$[ebp], eax

; 18   : 	tmp_node->data = data;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  00047	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 19   : 	if (!list->head)

  0004a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0004d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00050	75 1d		 jne	 SHORT $LN5@LIST_AddEl

; 20   : 		list->head = tmp_node, tmp_node->next = NULL, tmp_node->prev = NULL;

  00052	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  00058	89 08		 mov	 DWORD PTR [eax], ecx
  0005a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  0005d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00063	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00066	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  0006d	eb 7c		 jmp	 SHORT $LN6@LIST_AddEl
$LN5@LIST_AddEl:

; 21   : 	else { //travese the list until the end is found
; 22   : 		if (!list->head->next)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00077	75 21		 jne	 SHORT $LN7@LIST_AddEl

; 23   : 			tmp_node->prev = list->head, tmp_node->prev->next = tmp_node, tmp_node->next = NULL;

  00079	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00084	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00087	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008a	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  0008d	89 11		 mov	 DWORD PTR [ecx], edx
  0008f	8b 45 f8	 mov	 eax, DWORD PTR _tmp_node$[ebp]
  00092	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00098	eb 51		 jmp	 SHORT $LN6@LIST_AddEl
$LN7@LIST_AddEl:

; 24   : 		else {
; 25   : 			listNode* tmp_node_travlist = list->head;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	89 4d ec	 mov	 DWORD PTR _tmp_node_travlist$2[ebp], ecx

; 26   : 			for (int i = 0; i < list->count; ++i) {

  000a2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000a9	eb 09		 jmp	 SHORT $LN4@LIST_AddEl
$LN2@LIST_AddEl:
  000ab	8b 45 e0	 mov	 eax, DWORD PTR _i$1[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 e0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@LIST_AddEl:
  000b4	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000b7	8b 4d e0	 mov	 ecx, DWORD PTR _i$1[ebp]
  000ba	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000bd	7d 12		 jge	 SHORT $LN3@LIST_AddEl

; 27   : 				if (tmp_node_travlist->next)

  000bf	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000c2	83 38 00	 cmp	 DWORD PTR [eax], 0
  000c5	74 08		 je	 SHORT $LN9@LIST_AddEl

; 28   : 					tmp_node_travlist = tmp_node_travlist->next;

  000c7	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	89 4d ec	 mov	 DWORD PTR _tmp_node_travlist$2[ebp], ecx
$LN9@LIST_AddEl:

; 29   : 
; 30   : 					
; 31   : 			}

  000cf	eb da		 jmp	 SHORT $LN2@LIST_AddEl
$LN3@LIST_AddEl:

; 32   : 			tmp_node_travlist->next = tmp_node, tmp_node->prev = tmp_node_travlist, tmp_node->next = NULL;

  000d1	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000d4	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  000d7	89 08		 mov	 DWORD PTR [eax], ecx
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _tmp_node$[ebp]
  000dc	8b 45 ec	 mov	 eax, DWORD PTR _tmp_node_travlist$2[ebp]
  000df	89 42 04	 mov	 DWORD PTR [edx+4], eax
  000e2	8b 4d f8	 mov	 ecx, DWORD PTR _tmp_node$[ebp]
  000e5	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN6@LIST_AddEl:

; 33   : 		}
; 34   : 	
; 35   : 	}
; 36   : 	list->count += 1;

  000eb	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  000ee	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000f1	83 c1 01	 add	 ecx, 1
  000f4	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  000f7	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 37   : }

  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx
  000fd	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00103	3b ec		 cmp	 ebp, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
_LIST_AddElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\cam.h
;	COMDAT _glm_ortho
_TEXT	SEGMENT
_fn$ = -32						; size = 4
_tb$ = -20						; size = 4
_rl$ = -8						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_nearVal$ = 24						; size = 4
_farVal$ = 28						; size = 4
_dest$ = 32						; size = 4
_glm_ortho PROC						; COMDAT

; 105  :           mat4  dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __40246743_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 106  :   float rl, tb, fn;
; 107  : 
; 108  :   glm_mat4_zero(dest);

  00028	8b 45 20	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_zero
  00031	83 c4 04	 add	 esp, 4

; 109  : 
; 110  :   rl = 1.0f / (right  - left);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  00039	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _left$[ebp]
  0003e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00046	f3 0f 5e c8	 divss	 xmm1, xmm0
  0004a	f3 0f 11 4d f8	 movss	 DWORD PTR _rl$[ebp], xmm1

; 111  :   tb = 1.0f / (top    - bottom);

  0004f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00054	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bottom$[ebp]
  00059	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00061	f3 0f 5e c8	 divss	 xmm1, xmm0
  00065	f3 0f 11 4d ec	 movss	 DWORD PTR _tb$[ebp], xmm1

; 112  :   fn =-1.0f / (farVal - nearVal);

  0006a	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  0006f	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _nearVal$[ebp]
  00074	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0007c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00080	f3 0f 11 4d e0	 movss	 DWORD PTR _fn$[ebp], xmm1

; 113  : 
; 114  :   dest[0][0] = 2.0f * rl;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00092	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	6b c2 00	 imul	 eax, edx, 0
  000a5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 115  :   dest[1][1] = 2.0f * tb;

  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000b2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  000b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000bc	c1 e0 00	 shl	 eax, 0
  000bf	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000c2	b9 04 00 00 00	 mov	 ecx, 4
  000c7	c1 e1 00	 shl	 ecx, 0
  000ca	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 116  :   dest[2][2] = 2.0f * fn;

  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000d7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  000dc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000e1	d1 e0		 shl	 eax, 1
  000e3	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000e6	b9 04 00 00 00	 mov	 ecx, 4
  000eb	d1 e1		 shl	 ecx, 1
  000ed	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 117  :   dest[3][0] =-(right  + left)    * rl;

  000f2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  000f7	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _left$[ebp]
  000fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00103	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00108	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0010d	6b c8 03	 imul	 ecx, eax, 3
  00110	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00113	ba 04 00 00 00	 mov	 edx, 4
  00118	6b c2 00	 imul	 eax, edx, 0
  0011b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 118  :   dest[3][1] =-(top    + bottom)  * tb;

  00120	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00125	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _bottom$[ebp]
  0012a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00131	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  00136	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013b	6b c8 03	 imul	 ecx, eax, 3
  0013e	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00141	ba 04 00 00 00	 mov	 edx, 4
  00146	c1 e2 00	 shl	 edx, 0
  00149	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 119  :   dest[3][2] = (farVal + nearVal) * fn;

  0014e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00153	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _nearVal$[ebp]
  00158	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  0015d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00162	6b c8 03	 imul	 ecx, eax, 3
  00165	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00168	ba 04 00 00 00	 mov	 edx, 4
  0016d	d1 e2		 shl	 edx, 1
  0016f	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 120  :   dest[3][3] = 1.0f;

  00174	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00179	6b c8 03	 imul	 ecx, eax, 3
  0017c	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0017f	ba 04 00 00 00	 mov	 edx, 4
  00184	6b c2 03	 imul	 eax, edx, 3
  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0018f	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 121  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_glm_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_zero
_TEXT	SEGMENT
_t$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat4_zero PROC					; COMDAT

; 189  : glm_mat4_zero(mat4 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 190  :   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_ZERO_INIT;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 45 b0	 movss	 DWORD PTR _t$[ebp], xmm0
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 b4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 45 b8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 bc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+32], xmm0
  0008c	0f 57 c0	 xorps	 xmm0, xmm0
  0008f	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+36], xmm0
  00094	0f 57 c0	 xorps	 xmm0, xmm0
  00097	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+40], xmm0
  0009c	0f 57 c0	 xorps	 xmm0, xmm0
  0009f	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+44], xmm0
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+48], xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+52], xmm0
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+56], xmm0
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+60], xmm0

; 191  :   glm_mat4_copy(t, mat);

  000c4	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  000c7	50		 push	 eax
  000c8	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _glm_mat4_copy
  000d1	83 c4 08	 add	 esp, 8

; 192  : }

  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_z
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	8b e3		 mov	 esp, ebx
  000f6	5b		 pop	 ebx
  000f7	c3		 ret	 0
$LN5@glm_mat4_z:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN4@glm_mat4_z
$LN4@glm_mat4_z:
  00100	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00104	40 00 00 00	 DD	 64			; 00000040H
  00108	00 00 00 00	 DD	 $LN3@glm_mat4_z
$LN3@glm_mat4_z:
  0010c	74		 DB	 116			; 00000074H
  0010d	00		 DB	 0
_glm_mat4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_copy PROC					; COMDAT

; 123  : glm_mat4_copy(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  : #ifdef __AVX__
; 125  :   glmm_store256(dest[0], glmm_load256(mat[0]));
; 126  :   glmm_store256(dest[2], glmm_load256(mat[2]));
; 127  : #elif defined( __SSE__ ) || defined( __SSE2__ )
; 128  :   glmm_store(dest[0], glmm_load(mat[0]));

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00036	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00041	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 129  :   glmm_store(dest[1], glmm_load(mat[1]));

  00044	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00049	c1 e0 00	 shl	 eax, 0
  0004c	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0004f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00052	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00057	c1 e1 00	 shl	 ecx, 0
  0005a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 130  :   glmm_store(dest[2], glmm_load(mat[2]));

  00060	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00065	d1 e0		 shl	 eax, 1
  00067	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00072	d1 e1		 shl	 ecx, 1
  00074	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00077	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 131  :   glmm_store(dest[3], glmm_load(mat[3]));

  0007a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00085	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00088	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0008d	6b c2 03	 imul	 eax, edx, 3
  00090	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00093	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 132  : #elif defined(CGLM_NEON_FP)
; 133  :   vst1q_f32(dest[0], vld1q_f32(mat[0]));
; 134  :   vst1q_f32(dest[1], vld1q_f32(mat[1]));
; 135  :   vst1q_f32(dest[2], vld1q_f32(mat[2]));
; 136  :   vst1q_f32(dest[3], vld1q_f32(mat[3]));
; 137  : #else
; 138  :   glm_mat4_ucopy(mat, dest);
; 139  : #endif
; 140  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_mat4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\main.c
;	COMDAT _SDL_main
_TEXT	SEGMENT
tv628 = -484						; size = 4
tv615 = -484						; size = 4
tv622 = -480						; size = 4
tv609 = -480						; size = 4
_event_handle$ = -280					; size = 56
_key_input$ = -216					; size = 4
_loc$1 = -204						; size = 4
_shader_fragment$2 = -192				; size = 4
_shader_vertex$3 = -180					; size = 4
_shader_fragment$4 = -168				; size = 4
_shader_vertex$5 = -156					; size = 4
_ortho$ = -144						; size = 64
_format$ = -60						; size = 2
_channels$ = -48					; size = 4
_freq$ = -36						; size = 4
_i$6 = -24						; size = 4
_number_decoders$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_SDL_main PROC						; COMDAT

; 50   : int main(void) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 01 00
	00		 sub	 esp, 488		; 000001e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-488]
  00024	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __88262B53_main@c
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 51   : 	//Inititlze SDL stuff
; 52   : 	//TODO: rename some globals from "test" and choose better var names, also get controller support and haptic support before you start adding items and stuff
; 53   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);

  00044	6a 03		 push	 3
  00046	6a 11		 push	 17			; 00000011H
  00048	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  0004d	83 c4 08	 add	 esp, 8

; 54   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);

  00050	6a 03		 push	 3
  00052	6a 12		 push	 18			; 00000012H
  00054	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  00059	83 c4 08	 add	 esp, 8

; 55   : 	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_COMPATIBILITY);

  0005c	6a 02		 push	 2
  0005e	6a 15		 push	 21			; 00000015H
  00060	e8 00 00 00 00	 call	 _SDL_GL_SetAttribute
  00065	83 c4 08	 add	 esp, 8

; 56   : 	if (SDL_Init(SDL_INIT_AUDIO | SDL_INIT_HAPTIC | SDL_INIT_JOYSTICK)) {

  00068	68 10 12 00 00	 push	 4624			; 00001210H
  0006d	e8 00 00 00 00	 call	 _SDL_Init
  00072	83 c4 04	 add	 esp, 4
  00075	85 c0		 test	 eax, eax
  00077	74 13		 je	 SHORT $LN7@SDL_main

; 57   : 		printf("Couldn't inilize audio, %s", SDL_GetError());

  00079	e8 00 00 00 00	 call	 _SDL_GetError
  0007e	50		 push	 eax
  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HIPOOGBO@Couldn?8t?5inilize?5audio?0?5?$CFs@
  00084	e8 00 00 00 00	 call	 _printf
  00089	83 c4 08	 add	 esp, 8
$LN7@SDL_main:

; 58   : 	}
; 59   : 	if (TTF_Init() == -1) {

  0008c	e8 00 00 00 00	 call	 _TTF_Init
  00091	83 f8 ff	 cmp	 eax, -1
  00094	75 17		 jne	 SHORT $LN8@SDL_main

; 60   : 		puts("Failed to load SDL_TTF font library");

  00096	8b f4		 mov	 esi, esp
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NEDBEHFE@Failed?5to?5load?5SDL_TTF?5font?5lib@
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  000a3	83 c4 04	 add	 esp, 4
  000a6	3b f4		 cmp	 esi, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@SDL_main:

; 61   : 	}
; 62   : 	if ((Mix_Init(MIX_INIT_MP3) & MIX_INIT_MP3) != MIX_INIT_MP3) {

  000ad	6a 08		 push	 8
  000af	e8 00 00 00 00	 call	 _Mix_Init
  000b4	83 c4 04	 add	 esp, 4
  000b7	83 e0 08	 and	 eax, 8
  000ba	75 13		 jne	 SHORT $LN9@SDL_main

; 63   : 		printf("Failed to initilize mix, %s\n", Mix_GetError());

  000bc	e8 00 00 00 00	 call	 _SDL_GetError
  000c1	50		 push	 eax
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HFPLCCOC@Failed?5to?5initilize?5mix?0?5?$CFs?6@
  000c7	e8 00 00 00 00	 call	 _printf
  000cc	83 c4 08	 add	 esp, 8
$LN9@SDL_main:

; 64   : 	}
; 65   : 	//set up fonts, load them and turn them into surfaces here
; 66   : 	font_1 = TTF_OpenFont("resources/font_1.ttf", 50);

  000cf	6a 32		 push	 50			; 00000032H
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@IGFECFHO@resources?1font_1?4ttf@
  000d6	e8 00 00 00 00	 call	 _TTF_OpenFont
  000db	83 c4 08	 add	 esp, 8
  000de	a3 00 00 00 00	 mov	 DWORD PTR _font_1, eax

; 67   : 	wave_text = TTF_RenderText_Blended(font_1, "Wave:01", white);

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  000e8	50		 push	 eax
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_07BJPGHBBO@Wave?301@
  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _font_1
  000f4	51		 push	 ecx
  000f5	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fd	a3 00 00 00 00	 mov	 DWORD PTR _wave_text, eax

; 68   : 	overtime_text = TTF_RenderText_Blended(font_1, "OVERTIME", white);

  00102	a1 00 00 00 00	 mov	 eax, DWORD PTR _white
  00107	50		 push	 eax
  00108	68 00 00 00 00	 push	 OFFSET ??_C@_08CCCPFIL@OVERTIME@
  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _font_1
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011c	a3 00 00 00 00	 mov	 DWORD PTR _overtime_text, eax

; 69   : 	wave_text_quad.w = QUAD_TEXTURE_RECT_TEXT_CAL("Wave:01"), wave_text_quad.x = 0 - (QUAD_TEXTURE_RECT_TEXT_CAL("Wave:01") / 2);

  00121	68 00 00 00 00	 push	 OFFSET ??_C@_07BJPGHBBO@Wave?301@
  00126	e8 00 00 00 00	 call	 _strlen
  0012b	83 c4 04	 add	 esp, 4
  0012e	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv609[ebp], eax
  00134	f2 0f 2a 85 20
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv609[ebp]
  0013c	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR tv609[ebp]
  00142	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00145	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0014e	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00156	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015a	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _wave_text_quad+8, xmm0
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_07BJPGHBBO@Wave?301@
  00167	e8 00 00 00 00	 call	 _strlen
  0016c	83 c4 04	 add	 esp, 4
  0016f	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv615[ebp], eax
  00175	f2 0f 2a 85 1c
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv615[ebp]
  0017d	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR tv615[ebp]
  00183	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00186	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  0018f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00197	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  0019f	0f 57 c9	 xorps	 xmm1, xmm1
  001a2	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001a6	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001aa	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _wave_text_quad, xmm0

; 70   : 	overtime_quad.w = QUAD_TEXTURE_RECT_TEXT_CAL("OVERTIME"), overtime_quad.x = 0 - (QUAD_TEXTURE_RECT_TEXT_CAL("OVERTIME") / 2);

  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_08CCCPFIL@OVERTIME@
  001b7	e8 00 00 00 00	 call	 _strlen
  001bc	83 c4 04	 add	 esp, 4
  001bf	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv622[ebp], eax
  001c5	f2 0f 2a 85 20
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv622[ebp]
  001cd	8b 85 20 fe ff
	ff		 mov	 eax, DWORD PTR tv622[ebp]
  001d3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d6	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001df	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  001e7	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  001eb	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _overtime_quad+8, xmm0
  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_08CCCPFIL@OVERTIME@
  001f8	e8 00 00 00 00	 call	 _strlen
  001fd	83 c4 04	 add	 esp, 4
  00200	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv628[ebp], eax
  00206	f2 0f 2a 85 1c
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR tv628[ebp]
  0020e	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR tv628[ebp]
  00214	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00217	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00220	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3f9eb851eb851eb8
  00228	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4000000000000000
  00230	0f 57 c9	 xorps	 xmm1, xmm1
  00233	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00237	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0023b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _overtime_quad, xmm0

; 71   : 	//set up audio
; 72   : 	if(Mix_OpenAudio(22050, AUDIO_S16SYS, 2, 2048) < 0) {

  00243	68 00 08 00 00	 push	 2048			; 00000800H
  00248	6a 02		 push	 2
  0024a	68 10 80 00 00	 push	 32784			; 00008010H
  0024f	68 22 56 00 00	 push	 22050			; 00005622H
  00254	e8 00 00 00 00	 call	 _Mix_OpenAudio
  00259	83 c4 10	 add	 esp, 16			; 00000010H
  0025c	85 c0		 test	 eax, eax
  0025e	7d 13		 jge	 SHORT $LN10@SDL_main

; 73   : 		printf("Error opening audio device, %s\n", Mix_GetError());

  00260	e8 00 00 00 00	 call	 _SDL_GetError
  00265	50		 push	 eax
  00266	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@MFACDFMF@Error?5opening?5audio?5device?0?5?$CFs?6@
  0026b	e8 00 00 00 00	 call	 _printf
  00270	83 c4 08	 add	 esp, 8
$LN10@SDL_main:

; 74   : 	}
; 75   : 	printf("amount of channels: %d\n", Mix_AllocateChannels(32));

  00273	6a 20		 push	 32			; 00000020H
  00275	e8 00 00 00 00	 call	 _Mix_AllocateChannels
  0027a	83 c4 04	 add	 esp, 4
  0027d	50		 push	 eax
  0027e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NPJJGCKF@amount?5of?5channels?3?5?$CFd?6@
  00283	e8 00 00 00 00	 call	 _printf
  00288	83 c4 08	 add	 esp, 8

; 76   : 	//???
; 77   : 	int number_decoders = Mix_GetNumChunkDecoders();

  0028b	e8 00 00 00 00	 call	 _Mix_GetNumChunkDecoders
  00290	89 45 f4	 mov	 DWORD PTR _number_decoders$[ebp], eax

; 78   : 	for (int i = 0; i < number_decoders; ++i)

  00293	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  0029a	eb 09		 jmp	 SHORT $LN4@SDL_main
$LN2@SDL_main:
  0029c	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  0029f	83 c0 01	 add	 eax, 1
  002a2	89 45 e8	 mov	 DWORD PTR _i$6[ebp], eax
$LN4@SDL_main:
  002a5	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  002a8	3b 45 f4	 cmp	 eax, DWORD PTR _number_decoders$[ebp]
  002ab	7d 20		 jge	 SHORT $LN3@SDL_main

; 79   : 		printf("Sample chunk decoder %d is for %s\n", i, Mix_GetChunkDecoder(i));

  002ad	8b 45 e8	 mov	 eax, DWORD PTR _i$6[ebp]
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 _Mix_GetChunkDecoder
  002b6	83 c4 04	 add	 esp, 4
  002b9	50		 push	 eax
  002ba	8b 4d e8	 mov	 ecx, DWORD PTR _i$6[ebp]
  002bd	51		 push	 ecx
  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@EJFJAJJE@Sample?5chunk?5decoder?5?$CFd?5is?5for?5@
  002c3	e8 00 00 00 00	 call	 _printf
  002c8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002cb	eb cf		 jmp	 SHORT $LN2@SDL_main
$LN3@SDL_main:

; 80   : 	//set up any audio loading here
; 81   : 	overtime_bell_audio = Mix_LoadWAV("resources/overtime_bell.wav");

  002cd	6a 01		 push	 1
  002cf	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  002d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BIBBAEFM@resources?1overtime_bell?4wav@
  002d9	e8 00 00 00 00	 call	 _SDL_RWFromFile
  002de	83 c4 08	 add	 esp, 8
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 _Mix_LoadWAV_RW
  002e7	83 c4 08	 add	 esp, 8
  002ea	a3 00 00 00 00	 mov	 DWORD PTR _overtime_bell_audio, eax

; 82   : 	Mix_VolumeChunk(overtime_bell_audio, 64);

  002ef	6a 40		 push	 64			; 00000040H
  002f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _overtime_bell_audio
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 _Mix_VolumeChunk
  002fc	83 c4 08	 add	 esp, 8

; 83   : 	//print out the current hardware format
; 84   : 	int freq, channels;
; 85   : 	Uint16 format;
; 86   : 	if (Mix_QuerySpec(&freq, &format, &channels)) {

  002ff	8d 45 d0	 lea	 eax, DWORD PTR _channels$[ebp]
  00302	50		 push	 eax
  00303	8d 4d c4	 lea	 ecx, DWORD PTR _format$[ebp]
  00306	51		 push	 ecx
  00307	8d 55 dc	 lea	 edx, DWORD PTR _freq$[ebp]
  0030a	52		 push	 edx
  0030b	e8 00 00 00 00	 call	 _Mix_QuerySpec
  00310	83 c4 0c	 add	 esp, 12			; 0000000cH
  00313	85 c0		 test	 eax, eax
  00315	74 1c		 je	 SHORT $LN11@SDL_main

; 87   : 		printf("Frequerncy:%d, audio format:%x, number of channels:%d\n", freq, format, channels);

  00317	8b 45 d0	 mov	 eax, DWORD PTR _channels$[ebp]
  0031a	50		 push	 eax
  0031b	0f b7 4d c4	 movzx	 ecx, WORD PTR _format$[ebp]
  0031f	51		 push	 ecx
  00320	8b 55 dc	 mov	 edx, DWORD PTR _freq$[ebp]
  00323	52		 push	 edx
  00324	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@KMMOBPG@Frequerncy?3?$CFd?0?5audio?5format?3?$CFx?0@
  00329	e8 00 00 00 00	 call	 _printf
  0032e	83 c4 10	 add	 esp, 16			; 00000010H

; 88   : 	}

  00331	eb 13		 jmp	 SHORT $LN12@SDL_main
$LN11@SDL_main:

; 89   : 	else
; 90   : 	{
; 91   : 		printf("Something bad happened...%s\n", Mix_GetError());

  00333	e8 00 00 00 00	 call	 _SDL_GetError
  00338	50		 push	 eax
  00339	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EIBEKPEG@Something?5bad?5happened?4?4?4?$CFs?6@
  0033e	e8 00 00 00 00	 call	 _printf
  00343	83 c4 08	 add	 esp, 8
$LN12@SDL_main:

; 92   : 	}
; 93   : 	window = SDL_CreateWindow("SpaceMonster", 0, 100, WINDOW_WIDTH_START, WINDOW_HEIGHT_START, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);

  00346	6a 22		 push	 34			; 00000022H
  00348	68 d0 02 00 00	 push	 720			; 000002d0H
  0034d	68 00 05 00 00	 push	 1280			; 00000500H
  00352	6a 64		 push	 100			; 00000064H
  00354	6a 00		 push	 0
  00356	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CJFNGLCH@SpaceMonster@
  0035b	e8 00 00 00 00	 call	 _SDL_CreateWindow
  00360	83 c4 18	 add	 esp, 24			; 00000018H
  00363	a3 00 00 00 00	 mov	 DWORD PTR _window, eax

; 94   : 	if (!window) {

  00368	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _window, 0
  0036f	75 17		 jne	 SHORT $LN13@SDL_main

; 95   : 		puts("Window creation failed!");

  00371	8b f4		 mov	 esi, esp
  00373	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LCLIEIFC@Window?5creation?5failed?$CB@
  00378	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  0037e	83 c4 04	 add	 esp, 4
  00381	3b f4		 cmp	 esi, esp
  00383	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@SDL_main:

; 96   : 	}
; 97   :     glcontext = SDL_GL_CreateContext(window);

  00388	a1 00 00 00 00	 mov	 eax, DWORD PTR _window
  0038d	50		 push	 eax
  0038e	e8 00 00 00 00	 call	 _SDL_GL_CreateContext
  00393	83 c4 04	 add	 esp, 4
  00396	a3 00 00 00 00	 mov	 DWORD PTR _glcontext, eax

; 98   : 	if (!glcontext) {

  0039b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _glcontext, 0
  003a2	75 17		 jne	 SHORT $LN14@SDL_main

; 99   : 		puts("SDL/OPENGL thing failed!");

  003a4	8b f4		 mov	 esi, esp
  003a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DJNHDOCB@SDL?1OPENGL?5thing?5failed?$CB@
  003ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  003b1	83 c4 04	 add	 esp, 4
  003b4	3b f4		 cmp	 esi, esp
  003b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN14@SDL_main:

; 100  : 	}
; 101  : 	if (!gladLoadGL()) {

  003bb	e8 00 00 00 00	 call	 _gladLoadGL
  003c0	85 c0		 test	 eax, eax
  003c2	75 17		 jne	 SHORT $LN15@SDL_main

; 102  : 		puts("Failed to load openGL");

  003c4	8b f4		 mov	 esi, esp
  003c6	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@EDNFGKPI@Failed?5to?5load?5openGL@
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__puts
  003d1	83 c4 04	 add	 esp, 4
  003d4	3b f4		 cmp	 esi, esp
  003d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN15@SDL_main:

; 103  : 	}
; 104  : 	glEnable(GL_BLEND);

  003db	8b f4		 mov	 esi, esp
  003dd	68 e2 0b 00 00	 push	 3042			; 00000be2H
  003e2	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glEnable
  003e8	3b f4		 cmp	 esi, esp
  003ea	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  : 	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

  003ef	8b f4		 mov	 esi, esp
  003f1	68 03 03 00 00	 push	 771			; 00000303H
  003f6	68 02 03 00 00	 push	 770			; 00000302H
  003fb	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBlendFunc
  00401	3b f4		 cmp	 esi, esp
  00403	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  : 	glViewport(0, 0, WINDOW_WIDTH_START, WINDOW_HEIGHT_START);

  00408	8b f4		 mov	 esi, esp
  0040a	68 d0 02 00 00	 push	 720			; 000002d0H
  0040f	68 00 05 00 00	 push	 1280			; 00000500H
  00414	6a 00		 push	 0
  00416	6a 00		 push	 0
  00418	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glViewport
  0041e	3b f4		 cmp	 esi, esp
  00420	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 107  : 	glOrtho(0, WINDOW_WIDTH_START, 0, WINDOW_HEIGHT_START, 1.0, -1.0);

  00425	8b f4		 mov	 esi, esp
  00427	83 ec 08	 sub	 esp, 8
  0042a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  00432	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00437	83 ec 08	 sub	 esp, 8
  0043a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00442	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00447	83 ec 08	 sub	 esp, 8
  0044a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4086800000000000
  00452	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00457	83 ec 08	 sub	 esp, 8
  0045a	0f 57 c0	 xorps	 xmm0, xmm0
  0045d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00462	83 ec 08	 sub	 esp, 8
  00465	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4094000000000000
  0046d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00472	83 ec 08	 sub	 esp, 8
  00475	0f 57 c0	 xorps	 xmm0, xmm0
  00478	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0047d	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glOrtho
  00483	3b f4		 cmp	 esi, esp
  00485	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 108  : 	mat4 ortho;
; 109  : 	glm_ortho(0, WINDOW_WIDTH_START, 0, WINDOW_HEIGHT_START, 1.0, -1.0, ortho);

  0048a	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ortho$[ebp]
  00490	50		 push	 eax
  00491	51		 push	 ecx
  00492	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0049a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049f	51		 push	 ecx
  004a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ad	51		 push	 ecx
  004ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44340000
  004b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bb	51		 push	 ecx
  004bc	0f 57 c0	 xorps	 xmm0, xmm0
  004bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c4	51		 push	 ecx
  004c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44a00000
  004cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d2	51		 push	 ecx
  004d3	0f 57 c0	 xorps	 xmm0, xmm0
  004d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004db	e8 00 00 00 00	 call	 _glm_ortho
  004e0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 110  : 	if (glGetError()) {

  004e3	8b f4		 mov	 esi, esp
  004e5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  004eb	3b f4		 cmp	 esi, esp
  004ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f2	85 c0		 test	 eax, eax
  004f4	74 1d		 je	 SHORT $LN16@SDL_main

; 111  : 		printf("Failed to initilize openGL, %x", glGetError());

  004f6	8b f4		 mov	 esi, esp
  004f8	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  004fe	3b f4		 cmp	 esi, esp
  00500	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00505	50		 push	 eax
  00506	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MBIOJKGI@Failed?5to?5initilize?5openGL?0?5?$CFx@
  0050b	e8 00 00 00 00	 call	 _printf
  00510	83 c4 08	 add	 esp, 8
$LN16@SDL_main:

; 112  : 	}
; 113  : 	shader_texturedobj = glCreateProgram();

  00513	8b f4		 mov	 esi, esp
  00515	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateProgram
  0051b	3b f4		 cmp	 esi, esp
  0051d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00522	a3 00 00 00 00	 mov	 DWORD PTR _shader_texturedobj, eax

; 114  : 	shader_colored = glCreateProgram();

  00527	8b f4		 mov	 esi, esp
  00529	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glCreateProgram
  0052f	3b f4		 cmp	 esi, esp
  00531	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00536	a3 00 00 00 00	 mov	 DWORD PTR _shader_colored, eax

; 115  : 	{
; 116  : 		GLint shader_vertex;
; 117  : 		GLint shader_fragment;
; 118  : 		shader_vertex = CompileShader("vertex1.txt", GL_VERTEX_SHADER);

  0053b	68 31 8b 00 00	 push	 35633			; 00008b31H
  00540	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DCJKCHKN@vertex1?4txt@
  00545	e8 00 00 00 00	 call	 _CompileShader
  0054a	83 c4 08	 add	 esp, 8
  0054d	89 85 64 ff ff
	ff		 mov	 DWORD PTR _shader_vertex$5[ebp], eax

; 119  : 		shader_fragment = CompileShader("fragment1.txt", GL_FRAGMENT_SHADER);

  00553	68 30 8b 00 00	 push	 35632			; 00008b30H
  00558	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OBHLNCJC@fragment1?4txt@
  0055d	e8 00 00 00 00	 call	 _CompileShader
  00562	83 c4 08	 add	 esp, 8
  00565	89 85 58 ff ff
	ff		 mov	 DWORD PTR _shader_fragment$4[ebp], eax

; 120  : 		glAttachShader(shader_texturedobj, shader_vertex);

  0056b	8b f4		 mov	 esi, esp
  0056d	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$5[ebp]
  00573	50		 push	 eax
  00574	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_texturedobj
  0057a	51		 push	 ecx
  0057b	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  00581	3b f4		 cmp	 esi, esp
  00583	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 121  : 		glAttachShader(shader_texturedobj, shader_fragment);

  00588	8b f4		 mov	 esi, esp
  0058a	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$4[ebp]
  00590	50		 push	 eax
  00591	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_texturedobj
  00597	51		 push	 ecx
  00598	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  0059e	3b f4		 cmp	 esi, esp
  005a0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 122  : 		glDeleteShader(shader_vertex);

  005a5	8b f4		 mov	 esi, esp
  005a7	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$5[ebp]
  005ad	50		 push	 eax
  005ae	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  005b4	3b f4		 cmp	 esi, esp
  005b6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  : 		glDeleteShader(shader_fragment);

  005bb	8b f4		 mov	 esi, esp
  005bd	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$4[ebp]
  005c3	50		 push	 eax
  005c4	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  005ca	3b f4		 cmp	 esi, esp
  005cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 124  : 	}        
; 125  : 	{
; 126  : 		GLint shader_vertex;
; 127  : 		GLint shader_fragment;
; 128  : 		shader_vertex = CompileShader("vertex2.txt", GL_VERTEX_SHADER);

  005d1	68 31 8b 00 00	 push	 35633			; 00008b31H
  005d6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LEAOFFAD@vertex2?4txt@
  005db	e8 00 00 00 00	 call	 _CompileShader
  005e0	83 c4 08	 add	 esp, 8
  005e3	89 85 4c ff ff
	ff		 mov	 DWORD PTR _shader_vertex$3[ebp], eax

; 129  : 		shader_fragment = CompileShader("fragment2.txt", GL_FRAGMENT_SHADER);

  005e9	68 30 8b 00 00	 push	 35632			; 00008b30H
  005ee	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GHOPKADM@fragment2?4txt@
  005f3	e8 00 00 00 00	 call	 _CompileShader
  005f8	83 c4 08	 add	 esp, 8
  005fb	89 85 40 ff ff
	ff		 mov	 DWORD PTR _shader_fragment$2[ebp], eax

; 130  : 		glAttachShader(shader_colored, shader_vertex);

  00601	8b f4		 mov	 esi, esp
  00603	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$3[ebp]
  00609	50		 push	 eax
  0060a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_colored
  00610	51		 push	 ecx
  00611	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  00617	3b f4		 cmp	 esi, esp
  00619	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 131  : 		glAttachShader(shader_colored, shader_fragment);

  0061e	8b f4		 mov	 esi, esp
  00620	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$2[ebp]
  00626	50		 push	 eax
  00627	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _shader_colored
  0062d	51		 push	 ecx
  0062e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glAttachShader
  00634	3b f4		 cmp	 esi, esp
  00636	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 132  : 		glDeleteShader(shader_vertex);

  0063b	8b f4		 mov	 esi, esp
  0063d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _shader_vertex$3[ebp]
  00643	50		 push	 eax
  00644	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  0064a	3b f4		 cmp	 esi, esp
  0064c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 133  : 		glDeleteShader(shader_fragment);

  00651	8b f4		 mov	 esi, esp
  00653	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _shader_fragment$2[ebp]
  00659	50		 push	 eax
  0065a	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDeleteShader
  00660	3b f4		 cmp	 esi, esp
  00662	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 134  : 	}
; 135  : 	glLinkProgram(shader_texturedobj);

  00667	8b f4		 mov	 esi, esp
  00669	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0066e	50		 push	 eax
  0066f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLinkProgram
  00675	3b f4		 cmp	 esi, esp
  00677	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 136  : 	glLinkProgram(shader_colored);

  0067c	8b f4		 mov	 esi, esp
  0067e	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  00683	50		 push	 eax
  00684	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glLinkProgram
  0068a	3b f4		 cmp	 esi, esp
  0068c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 137  : 	if (glGetError()) {

  00691	8b f4		 mov	 esi, esp
  00693	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00699	3b f4		 cmp	 esi, esp
  0069b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006a0	85 c0		 test	 eax, eax
  006a2	74 1d		 je	 SHORT $LN17@SDL_main

; 138  : 		printf("Failed to initilize shaders, %x", glGetError());

  006a4	8b f4		 mov	 esi, esp
  006a6	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  006ac	3b f4		 cmp	 esi, esp
  006ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006b3	50		 push	 eax
  006b4	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NDBJKMP@Failed?5to?5initilize?5shaders?0?5?$CFx@
  006b9	e8 00 00 00 00	 call	 _printf
  006be	83 c4 08	 add	 esp, 8
$LN17@SDL_main:

; 139  : 	}
; 140  : 	//setting global light
; 141  : 	{
; 142  : 		glUseProgram(shader_colored);

  006c1	8b f4		 mov	 esi, esp
  006c3	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  006c8	50		 push	 eax
  006c9	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  006cf	3b f4		 cmp	 esi, esp
  006d1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 143  : 		GLint loc = glGetUniformLocation(shader_colored, "global_light");

  006d6	8b f4		 mov	 esi, esp
  006d8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OBNOHIMB@global_light@
  006dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_colored
  006e2	50		 push	 eax
  006e3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetUniformLocation
  006e9	3b f4		 cmp	 esi, esp
  006eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006f0	89 85 34 ff ff
	ff		 mov	 DWORD PTR _loc$1[ebp], eax

; 144  : 		glUniform3f(loc, 1, 1, 1);

  006f6	8b f4		 mov	 esi, esp
  006f8	51		 push	 ecx
  006f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00701	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00706	51		 push	 ecx
  00707	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0070f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00714	51		 push	 ecx
  00715	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0071d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00722	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _loc$1[ebp]
  00728	50		 push	 eax
  00729	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUniform3f
  0072f	3b f4		 cmp	 esi, esp
  00731	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 145  : 		glUseProgram(shader_texturedobj);

  00736	8b f4		 mov	 esi, esp
  00738	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  0073d	50		 push	 eax
  0073e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  00744	3b f4		 cmp	 esi, esp
  00746	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 146  : 		loc = glGetUniformLocation(shader_texturedobj, "global_light");

  0074b	8b f4		 mov	 esi, esp
  0074d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OBNOHIMB@global_light@
  00752	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  00757	50		 push	 eax
  00758	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetUniformLocation
  0075e	3b f4		 cmp	 esi, esp
  00760	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00765	89 85 34 ff ff
	ff		 mov	 DWORD PTR _loc$1[ebp], eax

; 147  : 		glUniform3f(loc, 1, 1, 1);

  0076b	8b f4		 mov	 esi, esp
  0076d	51		 push	 ecx
  0076e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00776	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077b	51		 push	 ecx
  0077c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00784	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00789	51		 push	 ecx
  0078a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00792	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00797	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _loc$1[ebp]
  0079d	50		 push	 eax
  0079e	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUniform3f
  007a4	3b f4		 cmp	 esi, esp
  007a6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 148  : 		if (glGetError()) {

  007ab	8b f4		 mov	 esi, esp
  007ad	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  007b3	3b f4		 cmp	 esi, esp
  007b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007ba	85 c0		 test	 eax, eax
  007bc	74 1d		 je	 SHORT $LN18@SDL_main

; 149  : 			printf("Failed to initilize shader uniforms, %x", glGetError());

  007be	8b f4		 mov	 esi, esp
  007c0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  007c6	3b f4		 cmp	 esi, esp
  007c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007cd	50		 push	 eax
  007ce	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@EBIBHBAO@Failed?5to?5initilize?5shader?5unif@
  007d3	e8 00 00 00 00	 call	 _printf
  007d8	83 c4 08	 add	 esp, 8
$LN18@SDL_main:

; 150  : 		}
; 151  : 		//unless you need it for somereason
; 152  : 		//GLint tex0 = glGetUniformLocation(shader_texturedobj, "Texture0");
; 153  : 		//GLint tex1 = glGetUniformLocation(shader_texturedobj, "Texture1");
; 154  : 		//glUniform1i(tex0, 0);
; 155  : 		//glUniform1i(tex1, 1);
; 156  : 	}
; 157  : 	glUseProgram(shader_texturedobj);

  007db	8b f4		 mov	 esi, esp
  007dd	a1 00 00 00 00	 mov	 eax, DWORD PTR _shader_texturedobj
  007e2	50		 push	 eax
  007e3	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glUseProgram
  007e9	3b f4		 cmp	 esi, esp
  007eb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 158  : 	Init_GL();

  007f0	e8 00 00 00 00	 call	 _Init_GL

; 159  : 	GAME_WaveInit();

  007f5	e8 00 00 00 00	 call	 _GAME_WaveInit

; 160  : 	//other misc texture init
; 161  : 	player_quad.x = -1.0, player_quad.y = 1.0, player_quad.w = 0.1, player_quad.h = 0.2;

  007fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00802	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
  0080a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00812	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
  0081a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00822	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR _player_quad+8, xmm0
  0082a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00832	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR _player_quad+12, xmm0

; 162  : 	player_quad.textid = texture[0];

  0083a	b8 04 00 00 00	 mov	 eax, 4
  0083f	6b c8 00	 imul	 ecx, eax, 0
  00842	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  00848	89 15 10 00 00
	00		 mov	 DWORD PTR _player_quad+16, edx

; 163  : 	wave_text_quad.textid = texture[3];

  0084e	b8 04 00 00 00	 mov	 eax, 4
  00853	6b c8 03	 imul	 ecx, eax, 3
  00856	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _texture[ecx]
  0085c	89 15 10 00 00
	00		 mov	 DWORD PTR _wave_text_quad+16, edx

; 164  : 	wave_num[0] = '0', wave_num[1] = '1';

  00862	b8 01 00 00 00	 mov	 eax, 1
  00867	6b c8 00	 imul	 ecx, eax, 0
  0086a	c6 81 00 00 00
	00 30		 mov	 BYTE PTR _wave_num[ecx], 48 ; 00000030H
  00871	ba 01 00 00 00	 mov	 edx, 1
  00876	c1 e2 00	 shl	 edx, 0
  00879	c6 82 00 00 00
	00 31		 mov	 BYTE PTR _wave_num[edx], 49 ; 00000031H

; 165  : 	overtime_quad.textid = texture[4];

  00880	b8 04 00 00 00	 mov	 eax, 4
  00885	c1 e0 02	 shl	 eax, 2
  00888	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  0088e	89 0d 10 00 00
	00		 mov	 DWORD PTR _overtime_quad+16, ecx

; 166  : 	glClearColor(0, 0, 0, 1);

  00894	8b f4		 mov	 esi, esp
  00896	51		 push	 ecx
  00897	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0089f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a4	51		 push	 ecx
  008a5	0f 57 c0	 xorps	 xmm0, xmm0
  008a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ad	51		 push	 ecx
  008ae	0f 57 c0	 xorps	 xmm0, xmm0
  008b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b6	51		 push	 ecx
  008b7	0f 57 c0	 xorps	 xmm0, xmm0
  008ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008bf	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glClearColor
  008c5	3b f4		 cmp	 esi, esp
  008c7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 167  : 	//Stuff that needs to be outside of the while loop
; 168  : 	Uint8* key_input = SDL_GetKeyboardState(NULL);

  008cc	6a 00		 push	 0
  008ce	e8 00 00 00 00	 call	 _SDL_GetKeyboardState
  008d3	83 c4 04	 add	 esp, 4
  008d6	89 85 28 ff ff
	ff		 mov	 DWORD PTR _key_input$[ebp], eax
$LN5@SDL_main:

; 169  : 	SDL_Event event_handle;
; 170  : 	while (1) {

  008dc	b8 01 00 00 00	 mov	 eax, 1
  008e1	85 c0		 test	 eax, eax
  008e3	0f 84 05 07 00
	00		 je	 $SHUTDOWN$51

; 171  : 		start = clock();

  008e9	8b f4		 mov	 esi, esp
  008eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  008f1	3b f4		 cmp	 esi, esp
  008f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008f8	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  008fc	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _start, xmm0

; 172  : 		if (SDL_PollEvent(&event_handle)) {

  00904	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _event_handle$[ebp]
  0090a	50		 push	 eax
  0090b	e8 00 00 00 00	 call	 _SDL_PollEvent
  00910	83 c4 04	 add	 esp, 4
  00913	85 c0		 test	 eax, eax
  00915	0f 84 27 01 00
	00		 je	 $LN22@SDL_main

; 173  : 			if (event_handle.type == SDL_WINDOWEVENT) {

  0091b	81 bd e8 fe ff
	ff 00 02 00 00	 cmp	 DWORD PTR _event_handle$[ebp], 512 ; 00000200H
  00925	0f 85 17 01 00
	00		 jne	 $LN22@SDL_main

; 174  : 				if (event_handle.window.event == SDL_WINDOWEVENT_CLOSE) {

  0092b	0f b6 85 f4 fe
	ff ff		 movzx	 eax, BYTE PTR _event_handle$[ebp+12]
  00932	83 f8 0e	 cmp	 eax, 14			; 0000000eH
  00935	75 05		 jne	 SHORT $LN21@SDL_main

; 175  : 					goto SHUTDOWN;

  00937	e9 b2 06 00 00	 jmp	 $SHUTDOWN$51
$LN21@SDL_main:

; 176  : 				}
; 177  : 				if (event_handle.window.event == SDL_WINDOWEVENT_RESIZED) {

  0093c	0f b6 85 f4 fe
	ff ff		 movzx	 eax, BYTE PTR _event_handle$[ebp+12]
  00943	83 f8 05	 cmp	 eax, 5
  00946	0f 85 f6 00 00
	00		 jne	 $LN22@SDL_main

; 178  : 					glViewport(0, 0, event_handle.window.data1, event_handle.window.data2);

  0094c	8b f4		 mov	 esi, esp
  0094e	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _event_handle$[ebp+20]
  00954	50		 push	 eax
  00955	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _event_handle$[ebp+16]
  0095b	51		 push	 ecx
  0095c	6a 00		 push	 0
  0095e	6a 00		 push	 0
  00960	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glViewport
  00966	3b f4		 cmp	 esi, esp
  00968	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 179  : 					glOrtho(0, event_handle.window.data1, 0, event_handle.window.data2, 1.0, -1.0);

  0096d	8b f4		 mov	 esi, esp
  0096f	83 ec 08	 sub	 esp, 8
  00972	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  0097a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0097f	83 ec 08	 sub	 esp, 8
  00982	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0098a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0098f	f2 0f 2a 85 fc
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR _event_handle$[ebp+20]
  00997	83 ec 08	 sub	 esp, 8
  0099a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0099f	83 ec 08	 sub	 esp, 8
  009a2	0f 57 c0	 xorps	 xmm0, xmm0
  009a5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009aa	f2 0f 2a 85 f8
	fe ff ff	 cvtsi2sd xmm0, DWORD PTR _event_handle$[ebp+16]
  009b2	83 ec 08	 sub	 esp, 8
  009b5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009ba	83 ec 08	 sub	 esp, 8
  009bd	0f 57 c0	 xorps	 xmm0, xmm0
  009c0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009c5	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glOrtho
  009cb	3b f4		 cmp	 esi, esp
  009cd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 180  : 					glm_ortho(0, event_handle.window.data1, 0, event_handle.window.data2, 1.0, -1.0, ortho);

  009d2	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _ortho$[ebp]
  009d8	50		 push	 eax
  009d9	51		 push	 ecx
  009da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e7	51		 push	 ecx
  009e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  009f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f5	f3 0f 2a 85 fc
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _event_handle$[ebp+20]
  009fd	51		 push	 ecx
  009fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a03	51		 push	 ecx
  00a04	0f 57 c0	 xorps	 xmm0, xmm0
  00a07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0c	f3 0f 2a 85 f8
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _event_handle$[ebp+16]
  00a14	51		 push	 ecx
  00a15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1a	51		 push	 ecx
  00a1b	0f 57 c0	 xorps	 xmm0, xmm0
  00a1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a23	e8 00 00 00 00	 call	 _glm_ortho
  00a28	83 c4 1c	 add	 esp, 28			; 0000001cH

; 181  : 					window_width = event_handle.window.data1, window_height = event_handle.window.data2;

  00a2b	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _event_handle$[ebp+16]
  00a31	a3 00 00 00 00	 mov	 DWORD PTR _window_width, eax
  00a36	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _event_handle$[ebp+20]
  00a3c	89 0d 00 00 00
	00		 mov	 DWORD PTR _window_height, ecx
$LN22@SDL_main:

; 182  : 				}
; 183  : 			}
; 184  : 		}
; 185  : 
; 186  : 		glClear(GL_COLOR_BUFFER_BIT);

  00a42	8b f4		 mov	 esi, esp
  00a44	68 00 40 00 00	 push	 16384			; 00004000H
  00a49	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glClear
  00a4f	3b f4		 cmp	 esi, esp
  00a51	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 187  : 		//cycle the background
; 188  : 		background_vertexes[6] = background_vertexes[6] + 0.5 * delta_time, background_vertexes[14] = background_vertexes[14] + 0.5 * delta_time;

  00a56	b8 04 00 00 00	 mov	 eax, 4
  00a5b	6b c8 06	 imul	 ecx, eax, 6
  00a5e	f3 0f 5a 81 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[ecx]
  00a66	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00a6e	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00a76	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00a7a	ba 04 00 00 00	 mov	 edx, 4
  00a7f	6b c2 06	 imul	 eax, edx, 6
  00a82	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00a86	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00a8e	b9 04 00 00 00	 mov	 ecx, 4
  00a93	6b d1 0e	 imul	 edx, ecx, 14
  00a96	f3 0f 5a 82 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[edx]
  00a9e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00aa6	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00aae	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00ab2	b8 04 00 00 00	 mov	 eax, 4
  00ab7	6b c8 0e	 imul	 ecx, eax, 14
  00aba	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00abe	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0

; 189  : 		background_vertexes[22] = background_vertexes[22] + 0.5 * delta_time, background_vertexes[30] = background_vertexes[30] + 0.5 * delta_time;

  00ac6	b8 04 00 00 00	 mov	 eax, 4
  00acb	6b c8 16	 imul	 ecx, eax, 22
  00ace	f3 0f 5a 81 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[ecx]
  00ad6	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00ade	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00ae6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00aea	ba 04 00 00 00	 mov	 edx, 4
  00aef	6b c2 16	 imul	 eax, edx, 22
  00af2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00af6	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00afe	b9 04 00 00 00	 mov	 ecx, 4
  00b03	6b d1 1e	 imul	 edx, ecx, 30
  00b06	f3 0f 5a 82 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _background_vertexes[edx]
  00b0e	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR _delta_time
  00b16	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00b1e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b22	b8 04 00 00 00	 mov	 eax, 4
  00b27	6b c8 1e	 imul	 ecx, eax, 30
  00b2a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00b2e	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0

; 190  : 		if (background_vertexes[6] > 1)

  00b36	b8 04 00 00 00	 mov	 eax, 4
  00b3b	6b c8 06	 imul	 ecx, eax, 6
  00b3e	f3 0f 10 81 00
	00 00 00	 movss	 xmm0, DWORD PTR _background_vertexes[ecx]
  00b46	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00b4d	76 56		 jbe	 SHORT $LN23@SDL_main

; 191  : 			background_vertexes[6] = 0, background_vertexes[14] = 1, background_vertexes[22] = 1, background_vertexes[30] = 0;

  00b4f	b8 04 00 00 00	 mov	 eax, 4
  00b54	6b c8 06	 imul	 ecx, eax, 6
  00b57	0f 57 c0	 xorps	 xmm0, xmm0
  00b5a	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0
  00b62	ba 04 00 00 00	 mov	 edx, 4
  00b67	6b c2 0e	 imul	 eax, edx, 14
  00b6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b72	f3 0f 11 80 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[eax], xmm0
  00b7a	b9 04 00 00 00	 mov	 ecx, 4
  00b7f	6b d1 16	 imul	 edx, ecx, 22
  00b82	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b8a	f3 0f 11 82 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[edx], xmm0
  00b92	b8 04 00 00 00	 mov	 eax, 4
  00b97	6b c8 1e	 imul	 ecx, eax, 30
  00b9a	0f 57 c0	 xorps	 xmm0, xmm0
  00b9d	f3 0f 11 81 00
	00 00 00	 movss	 DWORD PTR _background_vertexes[ecx], xmm0
$LN23@SDL_main:

; 192  : 		glBufferSubData(GL_ARRAY_BUFFER, NULL, 32 * sizeof(float), background_vertexes);

  00ba5	8b f4		 mov	 esi, esp
  00ba7	68 00 00 00 00	 push	 OFFSET _background_vertexes
  00bac	68 80 00 00 00	 push	 128			; 00000080H
  00bb1	6a 00		 push	 0
  00bb3	68 92 88 00 00	 push	 34962			; 00008892H
  00bb8	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBufferSubData
  00bbe	3b f4		 cmp	 esi, esp
  00bc0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 193  : 		glBindTexture(GL_TEXTURE_2D, texture[1]);

  00bc5	b8 04 00 00 00	 mov	 eax, 4
  00bca	c1 e0 00	 shl	 eax, 0
  00bcd	8b f4		 mov	 esi, esp
  00bcf	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _texture[eax]
  00bd5	51		 push	 ecx
  00bd6	68 e1 0d 00 00	 push	 3553			; 00000de1H
  00bdb	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glBindTexture
  00be1	3b f4		 cmp	 esi, esp
  00be3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 194  : 		glDrawArrays(GL_QUADS, 0, 4);

  00be8	8b f4		 mov	 esi, esp
  00bea	6a 04		 push	 4
  00bec	6a 00		 push	 0
  00bee	6a 07		 push	 7
  00bf0	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glDrawArrays
  00bf6	3b f4		 cmp	 esi, esp
  00bf8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 195  : 		//input processing
; 196  : 		if (SDL_GetMouseState(NULL, NULL) & SDL_BUTTON(SDL_BUTTON_LEFT)) {

  00bfd	6a 00		 push	 0
  00bff	6a 00		 push	 0
  00c01	e8 00 00 00 00	 call	 _SDL_GetMouseState
  00c06	83 c4 08	 add	 esp, 8
  00c09	83 e0 01	 and	 eax, 1
  00c0c	74 10		 je	 SHORT $LN24@SDL_main

; 197  : 			SDL_SetCursor(mouse_closed);

  00c0e	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse_closed
  00c13	50		 push	 eax
  00c14	e8 00 00 00 00	 call	 _SDL_SetCursor
  00c19	83 c4 04	 add	 esp, 4

; 198  : 		}

  00c1c	eb 0e		 jmp	 SHORT $LN25@SDL_main
$LN24@SDL_main:

; 199  : 		else {
; 200  : 			SDL_SetCursor(mouse_opened);

  00c1e	a1 00 00 00 00	 mov	 eax, DWORD PTR _mouse_opened
  00c23	50		 push	 eax
  00c24	e8 00 00 00 00	 call	 _SDL_SetCursor
  00c29	83 c4 04	 add	 esp, 4
$LN25@SDL_main:

; 201  : 		}
; 202  : 		if (key_input[SDL_SCANCODE_UP]) {

  00c2c	b8 01 00 00 00	 mov	 eax, 1
  00c31	6b c8 52	 imul	 ecx, eax, 82
  00c34	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00c3a	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00c3e	85 c0		 test	 eax, eax
  00c40	74 0d		 je	 SHORT $LN26@SDL_main

; 203  : 			++score;

  00c42	a1 00 00 00 00	 mov	 eax, DWORD PTR _score
  00c47	83 c0 01	 add	 eax, 1
  00c4a	a3 00 00 00 00	 mov	 DWORD PTR _score, eax
$LN26@SDL_main:

; 204  : 		}
; 205  : 		if (key_input[SDL_SCANCODE_DOWN]) {

  00c4f	b8 01 00 00 00	 mov	 eax, 1
  00c54	6b c8 51	 imul	 ecx, eax, 81
  00c57	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00c5d	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00c61	85 c0		 test	 eax, eax
  00c63	74 13		 je	 SHORT $LN27@SDL_main

; 206  : 			printf("score is now: %d\n", score);

  00c65	a1 00 00 00 00	 mov	 eax, DWORD PTR _score
  00c6a	50		 push	 eax
  00c6b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FGDKOGKJ@score?5is?5now?3?5?$CFd?6@
  00c70	e8 00 00 00 00	 call	 _printf
  00c75	83 c4 08	 add	 esp, 8
$LN27@SDL_main:

; 207  : 		}
; 208  : 		if (key_input[SDL_SCANCODE_D]) {

  00c78	b8 01 00 00 00	 mov	 eax, 1
  00c7d	6b c8 07	 imul	 ecx, eax, 7
  00c80	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00c86	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00c8a	85 c0		 test	 eax, eax
  00c8c	74 20		 je	 SHORT $LN28@SDL_main

; 209  : 			player_quad.x = player_quad.x + player_wasd_speed * delta_time;

  00c8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00c96	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00c9e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad
  00ca6	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
$LN28@SDL_main:

; 210  : 		}
; 211  : 		if (key_input[SDL_SCANCODE_A]) {

  00cae	b8 01 00 00 00	 mov	 eax, 1
  00cb3	c1 e0 02	 shl	 eax, 2
  00cb6	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _key_input$[ebp]
  00cbc	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00cc0	85 d2		 test	 edx, edx
  00cc2	74 24		 je	 SHORT $LN29@SDL_main

; 212  : 			player_quad.x = player_quad.x - player_wasd_speed * delta_time;

  00cc4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00ccc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00cd4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR _player_quad
  00cdc	f3 0f 5c c8	 subss	 xmm1, xmm0
  00ce0	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm1
$LN29@SDL_main:

; 213  : 		}
; 214  : 		if (key_input[SDL_SCANCODE_S]) {

  00ce8	b8 01 00 00 00	 mov	 eax, 1
  00ced	6b c8 16	 imul	 ecx, eax, 22
  00cf0	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00cf6	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00cfa	85 c0		 test	 eax, eax
  00cfc	74 24		 je	 SHORT $LN30@SDL_main

; 215  : 			player_quad.y = player_quad.y - player_wasd_speed * delta_time;

  00cfe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00d06	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00d0e	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR _player_quad+4
  00d16	f3 0f 5c c8	 subss	 xmm1, xmm0
  00d1a	f3 0f 11 0d 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm1
$LN30@SDL_main:

; 216  : 		}
; 217  : 		if (key_input[SDL_SCANCODE_W]) {

  00d22	b8 01 00 00 00	 mov	 eax, 1
  00d27	6b c8 1a	 imul	 ecx, eax, 26
  00d2a	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00d30	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00d34	85 c0		 test	 eax, eax
  00d36	74 20		 je	 SHORT $LN31@SDL_main

; 218  : 			player_quad.y = player_quad.y + player_wasd_speed * delta_time;

  00d38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_wasd_speed
  00d40	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR _delta_time
  00d48	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+4
  00d50	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
$LN31@SDL_main:

; 219  : 		}
; 220  : 		//make sure player is not outside of the window
; 221  : 		if (player_quad.x < -1) {

  00d58	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00d60	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR _player_quad
  00d67	76 12		 jbe	 SHORT $LN32@SDL_main

; 222  : 			player_quad.x = -1;

  00d69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00d71	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0

; 223  : 
; 224  : 		}

  00d79	eb 29		 jmp	 SHORT $LN34@SDL_main
$LN32@SDL_main:

; 225  : 		else if (player_quad.x + player_quad.w > 1) {

  00d7b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _player_quad
  00d83	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+8
  00d8b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00d92	76 10		 jbe	 SHORT $LN34@SDL_main

; 226  : 			player_quad.x = 0.9;

  00d94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00d9c	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _player_quad, xmm0
$LN34@SDL_main:

; 227  : 
; 228  : 		}
; 229  : 		if (player_quad.y > 1) {

  00da4	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR _player_quad+4
  00dac	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00db3	76 12		 jbe	 SHORT $LN35@SDL_main

; 230  : 			player_quad.y = 1;

  00db5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00dbd	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0

; 231  : 
; 232  : 		}

  00dc5	eb 29		 jmp	 SHORT $LN37@SDL_main
$LN35@SDL_main:

; 233  : 		else if (player_quad.y < -1 + player_quad.h) {

  00dc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00dcf	f3 0f 58 05 0c
	00 00 00	 addss	 xmm0, DWORD PTR _player_quad+12
  00dd7	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR _player_quad+4
  00dde	76 10		 jbe	 SHORT $LN37@SDL_main

; 234  : 			player_quad.y = -0.8;

  00de0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf4ccccd
  00de8	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR _player_quad+4, xmm0
$LN37@SDL_main:

; 235  : 
; 236  : 		}
; 237  : 		//check if wave should increase
; 238  : 		if (score == (1000 * wave))

  00df0	69 05 00 00 00
	00 e8 03 00 00	 imul	 eax, DWORD PTR _wave, 1000
  00dfa	39 05 00 00 00
	00		 cmp	 DWORD PTR _score, eax
  00e00	75 2a		 jne	 SHORT $LN38@SDL_main

; 239  : 			++wave, GAME_WaveInit(), printf("score requirement: %d\n", 1000 * wave);

  00e02	a1 00 00 00 00	 mov	 eax, DWORD PTR _wave
  00e07	83 c0 01	 add	 eax, 1
  00e0a	a3 00 00 00 00	 mov	 DWORD PTR _wave, eax
  00e0f	e8 00 00 00 00	 call	 _GAME_WaveInit
  00e14	69 0d 00 00 00
	00 e8 03 00 00	 imul	 ecx, DWORD PTR _wave, 1000
  00e1e	51		 push	 ecx
  00e1f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EPAHPNOC@score?5requirement?3?5?$CFd?6@
  00e24	e8 00 00 00 00	 call	 _printf
  00e29	83 c4 08	 add	 esp, 8
$LN38@SDL_main:

; 240  : 		GAME_AddEnemies();

  00e2c	e8 00 00 00 00	 call	 _GAME_AddEnemies

; 241  : 		RENDER_TexturedQuad(player_quad,1,1,1, false);

  00e31	6a 00		 push	 0
  00e33	51		 push	 ecx
  00e34	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e41	51		 push	 ecx
  00e42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e4f	51		 push	 ecx
  00e50	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e58	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5d	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00e60	b9 07 00 00 00	 mov	 ecx, 7
  00e65	be 00 00 00 00	 mov	 esi, OFFSET _player_quad
  00e6a	8b fc		 mov	 edi, esp
  00e6c	f3 a5		 rep movsd
  00e6e	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  00e73	83 c4 2c	 add	 esp, 44			; 0000002cH

; 242  : 		RENDER_List(&enemies);

  00e76	68 00 00 00 00	 push	 OFFSET _enemies
  00e7b	e8 00 00 00 00	 call	 _RENDER_List
  00e80	83 c4 04	 add	 esp, 4

; 243  : 		RENDER_TexturedQuad(wave_text_quad, 1, 0.1, 0.1, false);

  00e83	6a 00		 push	 0
  00e85	51		 push	 ecx
  00e86	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00e8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e93	51		 push	 ecx
  00e94	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00e9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ea1	51		 push	 ecx
  00ea2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00eaa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eaf	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00eb2	b9 07 00 00 00	 mov	 ecx, 7
  00eb7	be 00 00 00 00	 mov	 esi, OFFSET _wave_text_quad
  00ebc	8b fc		 mov	 edi, esp
  00ebe	f3 a5		 rep movsd
  00ec0	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  00ec5	83 c4 2c	 add	 esp, 44			; 0000002cH

; 244  : 		if (reserve < 0) {

  00ec8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _reserve, 0
  00ecf	7d 6c		 jge	 SHORT $LN40@SDL_main

; 245  : 			RENDER_TexturedQuad(overtime_quad, 1, 0.9, 0.1, false);

  00ed1	6a 00		 push	 0
  00ed3	51		 push	 ecx
  00ed4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00edc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee1	51		 push	 ecx
  00ee2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00eea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eef	51		 push	 ecx
  00ef0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ef8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00efd	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00f00	b9 07 00 00 00	 mov	 ecx, 7
  00f05	be 00 00 00 00	 mov	 esi, OFFSET _overtime_quad
  00f0a	8b fc		 mov	 edi, esp
  00f0c	f3 a5		 rep movsd
  00f0e	e8 00 00 00 00	 call	 _RENDER_TexturedQuad
  00f13	83 c4 2c	 add	 esp, 44			; 0000002cH

; 246  : 			if (!overtime_bell_rung) {

  00f16	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _overtime_bell_rung, 0
  00f1d	75 1e		 jne	 SHORT $LN40@SDL_main

; 247  : 				Mix_PlayChannel(-1, overtime_bell_audio, 0);

  00f1f	6a ff		 push	 -1
  00f21	6a 00		 push	 0
  00f23	a1 00 00 00 00	 mov	 eax, DWORD PTR _overtime_bell_audio
  00f28	50		 push	 eax
  00f29	6a ff		 push	 -1
  00f2b	e8 00 00 00 00	 call	 _Mix_PlayChannelTimed
  00f30	83 c4 10	 add	 esp, 16			; 00000010H

; 248  : 				overtime_bell_rung = true;

  00f33	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _overtime_bell_rung, 1
$LN40@SDL_main:

; 249  : 			}
; 250  : 		}
; 251  : 		if (glGetError()) {

  00f3d	8b f4		 mov	 esi, esp
  00f3f	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00f45	3b f4		 cmp	 esi, esp
  00f47	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f4c	85 c0		 test	 eax, eax
  00f4e	74 1d		 je	 SHORT $LN41@SDL_main

; 252  : 			printf("Failed to do something, %x", glGetError());

  00f50	8b f4		 mov	 esi, esp
  00f52	ff 15 00 00 00
	00		 call	 DWORD PTR _glad_glGetError
  00f58	3b f4		 cmp	 esi, esp
  00f5a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f5f	50		 push	 eax
  00f60	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CEPLMCGI@Failed?5to?5do?5something?0?5?$CFx@
  00f65	e8 00 00 00 00	 call	 _printf
  00f6a	83 c4 08	 add	 esp, 8
$LN41@SDL_main:

; 253  : 		}
; 254  : 		SDL_GL_SwapWindow(window);

  00f6d	a1 00 00 00 00	 mov	 eax, DWORD PTR _window
  00f72	50		 push	 eax
  00f73	e8 00 00 00 00	 call	 _SDL_GL_SwapWindow
  00f78	83 c4 04	 add	 esp, 4

; 255  : 		delta_time = clock() - start;

  00f7b	8b f4		 mov	 esi, esp
  00f7d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__clock
  00f83	3b f4		 cmp	 esi, esp
  00f85	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f8a	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00f8e	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR _start
  00f96	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _delta_time, xmm0

; 256  : 		delta_time /= CLOCKS_PER_SEC;

  00f9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _delta_time
  00fa6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  00fae	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR _delta_time, xmm0

; 257  : 		if (key_input[SDL_SCANCODE_F]) {

  00fb6	b8 01 00 00 00	 mov	 eax, 1
  00fbb	6b c8 09	 imul	 ecx, eax, 9
  00fbe	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _key_input$[ebp]
  00fc4	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00fc8	85 c0		 test	 eax, eax
  00fca	74 1d		 je	 SHORT $LN42@SDL_main

; 258  : 			printf("time:%f\n", delta_time);

  00fcc	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR _delta_time
  00fd4	83 ec 08	 sub	 esp, 8
  00fd7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00fdc	68 00 00 00 00	 push	 OFFSET ??_C@_08DINNBOH@time?3?$CFf?6@
  00fe1	e8 00 00 00 00	 call	 _printf
  00fe6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN42@SDL_main:

; 259  : 		}
; 260  : 	}	

  00fe9	e9 ee f8 ff ff	 jmp	 $LN5@SDL_main
$SHUTDOWN$51:

; 261  : SHUTDOWN:
; 262  : 	return 0;

  00fee	33 c0		 xor	 eax, eax

; 263  : }

  00ff0	52		 push	 edx
  00ff1	8b cd		 mov	 ecx, ebp
  00ff3	50		 push	 eax
  00ff4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN50@SDL_main
  00ffa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00fff	58		 pop	 eax
  01000	5a		 pop	 edx
  01001	5f		 pop	 edi
  01002	5e		 pop	 esi
  01003	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01006	33 cd		 xor	 ecx, ebp
  01008	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0100d	8b e5		 mov	 esp, ebp
  0100f	5d		 pop	 ebp
  01010	8b e3		 mov	 esp, ebx
  01012	5b		 pop	 ebx
  01013	c3		 ret	 0
$LN50@SDL_main:
  01014	05 00 00 00	 DD	 5
  01018	00 00 00 00	 DD	 $LN49@SDL_main
$LN49@SDL_main:
  0101c	dc ff ff ff	 DD	 -36			; ffffffdcH
  01020	04 00 00 00	 DD	 4
  01024	00 00 00 00	 DD	 $LN44@SDL_main
  01028	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0102c	04 00 00 00	 DD	 4
  01030	00 00 00 00	 DD	 $LN45@SDL_main
  01034	c4 ff ff ff	 DD	 -60			; ffffffc4H
  01038	02 00 00 00	 DD	 2
  0103c	00 00 00 00	 DD	 $LN46@SDL_main
  01040	70 ff ff ff	 DD	 -144			; ffffff70H
  01044	40 00 00 00	 DD	 64			; 00000040H
  01048	00 00 00 00	 DD	 $LN47@SDL_main
  0104c	e8 fe ff ff	 DD	 -280			; fffffee8H
  01050	38 00 00 00	 DD	 56			; 00000038H
  01054	00 00 00 00	 DD	 $LN48@SDL_main
$LN48@SDL_main:
  01058	65		 DB	 101			; 00000065H
  01059	76		 DB	 118			; 00000076H
  0105a	65		 DB	 101			; 00000065H
  0105b	6e		 DB	 110			; 0000006eH
  0105c	74		 DB	 116			; 00000074H
  0105d	5f		 DB	 95			; 0000005fH
  0105e	68		 DB	 104			; 00000068H
  0105f	61		 DB	 97			; 00000061H
  01060	6e		 DB	 110			; 0000006eH
  01061	64		 DB	 100			; 00000064H
  01062	6c		 DB	 108			; 0000006cH
  01063	65		 DB	 101			; 00000065H
  01064	00		 DB	 0
$LN47@SDL_main:
  01065	6f		 DB	 111			; 0000006fH
  01066	72		 DB	 114			; 00000072H
  01067	74		 DB	 116			; 00000074H
  01068	68		 DB	 104			; 00000068H
  01069	6f		 DB	 111			; 0000006fH
  0106a	00		 DB	 0
$LN46@SDL_main:
  0106b	66		 DB	 102			; 00000066H
  0106c	6f		 DB	 111			; 0000006fH
  0106d	72		 DB	 114			; 00000072H
  0106e	6d		 DB	 109			; 0000006dH
  0106f	61		 DB	 97			; 00000061H
  01070	74		 DB	 116			; 00000074H
  01071	00		 DB	 0
$LN45@SDL_main:
  01072	63		 DB	 99			; 00000063H
  01073	68		 DB	 104			; 00000068H
  01074	61		 DB	 97			; 00000061H
  01075	6e		 DB	 110			; 0000006eH
  01076	6e		 DB	 110			; 0000006eH
  01077	65		 DB	 101			; 00000065H
  01078	6c		 DB	 108			; 0000006cH
  01079	73		 DB	 115			; 00000073H
  0107a	00		 DB	 0
$LN44@SDL_main:
  0107b	66		 DB	 102			; 00000066H
  0107c	72		 DB	 114			; 00000072H
  0107d	65		 DB	 101			; 00000065H
  0107e	71		 DB	 113			; 00000071H
  0107f	00		 DB	 0
_SDL_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vsprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00028	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00033	52		 push	 edx
  00034	6a ff		 push	 -1
  00036	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __vsnprintf_l
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	83 ca 01	 or	 edx, 1
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	50		 push	 eax
  0004c	52		 push	 edx
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00053	83 c4 1c	 add	 esp, 28			; 0000001cH
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00060	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00064	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  00066	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00070	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00072	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  00075	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0007b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
