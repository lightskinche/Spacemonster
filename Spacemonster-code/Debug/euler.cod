; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__81CA1BF5_euler@c DB 01H
msvcjmc	ENDS
PUBLIC	_asinf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_glm_euler_angles
PUBLIC	_glm_euler_xyz
PUBLIC	_glm_euler
PUBLIC	_glm_euler_xzy
PUBLIC	_glm_euler_yxz
PUBLIC	_glm_euler_yzx
PUBLIC	_glm_euler_zxy
PUBLIC	_glm_euler_zyx
PUBLIC	_glm_euler_by_order
PUBLIC	_glmc_euler_angles
PUBLIC	_glmc_euler
PUBLIC	_glmc_euler_xyz
PUBLIC	_glmc_euler_zyx
PUBLIC	_glmc_euler_zxy
PUBLIC	_glmc_euler_xzy
PUBLIC	_glmc_euler_yzx
PUBLIC	_glmc_euler_yxz
PUBLIC	_glmc_euler_by_order
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@bf800000
PUBLIC	__real@bfc90fdb
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_asin:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler_by_order
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_axis$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_euler_by_order PROC				; COMDAT

; 61   : glmc_euler_by_order(vec3 angles, glm_euler_seq axis, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   glm_euler_by_order(angles, axis, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _axis$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_euler_by_order
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_euler_by_order ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler_yxz
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_euler_yxz PROC					; COMDAT

; 55   : glmc_euler_yxz(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   glm_euler_yxz(angles, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler_yxz
  00035	83 c4 08	 add	 esp, 8

; 57   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_euler_yxz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler_yzx
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_euler_yzx PROC					; COMDAT

; 49   : glmc_euler_yzx(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   glm_euler_yzx(angles, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler_yzx
  00035	83 c4 08	 add	 esp, 8

; 51   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_euler_yzx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler_xzy
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_euler_xzy PROC					; COMDAT

; 43   : glmc_euler_xzy(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 44   :   glm_euler_xzy(angles, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler_xzy
  00035	83 c4 08	 add	 esp, 8

; 45   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_euler_xzy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler_zxy
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_euler_zxy PROC					; COMDAT

; 37   : glmc_euler_zxy(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   glm_euler_zxy(angles, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler_zxy
  00035	83 c4 08	 add	 esp, 8

; 39   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_euler_zxy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler_zyx
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_euler_zyx PROC					; COMDAT

; 31   : glmc_euler_zyx(vec3 angles,  mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   glm_euler_zyx(angles, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler_zyx
  00035	83 c4 08	 add	 esp, 8

; 33   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_euler_zyx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler_xyz
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_euler_xyz PROC					; COMDAT

; 25   : glmc_euler_xyz(vec3 angles,  mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_euler_xyz(angles, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler_xyz
  00035	83 c4 08	 add	 esp, 8

; 27   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_euler_xyz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_euler PROC					; COMDAT

; 19   : glmc_euler(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_euler(angles, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler
  00035	83 c4 08	 add	 esp, 8

; 21   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_euler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\euler.c
;	COMDAT _glmc_euler_angles
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_euler_angles PROC					; COMDAT

; 13   : glmc_euler_angles(mat4 m, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __81CA1BF5_euler@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_euler_angles(m, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler_angles
  00035	83 c4 08	 add	 esp, 8

; 15   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_euler_angles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler_by_order
_TEXT	SEGMENT
tv129 = -376						; size = 4
_sysz$ = -176						; size = 4
_cxsz$ = -164						; size = 4
_czsx$ = -152						; size = 4
_cxcz$ = -140						; size = 4
_czsy$ = -128						; size = 4
_cxcy$ = -116						; size = 4
_cysx$ = -104						; size = 4
_cysz$ = -92						; size = 4
_cycz$ = -80						; size = 4
_sz$ = -68						; size = 4
_sy$ = -56						; size = 4
_sx$ = -44						; size = 4
_cz$ = -32						; size = 4
_cy$ = -20						; size = 4
_cx$ = -8						; size = 4
_angles$ = 8						; size = 4
_ord$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_euler_by_order PROC				; COMDAT

; 355  : glm_euler_by_order(vec3 angles, glm_euler_seq ord, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 88 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-376]
  00012	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 356  :   float cx, cy, cz,
; 357  :         sx, sy, sz;
; 358  : 
; 359  :   float cycz, cysz, cysx, cxcy,
; 360  :         czsy, cxcz, czsx, cxsz,
; 361  :         sysz;
; 362  : 
; 363  :   sx = sinf(angles[0]); cx = cosf(angles[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _sinf
  00043	83 c4 04	 add	 esp, 4
  00046	d9 5d d4	 fstp	 DWORD PTR _sx$[ebp]
  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _cosf
  00064	83 c4 04	 add	 esp, 4
  00067	d9 5d f8	 fstp	 DWORD PTR _cx$[ebp]

; 364  :   sy = sinf(angles[1]); cy = cosf(angles[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _sinf
  00085	83 c4 04	 add	 esp, 4
  00088	d9 5d c8	 fstp	 DWORD PTR _sy$[ebp]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	e8 00 00 00 00	 call	 _cosf
  000a6	83 c4 04	 add	 esp, 4
  000a9	d9 5d ec	 fstp	 DWORD PTR _cy$[ebp]

; 365  :   sz = sinf(angles[2]); cz = cosf(angles[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	e8 00 00 00 00	 call	 _sinf
  000c6	83 c4 04	 add	 esp, 4
  000c9	d9 5d bc	 fstp	 DWORD PTR _sz$[ebp]
  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	d1 e0		 shl	 eax, 1
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 _cosf
  000e6	83 c4 04	 add	 esp, 4
  000e9	d9 5d e0	 fstp	 DWORD PTR _cz$[ebp]

; 366  : 
; 367  :   cycz = cy * cz; cysz = cy * sz;

  000ec	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  000f1	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  000f6	f3 0f 11 45 b0	 movss	 DWORD PTR _cycz$[ebp], xmm0
  000fb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  00100	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00105	f3 0f 11 45 a4	 movss	 DWORD PTR _cysz$[ebp], xmm0

; 368  :   cysx = cy * sx; cxcy = cx * cy;

  0010a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0010f	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  00114	f3 0f 11 45 98	 movss	 DWORD PTR _cysx$[ebp], xmm0
  00119	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0011e	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00123	f3 0f 11 45 8c	 movss	 DWORD PTR _cxcy$[ebp], xmm0

; 369  :   czsy = cz * sy; cxcz = cx * cz;

  00128	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  0012d	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00132	f3 0f 11 45 80	 movss	 DWORD PTR _czsy$[ebp], xmm0
  00137	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0013c	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  00141	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _cxcz$[ebp], xmm0

; 370  :   czsx = cz * sx; cxsz = cx * sz;

  00149	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  0014e	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  00153	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _czsx$[ebp], xmm0
  0015b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00160	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00165	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _cxsz$[ebp], xmm0

; 371  :   sysz = sy * sz;

  0016d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00172	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00177	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _sysz$[ebp], xmm0

; 372  : 
; 373  :   switch (ord) {

  0017f	8b 45 0c	 mov	 eax, DWORD PTR _ord$[ebp]
  00182	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv129[ebp], eax
  00188	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv129[ebp]
  0018e	83 e9 06	 sub	 ecx, 6
  00191	89 8d 88 fe ff
	ff		 mov	 DWORD PTR tv129[ebp], ecx
  00197	83 bd 88 fe ff
	ff 1e		 cmp	 DWORD PTR tv129[ebp], 30 ; 0000001eH
  0019e	0f 87 32 08 00
	00		 ja	 $LN2@glm_euler_
  001a4	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR tv129[ebp]
  001aa	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN11@glm_euler_[edx]
  001b1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@glm_euler_[eax*4]
$LN4@glm_euler_:

; 374  :     case GLM_EULER_XZY:
; 375  :       dest[0][0] =  cycz;

  001b8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001bd	6b c8 00	 imul	 ecx, eax, 0
  001c0	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  001c3	ba 04 00 00 00	 mov	 edx, 4
  001c8	6b c2 00	 imul	 eax, edx, 0
  001cb	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cycz$[ebp]
  001d0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 376  :       dest[0][1] =  sx * sy + cx * cysz;

  001d5	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  001da	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  001df	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _cx$[ebp]
  001e4	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _cysz$[ebp]
  001e9	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ed	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001f2	6b c8 00	 imul	 ecx, eax, 0
  001f5	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  001f8	ba 04 00 00 00	 mov	 edx, 4
  001fd	c1 e2 00	 shl	 edx, 0
  00200	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 377  :       dest[0][2] = -cx * sy + cysx * sz;

  00205	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0020a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00211	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00216	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _cysx$[ebp]
  0021b	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  00220	f3 0f 58 c1	 addss	 xmm0, xmm1
  00224	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00229	6b c8 00	 imul	 ecx, eax, 0
  0022c	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0022f	ba 04 00 00 00	 mov	 edx, 4
  00234	d1 e2		 shl	 edx, 1
  00236	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 378  :       dest[1][0] = -sz;

  0023b	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _sz$[ebp]
  00240	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00247	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0024c	c1 e0 00	 shl	 eax, 0
  0024f	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00252	b9 04 00 00 00	 mov	 ecx, 4
  00257	6b d1 00	 imul	 edx, ecx, 0
  0025a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 379  :       dest[1][1] =  cxcz;

  0025f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00264	c1 e0 00	 shl	 eax, 0
  00267	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0026a	b9 04 00 00 00	 mov	 ecx, 4
  0026f	c1 e1 00	 shl	 ecx, 0
  00272	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _cxcz$[ebp]
  0027a	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 380  :       dest[1][2] =  czsx;

  0027f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00284	c1 e0 00	 shl	 eax, 0
  00287	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0028a	b9 04 00 00 00	 mov	 ecx, 4
  0028f	d1 e1		 shl	 ecx, 1
  00291	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  00299	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 381  :       dest[2][0] =  czsy;

  0029e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002a3	d1 e0		 shl	 eax, 1
  002a5	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  002a8	b9 04 00 00 00	 mov	 ecx, 4
  002ad	6b d1 00	 imul	 edx, ecx, 0
  002b0	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _czsy$[ebp]
  002b5	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 382  :       dest[2][1] = -cysx + cx * sysz;

  002ba	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _cysx$[ebp]
  002bf	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002c6	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _cx$[ebp]
  002cb	f3 0f 59 8d 50
	ff ff ff	 mulss	 xmm1, DWORD PTR _sysz$[ebp]
  002d3	f3 0f 58 c1	 addss	 xmm0, xmm1
  002d7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002dc	d1 e0		 shl	 eax, 1
  002de	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  002e1	b9 04 00 00 00	 mov	 ecx, 4
  002e6	c1 e1 00	 shl	 ecx, 0
  002e9	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 383  :       dest[2][2] =  cxcy + sx * sysz;

  002ee	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  002f3	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  002fb	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _cxcy$[ebp]
  00300	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00305	d1 e0		 shl	 eax, 1
  00307	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0030a	b9 04 00 00 00	 mov	 ecx, 4
  0030f	d1 e1		 shl	 ecx, 1
  00311	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 384  :       break;

  00316	e9 bb 06 00 00	 jmp	 $LN2@glm_euler_
$LN5@glm_euler_:

; 385  :     case GLM_EULER_XYZ:
; 386  :       dest[0][0] =  cycz;

  0031b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00320	6b c8 00	 imul	 ecx, eax, 0
  00323	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00326	ba 04 00 00 00	 mov	 edx, 4
  0032b	6b c2 00	 imul	 eax, edx, 0
  0032e	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cycz$[ebp]
  00333	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 387  :       dest[0][1] =  czsx * sy + cxsz;

  00338	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  00340	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00345	f3 0f 58 85 5c
	ff ff ff	 addss	 xmm0, DWORD PTR _cxsz$[ebp]
  0034d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00352	6b c8 00	 imul	 ecx, eax, 0
  00355	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00358	ba 04 00 00 00	 mov	 edx, 4
  0035d	c1 e2 00	 shl	 edx, 0
  00360	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 388  :       dest[0][2] = -cx * czsy + sx * sz;

  00365	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0036a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00371	f3 0f 59 45 80	 mulss	 xmm0, DWORD PTR _czsy$[ebp]
  00376	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _sx$[ebp]
  0037b	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  00380	f3 0f 58 c1	 addss	 xmm0, xmm1
  00384	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00389	6b c8 00	 imul	 ecx, eax, 0
  0038c	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0038f	ba 04 00 00 00	 mov	 edx, 4
  00394	d1 e2		 shl	 edx, 1
  00396	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 389  :       dest[1][0] = -cysz;

  0039b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _cysz$[ebp]
  003a0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  003a7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003ac	c1 e0 00	 shl	 eax, 0
  003af	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  003b2	b9 04 00 00 00	 mov	 ecx, 4
  003b7	6b d1 00	 imul	 edx, ecx, 0
  003ba	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 390  :       dest[1][1] =  cxcz - sx * sysz;

  003bf	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  003c4	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  003cc	f3 0f 10 8d 74
	ff ff ff	 movss	 xmm1, DWORD PTR _cxcz$[ebp]
  003d4	f3 0f 5c c8	 subss	 xmm1, xmm0
  003d8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003dd	c1 e0 00	 shl	 eax, 0
  003e0	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  003e3	b9 04 00 00 00	 mov	 ecx, 4
  003e8	c1 e1 00	 shl	 ecx, 0
  003eb	f3 0f 11 0c 08	 movss	 DWORD PTR [eax+ecx], xmm1

; 391  :       dest[1][2] =  czsx + cx * sysz;

  003f0	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  003f5	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  003fd	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR _czsx$[ebp]
  00405	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0040a	c1 e0 00	 shl	 eax, 0
  0040d	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00410	b9 04 00 00 00	 mov	 ecx, 4
  00415	d1 e1		 shl	 ecx, 1
  00417	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 392  :       dest[2][0] =  sy;

  0041c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00421	d1 e0		 shl	 eax, 1
  00423	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00426	b9 04 00 00 00	 mov	 ecx, 4
  0042b	6b d1 00	 imul	 edx, ecx, 0
  0042e	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00433	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 393  :       dest[2][1] = -cysx;

  00438	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _cysx$[ebp]
  0043d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00444	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00449	d1 e0		 shl	 eax, 1
  0044b	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0044e	b9 04 00 00 00	 mov	 ecx, 4
  00453	c1 e1 00	 shl	 ecx, 0
  00456	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 394  :       dest[2][2] =  cxcy;

  0045b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00460	d1 e0		 shl	 eax, 1
  00462	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00465	b9 04 00 00 00	 mov	 ecx, 4
  0046a	d1 e1		 shl	 ecx, 1
  0046c	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _cxcy$[ebp]
  00471	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 395  :       break;

  00476	e9 5b 05 00 00	 jmp	 $LN2@glm_euler_
$LN6@glm_euler_:

; 396  :     case GLM_EULER_YXZ:
; 397  :       dest[0][0] =  cycz + sx * sysz;

  0047b	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00480	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  00488	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _cycz$[ebp]
  0048d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00492	6b c8 00	 imul	 ecx, eax, 0
  00495	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00498	ba 04 00 00 00	 mov	 edx, 4
  0049d	6b c2 00	 imul	 eax, edx, 0
  004a0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 398  :       dest[0][1] =  cxsz;

  004a5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004aa	6b c8 00	 imul	 ecx, eax, 0
  004ad	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  004b0	ba 04 00 00 00	 mov	 edx, 4
  004b5	c1 e2 00	 shl	 edx, 0
  004b8	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _cxsz$[ebp]
  004c0	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 399  :       dest[0][2] = -czsy + cysx * sz;

  004c5	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _czsy$[ebp]
  004ca	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  004d1	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _cysx$[ebp]
  004d6	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  004db	f3 0f 58 c1	 addss	 xmm0, xmm1
  004df	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004e4	6b c8 00	 imul	 ecx, eax, 0
  004e7	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  004ea	ba 04 00 00 00	 mov	 edx, 4
  004ef	d1 e2		 shl	 edx, 1
  004f1	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 400  :       dest[1][0] =  czsx * sy - cysz;

  004f6	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  004fe	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00503	f3 0f 5c 45 a4	 subss	 xmm0, DWORD PTR _cysz$[ebp]
  00508	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0050d	c1 e0 00	 shl	 eax, 0
  00510	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00513	b9 04 00 00 00	 mov	 ecx, 4
  00518	6b d1 00	 imul	 edx, ecx, 0
  0051b	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 401  :       dest[1][1] =  cxcz;

  00520	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00525	c1 e0 00	 shl	 eax, 0
  00528	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0052b	b9 04 00 00 00	 mov	 ecx, 4
  00530	c1 e1 00	 shl	 ecx, 0
  00533	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _cxcz$[ebp]
  0053b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 402  :       dest[1][2] =  cycz * sx + sysz;

  00540	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cycz$[ebp]
  00545	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  0054a	f3 0f 58 85 50
	ff ff ff	 addss	 xmm0, DWORD PTR _sysz$[ebp]
  00552	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00557	c1 e0 00	 shl	 eax, 0
  0055a	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0055d	b9 04 00 00 00	 mov	 ecx, 4
  00562	d1 e1		 shl	 ecx, 1
  00564	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 403  :       dest[2][0] =  cx * sy;

  00569	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0056e	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00573	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00578	d1 e0		 shl	 eax, 1
  0057a	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0057d	b9 04 00 00 00	 mov	 ecx, 4
  00582	6b d1 00	 imul	 edx, ecx, 0
  00585	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 404  :       dest[2][1] = -sx;

  0058a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0058f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00596	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0059b	d1 e0		 shl	 eax, 1
  0059d	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  005a0	b9 04 00 00 00	 mov	 ecx, 4
  005a5	c1 e1 00	 shl	 ecx, 0
  005a8	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 405  :       dest[2][2] =  cxcy;

  005ad	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005b2	d1 e0		 shl	 eax, 1
  005b4	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  005b7	b9 04 00 00 00	 mov	 ecx, 4
  005bc	d1 e1		 shl	 ecx, 1
  005be	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _cxcy$[ebp]
  005c3	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 406  :       break;

  005c8	e9 09 04 00 00	 jmp	 $LN2@glm_euler_
$LN7@glm_euler_:

; 407  :     case GLM_EULER_YZX:
; 408  :       dest[0][0] =  cycz;

  005cd	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005d2	6b c8 00	 imul	 ecx, eax, 0
  005d5	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  005d8	ba 04 00 00 00	 mov	 edx, 4
  005dd	6b c2 00	 imul	 eax, edx, 0
  005e0	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cycz$[ebp]
  005e5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 409  :       dest[0][1] =  sz;

  005ea	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005ef	6b c8 00	 imul	 ecx, eax, 0
  005f2	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  005f5	ba 04 00 00 00	 mov	 edx, 4
  005fa	c1 e2 00	 shl	 edx, 0
  005fd	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _sz$[ebp]
  00602	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 410  :       dest[0][2] = -czsy;

  00607	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _czsy$[ebp]
  0060c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00613	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00618	6b c8 00	 imul	 ecx, eax, 0
  0061b	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0061e	ba 04 00 00 00	 mov	 edx, 4
  00623	d1 e2		 shl	 edx, 1
  00625	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 411  :       dest[1][0] =  sx * sy - cx * cysz;

  0062a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0062f	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00634	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _cx$[ebp]
  00639	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _cysz$[ebp]
  0063e	f3 0f 5c c1	 subss	 xmm0, xmm1
  00642	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00647	c1 e0 00	 shl	 eax, 0
  0064a	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0064d	b9 04 00 00 00	 mov	 ecx, 4
  00652	6b d1 00	 imul	 edx, ecx, 0
  00655	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 412  :       dest[1][1] =  cxcz;

  0065a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0065f	c1 e0 00	 shl	 eax, 0
  00662	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00665	b9 04 00 00 00	 mov	 ecx, 4
  0066a	c1 e1 00	 shl	 ecx, 0
  0066d	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _cxcz$[ebp]
  00675	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 413  :       dest[1][2] =  cysx + cx * sysz;

  0067a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0067f	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  00687	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _cysx$[ebp]
  0068c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00691	c1 e0 00	 shl	 eax, 0
  00694	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00697	b9 04 00 00 00	 mov	 ecx, 4
  0069c	d1 e1		 shl	 ecx, 1
  0069e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 414  :       dest[2][0] =  cx * sy + cysx * sz;

  006a3	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  006a8	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  006ad	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _cysx$[ebp]
  006b2	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  006b7	f3 0f 58 c1	 addss	 xmm0, xmm1
  006bb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  006c0	d1 e0		 shl	 eax, 1
  006c2	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  006c5	b9 04 00 00 00	 mov	 ecx, 4
  006ca	6b d1 00	 imul	 edx, ecx, 0
  006cd	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 415  :       dest[2][1] = -czsx;

  006d2	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  006da	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006e1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  006e6	d1 e0		 shl	 eax, 1
  006e8	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  006eb	b9 04 00 00 00	 mov	 ecx, 4
  006f0	c1 e1 00	 shl	 ecx, 0
  006f3	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 416  :       dest[2][2] =  cxcy - sx * sysz;

  006f8	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  006fd	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  00705	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _cxcy$[ebp]
  0070a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0070e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00713	d1 e0		 shl	 eax, 1
  00715	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00718	b9 04 00 00 00	 mov	 ecx, 4
  0071d	d1 e1		 shl	 ecx, 1
  0071f	f3 0f 11 0c 08	 movss	 DWORD PTR [eax+ecx], xmm1

; 417  :       break;

  00724	e9 ad 02 00 00	 jmp	 $LN2@glm_euler_
$LN8@glm_euler_:

; 418  :     case GLM_EULER_ZXY:
; 419  :       dest[0][0] =  cycz - sx * sysz;

  00729	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0072e	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  00736	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _cycz$[ebp]
  0073b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0073f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00744	6b c8 00	 imul	 ecx, eax, 0
  00747	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0074a	ba 04 00 00 00	 mov	 edx, 4
  0074f	6b c2 00	 imul	 eax, edx, 0
  00752	f3 0f 11 0c 01	 movss	 DWORD PTR [ecx+eax], xmm1

; 420  :       dest[0][1] =  czsx * sy + cysz;

  00757	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  0075f	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00764	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _cysz$[ebp]
  00769	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0076e	6b c8 00	 imul	 ecx, eax, 0
  00771	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00774	ba 04 00 00 00	 mov	 edx, 4
  00779	c1 e2 00	 shl	 edx, 0
  0077c	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 421  :       dest[0][2] = -cx * sy;

  00781	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00786	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0078d	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00792	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00797	6b c8 00	 imul	 ecx, eax, 0
  0079a	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0079d	ba 04 00 00 00	 mov	 edx, 4
  007a2	d1 e2		 shl	 edx, 1
  007a4	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 422  :       dest[1][0] = -cxsz;

  007a9	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _cxsz$[ebp]
  007b1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  007b8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  007bd	c1 e0 00	 shl	 eax, 0
  007c0	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  007c3	b9 04 00 00 00	 mov	 ecx, 4
  007c8	6b d1 00	 imul	 edx, ecx, 0
  007cb	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 423  :       dest[1][1] =  cxcz;

  007d0	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  007d5	c1 e0 00	 shl	 eax, 0
  007d8	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  007db	b9 04 00 00 00	 mov	 ecx, 4
  007e0	c1 e1 00	 shl	 ecx, 0
  007e3	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _cxcz$[ebp]
  007eb	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 424  :       dest[1][2] =  sx;

  007f0	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  007f5	c1 e0 00	 shl	 eax, 0
  007f8	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  007fb	b9 04 00 00 00	 mov	 ecx, 4
  00800	d1 e1		 shl	 ecx, 1
  00802	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00807	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 425  :       dest[2][0] =  czsy + cysx * sz;

  0080c	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _cysx$[ebp]
  00811	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00816	f3 0f 58 45 80	 addss	 xmm0, DWORD PTR _czsy$[ebp]
  0081b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00820	d1 e0		 shl	 eax, 1
  00822	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00825	b9 04 00 00 00	 mov	 ecx, 4
  0082a	6b d1 00	 imul	 edx, ecx, 0
  0082d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 426  :       dest[2][1] = -cycz * sx + sysz;

  00832	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cycz$[ebp]
  00837	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0083e	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  00843	f3 0f 58 85 50
	ff ff ff	 addss	 xmm0, DWORD PTR _sysz$[ebp]
  0084b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00850	d1 e0		 shl	 eax, 1
  00852	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00855	b9 04 00 00 00	 mov	 ecx, 4
  0085a	c1 e1 00	 shl	 ecx, 0
  0085d	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 427  :       dest[2][2] =  cxcy;

  00862	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00867	d1 e0		 shl	 eax, 1
  00869	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0086c	b9 04 00 00 00	 mov	 ecx, 4
  00871	d1 e1		 shl	 ecx, 1
  00873	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _cxcy$[ebp]
  00878	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 428  :       break;

  0087d	e9 54 01 00 00	 jmp	 $LN2@glm_euler_
$LN9@glm_euler_:

; 429  :     case GLM_EULER_ZYX:
; 430  :       dest[0][0] =  cycz;

  00882	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00887	6b c8 00	 imul	 ecx, eax, 0
  0088a	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0088d	ba 04 00 00 00	 mov	 edx, 4
  00892	6b c2 00	 imul	 eax, edx, 0
  00895	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cycz$[ebp]
  0089a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 431  :       dest[0][1] =  cysz;

  0089f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  008a4	6b c8 00	 imul	 ecx, eax, 0
  008a7	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  008aa	ba 04 00 00 00	 mov	 edx, 4
  008af	c1 e2 00	 shl	 edx, 0
  008b2	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _cysz$[ebp]
  008b7	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 432  :       dest[0][2] = -sy;

  008bc	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _sy$[ebp]
  008c1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  008c8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  008cd	6b c8 00	 imul	 ecx, eax, 0
  008d0	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  008d3	ba 04 00 00 00	 mov	 edx, 4
  008d8	d1 e2		 shl	 edx, 1
  008da	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 433  :       dest[1][0] =  czsx * sy - cxsz;

  008df	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  008e7	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  008ec	f3 0f 5c 85 5c
	ff ff ff	 subss	 xmm0, DWORD PTR _cxsz$[ebp]
  008f4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  008f9	c1 e0 00	 shl	 eax, 0
  008fc	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  008ff	b9 04 00 00 00	 mov	 ecx, 4
  00904	6b d1 00	 imul	 edx, ecx, 0
  00907	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 434  :       dest[1][1] =  cxcz + sx * sysz;

  0090c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00911	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  00919	f3 0f 58 85 74
	ff ff ff	 addss	 xmm0, DWORD PTR _cxcz$[ebp]
  00921	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00926	c1 e0 00	 shl	 eax, 0
  00929	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  0092c	b9 04 00 00 00	 mov	 ecx, 4
  00931	c1 e1 00	 shl	 ecx, 0
  00934	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 435  :       dest[1][2] =  cysx;

  00939	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0093e	c1 e0 00	 shl	 eax, 0
  00941	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00944	b9 04 00 00 00	 mov	 ecx, 4
  00949	d1 e1		 shl	 ecx, 1
  0094b	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _cysx$[ebp]
  00950	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 436  :       dest[2][0] =  cx * czsy + sx * sz;

  00955	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0095a	f3 0f 59 45 80	 mulss	 xmm0, DWORD PTR _czsy$[ebp]
  0095f	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _sx$[ebp]
  00964	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  00969	f3 0f 58 c1	 addss	 xmm0, xmm1
  0096d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00972	d1 e0		 shl	 eax, 1
  00974	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00977	b9 04 00 00 00	 mov	 ecx, 4
  0097c	6b d1 00	 imul	 edx, ecx, 0
  0097f	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 437  :       dest[2][1] = -czsx + cx * sysz;

  00984	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  0098c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00993	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _cx$[ebp]
  00998	f3 0f 59 8d 50
	ff ff ff	 mulss	 xmm1, DWORD PTR _sysz$[ebp]
  009a0	f3 0f 58 c1	 addss	 xmm0, xmm1
  009a4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  009a9	d1 e0		 shl	 eax, 1
  009ab	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  009ae	b9 04 00 00 00	 mov	 ecx, 4
  009b3	c1 e1 00	 shl	 ecx, 0
  009b6	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 438  :       dest[2][2] =  cxcy;

  009bb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  009c0	d1 e0		 shl	 eax, 1
  009c2	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  009c5	b9 04 00 00 00	 mov	 ecx, 4
  009ca	d1 e1		 shl	 ecx, 1
  009cc	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _cxcy$[ebp]
  009d1	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
$LN2@glm_euler_:

; 439  :       break;
; 440  :   }
; 441  : 
; 442  :   dest[0][3] = 0.0f;

  009d6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  009db	6b c8 00	 imul	 ecx, eax, 0
  009de	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  009e1	ba 04 00 00 00	 mov	 edx, 4
  009e6	6b c2 03	 imul	 eax, edx, 3
  009e9	0f 57 c0	 xorps	 xmm0, xmm0
  009ec	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 443  :   dest[1][3] = 0.0f;

  009f1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  009f6	c1 e0 00	 shl	 eax, 0
  009f9	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  009fc	b9 04 00 00 00	 mov	 ecx, 4
  00a01	6b d1 03	 imul	 edx, ecx, 3
  00a04	0f 57 c0	 xorps	 xmm0, xmm0
  00a07	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 444  :   dest[2][3] = 0.0f;

  00a0c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00a11	d1 e0		 shl	 eax, 1
  00a13	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00a16	b9 04 00 00 00	 mov	 ecx, 4
  00a1b	6b d1 03	 imul	 edx, ecx, 3
  00a1e	0f 57 c0	 xorps	 xmm0, xmm0
  00a21	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 445  :   dest[3][0] = 0.0f;

  00a26	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00a2b	6b c8 03	 imul	 ecx, eax, 3
  00a2e	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00a31	ba 04 00 00 00	 mov	 edx, 4
  00a36	6b c2 00	 imul	 eax, edx, 0
  00a39	0f 57 c0	 xorps	 xmm0, xmm0
  00a3c	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 446  :   dest[3][1] = 0.0f;

  00a41	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00a46	6b c8 03	 imul	 ecx, eax, 3
  00a49	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00a4c	ba 04 00 00 00	 mov	 edx, 4
  00a51	c1 e2 00	 shl	 edx, 0
  00a54	0f 57 c0	 xorps	 xmm0, xmm0
  00a57	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 447  :   dest[3][2] = 0.0f;

  00a5c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00a61	6b c8 03	 imul	 ecx, eax, 3
  00a64	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00a67	ba 04 00 00 00	 mov	 edx, 4
  00a6c	d1 e2		 shl	 edx, 1
  00a6e	0f 57 c0	 xorps	 xmm0, xmm0
  00a71	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 448  :   dest[3][3] = 1.0f;

  00a76	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00a7b	6b c8 03	 imul	 ecx, eax, 3
  00a7e	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00a81	ba 04 00 00 00	 mov	 edx, 4
  00a86	6b c2 03	 imul	 eax, edx, 3
  00a89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a91	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 449  : }

  00a96	5f		 pop	 edi
  00a97	5e		 pop	 esi
  00a98	5b		 pop	 ebx
  00a99	81 c4 78 01 00
	00		 add	 esp, 376		; 00000178H
  00a9f	3b ec		 cmp	 ebp, esp
  00aa1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aa6	8b e5		 mov	 esp, ebp
  00aa8	5d		 pop	 ebp
  00aa9	c3		 ret	 0
  00aaa	66 90		 npad	 2
$LN12@glm_euler_:
  00aac	00 00 00 00	 DD	 $LN9@glm_euler_
  00ab0	00 00 00 00	 DD	 $LN7@glm_euler_
  00ab4	00 00 00 00	 DD	 $LN8@glm_euler_
  00ab8	00 00 00 00	 DD	 $LN4@glm_euler_
  00abc	00 00 00 00	 DD	 $LN6@glm_euler_
  00ac0	00 00 00 00	 DD	 $LN5@glm_euler_
  00ac4	00 00 00 00	 DD	 $LN2@glm_euler_
$LN11@glm_euler_:
  00ac8	00		 DB	 0
  00ac9	06		 DB	 6
  00aca	06		 DB	 6
  00acb	01		 DB	 1
  00acc	06		 DB	 6
  00acd	06		 DB	 6
  00ace	06		 DB	 6
  00acf	06		 DB	 6
  00ad0	06		 DB	 6
  00ad1	06		 DB	 6
  00ad2	06		 DB	 6
  00ad3	06		 DB	 6
  00ad4	02		 DB	 2
  00ad5	06		 DB	 6
  00ad6	06		 DB	 6
  00ad7	06		 DB	 6
  00ad8	06		 DB	 6
  00ad9	06		 DB	 6
  00ada	03		 DB	 3
  00adb	06		 DB	 6
  00adc	06		 DB	 6
  00add	06		 DB	 6
  00ade	06		 DB	 6
  00adf	06		 DB	 6
  00ae0	06		 DB	 6
  00ae1	06		 DB	 6
  00ae2	06		 DB	 6
  00ae3	04		 DB	 4
  00ae4	06		 DB	 6
  00ae5	06		 DB	 6
  00ae6	05		 DB	 5
_glm_euler_by_order ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler_zyx
_TEXT	SEGMENT
_sysz$ = -104						; size = 4
_cxcz$ = -92						; size = 4
_czsx$ = -80						; size = 4
_sz$ = -68						; size = 4
_sy$ = -56						; size = 4
_sx$ = -44						; size = 4
_cz$ = -32						; size = 4
_cy$ = -20						; size = 4
_cx$ = -8						; size = 4
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_euler_zyx PROC					; COMDAT

; 316  : glm_euler_zyx(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 317  :   float cx, cy, cz,
; 318  :         sx, sy, sz, czsx, cxcz, sysz;
; 319  : 
; 320  :   sx   = sinf(angles[0]); cx = cosf(angles[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _sinf
  00043	83 c4 04	 add	 esp, 4
  00046	d9 5d d4	 fstp	 DWORD PTR _sx$[ebp]
  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _cosf
  00064	83 c4 04	 add	 esp, 4
  00067	d9 5d f8	 fstp	 DWORD PTR _cx$[ebp]

; 321  :   sy   = sinf(angles[1]); cy = cosf(angles[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _sinf
  00085	83 c4 04	 add	 esp, 4
  00088	d9 5d c8	 fstp	 DWORD PTR _sy$[ebp]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	e8 00 00 00 00	 call	 _cosf
  000a6	83 c4 04	 add	 esp, 4
  000a9	d9 5d ec	 fstp	 DWORD PTR _cy$[ebp]

; 322  :   sz   = sinf(angles[2]); cz = cosf(angles[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	e8 00 00 00 00	 call	 _sinf
  000c6	83 c4 04	 add	 esp, 4
  000c9	d9 5d bc	 fstp	 DWORD PTR _sz$[ebp]
  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	d1 e0		 shl	 eax, 1
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 _cosf
  000e6	83 c4 04	 add	 esp, 4
  000e9	d9 5d e0	 fstp	 DWORD PTR _cz$[ebp]

; 323  : 
; 324  :   czsx = cz * sx;

  000ec	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  000f1	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  000f6	f3 0f 11 45 b0	 movss	 DWORD PTR _czsx$[ebp], xmm0

; 325  :   cxcz = cx * cz;

  000fb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00100	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  00105	f3 0f 11 45 a4	 movss	 DWORD PTR _cxcz$[ebp], xmm0

; 326  :   sysz = sy * sz;

  0010a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0010f	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00114	f3 0f 11 45 98	 movss	 DWORD PTR _sysz$[ebp], xmm0

; 327  : 
; 328  :   dest[0][0] =  cy * cz;

  00119	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0011e	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  00123	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00128	6b c8 00	 imul	 ecx, eax, 0
  0012b	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0012e	ba 04 00 00 00	 mov	 edx, 4
  00133	6b c2 00	 imul	 eax, edx, 0
  00136	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 329  :   dest[0][1] =  cy * sz;

  0013b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  00140	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00145	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0014a	6b c8 00	 imul	 ecx, eax, 0
  0014d	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00150	ba 04 00 00 00	 mov	 edx, 4
  00155	c1 e2 00	 shl	 edx, 0
  00158	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 330  :   dest[0][2] = -sy;

  0015d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00162	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00169	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0016e	6b c8 00	 imul	 ecx, eax, 0
  00171	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00174	ba 04 00 00 00	 mov	 edx, 4
  00179	d1 e2		 shl	 edx, 1
  0017b	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 331  :   dest[1][0] =  czsx * sy - cx * sz;

  00180	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  00185	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  0018a	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _cx$[ebp]
  0018f	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  00194	f3 0f 5c c1	 subss	 xmm0, xmm1
  00198	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0019d	c1 e0 00	 shl	 eax, 0
  001a0	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001a3	b9 04 00 00 00	 mov	 ecx, 4
  001a8	6b d1 00	 imul	 edx, ecx, 0
  001ab	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 332  :   dest[1][1] =  cxcz + sx * sysz;

  001b0	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  001b5	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  001ba	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _cxcz$[ebp]
  001bf	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001c4	c1 e0 00	 shl	 eax, 0
  001c7	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001ca	b9 04 00 00 00	 mov	 ecx, 4
  001cf	c1 e1 00	 shl	 ecx, 0
  001d2	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 333  :   dest[1][2] =  cy * sx;

  001d7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  001dc	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  001e1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001e6	c1 e0 00	 shl	 eax, 0
  001e9	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001ec	b9 04 00 00 00	 mov	 ecx, 4
  001f1	d1 e1		 shl	 ecx, 1
  001f3	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 334  :   dest[2][0] =  cxcz * sy + sx * sz;

  001f8	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _cxcz$[ebp]
  001fd	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00202	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _sx$[ebp]
  00207	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  0020c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00210	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00215	d1 e0		 shl	 eax, 1
  00217	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0021a	b9 04 00 00 00	 mov	 ecx, 4
  0021f	6b d1 00	 imul	 edx, ecx, 0
  00222	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 335  :   dest[2][1] = -czsx + cx * sysz;

  00227	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  0022c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00233	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _cx$[ebp]
  00238	f3 0f 59 4d 98	 mulss	 xmm1, DWORD PTR _sysz$[ebp]
  0023d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00241	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00246	d1 e0		 shl	 eax, 1
  00248	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0024b	b9 04 00 00 00	 mov	 ecx, 4
  00250	c1 e1 00	 shl	 ecx, 0
  00253	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 336  :   dest[2][2] =  cx * cy;

  00258	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0025d	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00262	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00267	d1 e0		 shl	 eax, 1
  00269	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0026c	b9 04 00 00 00	 mov	 ecx, 4
  00271	d1 e1		 shl	 ecx, 1
  00273	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 337  :   dest[0][3] =  0.0f;

  00278	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0027d	6b c8 00	 imul	 ecx, eax, 0
  00280	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00283	ba 04 00 00 00	 mov	 edx, 4
  00288	6b c2 03	 imul	 eax, edx, 3
  0028b	0f 57 c0	 xorps	 xmm0, xmm0
  0028e	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 338  :   dest[1][3] =  0.0f;

  00293	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00298	c1 e0 00	 shl	 eax, 0
  0029b	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0029e	b9 04 00 00 00	 mov	 ecx, 4
  002a3	6b d1 03	 imul	 edx, ecx, 3
  002a6	0f 57 c0	 xorps	 xmm0, xmm0
  002a9	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 339  :   dest[2][3] =  0.0f;

  002ae	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002b3	d1 e0		 shl	 eax, 1
  002b5	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002b8	b9 04 00 00 00	 mov	 ecx, 4
  002bd	6b d1 03	 imul	 edx, ecx, 3
  002c0	0f 57 c0	 xorps	 xmm0, xmm0
  002c3	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 340  :   dest[3][0] =  0.0f;

  002c8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002cd	6b c8 03	 imul	 ecx, eax, 3
  002d0	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002d3	ba 04 00 00 00	 mov	 edx, 4
  002d8	6b c2 00	 imul	 eax, edx, 0
  002db	0f 57 c0	 xorps	 xmm0, xmm0
  002de	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 341  :   dest[3][1] =  0.0f;

  002e3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002e8	6b c8 03	 imul	 ecx, eax, 3
  002eb	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002ee	ba 04 00 00 00	 mov	 edx, 4
  002f3	c1 e2 00	 shl	 edx, 0
  002f6	0f 57 c0	 xorps	 xmm0, xmm0
  002f9	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 342  :   dest[3][2] =  0.0f;

  002fe	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00303	6b c8 03	 imul	 ecx, eax, 3
  00306	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00309	ba 04 00 00 00	 mov	 edx, 4
  0030e	d1 e2		 shl	 edx, 1
  00310	0f 57 c0	 xorps	 xmm0, xmm0
  00313	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 343  :   dest[3][3] =  1.0f;

  00318	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0031d	6b c8 03	 imul	 ecx, eax, 3
  00320	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00323	ba 04 00 00 00	 mov	 edx, 4
  00328	6b c2 03	 imul	 eax, edx, 3
  0032b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00333	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 344  : }

  00338	5f		 pop	 edi
  00339	5e		 pop	 esi
  0033a	5b		 pop	 ebx
  0033b	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  00341	3b ec		 cmp	 ebp, esp
  00343	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00348	8b e5		 mov	 esp, ebp
  0034a	5d		 pop	 ebp
  0034b	c3		 ret	 0
_glm_euler_zyx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler_zxy
_TEXT	SEGMENT
_cysz$ = -104						; size = 4
_sxsy$ = -92						; size = 4
_cycz$ = -80						; size = 4
_sz$ = -68						; size = 4
_sy$ = -56						; size = 4
_sx$ = -44						; size = 4
_cz$ = -32						; size = 4
_cy$ = -20						; size = 4
_cx$ = -8						; size = 4
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_euler_zxy PROC					; COMDAT

; 278  : glm_euler_zxy(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 279  :   float cx, cy, cz,
; 280  :         sx, sy, sz, cycz, sxsy, cysz;
; 281  : 
; 282  :   sx   = sinf(angles[0]); cx = cosf(angles[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _sinf
  00043	83 c4 04	 add	 esp, 4
  00046	d9 5d d4	 fstp	 DWORD PTR _sx$[ebp]
  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _cosf
  00064	83 c4 04	 add	 esp, 4
  00067	d9 5d f8	 fstp	 DWORD PTR _cx$[ebp]

; 283  :   sy   = sinf(angles[1]); cy = cosf(angles[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _sinf
  00085	83 c4 04	 add	 esp, 4
  00088	d9 5d c8	 fstp	 DWORD PTR _sy$[ebp]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	e8 00 00 00 00	 call	 _cosf
  000a6	83 c4 04	 add	 esp, 4
  000a9	d9 5d ec	 fstp	 DWORD PTR _cy$[ebp]

; 284  :   sz   = sinf(angles[2]); cz = cosf(angles[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	e8 00 00 00 00	 call	 _sinf
  000c6	83 c4 04	 add	 esp, 4
  000c9	d9 5d bc	 fstp	 DWORD PTR _sz$[ebp]
  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	d1 e0		 shl	 eax, 1
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 _cosf
  000e6	83 c4 04	 add	 esp, 4
  000e9	d9 5d e0	 fstp	 DWORD PTR _cz$[ebp]

; 285  : 
; 286  :   cycz = cy * cz;

  000ec	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  000f1	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  000f6	f3 0f 11 45 b0	 movss	 DWORD PTR _cycz$[ebp], xmm0

; 287  :   sxsy = sx * sy;

  000fb	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00100	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00105	f3 0f 11 45 a4	 movss	 DWORD PTR _sxsy$[ebp], xmm0

; 288  :   cysz = cy * sz;

  0010a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0010f	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00114	f3 0f 11 45 98	 movss	 DWORD PTR _cysz$[ebp], xmm0

; 289  : 
; 290  :   dest[0][0] =  cycz - sxsy * sz;

  00119	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _sxsy$[ebp]
  0011e	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00123	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _cycz$[ebp]
  00128	f3 0f 5c c8	 subss	 xmm1, xmm0
  0012c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00137	ba 04 00 00 00	 mov	 edx, 4
  0013c	6b c2 00	 imul	 eax, edx, 0
  0013f	f3 0f 11 0c 01	 movss	 DWORD PTR [ecx+eax], xmm1

; 291  :   dest[0][1] =  cz * sxsy + cysz;

  00144	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  00149	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _sxsy$[ebp]
  0014e	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _cysz$[ebp]
  00153	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00158	6b c8 00	 imul	 ecx, eax, 0
  0015b	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0015e	ba 04 00 00 00	 mov	 edx, 4
  00163	c1 e2 00	 shl	 edx, 0
  00166	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 292  :   dest[0][2] = -cx * sy;

  0016b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00170	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00177	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  0017c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00181	6b c8 00	 imul	 ecx, eax, 0
  00184	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00187	ba 04 00 00 00	 mov	 edx, 4
  0018c	d1 e2		 shl	 edx, 1
  0018e	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 293  :   dest[1][0] = -cx * sz;

  00193	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00198	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0019f	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  001a4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a9	c1 e0 00	 shl	 eax, 0
  001ac	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001af	b9 04 00 00 00	 mov	 ecx, 4
  001b4	6b d1 00	 imul	 edx, ecx, 0
  001b7	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 294  :   dest[1][1] =  cx * cz;

  001bc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  001c1	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  001c6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001cb	c1 e0 00	 shl	 eax, 0
  001ce	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001d1	b9 04 00 00 00	 mov	 ecx, 4
  001d6	c1 e1 00	 shl	 ecx, 0
  001d9	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 295  :   dest[1][2] =  sx;

  001de	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001e3	c1 e0 00	 shl	 eax, 0
  001e6	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001e9	b9 04 00 00 00	 mov	 ecx, 4
  001ee	d1 e1		 shl	 ecx, 1
  001f0	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  001f5	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 296  :   dest[2][0] =  cz * sy + cysz * sx;

  001fa	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  001ff	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00204	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _cysz$[ebp]
  00209	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _sx$[ebp]
  0020e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00212	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00217	d1 e0		 shl	 eax, 1
  00219	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0021c	b9 04 00 00 00	 mov	 ecx, 4
  00221	6b d1 00	 imul	 edx, ecx, 0
  00224	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 297  :   dest[2][1] = -cycz * sx + sy * sz;

  00229	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cycz$[ebp]
  0022e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00235	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  0023a	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _sy$[ebp]
  0023f	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  00244	f3 0f 58 c1	 addss	 xmm0, xmm1
  00248	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0024d	d1 e0		 shl	 eax, 1
  0024f	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00252	b9 04 00 00 00	 mov	 ecx, 4
  00257	c1 e1 00	 shl	 ecx, 0
  0025a	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 298  :   dest[2][2] =  cx * cy;

  0025f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00264	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00269	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0026e	d1 e0		 shl	 eax, 1
  00270	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00273	b9 04 00 00 00	 mov	 ecx, 4
  00278	d1 e1		 shl	 ecx, 1
  0027a	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 299  :   dest[0][3] =  0.0f;

  0027f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00284	6b c8 00	 imul	 ecx, eax, 0
  00287	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0028a	ba 04 00 00 00	 mov	 edx, 4
  0028f	6b c2 03	 imul	 eax, edx, 3
  00292	0f 57 c0	 xorps	 xmm0, xmm0
  00295	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 300  :   dest[1][3] =  0.0f;

  0029a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0029f	c1 e0 00	 shl	 eax, 0
  002a2	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002a5	b9 04 00 00 00	 mov	 ecx, 4
  002aa	6b d1 03	 imul	 edx, ecx, 3
  002ad	0f 57 c0	 xorps	 xmm0, xmm0
  002b0	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 301  :   dest[2][3] =  0.0f;

  002b5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002ba	d1 e0		 shl	 eax, 1
  002bc	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002bf	b9 04 00 00 00	 mov	 ecx, 4
  002c4	6b d1 03	 imul	 edx, ecx, 3
  002c7	0f 57 c0	 xorps	 xmm0, xmm0
  002ca	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 302  :   dest[3][0] =  0.0f;

  002cf	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002d4	6b c8 03	 imul	 ecx, eax, 3
  002d7	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002da	ba 04 00 00 00	 mov	 edx, 4
  002df	6b c2 00	 imul	 eax, edx, 0
  002e2	0f 57 c0	 xorps	 xmm0, xmm0
  002e5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 303  :   dest[3][1] =  0.0f;

  002ea	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002ef	6b c8 03	 imul	 ecx, eax, 3
  002f2	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002f5	ba 04 00 00 00	 mov	 edx, 4
  002fa	c1 e2 00	 shl	 edx, 0
  002fd	0f 57 c0	 xorps	 xmm0, xmm0
  00300	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 304  :   dest[3][2] =  0.0f;

  00305	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0030a	6b c8 03	 imul	 ecx, eax, 3
  0030d	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00310	ba 04 00 00 00	 mov	 edx, 4
  00315	d1 e2		 shl	 edx, 1
  00317	0f 57 c0	 xorps	 xmm0, xmm0
  0031a	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 305  :   dest[3][3] =  1.0f;

  0031f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00324	6b c8 03	 imul	 ecx, eax, 3
  00327	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0032a	ba 04 00 00 00	 mov	 edx, 4
  0032f	6b c2 03	 imul	 eax, edx, 3
  00332	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0033a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 306  : }

  0033f	5f		 pop	 edi
  00340	5e		 pop	 esi
  00341	5b		 pop	 ebx
  00342	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  00348	3b ec		 cmp	 ebp, esp
  0034a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034f	8b e5		 mov	 esp, ebp
  00351	5d		 pop	 ebp
  00352	c3		 ret	 0
_glm_euler_zxy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler_yzx
_TEXT	SEGMENT
_cxsy$ = -116						; size = 4
_cysx$ = -104						; size = 4
_cxcy$ = -92						; size = 4
_sxsy$ = -80						; size = 4
_sz$ = -68						; size = 4
_sy$ = -56						; size = 4
_sx$ = -44						; size = 4
_cz$ = -32						; size = 4
_cy$ = -20						; size = 4
_cx$ = -8						; size = 4
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_euler_yzx PROC					; COMDAT

; 239  : glm_euler_yzx(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00012	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 240  :   float cx, cy, cz,
; 241  :         sx, sy, sz, sxsy, cxcy, cysx, cxsy;
; 242  : 
; 243  :   sx   = sinf(angles[0]); cx = cosf(angles[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _sinf
  00043	83 c4 04	 add	 esp, 4
  00046	d9 5d d4	 fstp	 DWORD PTR _sx$[ebp]
  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _cosf
  00064	83 c4 04	 add	 esp, 4
  00067	d9 5d f8	 fstp	 DWORD PTR _cx$[ebp]

; 244  :   sy   = sinf(angles[1]); cy = cosf(angles[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _sinf
  00085	83 c4 04	 add	 esp, 4
  00088	d9 5d c8	 fstp	 DWORD PTR _sy$[ebp]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	e8 00 00 00 00	 call	 _cosf
  000a6	83 c4 04	 add	 esp, 4
  000a9	d9 5d ec	 fstp	 DWORD PTR _cy$[ebp]

; 245  :   sz   = sinf(angles[2]); cz = cosf(angles[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	e8 00 00 00 00	 call	 _sinf
  000c6	83 c4 04	 add	 esp, 4
  000c9	d9 5d bc	 fstp	 DWORD PTR _sz$[ebp]
  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	d1 e0		 shl	 eax, 1
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 _cosf
  000e6	83 c4 04	 add	 esp, 4
  000e9	d9 5d e0	 fstp	 DWORD PTR _cz$[ebp]

; 246  : 
; 247  :   sxsy = sx * sy;

  000ec	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000f1	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  000f6	f3 0f 11 45 b0	 movss	 DWORD PTR _sxsy$[ebp], xmm0

; 248  :   cxcy = cx * cy;

  000fb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00100	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00105	f3 0f 11 45 a4	 movss	 DWORD PTR _cxcy$[ebp], xmm0

; 249  :   cysx = cy * sx;

  0010a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0010f	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  00114	f3 0f 11 45 98	 movss	 DWORD PTR _cysx$[ebp], xmm0

; 250  :   cxsy = cx * sy;

  00119	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0011e	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00123	f3 0f 11 45 8c	 movss	 DWORD PTR _cxsy$[ebp], xmm0

; 251  : 
; 252  :   dest[0][0] =  cy * cz;

  00128	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0012d	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  00132	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00137	6b c8 00	 imul	 ecx, eax, 0
  0013a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0013d	ba 04 00 00 00	 mov	 edx, 4
  00142	6b c2 00	 imul	 eax, edx, 0
  00145	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 253  :   dest[0][1] =  sz;

  0014a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0014f	6b c8 00	 imul	 ecx, eax, 0
  00152	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00155	ba 04 00 00 00	 mov	 edx, 4
  0015a	c1 e2 00	 shl	 edx, 0
  0015d	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _sz$[ebp]
  00162	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 254  :   dest[0][2] = -cz * sy;

  00167	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  0016c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00173	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00178	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00183	ba 04 00 00 00	 mov	 edx, 4
  00188	d1 e2		 shl	 edx, 1
  0018a	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 255  :   dest[1][0] =  sxsy - cxcy * sz;

  0018f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _cxcy$[ebp]
  00194	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00199	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _sxsy$[ebp]
  0019e	f3 0f 5c c8	 subss	 xmm1, xmm0
  001a2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a7	c1 e0 00	 shl	 eax, 0
  001aa	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001ad	b9 04 00 00 00	 mov	 ecx, 4
  001b2	6b d1 00	 imul	 edx, ecx, 0
  001b5	f3 0f 11 0c 10	 movss	 DWORD PTR [eax+edx], xmm1

; 256  :   dest[1][1] =  cx * cz;

  001ba	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  001bf	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  001c4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001c9	c1 e0 00	 shl	 eax, 0
  001cc	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001cf	b9 04 00 00 00	 mov	 ecx, 4
  001d4	c1 e1 00	 shl	 ecx, 0
  001d7	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 257  :   dest[1][2] =  cysx + cxsy * sz;

  001dc	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _cxsy$[ebp]
  001e1	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  001e6	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR _cysx$[ebp]
  001eb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001f0	c1 e0 00	 shl	 eax, 0
  001f3	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001f6	b9 04 00 00 00	 mov	 ecx, 4
  001fb	d1 e1		 shl	 ecx, 1
  001fd	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 258  :   dest[2][0] =  cxsy + cysx * sz;

  00202	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _cysx$[ebp]
  00207	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  0020c	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _cxsy$[ebp]
  00211	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00216	d1 e0		 shl	 eax, 1
  00218	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0021b	b9 04 00 00 00	 mov	 ecx, 4
  00220	6b d1 00	 imul	 edx, ecx, 0
  00223	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 259  :   dest[2][1] = -cz * sx;

  00228	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  0022d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00234	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  00239	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0023e	d1 e0		 shl	 eax, 1
  00240	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00243	b9 04 00 00 00	 mov	 ecx, 4
  00248	c1 e1 00	 shl	 ecx, 0
  0024b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 260  :   dest[2][2] =  cxcy - sxsy * sz;

  00250	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _sxsy$[ebp]
  00255	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  0025a	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _cxcy$[ebp]
  0025f	f3 0f 5c c8	 subss	 xmm1, xmm0
  00263	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00268	d1 e0		 shl	 eax, 1
  0026a	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0026d	b9 04 00 00 00	 mov	 ecx, 4
  00272	d1 e1		 shl	 ecx, 1
  00274	f3 0f 11 0c 08	 movss	 DWORD PTR [eax+ecx], xmm1

; 261  :   dest[0][3] =  0.0f;

  00279	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0027e	6b c8 00	 imul	 ecx, eax, 0
  00281	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00284	ba 04 00 00 00	 mov	 edx, 4
  00289	6b c2 03	 imul	 eax, edx, 3
  0028c	0f 57 c0	 xorps	 xmm0, xmm0
  0028f	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 262  :   dest[1][3] =  0.0f;

  00294	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00299	c1 e0 00	 shl	 eax, 0
  0029c	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0029f	b9 04 00 00 00	 mov	 ecx, 4
  002a4	6b d1 03	 imul	 edx, ecx, 3
  002a7	0f 57 c0	 xorps	 xmm0, xmm0
  002aa	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 263  :   dest[2][3] =  0.0f;

  002af	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002b4	d1 e0		 shl	 eax, 1
  002b6	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002b9	b9 04 00 00 00	 mov	 ecx, 4
  002be	6b d1 03	 imul	 edx, ecx, 3
  002c1	0f 57 c0	 xorps	 xmm0, xmm0
  002c4	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 264  :   dest[3][0] =  0.0f;

  002c9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002ce	6b c8 03	 imul	 ecx, eax, 3
  002d1	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002d4	ba 04 00 00 00	 mov	 edx, 4
  002d9	6b c2 00	 imul	 eax, edx, 0
  002dc	0f 57 c0	 xorps	 xmm0, xmm0
  002df	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 265  :   dest[3][1] =  0.0f;

  002e4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002e9	6b c8 03	 imul	 ecx, eax, 3
  002ec	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002ef	ba 04 00 00 00	 mov	 edx, 4
  002f4	c1 e2 00	 shl	 edx, 0
  002f7	0f 57 c0	 xorps	 xmm0, xmm0
  002fa	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 266  :   dest[3][2] =  0.0f;

  002ff	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00304	6b c8 03	 imul	 ecx, eax, 3
  00307	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0030a	ba 04 00 00 00	 mov	 edx, 4
  0030f	d1 e2		 shl	 edx, 1
  00311	0f 57 c0	 xorps	 xmm0, xmm0
  00314	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 267  :   dest[3][3] =  1.0f;

  00319	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0031e	6b c8 03	 imul	 ecx, eax, 3
  00321	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00324	ba 04 00 00 00	 mov	 edx, 4
  00329	6b c2 03	 imul	 eax, edx, 3
  0032c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00334	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 268  : }

  00339	5f		 pop	 edi
  0033a	5e		 pop	 esi
  0033b	5b		 pop	 ebx
  0033c	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  00342	3b ec		 cmp	 ebp, esp
  00344	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00349	8b e5		 mov	 esp, ebp
  0034b	5d		 pop	 ebp
  0034c	c3		 ret	 0
_glm_euler_yzx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler_yxz
_TEXT	SEGMENT
_cysz$ = -116						; size = 4
_czsy$ = -104						; size = 4
_sysz$ = -92						; size = 4
_cycz$ = -80						; size = 4
_sz$ = -68						; size = 4
_sy$ = -56						; size = 4
_sx$ = -44						; size = 4
_cz$ = -32						; size = 4
_cy$ = -20						; size = 4
_cx$ = -8						; size = 4
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_euler_yxz PROC					; COMDAT

; 200  : glm_euler_yxz(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00012	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 201  :   float cx, cy, cz,
; 202  :         sx, sy, sz, cycz, sysz, czsy, cysz;
; 203  : 
; 204  :   sx   = sinf(angles[0]); cx = cosf(angles[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _sinf
  00043	83 c4 04	 add	 esp, 4
  00046	d9 5d d4	 fstp	 DWORD PTR _sx$[ebp]
  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _cosf
  00064	83 c4 04	 add	 esp, 4
  00067	d9 5d f8	 fstp	 DWORD PTR _cx$[ebp]

; 205  :   sy   = sinf(angles[1]); cy = cosf(angles[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _sinf
  00085	83 c4 04	 add	 esp, 4
  00088	d9 5d c8	 fstp	 DWORD PTR _sy$[ebp]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	e8 00 00 00 00	 call	 _cosf
  000a6	83 c4 04	 add	 esp, 4
  000a9	d9 5d ec	 fstp	 DWORD PTR _cy$[ebp]

; 206  :   sz   = sinf(angles[2]); cz = cosf(angles[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	e8 00 00 00 00	 call	 _sinf
  000c6	83 c4 04	 add	 esp, 4
  000c9	d9 5d bc	 fstp	 DWORD PTR _sz$[ebp]
  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	d1 e0		 shl	 eax, 1
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 _cosf
  000e6	83 c4 04	 add	 esp, 4
  000e9	d9 5d e0	 fstp	 DWORD PTR _cz$[ebp]

; 207  : 
; 208  :   cycz = cy * cz;

  000ec	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  000f1	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  000f6	f3 0f 11 45 b0	 movss	 DWORD PTR _cycz$[ebp], xmm0

; 209  :   sysz = sy * sz;

  000fb	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00100	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00105	f3 0f 11 45 a4	 movss	 DWORD PTR _sysz$[ebp], xmm0

; 210  :   czsy = cz * sy;

  0010a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  0010f	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00114	f3 0f 11 45 98	 movss	 DWORD PTR _czsy$[ebp], xmm0

; 211  :   cysz = cy * sz;

  00119	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0011e	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00123	f3 0f 11 45 8c	 movss	 DWORD PTR _cysz$[ebp], xmm0

; 212  : 
; 213  :   dest[0][0] =  cycz + sx * sysz;

  00128	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0012d	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  00132	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _cycz$[ebp]
  00137	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013c	6b c8 00	 imul	 ecx, eax, 0
  0013f	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00142	ba 04 00 00 00	 mov	 edx, 4
  00147	6b c2 00	 imul	 eax, edx, 0
  0014a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 214  :   dest[0][1] =  cx * sz;

  0014f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00154	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00159	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0015e	6b c8 00	 imul	 ecx, eax, 0
  00161	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00164	ba 04 00 00 00	 mov	 edx, 4
  00169	c1 e2 00	 shl	 edx, 0
  0016c	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 215  :   dest[0][2] = -czsy + cysz * sx;

  00171	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _czsy$[ebp]
  00176	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0017d	f3 0f 10 4d 8c	 movss	 xmm1, DWORD PTR _cysz$[ebp]
  00182	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _sx$[ebp]
  00187	f3 0f 58 c1	 addss	 xmm0, xmm1
  0018b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00190	6b c8 00	 imul	 ecx, eax, 0
  00193	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00196	ba 04 00 00 00	 mov	 edx, 4
  0019b	d1 e2		 shl	 edx, 1
  0019d	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 216  :   dest[1][0] = -cysz + czsy * sx;

  001a2	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _cysz$[ebp]
  001a7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001ae	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _czsy$[ebp]
  001b3	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _sx$[ebp]
  001b8	f3 0f 58 c1	 addss	 xmm0, xmm1
  001bc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001c1	c1 e0 00	 shl	 eax, 0
  001c4	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001c7	b9 04 00 00 00	 mov	 ecx, 4
  001cc	6b d1 00	 imul	 edx, ecx, 0
  001cf	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 217  :   dest[1][1] =  cx * cz;

  001d4	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  001d9	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  001de	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001e3	c1 e0 00	 shl	 eax, 0
  001e6	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001e9	b9 04 00 00 00	 mov	 ecx, 4
  001ee	c1 e1 00	 shl	 ecx, 0
  001f1	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 218  :   dest[1][2] =  cycz * sx + sysz;

  001f6	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _cycz$[ebp]
  001fb	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  00200	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _sysz$[ebp]
  00205	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0020a	c1 e0 00	 shl	 eax, 0
  0020d	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00210	b9 04 00 00 00	 mov	 ecx, 4
  00215	d1 e1		 shl	 ecx, 1
  00217	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 219  :   dest[2][0] =  cx * sy;

  0021c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00221	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00226	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0022b	d1 e0		 shl	 eax, 1
  0022d	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00230	b9 04 00 00 00	 mov	 ecx, 4
  00235	6b d1 00	 imul	 edx, ecx, 0
  00238	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 220  :   dest[2][1] = -sx;

  0023d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00242	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00249	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0024e	d1 e0		 shl	 eax, 1
  00250	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00253	b9 04 00 00 00	 mov	 ecx, 4
  00258	c1 e1 00	 shl	 ecx, 0
  0025b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 221  :   dest[2][2] =  cx * cy;

  00260	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00265	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  0026a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0026f	d1 e0		 shl	 eax, 1
  00271	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00274	b9 04 00 00 00	 mov	 ecx, 4
  00279	d1 e1		 shl	 ecx, 1
  0027b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 222  :   dest[0][3] =  0.0f;

  00280	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00285	6b c8 00	 imul	 ecx, eax, 0
  00288	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0028b	ba 04 00 00 00	 mov	 edx, 4
  00290	6b c2 03	 imul	 eax, edx, 3
  00293	0f 57 c0	 xorps	 xmm0, xmm0
  00296	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 223  :   dest[1][3] =  0.0f;

  0029b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002a0	c1 e0 00	 shl	 eax, 0
  002a3	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002a6	b9 04 00 00 00	 mov	 ecx, 4
  002ab	6b d1 03	 imul	 edx, ecx, 3
  002ae	0f 57 c0	 xorps	 xmm0, xmm0
  002b1	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 224  :   dest[2][3] =  0.0f;

  002b6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002bb	d1 e0		 shl	 eax, 1
  002bd	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002c0	b9 04 00 00 00	 mov	 ecx, 4
  002c5	6b d1 03	 imul	 edx, ecx, 3
  002c8	0f 57 c0	 xorps	 xmm0, xmm0
  002cb	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 225  :   dest[3][0] =  0.0f;

  002d0	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002d5	6b c8 03	 imul	 ecx, eax, 3
  002d8	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002db	ba 04 00 00 00	 mov	 edx, 4
  002e0	6b c2 00	 imul	 eax, edx, 0
  002e3	0f 57 c0	 xorps	 xmm0, xmm0
  002e6	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 226  :   dest[3][1] =  0.0f;

  002eb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002f0	6b c8 03	 imul	 ecx, eax, 3
  002f3	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002f6	ba 04 00 00 00	 mov	 edx, 4
  002fb	c1 e2 00	 shl	 edx, 0
  002fe	0f 57 c0	 xorps	 xmm0, xmm0
  00301	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 227  :   dest[3][2] =  0.0f;

  00306	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0030b	6b c8 03	 imul	 ecx, eax, 3
  0030e	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00311	ba 04 00 00 00	 mov	 edx, 4
  00316	d1 e2		 shl	 edx, 1
  00318	0f 57 c0	 xorps	 xmm0, xmm0
  0031b	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 228  :   dest[3][3] =  1.0f;

  00320	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00325	6b c8 03	 imul	 ecx, eax, 3
  00328	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0032b	ba 04 00 00 00	 mov	 edx, 4
  00330	6b c2 03	 imul	 eax, edx, 3
  00333	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0033b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 229  : }

  00340	5f		 pop	 edi
  00341	5e		 pop	 esi
  00342	5b		 pop	 ebx
  00343	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  00349	3b ec		 cmp	 ebp, esp
  0034b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00350	8b e5		 mov	 esp, ebp
  00352	5d		 pop	 ebp
  00353	c3		 ret	 0
_glm_euler_yxz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler_xzy
_TEXT	SEGMENT
_cxcy$ = -116						; size = 4
_cxsy$ = -104						; size = 4
_cysx$ = -92						; size = 4
_sxsy$ = -80						; size = 4
_sz$ = -68						; size = 4
_sy$ = -56						; size = 4
_sx$ = -44						; size = 4
_cz$ = -32						; size = 4
_cy$ = -20						; size = 4
_cx$ = -8						; size = 4
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_euler_xzy PROC					; COMDAT

; 160  : glm_euler_xzy(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00012	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 161  :   float cx, cy, cz,
; 162  :   sx, sy, sz, sxsy, cysx, cxsy, cxcy;
; 163  : 
; 164  :   sx   = sinf(angles[0]); cx = cosf(angles[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _sinf
  00043	83 c4 04	 add	 esp, 4
  00046	d9 5d d4	 fstp	 DWORD PTR _sx$[ebp]
  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _cosf
  00064	83 c4 04	 add	 esp, 4
  00067	d9 5d f8	 fstp	 DWORD PTR _cx$[ebp]

; 165  :   sy   = sinf(angles[1]); cy = cosf(angles[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _sinf
  00085	83 c4 04	 add	 esp, 4
  00088	d9 5d c8	 fstp	 DWORD PTR _sy$[ebp]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	e8 00 00 00 00	 call	 _cosf
  000a6	83 c4 04	 add	 esp, 4
  000a9	d9 5d ec	 fstp	 DWORD PTR _cy$[ebp]

; 166  :   sz   = sinf(angles[2]); cz = cosf(angles[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	e8 00 00 00 00	 call	 _sinf
  000c6	83 c4 04	 add	 esp, 4
  000c9	d9 5d bc	 fstp	 DWORD PTR _sz$[ebp]
  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	d1 e0		 shl	 eax, 1
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 _cosf
  000e6	83 c4 04	 add	 esp, 4
  000e9	d9 5d e0	 fstp	 DWORD PTR _cz$[ebp]

; 167  : 
; 168  :   sxsy = sx * sy;

  000ec	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000f1	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  000f6	f3 0f 11 45 b0	 movss	 DWORD PTR _sxsy$[ebp], xmm0

; 169  :   cysx = cy * sx;

  000fb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  00100	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  00105	f3 0f 11 45 a4	 movss	 DWORD PTR _cysx$[ebp], xmm0

; 170  :   cxsy = cx * sy;

  0010a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0010f	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00114	f3 0f 11 45 98	 movss	 DWORD PTR _cxsy$[ebp], xmm0

; 171  :   cxcy = cx * cy;

  00119	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0011e	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00123	f3 0f 11 45 8c	 movss	 DWORD PTR _cxcy$[ebp], xmm0

; 172  : 
; 173  :   dest[0][0] =  cy * cz;

  00128	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0012d	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  00132	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00137	6b c8 00	 imul	 ecx, eax, 0
  0013a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0013d	ba 04 00 00 00	 mov	 edx, 4
  00142	6b c2 00	 imul	 eax, edx, 0
  00145	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 174  :   dest[0][1] =  sxsy + cxcy * sz;

  0014a	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _cxcy$[ebp]
  0014f	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00154	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _sxsy$[ebp]
  00159	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0015e	6b c8 00	 imul	 ecx, eax, 0
  00161	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00164	ba 04 00 00 00	 mov	 edx, 4
  00169	c1 e2 00	 shl	 edx, 0
  0016c	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 175  :   dest[0][2] = -cxsy + cysx * sz;

  00171	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _cxsy$[ebp]
  00176	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0017d	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _cysx$[ebp]
  00182	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  00187	f3 0f 58 c1	 addss	 xmm0, xmm1
  0018b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00190	6b c8 00	 imul	 ecx, eax, 0
  00193	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00196	ba 04 00 00 00	 mov	 edx, 4
  0019b	d1 e2		 shl	 edx, 1
  0019d	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 176  :   dest[1][0] = -sz;

  001a2	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _sz$[ebp]
  001a7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001ae	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001b3	c1 e0 00	 shl	 eax, 0
  001b6	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001b9	b9 04 00 00 00	 mov	 ecx, 4
  001be	6b d1 00	 imul	 edx, ecx, 0
  001c1	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 177  :   dest[1][1] =  cx * cz;

  001c6	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  001cb	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  001d0	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001d5	c1 e0 00	 shl	 eax, 0
  001d8	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001db	b9 04 00 00 00	 mov	 ecx, 4
  001e0	c1 e1 00	 shl	 ecx, 0
  001e3	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 178  :   dest[1][2] =  cz * sx;

  001e8	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  001ed	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  001f2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001f7	c1 e0 00	 shl	 eax, 0
  001fa	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001fd	b9 04 00 00 00	 mov	 ecx, 4
  00202	d1 e1		 shl	 ecx, 1
  00204	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 179  :   dest[2][0] =  cz * sy;

  00209	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  0020e	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00213	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00218	d1 e0		 shl	 eax, 1
  0021a	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0021d	b9 04 00 00 00	 mov	 ecx, 4
  00222	6b d1 00	 imul	 edx, ecx, 0
  00225	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 180  :   dest[2][1] = -cysx + cxsy * sz;

  0022a	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _cysx$[ebp]
  0022f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00236	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _cxsy$[ebp]
  0023b	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  00240	f3 0f 58 c1	 addss	 xmm0, xmm1
  00244	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00249	d1 e0		 shl	 eax, 1
  0024b	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0024e	b9 04 00 00 00	 mov	 ecx, 4
  00253	c1 e1 00	 shl	 ecx, 0
  00256	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 181  :   dest[2][2] =  cxcy + sxsy * sz;

  0025b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _sxsy$[ebp]
  00260	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00265	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _cxcy$[ebp]
  0026a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0026f	d1 e0		 shl	 eax, 1
  00271	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00274	b9 04 00 00 00	 mov	 ecx, 4
  00279	d1 e1		 shl	 ecx, 1
  0027b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 182  :   dest[0][3] =  0.0f;

  00280	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00285	6b c8 00	 imul	 ecx, eax, 0
  00288	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0028b	ba 04 00 00 00	 mov	 edx, 4
  00290	6b c2 03	 imul	 eax, edx, 3
  00293	0f 57 c0	 xorps	 xmm0, xmm0
  00296	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 183  :   dest[1][3] =  0.0f;

  0029b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002a0	c1 e0 00	 shl	 eax, 0
  002a3	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002a6	b9 04 00 00 00	 mov	 ecx, 4
  002ab	6b d1 03	 imul	 edx, ecx, 3
  002ae	0f 57 c0	 xorps	 xmm0, xmm0
  002b1	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 184  :   dest[2][3] =  0.0f;

  002b6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002bb	d1 e0		 shl	 eax, 1
  002bd	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002c0	b9 04 00 00 00	 mov	 ecx, 4
  002c5	6b d1 03	 imul	 edx, ecx, 3
  002c8	0f 57 c0	 xorps	 xmm0, xmm0
  002cb	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 185  :   dest[3][0] =  0.0f;

  002d0	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002d5	6b c8 03	 imul	 ecx, eax, 3
  002d8	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002db	ba 04 00 00 00	 mov	 edx, 4
  002e0	6b c2 00	 imul	 eax, edx, 0
  002e3	0f 57 c0	 xorps	 xmm0, xmm0
  002e6	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 186  :   dest[3][1] =  0.0f;

  002eb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002f0	6b c8 03	 imul	 ecx, eax, 3
  002f3	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002f6	ba 04 00 00 00	 mov	 edx, 4
  002fb	c1 e2 00	 shl	 edx, 0
  002fe	0f 57 c0	 xorps	 xmm0, xmm0
  00301	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 187  :   dest[3][2] =  0.0f;

  00306	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0030b	6b c8 03	 imul	 ecx, eax, 3
  0030e	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00311	ba 04 00 00 00	 mov	 edx, 4
  00316	d1 e2		 shl	 edx, 1
  00318	0f 57 c0	 xorps	 xmm0, xmm0
  0031b	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 188  :   dest[3][3] =  1.0f;

  00320	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00325	6b c8 03	 imul	 ecx, eax, 3
  00328	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0032b	ba 04 00 00 00	 mov	 edx, 4
  00330	6b c2 03	 imul	 eax, edx, 3
  00333	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0033b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 189  : }

  00340	5f		 pop	 edi
  00341	5e		 pop	 esi
  00342	5b		 pop	 ebx
  00343	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  00349	3b ec		 cmp	 ebp, esp
  0034b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00350	8b e5		 mov	 esp, ebp
  00352	5d		 pop	 ebp
  00353	c3		 ret	 0
_glm_euler_xzy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler
_TEXT	SEGMENT
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_euler PROC						; COMDAT

; 148  : glm_euler(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 149  :   glm_euler_xyz(angles, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_euler_xyz
  00035	83 c4 08	 add	 esp, 8

; 150  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_euler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler_xyz
_TEXT	SEGMENT
_sysz$ = -104						; size = 4
_cxcz$ = -92						; size = 4
_czsx$ = -80						; size = 4
_sz$ = -68						; size = 4
_sy$ = -56						; size = 4
_sx$ = -44						; size = 4
_cz$ = -32						; size = 4
_cy$ = -20						; size = 4
_cx$ = -8						; size = 4
_angles$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_euler_xyz PROC					; COMDAT

; 110  : glm_euler_xyz(vec3 angles, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  :   float cx, cy, cz,
; 112  :         sx, sy, sz, czsx, cxcz, sysz;
; 113  : 
; 114  :   sx   = sinf(angles[0]); cx = cosf(angles[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _sinf
  00043	83 c4 04	 add	 esp, 4
  00046	d9 5d d4	 fstp	 DWORD PTR _sx$[ebp]
  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	6b c8 00	 imul	 ecx, eax, 0
  00051	8b 55 08	 mov	 edx, DWORD PTR _angles$[ebp]
  00054	51		 push	 ecx
  00055	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _cosf
  00064	83 c4 04	 add	 esp, 4
  00067	d9 5d f8	 fstp	 DWORD PTR _cx$[ebp]

; 115  :   sy   = sinf(angles[1]); cy = cosf(angles[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _sinf
  00085	83 c4 04	 add	 esp, 4
  00088	d9 5d c8	 fstp	 DWORD PTR _sy$[ebp]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	c1 e0 00	 shl	 eax, 0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  00096	51		 push	 ecx
  00097	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	e8 00 00 00 00	 call	 _cosf
  000a6	83 c4 04	 add	 esp, 4
  000a9	d9 5d ec	 fstp	 DWORD PTR _cy$[ebp]

; 116  :   sz   = sinf(angles[2]); cz = cosf(angles[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	e8 00 00 00 00	 call	 _sinf
  000c6	83 c4 04	 add	 esp, 4
  000c9	d9 5d bc	 fstp	 DWORD PTR _sz$[ebp]
  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	d1 e0		 shl	 eax, 1
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _angles$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 _cosf
  000e6	83 c4 04	 add	 esp, 4
  000e9	d9 5d e0	 fstp	 DWORD PTR _cz$[ebp]

; 117  : 
; 118  :   czsx = cz * sx;

  000ec	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _cz$[ebp]
  000f1	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  000f6	f3 0f 11 45 b0	 movss	 DWORD PTR _czsx$[ebp], xmm0

; 119  :   cxcz = cx * cz;

  000fb	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00100	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  00105	f3 0f 11 45 a4	 movss	 DWORD PTR _cxcz$[ebp], xmm0

; 120  :   sysz = sy * sz;

  0010a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0010f	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  00114	f3 0f 11 45 98	 movss	 DWORD PTR _sysz$[ebp], xmm0

; 121  : 
; 122  :   dest[0][0] =  cy * cz;

  00119	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0011e	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _cz$[ebp]
  00123	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00128	6b c8 00	 imul	 ecx, eax, 0
  0012b	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0012e	ba 04 00 00 00	 mov	 edx, 4
  00133	6b c2 00	 imul	 eax, edx, 0
  00136	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 123  :   dest[0][1] =  czsx * sy + cx * sz;

  0013b	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _czsx$[ebp]
  00140	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  00145	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _cx$[ebp]
  0014a	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  0014f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00153	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00158	6b c8 00	 imul	 ecx, eax, 0
  0015b	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0015e	ba 04 00 00 00	 mov	 edx, 4
  00163	c1 e2 00	 shl	 edx, 0
  00166	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 124  :   dest[0][2] = -cxcz * sy + sx * sz;

  0016b	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _cxcz$[ebp]
  00170	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00177	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _sy$[ebp]
  0017c	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _sx$[ebp]
  00181	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _sz$[ebp]
  00186	f3 0f 58 c1	 addss	 xmm0, xmm1
  0018a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0018f	6b c8 00	 imul	 ecx, eax, 0
  00192	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00195	ba 04 00 00 00	 mov	 edx, 4
  0019a	d1 e2		 shl	 edx, 1
  0019c	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 125  :   dest[1][0] = -cy * sz;

  001a1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  001a6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001ad	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _sz$[ebp]
  001b2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001b7	c1 e0 00	 shl	 eax, 0
  001ba	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001bd	b9 04 00 00 00	 mov	 ecx, 4
  001c2	6b d1 00	 imul	 edx, ecx, 0
  001c5	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 126  :   dest[1][1] =  cxcz - sx * sysz;

  001ca	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sx$[ebp]
  001cf	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  001d4	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _cxcz$[ebp]
  001d9	f3 0f 5c c8	 subss	 xmm1, xmm0
  001dd	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001e2	c1 e0 00	 shl	 eax, 0
  001e5	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001e8	b9 04 00 00 00	 mov	 ecx, 4
  001ed	c1 e1 00	 shl	 ecx, 0
  001f0	f3 0f 11 0c 08	 movss	 DWORD PTR [eax+ecx], xmm1

; 127  :   dest[1][2] =  czsx + cx * sysz;

  001f5	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  001fa	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _sysz$[ebp]
  001ff	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR _czsx$[ebp]
  00204	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00209	c1 e0 00	 shl	 eax, 0
  0020c	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0020f	b9 04 00 00 00	 mov	 ecx, 4
  00214	d1 e1		 shl	 ecx, 1
  00216	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 128  :   dest[2][0] =  sy;

  0021b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00220	d1 e0		 shl	 eax, 1
  00222	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00225	b9 04 00 00 00	 mov	 ecx, 4
  0022a	6b d1 00	 imul	 edx, ecx, 0
  0022d	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00232	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 129  :   dest[2][1] = -cy * sx;

  00237	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _cy$[ebp]
  0023c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00243	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  00248	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0024d	d1 e0		 shl	 eax, 1
  0024f	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00252	b9 04 00 00 00	 mov	 ecx, 4
  00257	c1 e1 00	 shl	 ecx, 0
  0025a	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 130  :   dest[2][2] =  cx * cy;

  0025f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00264	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _cy$[ebp]
  00269	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0026e	d1 e0		 shl	 eax, 1
  00270	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00273	b9 04 00 00 00	 mov	 ecx, 4
  00278	d1 e1		 shl	 ecx, 1
  0027a	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 131  :   dest[0][3] =  0.0f;

  0027f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00284	6b c8 00	 imul	 ecx, eax, 0
  00287	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0028a	ba 04 00 00 00	 mov	 edx, 4
  0028f	6b c2 03	 imul	 eax, edx, 3
  00292	0f 57 c0	 xorps	 xmm0, xmm0
  00295	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 132  :   dest[1][3] =  0.0f;

  0029a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0029f	c1 e0 00	 shl	 eax, 0
  002a2	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002a5	b9 04 00 00 00	 mov	 ecx, 4
  002aa	6b d1 03	 imul	 edx, ecx, 3
  002ad	0f 57 c0	 xorps	 xmm0, xmm0
  002b0	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 133  :   dest[2][3] =  0.0f;

  002b5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002ba	d1 e0		 shl	 eax, 1
  002bc	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002bf	b9 04 00 00 00	 mov	 ecx, 4
  002c4	6b d1 03	 imul	 edx, ecx, 3
  002c7	0f 57 c0	 xorps	 xmm0, xmm0
  002ca	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 134  :   dest[3][0] =  0.0f;

  002cf	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002d4	6b c8 03	 imul	 ecx, eax, 3
  002d7	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002da	ba 04 00 00 00	 mov	 edx, 4
  002df	6b c2 00	 imul	 eax, edx, 0
  002e2	0f 57 c0	 xorps	 xmm0, xmm0
  002e5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 135  :   dest[3][1] =  0.0f;

  002ea	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002ef	6b c8 03	 imul	 ecx, eax, 3
  002f2	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002f5	ba 04 00 00 00	 mov	 edx, 4
  002fa	c1 e2 00	 shl	 edx, 0
  002fd	0f 57 c0	 xorps	 xmm0, xmm0
  00300	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 136  :   dest[3][2] =  0.0f;

  00305	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0030a	6b c8 03	 imul	 ecx, eax, 3
  0030d	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00310	ba 04 00 00 00	 mov	 edx, 4
  00315	d1 e2		 shl	 edx, 1
  00317	0f 57 c0	 xorps	 xmm0, xmm0
  0031a	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 137  :   dest[3][3] =  1.0f;

  0031f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00324	6b c8 03	 imul	 ecx, eax, 3
  00327	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0032a	ba 04 00 00 00	 mov	 edx, 4
  0032f	6b c2 03	 imul	 eax, edx, 3
  00332	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0033a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 138  : }

  0033f	5f		 pop	 edi
  00340	5e		 pop	 esi
  00341	5b		 pop	 ebx
  00342	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  00348	3b ec		 cmp	 ebp, esp
  0034a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0034f	8b e5		 mov	 esp, ebp
  00351	5d		 pop	 ebp
  00352	c3		 ret	 0
_glm_euler_xyz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\euler.h
;	COMDAT _glm_euler_angles
_TEXT	SEGMENT
tv197 = -316						; size = 4
_thetaZ$ = -116						; size = 4
_thetaY$ = -104						; size = 4
_thetaX$ = -92						; size = 4
_m22$ = -80						; size = 4
_m21$ = -68						; size = 4
_m20$ = -56						; size = 4
_m11$ = -44						; size = 4
_m10$ = -32						; size = 4
_m01$ = -20						; size = 4
_m00$ = -8						; size = 4
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_euler_angles PROC					; COMDAT

; 72   : glm_euler_angles(mat4 m, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-316]
  00012	b9 4f 00 00 00	 mov	 ecx, 79			; 0000004fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __DBBFEDC2_euler@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 73   :   float m00, m01, m10, m11, m20, m21, m22;
; 74   :   float thetaX, thetaY, thetaZ;
; 75   : 
; 76   :   m00 = m[0][0];  m10 = m[1][0];  m20 = m[2][0];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _m00$[ebp], xmm0
  00045	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	6b d1 00	 imul	 edx, ecx, 0
  00058	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0005d	f3 0f 11 45 e0	 movss	 DWORD PTR _m10$[ebp], xmm0
  00062	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00067	d1 e0		 shl	 eax, 1
  00069	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0006c	b9 04 00 00 00	 mov	 ecx, 4
  00071	6b d1 00	 imul	 edx, ecx, 0
  00074	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00079	f3 0f 11 45 c8	 movss	 DWORD PTR _m20$[ebp], xmm0

; 77   :   m01 = m[0][1];  m11 = m[1][1];  m21 = m[2][1];

  0007e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00083	6b c8 00	 imul	 ecx, eax, 0
  00086	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00089	ba 04 00 00 00	 mov	 edx, 4
  0008e	c1 e2 00	 shl	 edx, 0
  00091	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00096	f3 0f 11 45 ec	 movss	 DWORD PTR _m01$[ebp], xmm0
  0009b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000a0	c1 e0 00	 shl	 eax, 0
  000a3	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000a6	b9 04 00 00 00	 mov	 ecx, 4
  000ab	c1 e1 00	 shl	 ecx, 0
  000ae	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000b3	f3 0f 11 45 d4	 movss	 DWORD PTR _m11$[ebp], xmm0
  000b8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000bd	d1 e0		 shl	 eax, 1
  000bf	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000c2	b9 04 00 00 00	 mov	 ecx, 4
  000c7	c1 e1 00	 shl	 ecx, 0
  000ca	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000cf	f3 0f 11 45 bc	 movss	 DWORD PTR _m21$[ebp], xmm0

; 78   :                                   m22 = m[2][2];

  000d4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d9	d1 e0		 shl	 eax, 1
  000db	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000de	b9 04 00 00 00	 mov	 ecx, 4
  000e3	d1 e1		 shl	 ecx, 1
  000e5	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000ea	f3 0f 11 45 b0	 movss	 DWORD PTR _m22$[ebp], xmm0

; 79   : 
; 80   :   if (m20 < 1.0f) {

  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f7	0f 2f 45 c8	 comiss	 xmm0, DWORD PTR _m20$[ebp]
  000fb	0f 86 c5 00 00
	00		 jbe	 $LN2@glm_euler_

; 81   :     if (m20 > -1.0f) {

  00101	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _m20$[ebp]
  00106	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@bf800000
  0010d	76 68		 jbe	 SHORT $LN4@glm_euler_

; 82   :       thetaY = asinf(m20);

  0010f	51		 push	 ecx
  00110	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _m20$[ebp]
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	e8 00 00 00 00	 call	 _asinf
  0011f	83 c4 04	 add	 esp, 4
  00122	d9 5d 98	 fstp	 DWORD PTR _thetaY$[ebp]

; 83   :       thetaX = atan2f(-m21, m22);

  00125	51		 push	 ecx
  00126	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _m22$[ebp]
  0012b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00130	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _m21$[ebp]
  00135	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0013c	51		 push	 ecx
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	e8 00 00 00 00	 call	 _atan2f
  00147	83 c4 08	 add	 esp, 8
  0014a	d9 5d a4	 fstp	 DWORD PTR _thetaX$[ebp]

; 84   :       thetaZ = atan2f(-m10, m00);

  0014d	51		 push	 ecx
  0014e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _m00$[ebp]
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _m10$[ebp]
  0015d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00164	51		 push	 ecx
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 _atan2f
  0016f	83 c4 08	 add	 esp, 8
  00172	d9 5d 8c	 fstp	 DWORD PTR _thetaZ$[ebp]

; 85   :     } else { /* m20 == -1 */

  00175	eb 4d		 jmp	 SHORT $LN5@glm_euler_
$LN4@glm_euler_:

; 86   :       /* Not a unique solution */
; 87   :       thetaY = -GLM_PI_2f;

  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  0017f	f3 0f 11 45 98	 movss	 DWORD PTR _thetaY$[ebp], xmm0

; 88   :       thetaX = -atan2f(m01, m11);

  00184	51		 push	 ecx
  00185	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _m11$[ebp]
  0018a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018f	51		 push	 ecx
  00190	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _m01$[ebp]
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	e8 00 00 00 00	 call	 _atan2f
  0019f	83 c4 08	 add	 esp, 8
  001a2	d9 9d c4 fe ff
	ff		 fstp	 DWORD PTR tv197[ebp]
  001a8	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR tv197[ebp]
  001b0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001b7	f3 0f 11 45 a4	 movss	 DWORD PTR _thetaX$[ebp], xmm0

; 89   :       thetaZ =  0.0f;

  001bc	0f 57 c0	 xorps	 xmm0, xmm0
  001bf	f3 0f 11 45 8c	 movss	 DWORD PTR _thetaZ$[ebp], xmm0
$LN5@glm_euler_:

; 90   :     }
; 91   :   } else { /* m20 == +1 */

  001c4	eb 36		 jmp	 SHORT $LN3@glm_euler_
$LN2@glm_euler_:

; 92   :     thetaY = GLM_PI_2f;

  001c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  001ce	f3 0f 11 45 98	 movss	 DWORD PTR _thetaY$[ebp], xmm0

; 93   :     thetaX = atan2f(m01, m11);

  001d3	51		 push	 ecx
  001d4	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _m11$[ebp]
  001d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001de	51		 push	 ecx
  001df	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _m01$[ebp]
  001e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e9	e8 00 00 00 00	 call	 _atan2f
  001ee	83 c4 08	 add	 esp, 8
  001f1	d9 5d a4	 fstp	 DWORD PTR _thetaX$[ebp]

; 94   :     thetaZ = 0.0f;

  001f4	0f 57 c0	 xorps	 xmm0, xmm0
  001f7	f3 0f 11 45 8c	 movss	 DWORD PTR _thetaZ$[ebp], xmm0
$LN3@glm_euler_:

; 95   :   }
; 96   : 
; 97   :   dest[0] = thetaX;

  001fc	b8 04 00 00 00	 mov	 eax, 4
  00201	6b c8 00	 imul	 ecx, eax, 0
  00204	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00207	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _thetaX$[ebp]
  0020c	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 98   :   dest[1] = thetaY;

  00211	b8 04 00 00 00	 mov	 eax, 4
  00216	c1 e0 00	 shl	 eax, 0
  00219	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  0021c	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _thetaY$[ebp]
  00221	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 99   :   dest[2] = thetaZ;

  00226	b8 04 00 00 00	 mov	 eax, 4
  0022b	d1 e0		 shl	 eax, 1
  0022d	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00230	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _thetaZ$[ebp]
  00235	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 100  : }

  0023a	5f		 pop	 edi
  0023b	5e		 pop	 esi
  0023c	5b		 pop	 ebx
  0023d	81 c4 3c 01 00
	00		 add	 esp, 316		; 0000013cH
  00243	3b ec		 cmp	 ebp, esp
  00245	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024a	8b e5		 mov	 esp, ebp
  0024c	5d		 pop	 ebp
  0024d	c3		 ret	 0
_glm_euler_angles ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 750  :             return (float)sin(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sin
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 751  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 649  :             return (float)cos(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _cos
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 650  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv75 = -196						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 633  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 634  :             return (float)atan2(_Y, _X);

  00028	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0003a	83 ec 08	 sub	 esp, 8
  0003d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 _atan2
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv75[ebp]
  00050	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv75[ebp]

; 635  :         }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 628  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 629  :             return (float)asin(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _asin
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 630  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
END
