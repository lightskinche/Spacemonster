; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__EEC1899F_mat3@c DB 01H
msvcjmc	ENDS
PUBLIC	_sqrtf
PUBLIC	_glm_vec3_copy
PUBLIC	_glm_vec3_dot
PUBLIC	_glm_mat3_mul_sse2
PUBLIC	_glm_mat3_copy
PUBLIC	_glm_mat3_identity
PUBLIC	_glm_mat3_identity_array
PUBLIC	_glm_mat3_zero
PUBLIC	_glm_mat3_mul
PUBLIC	_glm_mat3_transpose_to
PUBLIC	_glm_mat3_transpose
PUBLIC	_glm_mat3_mulv
PUBLIC	_glm_mat3_trace
PUBLIC	_glm_mat3_quat
PUBLIC	_glm_mat3_scale
PUBLIC	_glm_mat3_det
PUBLIC	_glm_mat3_inv
PUBLIC	_glm_mat3_swap_col
PUBLIC	_glm_mat3_swap_row
PUBLIC	_glm_mat3_rmc
PUBLIC	_glmc_mat3_copy
PUBLIC	_glmc_mat3_identity
PUBLIC	_glmc_mat3_zero
PUBLIC	_glmc_mat3_identity_array
PUBLIC	_glmc_mat3_mul
PUBLIC	_glmc_mat3_transpose_to
PUBLIC	_glmc_mat3_transpose
PUBLIC	_glmc_mat3_mulv
PUBLIC	_glmc_mat3_trace
PUBLIC	_glmc_mat3_quat
PUBLIC	_glmc_mat3_scale
PUBLIC	_glmc_mat3_det
PUBLIC	_glmc_mat3_inv
PUBLIC	_glmc_mat3_swap_col
PUBLIC	_glmc_mat3_swap_row
PUBLIC	_glmc_mat3_rmc
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_sqrt:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_rmc
_TEXT	SEGMENT
_r$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glmc_mat3_rmc PROC					; COMDAT

; 103  : glmc_mat3_rmc(vec3 r, mat3 m, vec3 c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 104  :   return glm_mat3_rmc(r, m, c);

  00028	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat3_rmc
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 105  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat3_rmc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_swap_row
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_row1$ = 12						; size = 4
_row2$ = 16						; size = 4
_glmc_mat3_swap_row PROC				; COMDAT

; 97   : glmc_mat3_swap_row(mat3 mat, int row1, int row2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 98   :   glm_mat3_swap_row(mat, row1, row2);

  00028	8b 45 10	 mov	 eax, DWORD PTR _row2$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _row1$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _mat$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat3_swap_row
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 99   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat3_swap_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_swap_col
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_col1$ = 12						; size = 4
_col2$ = 16						; size = 4
_glmc_mat3_swap_col PROC				; COMDAT

; 91   : glmc_mat3_swap_col(mat3 mat, int col1, int col2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 92   :   glm_mat3_swap_col(mat, col1, col2);

  00028	8b 45 10	 mov	 eax, DWORD PTR _col2$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _col1$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _mat$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat3_swap_col
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 93   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat3_swap_col ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_inv
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat3_inv PROC					; COMDAT

; 85   : glmc_mat3_inv(mat3 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 86   :   glm_mat3_inv(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat3_inv
  00035	83 c4 08	 add	 esp, 8

; 87   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat3_inv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_det
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat3_det PROC					; COMDAT

; 79   : glmc_mat3_det(mat3 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :   return glm_mat3_det(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat3_det
  00031	83 c4 04	 add	 esp, 4

; 81   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat3_det ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_scale
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glmc_mat3_scale PROC					; COMDAT

; 73   : glmc_mat3_scale(mat3 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   glm_mat3_scale(m, s);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_mat3_scale
  0003c	83 c4 08	 add	 esp, 8

; 75   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_mat3_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_quat
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_mat3_quat PROC					; COMDAT

; 67   : glmc_mat3_quat(mat3 m, versor dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   :   glm_mat3_quat(m, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat3_quat
  00035	83 c4 08	 add	 esp, 8

; 69   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat3_quat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_trace
_TEXT	SEGMENT
_m$ = 8							; size = 4
_glmc_mat3_trace PROC					; COMDAT

; 61   : glmc_mat3_trace(mat3 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   return glm_mat3_trace(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat3_trace
  00031	83 c4 04	 add	 esp, 4

; 63   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat3_trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_mulv
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_mat3_mulv PROC					; COMDAT

; 55   : glmc_mat3_mulv(mat3 m, vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   glm_mat3_mulv(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat3_mulv
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 57   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat3_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_transpose
_TEXT	SEGMENT
_m$ = 8							; size = 4
_glmc_mat3_transpose PROC				; COMDAT

; 49   : glmc_mat3_transpose(mat3 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   glm_mat3_transpose(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat3_transpose
  00031	83 c4 04	 add	 esp, 4

; 51   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat3_transpose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_transpose_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_mat3_transpose_to PROC				; COMDAT

; 43   : glmc_mat3_transpose_to(mat3 m, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 44   :   glm_mat3_transpose_to(m, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat3_transpose_to
  00035	83 c4 08	 add	 esp, 8

; 45   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat3_transpose_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_mul
_TEXT	SEGMENT
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_mat3_mul PROC					; COMDAT

; 37   : glmc_mat3_mul(mat3 m1, mat3 m2, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   glm_mat3_mul(m1, m2, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m2$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m1$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat3_mul
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat3_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_identity_array
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_count$ = 12						; size = 4
_glmc_mat3_identity_array PROC				; COMDAT

; 31   : glmc_mat3_identity_array(mat3 * __restrict mat, size_t count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   glm_mat3_identity_array(mat, count);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _count$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat3_identity_array
  00035	83 c4 08	 add	 esp, 8

; 33   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat3_identity_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_zero
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat3_zero PROC					; COMDAT

; 25   : glmc_mat3_zero(mat3 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_mat3_zero(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat3_zero
  00031	83 c4 04	 add	 esp, 4

; 27   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat3_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_identity
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat3_identity PROC				; COMDAT

; 19   : glmc_mat3_identity(mat3 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_mat3_identity(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat3_identity
  00031	83 c4 04	 add	 esp, 4

; 21   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat3_identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat3.c
;	COMDAT _glmc_mat3_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat3_copy PROC					; COMDAT

; 13   : glmc_mat3_copy(mat3 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EEC1899F_mat3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_mat3_copy(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat3_copy
  00035	83 c4 08	 add	 esp, 8

; 15   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat3_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_rmc
_TEXT	SEGMENT
_tmp$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glm_mat3_rmc PROC					; COMDAT

; 418  : glm_mat3_rmc(vec3 r, mat3 m, vec3 c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 419  :   vec3 tmp;
; 420  :   glm_mat3_mulv(m, c, tmp);

  00032	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  00035	50		 push	 eax
  00036	8b 4d 10	 mov	 ecx, DWORD PTR _c$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 0c	 mov	 edx, DWORD PTR _m$[ebp]
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 _glm_mat3_mulv
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 421  :   return glm_vec3_dot(r, tmp);

  00046	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _glm_vec3_dot
  00053	83 c4 08	 add	 esp, 8

; 422  : }

  00056	52		 push	 edx
  00057	8b cd		 mov	 ecx, ebp
  00059	50		 push	 eax
  0005a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat3_r
  00060	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00065	58		 pop	 eax
  00066	5a		 pop	 edx
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	33 cd		 xor	 ecx, ebp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
  00085	0f 1f 00	 npad	 3
$LN5@glm_mat3_r:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@glm_mat3_r
$LN4@glm_mat3_r:
  00090	ec ff ff ff	 DD	 -20			; ffffffecH
  00094	0c 00 00 00	 DD	 12			; 0000000cH
  00098	00 00 00 00	 DD	 $LN3@glm_mat3_r
$LN3@glm_mat3_r:
  0009c	74		 DB	 116			; 00000074H
  0009d	6d		 DB	 109			; 0000006dH
  0009e	70		 DB	 112			; 00000070H
  0009f	00		 DB	 0
_glm_mat3_rmc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_swap_row
_TEXT	SEGMENT
_tmp$ = -16						; size = 12
_mat$ = 8						; size = 4
_row1$ = 12						; size = 4
_row2$ = 16						; size = 4
_glm_mat3_swap_row PROC					; COMDAT

; 387  : glm_mat3_swap_row(mat3 mat, int row1, int row2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00012	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 388  :   vec3 tmp;
; 389  :   tmp[0] = mat[0][row1];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  0003e	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00041	89 4c 05 f0	 mov	 DWORD PTR _tmp$[ebp+eax], ecx

; 390  :   tmp[1] = mat[1][row1];

  00045	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  0005b	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0005e	89 44 0d f0	 mov	 DWORD PTR _tmp$[ebp+ecx], eax

; 391  :   tmp[2] = mat[2][row1];

  00062	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00067	d1 e0		 shl	 eax, 1
  00069	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006c	b9 04 00 00 00	 mov	 ecx, 4
  00071	d1 e1		 shl	 ecx, 1
  00073	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  00076	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00079	89 44 0d f0	 mov	 DWORD PTR _tmp$[ebp+ecx], eax

; 392  : 
; 393  :   mat[0][row1] = mat[0][row2];

  0007d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00082	6b c8 00	 imul	 ecx, eax, 0
  00085	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00088	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0008d	6b c2 00	 imul	 eax, edx, 0
  00090	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00093	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  00096	8b 75 10	 mov	 esi, DWORD PTR _row2$[ebp]
  00099	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  0009c	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 394  :   mat[1][row1] = mat[1][row2];

  0009f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000a4	c1 e0 00	 shl	 eax, 0
  000a7	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000aa	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000af	c1 e1 00	 shl	 ecx, 0
  000b2	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  000b5	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  000b8	8b 75 10	 mov	 esi, DWORD PTR _row2$[ebp]
  000bb	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  000be	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 395  :   mat[2][row1] = mat[2][row2];

  000c1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c6	d1 e0		 shl	 eax, 1
  000c8	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000cb	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000d0	d1 e1		 shl	 ecx, 1
  000d2	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  000d5	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  000d8	8b 75 10	 mov	 esi, DWORD PTR _row2$[ebp]
  000db	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  000de	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 396  : 
; 397  :   mat[0][row2] = tmp[0];

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	6b c8 00	 imul	 ecx, eax, 0
  000e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ee	6b c2 00	 imul	 eax, edx, 0
  000f1	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000f4	8b 55 10	 mov	 edx, DWORD PTR _row2$[ebp]
  000f7	8b 4c 0d f0	 mov	 ecx, DWORD PTR _tmp$[ebp+ecx]
  000fb	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 398  :   mat[1][row2] = tmp[1];

  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 00	 shl	 eax, 0
  00106	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0010b	c1 e1 00	 shl	 ecx, 0
  0010e	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00111	8b 55 10	 mov	 edx, DWORD PTR _row2$[ebp]
  00114	8b 44 05 f0	 mov	 eax, DWORD PTR _tmp$[ebp+eax]
  00118	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 399  :   mat[2][row2] = tmp[2];

  0011b	b8 04 00 00 00	 mov	 eax, 4
  00120	d1 e0		 shl	 eax, 1
  00122	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00127	d1 e1		 shl	 ecx, 1
  00129	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0012c	8b 55 10	 mov	 edx, DWORD PTR _row2$[ebp]
  0012f	8b 44 05 f0	 mov	 eax, DWORD PTR _tmp$[ebp+eax]
  00133	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 400  : }

  00136	52		 push	 edx
  00137	8b cd		 mov	 ecx, ebp
  00139	50		 push	 eax
  0013a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat3_s
  00140	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00145	58		 pop	 eax
  00146	5a		 pop	 edx
  00147	5f		 pop	 edi
  00148	5e		 pop	 esi
  00149	5b		 pop	 ebx
  0014a	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  00150	3b ec		 cmp	 ebp, esp
  00152	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
  0015b	90		 npad	 1
$LN5@glm_mat3_s:
  0015c	01 00 00 00	 DD	 1
  00160	00 00 00 00	 DD	 $LN4@glm_mat3_s
$LN4@glm_mat3_s:
  00164	f0 ff ff ff	 DD	 -16			; fffffff0H
  00168	0c 00 00 00	 DD	 12			; 0000000cH
  0016c	00 00 00 00	 DD	 $LN3@glm_mat3_s
$LN3@glm_mat3_s:
  00170	74		 DB	 116			; 00000074H
  00171	6d		 DB	 109			; 0000006dH
  00172	70		 DB	 112			; 00000070H
  00173	00		 DB	 0
_glm_mat3_swap_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_swap_col
_TEXT	SEGMENT
_tmp$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_col1$ = 12						; size = 4
_col2$ = 16						; size = 4
_glm_mat3_swap_col PROC					; COMDAT

; 371  : glm_mat3_swap_col(mat3 mat, int col1, int col2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 372  :   vec3 tmp;
; 373  :   glm_vec3_copy(mat[col1], tmp);

  00032	8d 45 ec	 lea	 eax, DWORD PTR _tmp$[ebp]
  00035	50		 push	 eax
  00036	6b 4d 0c 0c	 imul	 ecx, DWORD PTR _col1$[ebp], 12
  0003a	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _glm_vec3_copy
  00043	83 c4 08	 add	 esp, 8

; 374  :   glm_vec3_copy(mat[col2], mat[col1]);

  00046	6b 45 0c 0c	 imul	 eax, DWORD PTR _col1$[ebp], 12
  0004a	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0004d	50		 push	 eax
  0004e	6b 4d 10 0c	 imul	 ecx, DWORD PTR _col2$[ebp], 12
  00052	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 _glm_vec3_copy
  0005b	83 c4 08	 add	 esp, 8

; 375  :   glm_vec3_copy(tmp, mat[col2]);

  0005e	6b 45 10 0c	 imul	 eax, DWORD PTR _col2$[ebp], 12
  00062	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00065	50		 push	 eax
  00066	8d 4d ec	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 _glm_vec3_copy
  0006f	83 c4 08	 add	 esp, 8

; 376  : }

  00072	52		 push	 edx
  00073	8b cd		 mov	 ecx, ebp
  00075	50		 push	 eax
  00076	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat3_s
  0007c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00081	58		 pop	 eax
  00082	5a		 pop	 edx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	33 cd		 xor	 ecx, ebp
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
  000a1	0f 1f 00	 npad	 3
$LN5@glm_mat3_s:
  000a4	01 00 00 00	 DD	 1
  000a8	00 00 00 00	 DD	 $LN4@glm_mat3_s
$LN4@glm_mat3_s:
  000ac	ec ff ff ff	 DD	 -20			; ffffffecH
  000b0	0c 00 00 00	 DD	 12			; 0000000cH
  000b4	00 00 00 00	 DD	 $LN3@glm_mat3_s
$LN3@glm_mat3_s:
  000b8	74		 DB	 116			; 00000074H
  000b9	6d		 DB	 109			; 0000006dH
  000ba	70		 DB	 112			; 00000070H
  000bb	00		 DB	 0
_glm_mat3_swap_col ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_inv
_TEXT	SEGMENT
_i$ = -116						; size = 4
_h$ = -104						; size = 4
_g$ = -92						; size = 4
_f$ = -80						; size = 4
_e$ = -68						; size = 4
_d$ = -56						; size = 4
_c$ = -44						; size = 4
_b$ = -32						; size = 4
_a$ = -20						; size = 4
_det$ = -8						; size = 4
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat3_inv PROC					; COMDAT

; 341  : glm_mat3_inv(mat3 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00012	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 342  :   float det;
; 343  :   float a = mat[0][0], b = mat[0][1], c = mat[0][2],

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 11 45 ec	 movss	 DWORD PTR _a$[ebp], xmm0
  00045	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004a	6b c8 00	 imul	 ecx, eax, 0
  0004d	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00050	ba 04 00 00 00	 mov	 edx, 4
  00055	c1 e2 00	 shl	 edx, 0
  00058	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0005d	f3 0f 11 45 e0	 movss	 DWORD PTR _b$[ebp], xmm0
  00062	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0006d	ba 04 00 00 00	 mov	 edx, 4
  00072	d1 e2		 shl	 edx, 1
  00074	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00079	f3 0f 11 45 d4	 movss	 DWORD PTR _c$[ebp], xmm0

; 344  :         d = mat[1][0], e = mat[1][1], f = mat[1][2],

  0007e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00083	c1 e0 00	 shl	 eax, 0
  00086	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00089	b9 04 00 00 00	 mov	 ecx, 4
  0008e	6b d1 00	 imul	 edx, ecx, 0
  00091	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00096	f3 0f 11 45 c8	 movss	 DWORD PTR _d$[ebp], xmm0
  0009b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000a0	c1 e0 00	 shl	 eax, 0
  000a3	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000a6	b9 04 00 00 00	 mov	 ecx, 4
  000ab	c1 e1 00	 shl	 ecx, 0
  000ae	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000b3	f3 0f 11 45 bc	 movss	 DWORD PTR _e$[ebp], xmm0
  000b8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000bd	c1 e0 00	 shl	 eax, 0
  000c0	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000c3	b9 04 00 00 00	 mov	 ecx, 4
  000c8	d1 e1		 shl	 ecx, 1
  000ca	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000cf	f3 0f 11 45 b0	 movss	 DWORD PTR _f$[ebp], xmm0

; 345  :         g = mat[2][0], h = mat[2][1], i = mat[2][2];

  000d4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000d9	d1 e0		 shl	 eax, 1
  000db	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000de	b9 04 00 00 00	 mov	 ecx, 4
  000e3	6b d1 00	 imul	 edx, ecx, 0
  000e6	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000eb	f3 0f 11 45 a4	 movss	 DWORD PTR _g$[ebp], xmm0
  000f0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000f5	d1 e0		 shl	 eax, 1
  000f7	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000fa	b9 04 00 00 00	 mov	 ecx, 4
  000ff	c1 e1 00	 shl	 ecx, 0
  00102	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00107	f3 0f 11 45 98	 movss	 DWORD PTR _h$[ebp], xmm0
  0010c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00111	d1 e0		 shl	 eax, 1
  00113	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00116	b9 04 00 00 00	 mov	 ecx, 4
  0011b	d1 e1		 shl	 ecx, 1
  0011d	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00122	f3 0f 11 45 8c	 movss	 DWORD PTR _i$[ebp], xmm0

; 346  : 
; 347  :   dest[0][0] =   e * i - f * h;

  00127	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _e$[ebp]
  0012c	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _i$[ebp]
  00131	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _f$[ebp]
  00136	f3 0f 59 4d 98	 mulss	 xmm1, DWORD PTR _h$[ebp]
  0013b	f3 0f 5c c1	 subss	 xmm0, xmm1
  0013f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00144	6b c8 00	 imul	 ecx, eax, 0
  00147	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0014a	ba 04 00 00 00	 mov	 edx, 4
  0014f	6b c2 00	 imul	 eax, edx, 0
  00152	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 348  :   dest[0][1] = -(b * i - h * c);

  00157	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _b$[ebp]
  0015c	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _i$[ebp]
  00161	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _h$[ebp]
  00166	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _c$[ebp]
  0016b	f3 0f 5c c1	 subss	 xmm0, xmm1
  0016f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00176	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0017b	6b c8 00	 imul	 ecx, eax, 0
  0017e	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00181	ba 04 00 00 00	 mov	 edx, 4
  00186	c1 e2 00	 shl	 edx, 0
  00189	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 349  :   dest[0][2] =   b * f - e * c;

  0018e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _b$[ebp]
  00193	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00198	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _e$[ebp]
  0019d	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _c$[ebp]
  001a2	f3 0f 5c c1	 subss	 xmm0, xmm1
  001a6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ab	6b c8 00	 imul	 ecx, eax, 0
  001ae	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  001b1	ba 04 00 00 00	 mov	 edx, 4
  001b6	d1 e2		 shl	 edx, 1
  001b8	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 350  :   dest[1][0] = -(d * i - g * f);

  001bd	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _d$[ebp]
  001c2	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _i$[ebp]
  001c7	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _g$[ebp]
  001cc	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _f$[ebp]
  001d1	f3 0f 5c c1	 subss	 xmm0, xmm1
  001d5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001e1	c1 e0 00	 shl	 eax, 0
  001e4	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  001e7	b9 04 00 00 00	 mov	 ecx, 4
  001ec	6b d1 00	 imul	 edx, ecx, 0
  001ef	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 351  :   dest[1][1] =   a * i - c * g;

  001f4	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _a$[ebp]
  001f9	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _i$[ebp]
  001fe	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _c$[ebp]
  00203	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _g$[ebp]
  00208	f3 0f 5c c1	 subss	 xmm0, xmm1
  0020c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00211	c1 e0 00	 shl	 eax, 0
  00214	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00217	b9 04 00 00 00	 mov	 ecx, 4
  0021c	c1 e1 00	 shl	 ecx, 0
  0021f	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 352  :   dest[1][2] = -(a * f - d * c);

  00224	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _a$[ebp]
  00229	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _f$[ebp]
  0022e	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _d$[ebp]
  00233	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _c$[ebp]
  00238	f3 0f 5c c1	 subss	 xmm0, xmm1
  0023c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00243	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00248	c1 e0 00	 shl	 eax, 0
  0024b	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0024e	b9 04 00 00 00	 mov	 ecx, 4
  00253	d1 e1		 shl	 ecx, 1
  00255	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 353  :   dest[2][0] =   d * h - g * e;

  0025a	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _d$[ebp]
  0025f	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _h$[ebp]
  00264	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _g$[ebp]
  00269	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _e$[ebp]
  0026e	f3 0f 5c c1	 subss	 xmm0, xmm1
  00272	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00277	d1 e0		 shl	 eax, 1
  00279	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0027c	b9 04 00 00 00	 mov	 ecx, 4
  00281	6b d1 00	 imul	 edx, ecx, 0
  00284	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 354  :   dest[2][1] = -(a * h - g * b);

  00289	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _a$[ebp]
  0028e	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _h$[ebp]
  00293	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _g$[ebp]
  00298	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _b$[ebp]
  0029d	f3 0f 5c c1	 subss	 xmm0, xmm1
  002a1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002a8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002ad	d1 e0		 shl	 eax, 1
  002af	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002b2	b9 04 00 00 00	 mov	 ecx, 4
  002b7	c1 e1 00	 shl	 ecx, 0
  002ba	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 355  :   dest[2][2] =   a * e - b * d;

  002bf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _a$[ebp]
  002c4	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _e$[ebp]
  002c9	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _b$[ebp]
  002ce	f3 0f 59 4d c8	 mulss	 xmm1, DWORD PTR _d$[ebp]
  002d3	f3 0f 5c c1	 subss	 xmm0, xmm1
  002d7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002dc	d1 e0		 shl	 eax, 1
  002de	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  002e1	b9 04 00 00 00	 mov	 ecx, 4
  002e6	d1 e1		 shl	 ecx, 1
  002e8	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 356  : 
; 357  :   det = 1.0f / (a * dest[0][0] + b * dest[1][0] + c * dest[2][0]);

  002ed	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002f2	6b c8 00	 imul	 ecx, eax, 0
  002f5	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  002f8	ba 04 00 00 00	 mov	 edx, 4
  002fd	6b c2 00	 imul	 eax, edx, 0
  00300	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _a$[ebp]
  00305	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  0030a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0030f	c1 e1 00	 shl	 ecx, 0
  00312	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00315	ba 04 00 00 00	 mov	 edx, 4
  0031a	6b c2 00	 imul	 eax, edx, 0
  0031d	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _b$[ebp]
  00322	f3 0f 59 0c 01	 mulss	 xmm1, DWORD PTR [ecx+eax]
  00327	f3 0f 58 c1	 addss	 xmm0, xmm1
  0032b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00330	d1 e1		 shl	 ecx, 1
  00332	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00335	ba 04 00 00 00	 mov	 edx, 4
  0033a	6b c2 00	 imul	 eax, edx, 0
  0033d	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _c$[ebp]
  00342	f3 0f 59 0c 01	 mulss	 xmm1, DWORD PTR [ecx+eax]
  00347	f3 0f 58 c1	 addss	 xmm0, xmm1
  0034b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00353	f3 0f 5e c8	 divss	 xmm1, xmm0
  00357	f3 0f 11 4d f8	 movss	 DWORD PTR _det$[ebp], xmm1

; 358  : 
; 359  :   glm_mat3_scale(dest, det);

  0035c	51		 push	 ecx
  0035d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _det$[ebp]
  00362	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00367	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0036a	50		 push	 eax
  0036b	e8 00 00 00 00	 call	 _glm_mat3_scale
  00370	83 c4 08	 add	 esp, 8

; 360  : }

  00373	5f		 pop	 edi
  00374	5e		 pop	 esi
  00375	5b		 pop	 ebx
  00376	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  0037c	3b ec		 cmp	 ebp, esp
  0037e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00383	8b e5		 mov	 esp, ebp
  00385	5d		 pop	 ebp
  00386	c3		 ret	 0
_glm_mat3_inv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_det
_TEXT	SEGMENT
tv187 = -304						; size = 4
_i$ = -104						; size = 4
_h$ = -92						; size = 4
_g$ = -80						; size = 4
_f$ = -68						; size = 4
_e$ = -56						; size = 4
_d$ = -44						; size = 4
_c$ = -32						; size = 4
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_mat$ = 8						; size = 4
_glm_mat3_det PROC					; COMDAT

; 325  : glm_mat3_det(mat3 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00012	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 326  :   float a = mat[0][0], b = mat[0][1], c = mat[0][2],

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _a$[ebp], xmm0
  00045	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004a	6b c8 00	 imul	 ecx, eax, 0
  0004d	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00050	ba 04 00 00 00	 mov	 edx, 4
  00055	c1 e2 00	 shl	 edx, 0
  00058	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0005d	f3 0f 11 45 ec	 movss	 DWORD PTR _b$[ebp], xmm0
  00062	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0006d	ba 04 00 00 00	 mov	 edx, 4
  00072	d1 e2		 shl	 edx, 1
  00074	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00079	f3 0f 11 45 e0	 movss	 DWORD PTR _c$[ebp], xmm0

; 327  :         d = mat[1][0], e = mat[1][1], f = mat[1][2],

  0007e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00083	c1 e0 00	 shl	 eax, 0
  00086	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00089	b9 04 00 00 00	 mov	 ecx, 4
  0008e	6b d1 00	 imul	 edx, ecx, 0
  00091	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00096	f3 0f 11 45 d4	 movss	 DWORD PTR _d$[ebp], xmm0
  0009b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000a0	c1 e0 00	 shl	 eax, 0
  000a3	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000a6	b9 04 00 00 00	 mov	 ecx, 4
  000ab	c1 e1 00	 shl	 ecx, 0
  000ae	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000b3	f3 0f 11 45 c8	 movss	 DWORD PTR _e$[ebp], xmm0
  000b8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000bd	c1 e0 00	 shl	 eax, 0
  000c0	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000c3	b9 04 00 00 00	 mov	 ecx, 4
  000c8	d1 e1		 shl	 ecx, 1
  000ca	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000cf	f3 0f 11 45 bc	 movss	 DWORD PTR _f$[ebp], xmm0

; 328  :         g = mat[2][0], h = mat[2][1], i = mat[2][2];

  000d4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000d9	d1 e0		 shl	 eax, 1
  000db	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000de	b9 04 00 00 00	 mov	 ecx, 4
  000e3	6b d1 00	 imul	 edx, ecx, 0
  000e6	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000eb	f3 0f 11 45 b0	 movss	 DWORD PTR _g$[ebp], xmm0
  000f0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000f5	d1 e0		 shl	 eax, 1
  000f7	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000fa	b9 04 00 00 00	 mov	 ecx, 4
  000ff	c1 e1 00	 shl	 ecx, 0
  00102	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00107	f3 0f 11 45 a4	 movss	 DWORD PTR _h$[ebp], xmm0
  0010c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00111	d1 e0		 shl	 eax, 1
  00113	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00116	b9 04 00 00 00	 mov	 ecx, 4
  0011b	d1 e1		 shl	 ecx, 1
  0011d	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00122	f3 0f 11 45 98	 movss	 DWORD PTR _i$[ebp], xmm0

; 329  : 
; 330  :   return a * (e * i - h * f) - d * (b * i - c * h) + g * (b * f - c * e);

  00127	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _e$[ebp]
  0012c	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _i$[ebp]
  00131	f3 0f 10 4d a4	 movss	 xmm1, DWORD PTR _h$[ebp]
  00136	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _f$[ebp]
  0013b	f3 0f 5c c1	 subss	 xmm0, xmm1
  0013f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _a$[ebp]
  00144	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _b$[ebp]
  00149	f3 0f 59 4d 98	 mulss	 xmm1, DWORD PTR _i$[ebp]
  0014e	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _c$[ebp]
  00153	f3 0f 59 55 a4	 mulss	 xmm2, DWORD PTR _h$[ebp]
  00158	f3 0f 5c ca	 subss	 xmm1, xmm2
  0015c	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _d$[ebp]
  00161	f3 0f 5c c1	 subss	 xmm0, xmm1
  00165	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _b$[ebp]
  0016a	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _f$[ebp]
  0016f	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR _c$[ebp]
  00174	f3 0f 59 55 c8	 mulss	 xmm2, DWORD PTR _e$[ebp]
  00179	f3 0f 5c ca	 subss	 xmm1, xmm2
  0017d	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _g$[ebp]
  00182	f3 0f 58 c1	 addss	 xmm0, xmm1
  00186	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR tv187[ebp], xmm0
  0018e	d9 85 d0 fe ff
	ff		 fld	 DWORD PTR tv187[ebp]

; 331  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	81 c4 30 01 00
	00		 add	 esp, 304		; 00000130H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_glm_mat3_det ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_scale
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glm_mat3_scale PROC					; COMDAT

; 310  : glm_mat3_scale(mat3 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 311  :   m[0][0] *= s; m[0][1] *= s; m[0][2] *= s;

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00045	b9 04 00 00 00	 mov	 ecx, 4
  0004a	6b d1 00	 imul	 edx, ecx, 0
  0004d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00052	6b c8 00	 imul	 ecx, eax, 0
  00055	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00058	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0
  0005d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00062	6b c8 00	 imul	 ecx, eax, 0
  00065	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00068	ba 04 00 00 00	 mov	 edx, 4
  0006d	c1 e2 00	 shl	 edx, 0
  00070	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00075	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	c1 e0 00	 shl	 eax, 0
  00082	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00087	6b d1 00	 imul	 edx, ecx, 0
  0008a	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0008d	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0
  00092	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	d1 e2		 shl	 edx, 1
  000a4	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000a9	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	d1 e0		 shl	 eax, 1
  000b5	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000ba	6b d1 00	 imul	 edx, ecx, 0
  000bd	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000c0	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 312  :   m[1][0] *= s; m[1][1] *= s; m[1][2] *= s;

  000c5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ca	c1 e0 00	 shl	 eax, 0
  000cd	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000d0	b9 04 00 00 00	 mov	 ecx, 4
  000d5	6b d1 00	 imul	 edx, ecx, 0
  000d8	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000dd	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  000e2	b8 04 00 00 00	 mov	 eax, 4
  000e7	6b c8 00	 imul	 ecx, eax, 0
  000ea	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ef	c1 e2 00	 shl	 edx, 0
  000f2	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000f5	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0
  000fa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ff	c1 e0 00	 shl	 eax, 0
  00102	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00105	b9 04 00 00 00	 mov	 ecx, 4
  0010a	c1 e1 00	 shl	 ecx, 0
  0010d	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00112	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00117	ba 04 00 00 00	 mov	 edx, 4
  0011c	c1 e2 00	 shl	 edx, 0
  0011f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00124	c1 e0 00	 shl	 eax, 0
  00127	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0012a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  0012f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00134	c1 e0 00	 shl	 eax, 0
  00137	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0013a	b9 04 00 00 00	 mov	 ecx, 4
  0013f	d1 e1		 shl	 ecx, 1
  00141	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00146	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0014b	ba 04 00 00 00	 mov	 edx, 4
  00150	d1 e2		 shl	 edx, 1
  00152	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00157	c1 e0 00	 shl	 eax, 0
  0015a	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0015d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 313  :   m[2][0] *= s; m[2][1] *= s; m[2][2] *= s;

  00162	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00167	d1 e0		 shl	 eax, 1
  00169	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0016c	b9 04 00 00 00	 mov	 ecx, 4
  00171	6b d1 00	 imul	 edx, ecx, 0
  00174	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00179	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0017e	b8 04 00 00 00	 mov	 eax, 4
  00183	6b c8 00	 imul	 ecx, eax, 0
  00186	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0018b	d1 e2		 shl	 edx, 1
  0018d	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00190	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0
  00195	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0019a	d1 e0		 shl	 eax, 1
  0019c	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0019f	b9 04 00 00 00	 mov	 ecx, 4
  001a4	c1 e1 00	 shl	 ecx, 0
  001a7	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001ac	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  001b1	ba 04 00 00 00	 mov	 edx, 4
  001b6	c1 e2 00	 shl	 edx, 0
  001b9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001be	d1 e0		 shl	 eax, 1
  001c0	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001c3	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  001c8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001cd	d1 e0		 shl	 eax, 1
  001cf	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001d2	b9 04 00 00 00	 mov	 ecx, 4
  001d7	d1 e1		 shl	 ecx, 1
  001d9	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001de	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  001e3	ba 04 00 00 00	 mov	 edx, 4
  001e8	d1 e2		 shl	 edx, 1
  001ea	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ef	d1 e0		 shl	 eax, 1
  001f1	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001f4	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 314  : }

  001f9	5f		 pop	 edi
  001fa	5e		 pop	 esi
  001fb	5b		 pop	 ebx
  001fc	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00202	3b ec		 cmp	 ebp, esp
  00204	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c3		 ret	 0
_glm_mat3_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_quat
_TEXT	SEGMENT
_rinv$ = -32						; size = 4
_r$ = -20						; size = 4
_trace$ = -8						; size = 4
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_mat3_quat PROC					; COMDAT

; 259  : glm_mat3_quat(mat3 m, versor dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 260  :   float trace, r, rinv;
; 261  : 
; 262  :   /* it seems using like m12 instead of m[1][2] causes extra instructions */
; 263  : 
; 264  :   trace = m[0][0] + m[1][1] + m[2][2];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	c1 e2 00	 shl	 edx, 0
  00043	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	c1 e6 00	 shl	 esi, 0
  0004e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00053	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  00058	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0005d	d1 e0		 shl	 eax, 1
  0005f	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	d1 e1		 shl	 ecx, 1
  00069	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0006e	f3 0f 11 45 f8	 movss	 DWORD PTR _trace$[ebp], xmm0

; 265  :   if (trace >= 0.0f) {

  00073	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _trace$[ebp]
  00078	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0007f	0f 82 1c 01 00
	00		 jb	 $LN2@glm_mat3_q

; 266  :     r       = sqrtf(1.0f + trace);

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008d	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _trace$[ebp]
  00092	51		 push	 ecx
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	e8 00 00 00 00	 call	 _sqrtf
  0009d	83 c4 04	 add	 esp, 4
  000a0	d9 5d ec	 fstp	 DWORD PTR _r$[ebp]

; 267  :     rinv    = 0.5f / r;

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000ab	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _r$[ebp]
  000b0	f3 0f 11 45 e0	 movss	 DWORD PTR _rinv$[ebp], xmm0

; 268  : 
; 269  :     dest[0] = rinv * (m[1][2] - m[2][1]);

  000b5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ba	c1 e0 00	 shl	 eax, 0
  000bd	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000c0	b9 04 00 00 00	 mov	 ecx, 4
  000c5	d1 e1		 shl	 ecx, 1
  000c7	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000cc	d1 e2		 shl	 edx, 1
  000ce	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000d1	be 04 00 00 00	 mov	 esi, 4
  000d6	c1 e6 00	 shl	 esi, 0
  000d9	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000de	f3 0f 5c 04 32	 subss	 xmm0, DWORD PTR [edx+esi]
  000e3	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  000e8	b8 04 00 00 00	 mov	 eax, 4
  000ed	6b c8 00	 imul	 ecx, eax, 0
  000f0	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  000f3	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 270  :     dest[1] = rinv * (m[2][0] - m[0][2]);

  000f8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000fd	d1 e0		 shl	 eax, 1
  000ff	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00102	b9 04 00 00 00	 mov	 ecx, 4
  00107	6b d1 00	 imul	 edx, ecx, 0
  0010a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0010f	6b c9 00	 imul	 ecx, ecx, 0
  00112	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00115	be 04 00 00 00	 mov	 esi, 4
  0011a	d1 e6		 shl	 esi, 1
  0011c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00121	f3 0f 5c 04 31	 subss	 xmm0, DWORD PTR [ecx+esi]
  00126	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0012b	ba 04 00 00 00	 mov	 edx, 4
  00130	c1 e2 00	 shl	 edx, 0
  00133	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00136	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 271  :     dest[2] = rinv * (m[0][1] - m[1][0]);

  0013b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00140	6b c8 00	 imul	 ecx, eax, 0
  00143	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00146	ba 04 00 00 00	 mov	 edx, 4
  0014b	c1 e2 00	 shl	 edx, 0
  0014e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00153	c1 e0 00	 shl	 eax, 0
  00156	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00159	be 04 00 00 00	 mov	 esi, 4
  0015e	6b f6 00	 imul	 esi, esi, 0
  00161	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00166	f3 0f 5c 04 30	 subss	 xmm0, DWORD PTR [eax+esi]
  0016b	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  00170	b9 04 00 00 00	 mov	 ecx, 4
  00175	d1 e1		 shl	 ecx, 1
  00177	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0017a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 272  :     dest[3] = r    * 0.5f;

  0017f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$[ebp]
  00184	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0018c	b8 04 00 00 00	 mov	 eax, 4
  00191	6b c8 03	 imul	 ecx, eax, 3
  00194	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00197	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0
  0019c	e9 ad 04 00 00	 jmp	 $LN7@glm_mat3_q
$LN2@glm_mat3_q:

; 273  :   } else if (m[0][0] >= m[1][1] && m[0][0] >= m[2][2]) {

  001a1	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001a6	6b c8 00	 imul	 ecx, eax, 0
  001a9	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  001ac	ba 04 00 00 00	 mov	 edx, 4
  001b1	6b c2 00	 imul	 eax, edx, 0
  001b4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001b9	c1 e2 00	 shl	 edx, 0
  001bc	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  001bf	be 04 00 00 00	 mov	 esi, 4
  001c4	c1 e6 00	 shl	 esi, 0
  001c7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  001cc	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  001d0	0f 82 90 01 00
	00		 jb	 $LN4@glm_mat3_q
  001d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001db	6b c8 00	 imul	 ecx, eax, 0
  001de	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  001e1	ba 04 00 00 00	 mov	 edx, 4
  001e6	6b c2 00	 imul	 eax, edx, 0
  001e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001ee	d1 e2		 shl	 edx, 1
  001f0	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  001f3	be 04 00 00 00	 mov	 esi, 4
  001f8	d1 e6		 shl	 esi, 1
  001fa	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  001ff	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  00203	0f 82 5d 01 00
	00		 jb	 $LN4@glm_mat3_q

; 274  :     r       = sqrtf(1.0f - m[1][1] - m[2][2] + m[0][0]);

  00209	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0020e	c1 e0 00	 shl	 eax, 0
  00211	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00214	b9 04 00 00 00	 mov	 ecx, 4
  00219	c1 e1 00	 shl	 ecx, 0
  0021c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00224	f3 0f 5c 04 08	 subss	 xmm0, DWORD PTR [eax+ecx]
  00229	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0022e	d1 e2		 shl	 edx, 1
  00230	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00233	b8 04 00 00 00	 mov	 eax, 4
  00238	d1 e0		 shl	 eax, 1
  0023a	f3 0f 5c 04 02	 subss	 xmm0, DWORD PTR [edx+eax]
  0023f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00244	6b d1 00	 imul	 edx, ecx, 0
  00247	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0024a	b8 04 00 00 00	 mov	 eax, 4
  0024f	6b c8 00	 imul	 ecx, eax, 0
  00252	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  00257	51		 push	 ecx
  00258	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025d	e8 00 00 00 00	 call	 _sqrtf
  00262	83 c4 04	 add	 esp, 4
  00265	d9 5d ec	 fstp	 DWORD PTR _r$[ebp]

; 275  :     rinv    = 0.5f / r;

  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00270	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _r$[ebp]
  00275	f3 0f 11 45 e0	 movss	 DWORD PTR _rinv$[ebp], xmm0

; 276  : 
; 277  :     dest[0] = r    * 0.5f;

  0027a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$[ebp]
  0027f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00287	b8 04 00 00 00	 mov	 eax, 4
  0028c	6b c8 00	 imul	 ecx, eax, 0
  0028f	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00292	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 278  :     dest[1] = rinv * (m[0][1] + m[1][0]);

  00297	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0029c	6b c8 00	 imul	 ecx, eax, 0
  0029f	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  002a2	ba 04 00 00 00	 mov	 edx, 4
  002a7	c1 e2 00	 shl	 edx, 0
  002aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002af	c1 e0 00	 shl	 eax, 0
  002b2	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  002b5	be 04 00 00 00	 mov	 esi, 4
  002ba	6b f6 00	 imul	 esi, esi, 0
  002bd	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  002c2	f3 0f 58 04 30	 addss	 xmm0, DWORD PTR [eax+esi]
  002c7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  002cc	b9 04 00 00 00	 mov	 ecx, 4
  002d1	c1 e1 00	 shl	 ecx, 0
  002d4	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  002d7	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 279  :     dest[2] = rinv * (m[0][2] + m[2][0]);

  002dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002e1	6b c8 00	 imul	 ecx, eax, 0
  002e4	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  002e7	ba 04 00 00 00	 mov	 edx, 4
  002ec	d1 e2		 shl	 edx, 1
  002ee	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002f3	d1 e0		 shl	 eax, 1
  002f5	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  002f8	be 04 00 00 00	 mov	 esi, 4
  002fd	6b f6 00	 imul	 esi, esi, 0
  00300	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00305	f3 0f 58 04 30	 addss	 xmm0, DWORD PTR [eax+esi]
  0030a	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0030f	b9 04 00 00 00	 mov	 ecx, 4
  00314	d1 e1		 shl	 ecx, 1
  00316	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00319	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 280  :     dest[3] = rinv * (m[1][2] - m[2][1]);

  0031e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00323	c1 e0 00	 shl	 eax, 0
  00326	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00329	b9 04 00 00 00	 mov	 ecx, 4
  0032e	d1 e1		 shl	 ecx, 1
  00330	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00335	d1 e2		 shl	 edx, 1
  00337	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0033a	be 04 00 00 00	 mov	 esi, 4
  0033f	c1 e6 00	 shl	 esi, 0
  00342	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00347	f3 0f 5c 04 32	 subss	 xmm0, DWORD PTR [edx+esi]
  0034c	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  00351	b8 04 00 00 00	 mov	 eax, 4
  00356	6b c8 03	 imul	 ecx, eax, 3
  00359	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0035c	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0
  00361	e9 e8 02 00 00	 jmp	 $LN7@glm_mat3_q
$LN4@glm_mat3_q:

; 281  :   } else if (m[1][1] >= m[2][2]) {

  00366	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0036b	c1 e0 00	 shl	 eax, 0
  0036e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00371	b9 04 00 00 00	 mov	 ecx, 4
  00376	c1 e1 00	 shl	 ecx, 0
  00379	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0037e	d1 e2		 shl	 edx, 1
  00380	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00383	be 04 00 00 00	 mov	 esi, 4
  00388	d1 e6		 shl	 esi, 1
  0038a	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0038f	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  00393	0f 82 5d 01 00
	00		 jb	 $LN6@glm_mat3_q

; 282  :     r       = sqrtf(1.0f - m[0][0] - m[2][2] + m[1][1]);

  00399	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0039e	6b c8 00	 imul	 ecx, eax, 0
  003a1	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  003a4	ba 04 00 00 00	 mov	 edx, 4
  003a9	6b c2 00	 imul	 eax, edx, 0
  003ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003b4	f3 0f 5c 04 01	 subss	 xmm0, DWORD PTR [ecx+eax]
  003b9	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  003be	d1 e1		 shl	 ecx, 1
  003c0	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  003c3	ba 04 00 00 00	 mov	 edx, 4
  003c8	d1 e2		 shl	 edx, 1
  003ca	f3 0f 5c 04 11	 subss	 xmm0, DWORD PTR [ecx+edx]
  003cf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  003d4	c1 e0 00	 shl	 eax, 0
  003d7	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  003da	b9 04 00 00 00	 mov	 ecx, 4
  003df	c1 e1 00	 shl	 ecx, 0
  003e2	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  003e7	51		 push	 ecx
  003e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ed	e8 00 00 00 00	 call	 _sqrtf
  003f2	83 c4 04	 add	 esp, 4
  003f5	d9 5d ec	 fstp	 DWORD PTR _r$[ebp]

; 283  :     rinv    = 0.5f / r;

  003f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00400	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _r$[ebp]
  00405	f3 0f 11 45 e0	 movss	 DWORD PTR _rinv$[ebp], xmm0

; 284  : 
; 285  :     dest[0] = rinv * (m[0][1] + m[1][0]);

  0040a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0040f	6b c8 00	 imul	 ecx, eax, 0
  00412	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00415	ba 04 00 00 00	 mov	 edx, 4
  0041a	c1 e2 00	 shl	 edx, 0
  0041d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00422	c1 e0 00	 shl	 eax, 0
  00425	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00428	be 04 00 00 00	 mov	 esi, 4
  0042d	6b f6 00	 imul	 esi, esi, 0
  00430	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00435	f3 0f 58 04 30	 addss	 xmm0, DWORD PTR [eax+esi]
  0043a	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0043f	b9 04 00 00 00	 mov	 ecx, 4
  00444	6b d1 00	 imul	 edx, ecx, 0
  00447	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0044a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 286  :     dest[1] = r    * 0.5f;

  0044f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$[ebp]
  00454	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0045c	b8 04 00 00 00	 mov	 eax, 4
  00461	c1 e0 00	 shl	 eax, 0
  00464	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00467	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 287  :     dest[2] = rinv * (m[1][2] + m[2][1]);

  0046c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00471	c1 e0 00	 shl	 eax, 0
  00474	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00477	b9 04 00 00 00	 mov	 ecx, 4
  0047c	d1 e1		 shl	 ecx, 1
  0047e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00483	d1 e2		 shl	 edx, 1
  00485	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00488	be 04 00 00 00	 mov	 esi, 4
  0048d	c1 e6 00	 shl	 esi, 0
  00490	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00495	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  0049a	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0049f	b8 04 00 00 00	 mov	 eax, 4
  004a4	d1 e0		 shl	 eax, 1
  004a6	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  004a9	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 288  :     dest[3] = rinv * (m[2][0] - m[0][2]);

  004ae	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004b3	d1 e0		 shl	 eax, 1
  004b5	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  004b8	b9 04 00 00 00	 mov	 ecx, 4
  004bd	6b d1 00	 imul	 edx, ecx, 0
  004c0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  004c5	6b c9 00	 imul	 ecx, ecx, 0
  004c8	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  004cb	be 04 00 00 00	 mov	 esi, 4
  004d0	d1 e6		 shl	 esi, 1
  004d2	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  004d7	f3 0f 5c 04 31	 subss	 xmm0, DWORD PTR [ecx+esi]
  004dc	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  004e1	ba 04 00 00 00	 mov	 edx, 4
  004e6	6b c2 03	 imul	 eax, edx, 3
  004e9	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  004ec	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 289  :   } else {

  004f1	e9 58 01 00 00	 jmp	 $LN7@glm_mat3_q
$LN6@glm_mat3_q:

; 290  :     r       = sqrtf(1.0f - m[0][0] - m[1][1] + m[2][2]);

  004f6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  004fb	6b c8 00	 imul	 ecx, eax, 0
  004fe	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00501	ba 04 00 00 00	 mov	 edx, 4
  00506	6b c2 00	 imul	 eax, edx, 0
  00509	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00511	f3 0f 5c 04 01	 subss	 xmm0, DWORD PTR [ecx+eax]
  00516	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0051b	c1 e1 00	 shl	 ecx, 0
  0051e	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00521	ba 04 00 00 00	 mov	 edx, 4
  00526	c1 e2 00	 shl	 edx, 0
  00529	f3 0f 5c 04 11	 subss	 xmm0, DWORD PTR [ecx+edx]
  0052e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00533	d1 e0		 shl	 eax, 1
  00535	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00538	b9 04 00 00 00	 mov	 ecx, 4
  0053d	d1 e1		 shl	 ecx, 1
  0053f	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00544	51		 push	 ecx
  00545	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054a	e8 00 00 00 00	 call	 _sqrtf
  0054f	83 c4 04	 add	 esp, 4
  00552	d9 5d ec	 fstp	 DWORD PTR _r$[ebp]

; 291  :     rinv    = 0.5f / r;

  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0055d	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _r$[ebp]
  00562	f3 0f 11 45 e0	 movss	 DWORD PTR _rinv$[ebp], xmm0

; 292  : 
; 293  :     dest[0] = rinv * (m[0][2] + m[2][0]);

  00567	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0056c	6b c8 00	 imul	 ecx, eax, 0
  0056f	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00572	ba 04 00 00 00	 mov	 edx, 4
  00577	d1 e2		 shl	 edx, 1
  00579	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0057e	d1 e0		 shl	 eax, 1
  00580	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00583	be 04 00 00 00	 mov	 esi, 4
  00588	6b f6 00	 imul	 esi, esi, 0
  0058b	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00590	f3 0f 58 04 30	 addss	 xmm0, DWORD PTR [eax+esi]
  00595	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0059a	b9 04 00 00 00	 mov	 ecx, 4
  0059f	6b d1 00	 imul	 edx, ecx, 0
  005a2	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  005a5	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 294  :     dest[1] = rinv * (m[1][2] + m[2][1]);

  005aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  005af	c1 e0 00	 shl	 eax, 0
  005b2	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  005b5	b9 04 00 00 00	 mov	 ecx, 4
  005ba	d1 e1		 shl	 ecx, 1
  005bc	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  005c1	d1 e2		 shl	 edx, 1
  005c3	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  005c6	be 04 00 00 00	 mov	 esi, 4
  005cb	c1 e6 00	 shl	 esi, 0
  005ce	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  005d3	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  005d8	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  005dd	b8 04 00 00 00	 mov	 eax, 4
  005e2	c1 e0 00	 shl	 eax, 0
  005e5	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  005e8	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 295  :     dest[2] = r    * 0.5f;

  005ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$[ebp]
  005f2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	d1 e0		 shl	 eax, 1
  00601	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00604	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 296  :     dest[3] = rinv * (m[0][1] - m[1][0]);

  00609	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0060e	6b c8 00	 imul	 ecx, eax, 0
  00611	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00614	ba 04 00 00 00	 mov	 edx, 4
  00619	c1 e2 00	 shl	 edx, 0
  0061c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00621	c1 e0 00	 shl	 eax, 0
  00624	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00627	be 04 00 00 00	 mov	 esi, 4
  0062c	6b f6 00	 imul	 esi, esi, 0
  0062f	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00634	f3 0f 5c 04 30	 subss	 xmm0, DWORD PTR [eax+esi]
  00639	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0063e	b9 04 00 00 00	 mov	 ecx, 4
  00643	6b d1 03	 imul	 edx, ecx, 3
  00646	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00649	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
$LN7@glm_mat3_q:

; 297  :   }
; 298  : }

  0064e	5f		 pop	 edi
  0064f	5e		 pop	 esi
  00650	5b		 pop	 ebx
  00651	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00657	3b ec		 cmp	 ebp, esp
  00659	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0065e	8b e5		 mov	 esp, ebp
  00660	5d		 pop	 ebp
  00661	c3		 ret	 0
_glm_mat3_quat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_trace
_TEXT	SEGMENT
tv87 = -196						; size = 4
_m$ = 8							; size = 4
_glm_mat3_trace PROC					; COMDAT

; 247  : glm_mat3_trace(mat3 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 248  :   return m[0][0] + m[1][1] + m[2][2];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	c1 e2 00	 shl	 edx, 0
  00043	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	c1 e6 00	 shl	 esi, 0
  0004e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00053	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  00058	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0005d	d1 e0		 shl	 eax, 1
  0005f	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	d1 e1		 shl	 ecx, 1
  00069	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0006e	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv87[ebp], xmm0
  00076	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv87[ebp]

; 249  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_glm_mat3_trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_mulv
_TEXT	SEGMENT
_res$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat3_mulv PROC					; COMDAT

; 230  : glm_mat3_mulv(mat3 m, vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 231  :   vec3 res;
; 232  :   res[0] = m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2];

  00032	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00037	6b c8 00	 imul	 ecx, eax, 0
  0003a	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0003d	ba 04 00 00 00	 mov	 edx, 4
  00042	6b c2 00	 imul	 eax, edx, 0
  00045	ba 04 00 00 00	 mov	 edx, 4
  0004a	6b d2 00	 imul	 edx, edx, 0
  0004d	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00050	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00055	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  0005a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0005f	c1 e0 00	 shl	 eax, 0
  00062	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00065	b9 04 00 00 00	 mov	 ecx, 4
  0006a	6b d1 00	 imul	 edx, ecx, 0
  0006d	b9 04 00 00 00	 mov	 ecx, 4
  00072	c1 e1 00	 shl	 ecx, 0
  00075	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00078	f3 0f 10 0c 10	 movss	 xmm1, DWORD PTR [eax+edx]
  0007d	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00082	f3 0f 58 c1	 addss	 xmm0, xmm1
  00086	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0008b	d1 e2		 shl	 edx, 1
  0008d	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00090	b8 04 00 00 00	 mov	 eax, 4
  00095	6b c8 00	 imul	 ecx, eax, 0
  00098	b8 04 00 00 00	 mov	 eax, 4
  0009d	d1 e0		 shl	 eax, 1
  0009f	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000a2	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  000a7	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  000ac	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b0	b9 04 00 00 00	 mov	 ecx, 4
  000b5	6b d1 00	 imul	 edx, ecx, 0
  000b8	f3 0f 11 44 15
	ec		 movss	 DWORD PTR _res$[ebp+edx], xmm0

; 233  :   res[1] = m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2];

  000be	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c3	6b c8 00	 imul	 ecx, eax, 0
  000c6	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000c9	ba 04 00 00 00	 mov	 edx, 4
  000ce	c1 e2 00	 shl	 edx, 0
  000d1	b8 04 00 00 00	 mov	 eax, 4
  000d6	6b c0 00	 imul	 eax, eax, 0
  000d9	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000dc	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000e1	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  000e6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000eb	c1 e1 00	 shl	 ecx, 0
  000ee	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000f1	ba 04 00 00 00	 mov	 edx, 4
  000f6	c1 e2 00	 shl	 edx, 0
  000f9	b8 04 00 00 00	 mov	 eax, 4
  000fe	c1 e0 00	 shl	 eax, 0
  00101	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00104	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00109	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  0010e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00112	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00117	d1 e1		 shl	 ecx, 1
  00119	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0011c	ba 04 00 00 00	 mov	 edx, 4
  00121	c1 e2 00	 shl	 edx, 0
  00124	b8 04 00 00 00	 mov	 eax, 4
  00129	d1 e0		 shl	 eax, 1
  0012b	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0012e	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00133	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  00138	f3 0f 58 c1	 addss	 xmm0, xmm1
  0013c	b9 04 00 00 00	 mov	 ecx, 4
  00141	c1 e1 00	 shl	 ecx, 0
  00144	f3 0f 11 44 0d
	ec		 movss	 DWORD PTR _res$[ebp+ecx], xmm0

; 234  :   res[2] = m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2];

  0014a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0014f	6b c8 00	 imul	 ecx, eax, 0
  00152	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00155	ba 04 00 00 00	 mov	 edx, 4
  0015a	d1 e2		 shl	 edx, 1
  0015c	b8 04 00 00 00	 mov	 eax, 4
  00161	6b c0 00	 imul	 eax, eax, 0
  00164	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00167	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0016c	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00171	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00176	c1 e1 00	 shl	 ecx, 0
  00179	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0017c	ba 04 00 00 00	 mov	 edx, 4
  00181	d1 e2		 shl	 edx, 1
  00183	b8 04 00 00 00	 mov	 eax, 4
  00188	c1 e0 00	 shl	 eax, 0
  0018b	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0018e	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00193	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  00198	f3 0f 58 c1	 addss	 xmm0, xmm1
  0019c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001a1	d1 e1		 shl	 ecx, 1
  001a3	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  001a6	ba 04 00 00 00	 mov	 edx, 4
  001ab	d1 e2		 shl	 edx, 1
  001ad	b8 04 00 00 00	 mov	 eax, 4
  001b2	d1 e0		 shl	 eax, 1
  001b4	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  001b7	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  001bc	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  001c1	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c5	b9 04 00 00 00	 mov	 ecx, 4
  001ca	d1 e1		 shl	 ecx, 1
  001cc	f3 0f 11 44 0d
	ec		 movss	 DWORD PTR _res$[ebp+ecx], xmm0

; 235  :   glm_vec3_copy(res, dest);

  001d2	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  001d5	50		 push	 eax
  001d6	8d 4d ec	 lea	 ecx, DWORD PTR _res$[ebp]
  001d9	51		 push	 ecx
  001da	e8 00 00 00 00	 call	 _glm_vec3_copy
  001df	83 c4 08	 add	 esp, 8

; 236  : }

  001e2	52		 push	 edx
  001e3	8b cd		 mov	 ecx, ebp
  001e5	50		 push	 eax
  001e6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat3_m
  001ec	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001f1	58		 pop	 eax
  001f2	5a		 pop	 edx
  001f3	5f		 pop	 edi
  001f4	5e		 pop	 esi
  001f5	5b		 pop	 ebx
  001f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f9	33 cd		 xor	 ecx, ebp
  001fb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00200	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00206	3b ec		 cmp	 ebp, esp
  00208	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020d	8b e5		 mov	 esp, ebp
  0020f	5d		 pop	 ebp
  00210	c3		 ret	 0
  00211	0f 1f 00	 npad	 3
$LN5@glm_mat3_m:
  00214	01 00 00 00	 DD	 1
  00218	00 00 00 00	 DD	 $LN4@glm_mat3_m
$LN4@glm_mat3_m:
  0021c	ec ff ff ff	 DD	 -20			; ffffffecH
  00220	0c 00 00 00	 DD	 12			; 0000000cH
  00224	00 00 00 00	 DD	 $LN3@glm_mat3_m
$LN3@glm_mat3_m:
  00228	72		 DB	 114			; 00000072H
  00229	65		 DB	 101			; 00000065H
  0022a	73		 DB	 115			; 00000073H
  0022b	00		 DB	 0
_glm_mat3_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_transpose
_TEXT	SEGMENT
_tmp$ = -64						; size = 36
_m$ = 8							; size = 4
_glm_mat3_transpose PROC				; COMDAT

; 203  : glm_mat3_transpose(mat3 m) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 204  :   CGLM_ALIGN_MAT mat3 tmp;
; 205  : 
; 206  :   tmp[0][1] = m[1][0];

  0003a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0003f	c1 e0 00	 shl	 eax, 0
  00042	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00045	b9 04 00 00 00	 mov	 ecx, 4
  0004a	6b d1 00	 imul	 edx, ecx, 0
  0004d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00052	6b c9 00	 imul	 ecx, ecx, 0
  00055	8d 4c 0d c0	 lea	 ecx, DWORD PTR _tmp$[ebp+ecx]
  00059	be 04 00 00 00	 mov	 esi, 4
  0005e	c1 e6 00	 shl	 esi, 0
  00061	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00064	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 207  :   tmp[0][2] = m[2][0];

  00067	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006c	d1 e0		 shl	 eax, 1
  0006e	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00071	b9 04 00 00 00	 mov	 ecx, 4
  00076	6b d1 00	 imul	 edx, ecx, 0
  00079	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0007e	6b c9 00	 imul	 ecx, ecx, 0
  00081	8d 4c 0d c0	 lea	 ecx, DWORD PTR _tmp$[ebp+ecx]
  00085	be 04 00 00 00	 mov	 esi, 4
  0008a	d1 e6		 shl	 esi, 1
  0008c	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0008f	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 208  :   tmp[1][0] = m[0][1];

  00092	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	c1 e2 00	 shl	 edx, 0
  000a5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000aa	c1 e0 00	 shl	 eax, 0
  000ad	8d 44 05 c0	 lea	 eax, DWORD PTR _tmp$[ebp+eax]
  000b1	be 04 00 00 00	 mov	 esi, 4
  000b6	6b f6 00	 imul	 esi, esi, 0
  000b9	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  000bc	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 209  :   tmp[1][2] = m[2][1];

  000bf	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c4	d1 e0		 shl	 eax, 1
  000c6	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  000c9	b9 04 00 00 00	 mov	 ecx, 4
  000ce	c1 e1 00	 shl	 ecx, 0
  000d1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000d6	c1 e2 00	 shl	 edx, 0
  000d9	8d 54 15 c0	 lea	 edx, DWORD PTR _tmp$[ebp+edx]
  000dd	be 04 00 00 00	 mov	 esi, 4
  000e2	d1 e6		 shl	 esi, 1
  000e4	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000e7	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 210  :   tmp[2][0] = m[0][2];

  000ea	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ef	6b c8 00	 imul	 ecx, eax, 0
  000f2	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  000f5	ba 04 00 00 00	 mov	 edx, 4
  000fa	d1 e2		 shl	 edx, 1
  000fc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00101	d1 e0		 shl	 eax, 1
  00103	8d 44 05 c0	 lea	 eax, DWORD PTR _tmp$[ebp+eax]
  00107	be 04 00 00 00	 mov	 esi, 4
  0010c	6b f6 00	 imul	 esi, esi, 0
  0010f	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  00112	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 211  :   tmp[2][1] = m[1][2];

  00115	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0011a	c1 e0 00	 shl	 eax, 0
  0011d	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00120	b9 04 00 00 00	 mov	 ecx, 4
  00125	d1 e1		 shl	 ecx, 1
  00127	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0012c	d1 e2		 shl	 edx, 1
  0012e	8d 54 15 c0	 lea	 edx, DWORD PTR _tmp$[ebp+edx]
  00132	be 04 00 00 00	 mov	 esi, 4
  00137	c1 e6 00	 shl	 esi, 0
  0013a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0013d	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 212  : 
; 213  :   m[0][1] = tmp[0][1];

  00140	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00145	6b c8 00	 imul	 ecx, eax, 0
  00148	8d 54 0d c0	 lea	 edx, DWORD PTR _tmp$[ebp+ecx]
  0014c	b8 04 00 00 00	 mov	 eax, 4
  00151	c1 e0 00	 shl	 eax, 0
  00154	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00159	6b c9 00	 imul	 ecx, ecx, 0
  0015c	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  0015f	be 04 00 00 00	 mov	 esi, 4
  00164	c1 e6 00	 shl	 esi, 0
  00167	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  0016a	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 214  :   m[0][2] = tmp[0][2];

  0016d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00172	6b c8 00	 imul	 ecx, eax, 0
  00175	8d 54 0d c0	 lea	 edx, DWORD PTR _tmp$[ebp+ecx]
  00179	b8 04 00 00 00	 mov	 eax, 4
  0017e	d1 e0		 shl	 eax, 1
  00180	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00185	6b c9 00	 imul	 ecx, ecx, 0
  00188	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  0018b	be 04 00 00 00	 mov	 esi, 4
  00190	d1 e6		 shl	 esi, 1
  00192	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  00195	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 215  :   m[1][0] = tmp[1][0];

  00198	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0019d	c1 e0 00	 shl	 eax, 0
  001a0	8d 4c 05 c0	 lea	 ecx, DWORD PTR _tmp$[ebp+eax]
  001a4	ba 04 00 00 00	 mov	 edx, 4
  001a9	6b c2 00	 imul	 eax, edx, 0
  001ac	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001b1	c1 e2 00	 shl	 edx, 0
  001b4	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  001b7	be 04 00 00 00	 mov	 esi, 4
  001bc	6b f6 00	 imul	 esi, esi, 0
  001bf	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  001c2	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 216  :   m[1][2] = tmp[1][2];

  001c5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ca	c1 e0 00	 shl	 eax, 0
  001cd	8d 4c 05 c0	 lea	 ecx, DWORD PTR _tmp$[ebp+eax]
  001d1	ba 04 00 00 00	 mov	 edx, 4
  001d6	d1 e2		 shl	 edx, 1
  001d8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001dd	c1 e0 00	 shl	 eax, 0
  001e0	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  001e3	be 04 00 00 00	 mov	 esi, 4
  001e8	d1 e6		 shl	 esi, 1
  001ea	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  001ed	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 217  :   m[2][0] = tmp[2][0];

  001f0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001f5	d1 e0		 shl	 eax, 1
  001f7	8d 4c 05 c0	 lea	 ecx, DWORD PTR _tmp$[ebp+eax]
  001fb	ba 04 00 00 00	 mov	 edx, 4
  00200	6b c2 00	 imul	 eax, edx, 0
  00203	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00208	d1 e2		 shl	 edx, 1
  0020a	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  0020d	be 04 00 00 00	 mov	 esi, 4
  00212	6b f6 00	 imul	 esi, esi, 0
  00215	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00218	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 218  :   m[2][1] = tmp[2][1];

  0021b	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00220	d1 e0		 shl	 eax, 1
  00222	8d 4c 05 c0	 lea	 ecx, DWORD PTR _tmp$[ebp+eax]
  00226	ba 04 00 00 00	 mov	 edx, 4
  0022b	c1 e2 00	 shl	 edx, 0
  0022e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00233	d1 e0		 shl	 eax, 1
  00235	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00238	be 04 00 00 00	 mov	 esi, 4
  0023d	c1 e6 00	 shl	 esi, 0
  00240	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  00243	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 219  : }

  00246	52		 push	 edx
  00247	8b cd		 mov	 ecx, ebp
  00249	50		 push	 eax
  0024a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat3_t
  00250	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00255	58		 pop	 eax
  00256	5a		 pop	 edx
  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	8b e3		 mov	 esp, ebx
  0025e	5b		 pop	 ebx
  0025f	c3		 ret	 0
$LN5@glm_mat3_t:
  00260	01 00 00 00	 DD	 1
  00264	00 00 00 00	 DD	 $LN4@glm_mat3_t
$LN4@glm_mat3_t:
  00268	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0026c	24 00 00 00	 DD	 36			; 00000024H
  00270	00 00 00 00	 DD	 $LN3@glm_mat3_t
$LN3@glm_mat3_t:
  00274	74		 DB	 116			; 00000074H
  00275	6d		 DB	 109			; 0000006dH
  00276	70		 DB	 112			; 00000070H
  00277	00		 DB	 0
_glm_mat3_transpose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_transpose_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_mat3_transpose_to PROC				; COMDAT

; 184  : glm_mat3_transpose_to(mat3 m, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  :   dest[0][0] = m[0][0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00051	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 186  :   dest[0][1] = m[1][0];

  00054	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00059	c1 e0 00	 shl	 eax, 0
  0005c	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0005f	b9 04 00 00 00	 mov	 ecx, 4
  00064	6b d1 00	 imul	 edx, ecx, 0
  00067	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0006c	6b c9 00	 imul	 ecx, ecx, 0
  0006f	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00072	be 04 00 00 00	 mov	 esi, 4
  00077	c1 e6 00	 shl	 esi, 0
  0007a	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0007d	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 187  :   dest[0][2] = m[2][0];

  00080	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00085	d1 e0		 shl	 eax, 1
  00087	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0008a	b9 04 00 00 00	 mov	 ecx, 4
  0008f	6b d1 00	 imul	 edx, ecx, 0
  00092	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00097	6b c9 00	 imul	 ecx, ecx, 0
  0009a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0009d	be 04 00 00 00	 mov	 esi, 4
  000a2	d1 e6		 shl	 esi, 1
  000a4	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000a7	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 188  :   dest[1][0] = m[0][1];

  000aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000af	6b c8 00	 imul	 ecx, eax, 0
  000b2	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000b5	ba 04 00 00 00	 mov	 edx, 4
  000ba	c1 e2 00	 shl	 edx, 0
  000bd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c2	c1 e0 00	 shl	 eax, 0
  000c5	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  000c8	be 04 00 00 00	 mov	 esi, 4
  000cd	6b f6 00	 imul	 esi, esi, 0
  000d0	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  000d3	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 189  :   dest[1][1] = m[1][1];

  000d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000db	c1 e0 00	 shl	 eax, 0
  000de	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000e1	b9 04 00 00 00	 mov	 ecx, 4
  000e6	c1 e1 00	 shl	 ecx, 0
  000e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ee	c1 e2 00	 shl	 edx, 0
  000f1	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  000f4	be 04 00 00 00	 mov	 esi, 4
  000f9	c1 e6 00	 shl	 esi, 0
  000fc	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000ff	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 190  :   dest[1][2] = m[2][1];

  00102	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00107	d1 e0		 shl	 eax, 1
  00109	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0010c	b9 04 00 00 00	 mov	 ecx, 4
  00111	c1 e1 00	 shl	 ecx, 0
  00114	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00119	c1 e2 00	 shl	 edx, 0
  0011c	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0011f	be 04 00 00 00	 mov	 esi, 4
  00124	d1 e6		 shl	 esi, 1
  00126	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00129	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 191  :   dest[2][0] = m[0][2];

  0012c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00137	ba 04 00 00 00	 mov	 edx, 4
  0013c	d1 e2		 shl	 edx, 1
  0013e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00143	d1 e0		 shl	 eax, 1
  00145	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00148	be 04 00 00 00	 mov	 esi, 4
  0014d	6b f6 00	 imul	 esi, esi, 0
  00150	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  00153	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 192  :   dest[2][1] = m[1][2];

  00156	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0015b	c1 e0 00	 shl	 eax, 0
  0015e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00161	b9 04 00 00 00	 mov	 ecx, 4
  00166	d1 e1		 shl	 ecx, 1
  00168	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0016d	d1 e2		 shl	 edx, 1
  0016f	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00172	be 04 00 00 00	 mov	 esi, 4
  00177	c1 e6 00	 shl	 esi, 0
  0017a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0017d	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 193  :   dest[2][2] = m[2][2];

  00180	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00185	d1 e0		 shl	 eax, 1
  00187	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0018a	b9 04 00 00 00	 mov	 ecx, 4
  0018f	d1 e1		 shl	 ecx, 1
  00191	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00196	d1 e2		 shl	 edx, 1
  00198	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0019b	be 04 00 00 00	 mov	 esi, 4
  001a0	d1 e6		 shl	 esi, 1
  001a2	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  001a5	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 194  : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001b1	3b ec		 cmp	 ebp, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_glm_mat3_transpose_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_mul
_TEXT	SEGMENT
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat3_mul PROC					; COMDAT

; 150  : glm_mat3_mul(mat3 m1, mat3 m2, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 151  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 152  :   glm_mat3_mul_sse2(m1, m2, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m2$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m1$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat3_mul_sse2
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 153  : #else
; 154  :   float a00 = m1[0][0], a01 = m1[0][1], a02 = m1[0][2],
; 155  :         a10 = m1[1][0], a11 = m1[1][1], a12 = m1[1][2],
; 156  :         a20 = m1[2][0], a21 = m1[2][1], a22 = m1[2][2],
; 157  : 
; 158  :         b00 = m2[0][0], b01 = m2[0][1], b02 = m2[0][2],
; 159  :         b10 = m2[1][0], b11 = m2[1][1], b12 = m2[1][2],
; 160  :         b20 = m2[2][0], b21 = m2[2][1], b22 = m2[2][2];
; 161  : 
; 162  :   dest[0][0] = a00 * b00 + a10 * b01 + a20 * b02;
; 163  :   dest[0][1] = a01 * b00 + a11 * b01 + a21 * b02;
; 164  :   dest[0][2] = a02 * b00 + a12 * b01 + a22 * b02;
; 165  :   dest[1][0] = a00 * b10 + a10 * b11 + a20 * b12;
; 166  :   dest[1][1] = a01 * b10 + a11 * b11 + a21 * b12;
; 167  :   dest[1][2] = a02 * b10 + a12 * b11 + a22 * b12;
; 168  :   dest[2][0] = a00 * b20 + a10 * b21 + a20 * b22;
; 169  :   dest[2][1] = a01 * b20 + a11 * b21 + a21 * b22;
; 170  :   dest[2][2] = a02 * b20 + a12 * b21 + a22 * b22;
; 171  : #endif
; 172  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glm_mat3_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_zero
_TEXT	SEGMENT
_t$ = -64						; size = 36
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat3_zero PROC					; COMDAT

; 129  : glm_mat3_zero(mat3 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 130  :   CGLM_ALIGN_MAT mat3 t = GLM_MAT3_ZERO_INIT;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp], xmm0
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+32], xmm0

; 131  :   glm_mat3_copy(t, mat);

  0008c	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  0008f	50		 push	 eax
  00090	8d 4d c0	 lea	 ecx, DWORD PTR _t$[ebp]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 _glm_mat3_copy
  00099	83 c4 08	 add	 esp, 8

; 132  : }

  0009c	52		 push	 edx
  0009d	8b cd		 mov	 ecx, ebp
  0009f	50		 push	 eax
  000a0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat3_z
  000a6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ab	58		 pop	 eax
  000ac	5a		 pop	 edx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	8b e3		 mov	 esp, ebx
  000be	5b		 pop	 ebx
  000bf	c3		 ret	 0
$LN5@glm_mat3_z:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN4@glm_mat3_z
$LN4@glm_mat3_z:
  000c8	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000cc	24 00 00 00	 DD	 36			; 00000024H
  000d0	00 00 00 00	 DD	 $LN3@glm_mat3_z
$LN3@glm_mat3_z:
  000d4	74		 DB	 116			; 00000074H
  000d5	00		 DB	 0
_glm_mat3_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_identity_array
_TEXT	SEGMENT
_i$ = -76						; size = 4
_t$ = -64						; size = 36
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_count$ = 12						; size = 4
_glm_mat3_identity_array PROC				; COMDAT

; 113  : glm_mat3_identity_array(mat3 * __restrict mat, size_t count) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :   CGLM_ALIGN_MAT mat3 t = GLM_MAT3_IDENTITY_INIT;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp], xmm0
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00071	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  00076	0f 57 c0	 xorps	 xmm0, xmm0
  00079	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00096	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+32], xmm0

; 115  :   size_t i;
; 116  : 
; 117  :   for (i = 0; i < count; i++) {

  0009b	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a2	eb 09		 jmp	 SHORT $LN4@glm_mat3_i
$LN2@glm_mat3_i:
  000a4	8b 45 b4	 mov	 eax, DWORD PTR _i$[ebp]
  000a7	83 c0 01	 add	 eax, 1
  000aa	89 45 b4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_mat3_i:
  000ad	8b 45 b4	 mov	 eax, DWORD PTR _i$[ebp]
  000b0	3b 43 0c	 cmp	 eax, DWORD PTR _count$[ebx]
  000b3	73 16		 jae	 SHORT $LN3@glm_mat3_i

; 118  :     glm_mat3_copy(t, mat[i]);

  000b5	6b 45 b4 24	 imul	 eax, DWORD PTR _i$[ebp], 36
  000b9	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  000bc	50		 push	 eax
  000bd	8d 4d c0	 lea	 ecx, DWORD PTR _t$[ebp]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 _glm_mat3_copy
  000c6	83 c4 08	 add	 esp, 8

; 119  :   }

  000c9	eb d9		 jmp	 SHORT $LN2@glm_mat3_i
$LN3@glm_mat3_i:

; 120  : }

  000cb	52		 push	 edx
  000cc	8b cd		 mov	 ecx, ebp
  000ce	50		 push	 eax
  000cf	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@glm_mat3_i
  000d5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000da	58		 pop	 eax
  000db	5a		 pop	 edx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e1	33 cd		 xor	 ecx, ebp
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	8b e3		 mov	 esp, ebx
  000ed	5b		 pop	 ebx
  000ee	c3		 ret	 0
  000ef	90		 npad	 1
$LN8@glm_mat3_i:
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN7@glm_mat3_i
$LN7@glm_mat3_i:
  000f8	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000fc	24 00 00 00	 DD	 36			; 00000024H
  00100	00 00 00 00	 DD	 $LN6@glm_mat3_i
$LN6@glm_mat3_i:
  00104	74		 DB	 116			; 00000074H
  00105	00		 DB	 0
_glm_mat3_identity_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_identity
_TEXT	SEGMENT
_t$ = -64						; size = 36
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat3_identity PROC					; COMDAT

; 98   : glm_mat3_identity(mat3 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 99   :   CGLM_ALIGN_MAT mat3 t = GLM_MAT3_IDENTITY_INIT;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp], xmm0
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00071	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  00076	0f 57 c0	 xorps	 xmm0, xmm0
  00079	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00096	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+32], xmm0

; 100  :   glm_mat3_copy(t, mat);

  0009b	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  0009e	50		 push	 eax
  0009f	8d 4d c0	 lea	 ecx, DWORD PTR _t$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _glm_mat3_copy
  000a8	83 c4 08	 add	 esp, 8

; 101  : }

  000ab	52		 push	 edx
  000ac	8b cd		 mov	 ecx, ebp
  000ae	50		 push	 eax
  000af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat3_i
  000b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ba	58		 pop	 eax
  000bb	5a		 pop	 edx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c1	33 cd		 xor	 ecx, ebp
  000c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	8b e3		 mov	 esp, ebx
  000cd	5b		 pop	 ebx
  000ce	c3		 ret	 0
  000cf	90		 npad	 1
$LN5@glm_mat3_i:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@glm_mat3_i
$LN4@glm_mat3_i:
  000d8	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000dc	24 00 00 00	 DD	 36			; 00000024H
  000e0	00 00 00 00	 DD	 $LN3@glm_mat3_i
$LN3@glm_mat3_i:
  000e4	74		 DB	 116			; 00000074H
  000e5	00		 DB	 0
_glm_mat3_identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat3.h
;	COMDAT _glm_mat3_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat3_copy PROC					; COMDAT

; 68   : glm_mat3_copy(mat3 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __093A7CE2_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 69   :   dest[0][0] = mat[0][0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00051	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 70   :   dest[0][1] = mat[0][1];

  00054	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0005f	ba 04 00 00 00	 mov	 edx, 4
  00064	c1 e2 00	 shl	 edx, 0
  00067	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006c	6b c0 00	 imul	 eax, eax, 0
  0006f	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00072	be 04 00 00 00	 mov	 esi, 4
  00077	c1 e6 00	 shl	 esi, 0
  0007a	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  0007d	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 71   :   dest[0][2] = mat[0][2];

  00080	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00085	6b c8 00	 imul	 ecx, eax, 0
  00088	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0008b	ba 04 00 00 00	 mov	 edx, 4
  00090	d1 e2		 shl	 edx, 1
  00092	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00097	6b c0 00	 imul	 eax, eax, 0
  0009a	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0009d	be 04 00 00 00	 mov	 esi, 4
  000a2	d1 e6		 shl	 esi, 1
  000a4	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  000a7	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 72   : 
; 73   :   dest[1][0] = mat[1][0];

  000aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000af	c1 e0 00	 shl	 eax, 0
  000b2	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000b5	b9 04 00 00 00	 mov	 ecx, 4
  000ba	6b d1 00	 imul	 edx, ecx, 0
  000bd	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000c2	c1 e1 00	 shl	 ecx, 0
  000c5	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  000c8	be 04 00 00 00	 mov	 esi, 4
  000cd	6b f6 00	 imul	 esi, esi, 0
  000d0	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000d3	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 74   :   dest[1][1] = mat[1][1];

  000d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000db	c1 e0 00	 shl	 eax, 0
  000de	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000e1	b9 04 00 00 00	 mov	 ecx, 4
  000e6	c1 e1 00	 shl	 ecx, 0
  000e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ee	c1 e2 00	 shl	 edx, 0
  000f1	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  000f4	be 04 00 00 00	 mov	 esi, 4
  000f9	c1 e6 00	 shl	 esi, 0
  000fc	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000ff	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 75   :   dest[1][2] = mat[1][2];

  00102	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00107	c1 e0 00	 shl	 eax, 0
  0010a	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0010d	b9 04 00 00 00	 mov	 ecx, 4
  00112	d1 e1		 shl	 ecx, 1
  00114	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00119	c1 e2 00	 shl	 edx, 0
  0011c	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0011f	be 04 00 00 00	 mov	 esi, 4
  00124	d1 e6		 shl	 esi, 1
  00126	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00129	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 76   : 
; 77   :   dest[2][0] = mat[2][0];

  0012c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00131	d1 e0		 shl	 eax, 1
  00133	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00136	b9 04 00 00 00	 mov	 ecx, 4
  0013b	6b d1 00	 imul	 edx, ecx, 0
  0013e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00143	d1 e1		 shl	 ecx, 1
  00145	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00148	be 04 00 00 00	 mov	 esi, 4
  0014d	6b f6 00	 imul	 esi, esi, 0
  00150	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00153	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 78   :   dest[2][1] = mat[2][1];

  00156	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0015b	d1 e0		 shl	 eax, 1
  0015d	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00160	b9 04 00 00 00	 mov	 ecx, 4
  00165	c1 e1 00	 shl	 ecx, 0
  00168	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0016d	d1 e2		 shl	 edx, 1
  0016f	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00172	be 04 00 00 00	 mov	 esi, 4
  00177	c1 e6 00	 shl	 esi, 0
  0017a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0017d	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 79   :   dest[2][2] = mat[2][2];

  00180	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00185	d1 e0		 shl	 eax, 1
  00187	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0018a	b9 04 00 00 00	 mov	 ecx, 4
  0018f	d1 e1		 shl	 ecx, 1
  00191	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00196	d1 e2		 shl	 edx, 1
  00198	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0019b	be 04 00 00 00	 mov	 esi, 4
  001a0	d1 e6		 shl	 esi, 1
  001a2	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  001a5	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 80   : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001b1	3b ec		 cmp	 ebp, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_glm_mat3_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat3.h
;	COMDAT _glm_mat3_mul_sse2
_TEXT	SEGMENT
_x2$ = -288						; size = 16
_x1$ = -256						; size = 16
_x0$ = -224						; size = 16
_r2$ = -192						; size = 16
_r1$ = -160						; size = 16
_r0$ = -128						; size = 16
_l2$ = -96						; size = 16
_l1$ = -64						; size = 16
_l0$ = -32						; size = 16
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat3_mul_sse2 PROC					; COMDAT

; 17   : glm_mat3_mul_sse2(mat3 m1, mat3 m2, mat3 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 01 00
	00		 sub	 esp, 488		; 000001e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-488]
  00024	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E6B3AE36_mat3@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 18   :   __m128 l0, l1, l2;
; 19   :   __m128 r0, r1, r2;
; 20   :   __m128 x0, x1, x2;
; 21   : 
; 22   :   l0 = _mm_loadu_ps(m1[0]);

  0003a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _m1$[ebx]
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 e0	 movaps	 XMMWORD PTR _l0$[ebp], xmm0

; 23   :   l1 = _mm_loadu_ps(&m1[1][1]);

  0004c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00051	c1 e0 00	 shl	 eax, 0
  00054	03 43 08	 add	 eax, DWORD PTR _m1$[ebx]
  00057	b9 04 00 00 00	 mov	 ecx, 4
  0005c	c1 e1 00	 shl	 ecx, 0
  0005f	03 c1		 add	 eax, ecx
  00061	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00064	0f 29 45 c0	 movaps	 XMMWORD PTR _l1$[ebp], xmm0

; 24   :   l2 = _mm_set1_ps(m1[2][2]);

  00068	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006d	d1 e0		 shl	 eax, 1
  0006f	03 43 08	 add	 eax, DWORD PTR _m1$[ebx]
  00072	b9 04 00 00 00	 mov	 ecx, 4
  00077	d1 e1		 shl	 ecx, 1
  00079	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0007e	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00082	0f 29 45 a0	 movaps	 XMMWORD PTR _l2$[ebp], xmm0

; 25   : 
; 26   :   r0 = _mm_loadu_ps(m2[0]);

  00086	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0008b	6b c8 00	 imul	 ecx, eax, 0
  0008e	03 4b 0c	 add	 ecx, DWORD PTR _m2$[ebx]
  00091	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00094	0f 29 45 80	 movaps	 XMMWORD PTR _r0$[ebp], xmm0

; 27   :   r1 = _mm_loadu_ps(&m2[1][1]);

  00098	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0009d	c1 e0 00	 shl	 eax, 0
  000a0	03 43 0c	 add	 eax, DWORD PTR _m2$[ebx]
  000a3	b9 04 00 00 00	 mov	 ecx, 4
  000a8	c1 e1 00	 shl	 ecx, 0
  000ab	03 c1		 add	 eax, ecx
  000ad	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000b0	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _r1$[ebp], xmm0

; 28   :   r2 = _mm_set1_ps(m2[2][2]);

  000b7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000bc	d1 e0		 shl	 eax, 1
  000be	03 43 0c	 add	 eax, DWORD PTR _m2$[ebx]
  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	d1 e1		 shl	 ecx, 1
  000c8	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000cd	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  000d1	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _r2$[ebp], xmm0

; 29   : 
; 30   :   x1 = glmm_shuff2(l0, l1, 1, 0, 3, 3, 0, 3, 2, 0);

  000d8	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _l0$[ebp]
  000dc	0f c6 45 c0 4f	 shufps	 xmm0, XMMWORD PTR _l1$[ebp], 79 ; 0000004fH
  000e1	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _l0$[ebp]
  000e5	0f c6 4d c0 4f	 shufps	 xmm1, XMMWORD PTR _l1$[ebp], 79 ; 0000004fH
  000ea	0f c6 c8 38	 shufps	 xmm1, xmm0, 56		; 00000038H
  000ee	0f 29 8d 00 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm1

; 31   :   x2 = glmm_shuff2(l1, l2, 0, 0, 3, 2, 0, 2, 1, 0);

  000f5	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _l1$[ebp]
  000f9	0f c6 45 a0 0e	 shufps	 xmm0, XMMWORD PTR _l2$[ebp], 14 ; 0000000eH
  000fe	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _l1$[ebp]
  00102	0f c6 4d a0 0e	 shufps	 xmm1, XMMWORD PTR _l2$[ebp], 14 ; 0000000eH
  00107	0f c6 c8 24	 shufps	 xmm1, xmm0, 36		; 00000024H
  0010b	0f 29 8d e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm1

; 32   : 
; 33   :   x0 = _mm_add_ps(_mm_mul_ps(glmm_shuff1(l0, 0, 2, 1, 0),

  00112	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  00116	0f c6 85 60 ff
	ff ff 05	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 5
  0011e	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _r0$[ebp]
  00122	0f c6 8d 60 ff
	ff ff 05	 shufps	 xmm1, XMMWORD PTR _r1$[ebp], 5
  0012a	0f c6 c8 80	 shufps	 xmm1, xmm0, 128		; 00000080H
  0012e	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00135	0f 59 c1	 mulps	 xmm0, xmm1
  00138	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _r0$[ebp]
  0013c	0f c6 4d 80 c0	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 192 ; 000000c0H
  00141	0f 28 55 e0	 movaps	 xmm2, XMMWORD PTR _l0$[ebp]
  00145	0f c6 55 e0 24	 shufps	 xmm2, XMMWORD PTR _l0$[ebp], 36 ; 00000024H
  0014a	0f 59 d1	 mulps	 xmm2, xmm1
  0014d	0f 58 d0	 addps	 xmm2, xmm0
  00150	0f 29 95 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm2

; 34   :                              glmm_shuff1(r0, 3, 0, 0, 0)),
; 35   :                   _mm_mul_ps(x1, glmm_shuff2(r0, r1, 0, 0, 1, 1, 2, 0, 0, 0)));
; 36   : 
; 37   :   x0 = _mm_add_ps(x0,

  00157	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  0015b	0f c6 85 60 ff
	ff ff 5a	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 90 ; 0000005aH
  00163	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _r0$[ebp]
  00167	0f c6 8d 60 ff
	ff ff 5a	 shufps	 xmm1, XMMWORD PTR _r1$[ebp], 90 ; 0000005aH
  0016f	0f c6 c8 80	 shufps	 xmm1, xmm0, 128		; 00000080H
  00173	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0017a	0f 59 c1	 mulps	 xmm0, xmm1
  0017d	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00184	0f 58 c8	 addps	 xmm1, xmm0
  00187	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 38   :                   _mm_mul_ps(x2, glmm_shuff2(r0, r1, 1, 1, 2, 2, 2, 0, 0, 0)));
; 39   : 
; 40   :   _mm_storeu_ps(dest[0], x0);

  0018e	0f 10 85 20 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$[ebp]
  00195	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0019a	6b c8 00	 imul	 ecx, eax, 0
  0019d	03 4b 10	 add	 ecx, DWORD PTR _dest$[ebx]
  001a0	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 41   : 
; 42   :   x0 = _mm_add_ps(_mm_mul_ps(glmm_shuff1(l0, 1, 0, 2, 1),

  001a3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  001aa	0f c6 85 60 ff
	ff ff f0	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 240 ; 000000f0H
  001b2	0f 28 8d 00 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _x1$[ebp]
  001b9	0f c6 8d 00 ff
	ff ff 49	 shufps	 xmm1, XMMWORD PTR _x1$[ebp], 73 ; 00000049H
  001c1	0f 59 c8	 mulps	 xmm1, xmm0
  001c4	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  001c8	0f c6 85 60 ff
	ff ff af	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 175 ; 000000afH
  001d0	0f 28 55 e0	 movaps	 xmm2, XMMWORD PTR _l0$[ebp]
  001d4	0f c6 55 e0 49	 shufps	 xmm2, XMMWORD PTR _l0$[ebp], 73 ; 00000049H
  001d9	0f 59 d0	 mulps	 xmm2, xmm0
  001dc	0f 58 d1	 addps	 xmm2, xmm1
  001df	0f 29 95 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm2

; 43   :                              _mm_shuffle_ps(r0, r1, _MM_SHUFFLE(2, 2, 3, 3))),
; 44   :                   _mm_mul_ps(glmm_shuff1(x1, 1, 0, 2, 1),
; 45   :                              glmm_shuff1(r1, 3, 3, 0, 0)));
; 46   : 
; 47   :   x0 = _mm_add_ps(x0,

  001e6	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  001ed	0f c6 85 40 ff
	ff ff 05	 shufps	 xmm0, XMMWORD PTR _r2$[ebp], 5
  001f5	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  001fc	0f c6 8d e0 fe
	ff ff 49	 shufps	 xmm1, XMMWORD PTR _x2$[ebp], 73 ; 00000049H
  00204	0f 59 c8	 mulps	 xmm1, xmm0
  00207	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0020e	0f 58 c1	 addps	 xmm0, xmm1
  00211	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 48   :                   _mm_mul_ps(glmm_shuff1(x2, 1, 0, 2, 1),
; 49   :                              _mm_shuffle_ps(r1, r2, _MM_SHUFFLE(0, 0, 1, 1))));
; 50   : 
; 51   :   _mm_storeu_ps(&dest[1][1], x0);

  00218	0f 10 85 20 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _x0$[ebp]
  0021f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00224	c1 e0 00	 shl	 eax, 0
  00227	03 43 10	 add	 eax, DWORD PTR _dest$[ebx]
  0022a	b9 04 00 00 00	 mov	 ecx, 4
  0022f	c1 e1 00	 shl	 ecx, 0
  00232	03 c1		 add	 eax, ecx
  00234	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 52   : 
; 53   :   dest[2][2] = m1[0][2] * m2[2][0]

  00237	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0023c	6b c8 00	 imul	 ecx, eax, 0
  0023f	03 4b 08	 add	 ecx, DWORD PTR _m1$[ebx]
  00242	ba 04 00 00 00	 mov	 edx, 4
  00247	d1 e2		 shl	 edx, 1
  00249	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0024e	d1 e0		 shl	 eax, 1
  00250	03 43 0c	 add	 eax, DWORD PTR _m2$[ebx]
  00253	be 04 00 00 00	 mov	 esi, 4
  00258	6b f6 00	 imul	 esi, esi, 0
  0025b	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00260	f3 0f 59 04 30	 mulss	 xmm0, DWORD PTR [eax+esi]
  00265	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0026a	c1 e1 00	 shl	 ecx, 0
  0026d	03 4b 08	 add	 ecx, DWORD PTR _m1$[ebx]
  00270	ba 04 00 00 00	 mov	 edx, 4
  00275	d1 e2		 shl	 edx, 1
  00277	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0027c	d1 e0		 shl	 eax, 1
  0027e	03 43 0c	 add	 eax, DWORD PTR _m2$[ebx]
  00281	be 04 00 00 00	 mov	 esi, 4
  00286	c1 e6 00	 shl	 esi, 0
  00289	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  0028e	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  00293	f3 0f 58 c1	 addss	 xmm0, xmm1
  00297	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0029c	d1 e1		 shl	 ecx, 1
  0029e	03 4b 08	 add	 ecx, DWORD PTR _m1$[ebx]
  002a1	ba 04 00 00 00	 mov	 edx, 4
  002a6	d1 e2		 shl	 edx, 1
  002a8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  002ad	d1 e0		 shl	 eax, 1
  002af	03 43 0c	 add	 eax, DWORD PTR _m2$[ebx]
  002b2	be 04 00 00 00	 mov	 esi, 4
  002b7	d1 e6		 shl	 esi, 1
  002b9	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  002be	f3 0f 59 0c 30	 mulss	 xmm1, DWORD PTR [eax+esi]
  002c3	f3 0f 58 c1	 addss	 xmm0, xmm1
  002c7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002cc	d1 e1		 shl	 ecx, 1
  002ce	03 4b 10	 add	 ecx, DWORD PTR _dest$[ebx]
  002d1	ba 04 00 00 00	 mov	 edx, 4
  002d6	d1 e2		 shl	 edx, 1
  002d8	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 54   :              + m1[1][2] * m2[2][1]
; 55   :              + m1[2][2] * m2[2][2];
; 56   : }

  002dd	5f		 pop	 edi
  002de	5e		 pop	 esi
  002df	8b e5		 mov	 esp, ebp
  002e1	5d		 pop	 ebp
  002e2	8b e3		 mov	 esp, ebx
  002e4	5b		 pop	 ebx
  002e5	c3		 ret	 0
_glm_mat3_mul_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_dot
_TEXT	SEGMENT
tv130 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_dot PROC					; COMDAT

; 184  : glm_vec3_dot(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  :   return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	c1 e0 00	 shl	 eax, 0
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0005b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0005e	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00063	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00068	f3 0f 58 c1	 addss	 xmm0, xmm1
  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	d1 e0		 shl	 eax, 1
  00073	b9 04 00 00 00	 mov	 ecx, 4
  00078	d1 e1		 shl	 ecx, 1
  0007a	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0007d	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00080	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00085	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  0008a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0008e	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv130[ebp], xmm0
  00096	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv130[ebp]

; 186  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_glm_vec3_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_copy
_TEXT	SEGMENT
_a$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_copy PROC					; COMDAT

; 146  : glm_vec3_copy(vec3 a, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 147  :   dest[0] = a[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 148  :   dest[1] = a[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 149  :   dest[2] = a[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 150  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec3_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 760  :             return (float)sqrt(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sqrt
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 761  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
