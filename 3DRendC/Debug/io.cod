; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\3DRendC\glmc\io.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__D164993B_x86@h DB 01H
__51BD2C42_util@h DB 01H
__34F2E310_vec2-ext@h DB 01H
__83360300_vec2@h DB 01H
__9285E8A4_vec3-ext@h DB 01H
__5722D62A_vec4-ext@h DB 01H
__87BB7FB2_vec4@h DB 01H
__82F46937_vec3@h DB 01H
__6C51F661_mat4@h DB 01H
__D6E4440C_mat4@h DB 01H
__691EE0E4_mat3@h DB 01H
__D3AB5289_mat3@h DB 01H
__68DC8AD3_mat2@h DB 01H
__D26938BE_mat2@h DB 01H
__EF0FC99D_affine@h DB 01H
__8C09B87C_affine-mat@h DB 01H
__1A33B462_affine@h DB 01H
__26C2D243_plane@h DB 01H
__B1B2DC28_cam@h DB 01H
__26922CBA_frustum@h DB 01H
__9A782FAE_quat@h DB 01H
__20CD9DC3_quat@h DB 01H
__0105C43C_euler@h DB 01H
__76E0E330_box@h DB 01H
__AF25309F_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__98FD395E_io@h DB 01H
__253AA91C_project@h DB 01H
__C5964F96_sphere@h DB 01H
__CA1EBA5F_ease@h DB 01H
__E6C09561_curve@h DB 01H
__1F285908_bezier@h DB 01H
__F71D69B6_ray@h DB 01H
__C07C9586_affine2d@h DB 01H
__3F8BA224_vec3@h DB 01H
__3AC4B4A1_vec4@h DB 01H
__A792755C_io@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_glm_mat4_print
PUBLIC	_glm_mat3_print
PUBLIC	_glm_vec4_print
PUBLIC	_glm_vec3_print
PUBLIC	_glm_versor_print
PUBLIC	_glmc_mat4_print
PUBLIC	_glmc_mat3_print
PUBLIC	_glmc_vec4_print
PUBLIC	_glmc_vec3_print
PUBLIC	_glmc_versor_print
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BM@MMCKFOME@Matrix?5?$CIfloat?$CFdx?$CFd?$CJ?3?5?$BL?$FL36m?6@ ; `string'
PUBLIC	??_C@_05JOANDCMH@?$CF?5?4?$CKf@			; `string'
PUBLIC	??_C@_03FLKGMEGP@?$CF?5g@			; `string'
PUBLIC	??_C@_03MFEOPPMH@?5?5?$HM@			; `string'
PUBLIC	??_C@_07DEGDLBHC@?5?$CF?5?$CK?4?$CKf@		; `string'
PUBLIC	??_C@_05PPOEGKHG@?5?$CF?5?$CKg@			; `string'
PUBLIC	??_C@_04PPCKPBGG@?5?5?$HM?6@			; `string'
PUBLIC	??_C@_05CCCEBKIG@?$BL?$FL0m?6@			; `string'
PUBLIC	??_C@_0BM@JOMMLECM@Vector?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@ ; `string'
PUBLIC	??_C@_06HNBOHFIG@?5?$CF?5?4?$CKf@		; `string'
PUBLIC	??_C@_04HNABMDGK@?5?$CF?5g@			; `string'
PUBLIC	??_C@_09KLGFKFID@?5?5?$CJ?$BL?$FL0m?6?6@	; `string'
PUBLIC	??_C@_0CA@OJMOILAA@Quaternion?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@ ; `string'
PUBLIC	__real@40f86a0000000000
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@40f86a0000000000
CONST	SEGMENT
__real@40f86a0000000000 DQ 040f86a0000000000r	; 100000
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0CA@OJMOILAA@Quaternion?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@
CONST	SEGMENT
??_C@_0CA@OJMOILAA@Quaternion?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@ DB 'Q'
	DB	'uaternion (float%d): ', 01bH, '[36m', 0aH, '  (', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KLGFKFID@?5?5?$CJ?$BL?$FL0m?6?6@
CONST	SEGMENT
??_C@_09KLGFKFID@?5?5?$CJ?$BL?$FL0m?6?6@ DB '  )', 01bH, '[0m', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HNABMDGK@?5?$CF?5g@
CONST	SEGMENT
??_C@_04HNABMDGK@?5?$CF?5g@ DB ' % g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HNBOHFIG@?5?$CF?5?4?$CKf@
CONST	SEGMENT
??_C@_06HNBOHFIG@?5?$CF?5?4?$CKf@ DB ' % .*f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JOMMLECM@Vector?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@
CONST	SEGMENT
??_C@_0BM@JOMMLECM@Vector?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@ DB 'V'
	DB	'ector (float%d): ', 01bH, '[36m', 0aH, '  (', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCCEBKIG@?$BL?$FL0m?6@
CONST	SEGMENT
??_C@_05CCCEBKIG@?$BL?$FL0m?6@ DB 01bH, '[0m', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPCKPBGG@?5?5?$HM?6@
CONST	SEGMENT
??_C@_04PPCKPBGG@?5?5?$HM?6@ DB '  |', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPOEGKHG@?5?$CF?5?$CKg@
CONST	SEGMENT
??_C@_05PPOEGKHG@?5?$CF?5?$CKg@ DB ' % *g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DEGDLBHC@?5?$CF?5?$CK?4?$CKf@
CONST	SEGMENT
??_C@_07DEGDLBHC@?5?$CF?5?$CK?4?$CKf@ DB ' % *.*f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MFEOPPMH@?5?5?$HM@
CONST	SEGMENT
??_C@_03MFEOPPMH@?5?5?$HM@ DB '  |', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FLKGMEGP@?$CF?5g@
CONST	SEGMENT
??_C@_03FLKGMEGP@?$CF?5g@ DB '% g', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JOANDCMH@?$CF?5?4?$CKf@
CONST	SEGMENT
??_C@_05JOANDCMH@?$CF?5?4?$CKf@ DB '% .*f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MMCKFOME@Matrix?5?$CIfloat?$CFdx?$CFd?$CJ?3?5?$BL?$FL36m?6@
CONST	SEGMENT
??_C@_0BM@MMCKFOME@Matrix?5?$CIfloat?$CFdx?$CFd?$CJ?3?5?$BL?$FL36m?6@ DB 'M'
	DB	'atrix (float%dx%d): ', 01bH, '[36m', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\io.c
;	COMDAT _glmc_versor_print
_TEXT	SEGMENT
_vec$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glmc_versor_print PROC					; COMDAT

; 44   :                   FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A792755C_io@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 45   :   glm_versor_print(vec, ostream);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_versor_print
  00035	83 c4 08	 add	 esp, 8

; 46   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_versor_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\io.c
;	COMDAT _glmc_vec3_print
_TEXT	SEGMENT
_vec$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glmc_vec3_print PROC					; COMDAT

; 37   :                 FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A792755C_io@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   glm_vec3_print(vec, ostream);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_print
  00035	83 c4 08	 add	 esp, 8

; 39   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\io.c
;	COMDAT _glmc_vec4_print
_TEXT	SEGMENT
_vec$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glmc_vec4_print PROC					; COMDAT

; 30   :                 FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A792755C_io@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 31   :   glm_vec4_print(vec, ostream);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_print
  00035	83 c4 08	 add	 esp, 8

; 32   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\io.c
;	COMDAT _glmc_mat3_print
_TEXT	SEGMENT
_matrix$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glmc_mat3_print PROC					; COMDAT

; 23   :                 FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A792755C_io@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 24   :   glm_mat3_print(matrix, ostream);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _matrix$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat3_print
  00035	83 c4 08	 add	 esp, 8

; 25   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat3_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\io.c
;	COMDAT _glmc_mat4_print
_TEXT	SEGMENT
_matrix$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glmc_mat4_print PROC					; COMDAT

; 16   :                 FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __A792755C_io@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 17   :   glm_mat4_print(matrix, ostream);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _matrix$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_print
  00035	83 c4 08	 add	 esp, 8

; 18   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\io.h
;	COMDAT _glm_versor_print
_TEXT	SEGMENT
_i$ = -8						; size = 4
_vec$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glm_versor_print PROC					; COMDAT

; 276  :                  FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __98FD395E_io@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 277  :   int i;
; 278  : 
; 279  : #define m 4
; 280  : 
; 281  :   fprintf(ostream, "Quaternion (float%d): " CGLM_PRINT_COLOR "\n  (", m);

  00028	6a 04		 push	 4
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@OJMOILAA@Quaternion?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _fprintf
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 282  : 
; 283  :   for (i = 0; i < m; i++) {

  0003b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00042	eb 09		 jmp	 SHORT $LN4@glm_versor
$LN2@glm_versor:
  00044	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_versor:
  0004d	83 7d f8 04	 cmp	 DWORD PTR _i$[ebp], 4
  00051	7d 67		 jge	 SHORT $LN3@glm_versor

; 284  :     if (vec[i] < CGLM_PRINT_MAX_TO_SHORT)

  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  00059	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  0005e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  00066	66 0f 2f c8	 comisd	 xmm1, xmm0
  0006a	76 28		 jbe	 SHORT $LN5@glm_versor

; 285  :       fprintf(ostream, " % .*f", CGLM_PRINT_PRECISION, vec[i]);

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  00072	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  00077	83 ec 08	 sub	 esp, 8
  0007a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007f	6a 05		 push	 5
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_06HNBOHFIG@?5?$CF?5?4?$CKf@
  00086	8b 55 0c	 mov	 edx, DWORD PTR _ostream$[ebp]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 _fprintf
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	eb 24		 jmp	 SHORT $LN6@glm_versor
$LN5@glm_versor:

; 286  :     else
; 287  :       fprintf(ostream, " % g", vec[i]);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  0009a	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  0009f	83 ec 08	 sub	 esp, 8
  000a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_04HNABMDGK@?5?$CF?5g@
  000ac	8b 55 0c	 mov	 edx, DWORD PTR _ostream$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 _fprintf
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@glm_versor:

; 288  :   }

  000b8	eb 8a		 jmp	 SHORT $LN2@glm_versor
$LN3@glm_versor:

; 289  : 
; 290  : 
; 291  :   fprintf(ostream, "  )" CGLM_PRINT_COLOR_RESET "\n\n");

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_09KLGFKFID@?5?5?$CJ?$BL?$FL0m?6?6@
  000bf	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _fprintf
  000c8	83 c4 08	 add	 esp, 8

; 292  : 
; 293  : #undef m
; 294  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_glm_versor_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\io.h
;	COMDAT _glm_vec3_print
_TEXT	SEGMENT
_i$ = -8						; size = 4
_vec$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glm_vec3_print PROC					; COMDAT

; 214  :                FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __98FD395E_io@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 215  :   int i;
; 216  : 
; 217  : #define m 3
; 218  : 
; 219  :   fprintf(ostream, "Vector (float%d): " CGLM_PRINT_COLOR "\n  (", m);

  00028	6a 03		 push	 3
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JOMMLECM@Vector?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _fprintf
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 220  : 
; 221  :   for (i = 0; i < m; i++) {

  0003b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00042	eb 09		 jmp	 SHORT $LN4@glm_vec3_p
$LN2@glm_vec3_p:
  00044	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_vec3_p:
  0004d	83 7d f8 03	 cmp	 DWORD PTR _i$[ebp], 3
  00051	7d 67		 jge	 SHORT $LN3@glm_vec3_p

; 222  :     if (vec[i] < CGLM_PRINT_MAX_TO_SHORT)

  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  00059	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  0005e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  00066	66 0f 2f c8	 comisd	 xmm1, xmm0
  0006a	76 28		 jbe	 SHORT $LN5@glm_vec3_p

; 223  :       fprintf(ostream, " % .*f", CGLM_PRINT_PRECISION, vec[i]);

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  00072	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  00077	83 ec 08	 sub	 esp, 8
  0007a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007f	6a 05		 push	 5
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_06HNBOHFIG@?5?$CF?5?4?$CKf@
  00086	8b 55 0c	 mov	 edx, DWORD PTR _ostream$[ebp]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 _fprintf
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	eb 24		 jmp	 SHORT $LN6@glm_vec3_p
$LN5@glm_vec3_p:

; 224  :     else
; 225  :       fprintf(ostream, " % g", vec[i]);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  0009a	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  0009f	83 ec 08	 sub	 esp, 8
  000a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_04HNABMDGK@?5?$CF?5g@
  000ac	8b 55 0c	 mov	 edx, DWORD PTR _ostream$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 _fprintf
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@glm_vec3_p:

; 226  :   }

  000b8	eb 8a		 jmp	 SHORT $LN2@glm_vec3_p
$LN3@glm_vec3_p:

; 227  : 
; 228  :   fprintf(ostream, "  )" CGLM_PRINT_COLOR_RESET "\n\n");

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_09KLGFKFID@?5?5?$CJ?$BL?$FL0m?6?6@
  000bf	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _fprintf
  000c8	83 c4 08	 add	 esp, 8

; 229  : 
; 230  : #undef m
; 231  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_glm_vec3_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\io.h
;	COMDAT _glm_vec4_print
_TEXT	SEGMENT
_i$ = -8						; size = 4
_vec$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glm_vec4_print PROC					; COMDAT

; 192  :                FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __98FD395E_io@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 193  :   int i;
; 194  : 
; 195  : #define m 4
; 196  : 
; 197  :   fprintf(ostream, "Vector (float%d): " CGLM_PRINT_COLOR "\n  (", m);

  00028	6a 04		 push	 4
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JOMMLECM@Vector?5?$CIfloat?$CFd?$CJ?3?5?$BL?$FL36m?6?5?5?$CI@
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _fprintf
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 198  : 
; 199  :   for (i = 0; i < m; i++) {

  0003b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00042	eb 09		 jmp	 SHORT $LN4@glm_vec4_p
$LN2@glm_vec4_p:
  00044	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00047	83 c0 01	 add	 eax, 1
  0004a	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_vec4_p:
  0004d	83 7d f8 04	 cmp	 DWORD PTR _i$[ebp], 4
  00051	7d 67		 jge	 SHORT $LN3@glm_vec4_p

; 200  :     if (vec[i] < CGLM_PRINT_MAX_TO_SHORT)

  00053	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  00059	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  0005e	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  00066	66 0f 2f c8	 comisd	 xmm1, xmm0
  0006a	76 28		 jbe	 SHORT $LN5@glm_vec4_p

; 201  :       fprintf(ostream, " % .*f", CGLM_PRINT_PRECISION, vec[i]);

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  00072	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  00077	83 ec 08	 sub	 esp, 8
  0007a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007f	6a 05		 push	 5
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_06HNBOHFIG@?5?$CF?5?4?$CKf@
  00086	8b 55 0c	 mov	 edx, DWORD PTR _ostream$[ebp]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 _fprintf
  0008f	83 c4 14	 add	 esp, 20			; 00000014H
  00092	eb 24		 jmp	 SHORT $LN6@glm_vec4_p
$LN5@glm_vec4_p:

; 202  :     else
; 203  :       fprintf(ostream, " % g", vec[i]);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _vec$[ebp]
  0009a	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4]
  0009f	83 ec 08	 sub	 esp, 8
  000a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_04HNABMDGK@?5?$CF?5g@
  000ac	8b 55 0c	 mov	 edx, DWORD PTR _ostream$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 _fprintf
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@glm_vec4_p:

; 204  :   }

  000b8	eb 8a		 jmp	 SHORT $LN2@glm_vec4_p
$LN3@glm_vec4_p:

; 205  : 
; 206  :   fprintf(ostream, "  )" CGLM_PRINT_COLOR_RESET "\n\n");

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_09KLGFKFID@?5?5?$CJ?$BL?$FL0m?6?6@
  000bf	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _fprintf
  000c8	83 c4 08	 add	 esp, 8

; 207  : 
; 208  : #undef m
; 209  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_glm_vec4_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\io.h
;	COMDAT _glm_mat3_print
_TEXT	SEGMENT
tv142 = -284						; size = 4
_cwi$ = -84						; size = 4
_cw$ = -72						; size = 16
_j$ = -48						; size = 4
_i$ = -36						; size = 4
_buff$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_matrix$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glm_mat3_print PROC					; COMDAT

; 108  :                FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-284]
  00012	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __98FD395E_io@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  :   char buff[16];
; 110  :   int  i, j, cw[4], cwi;
; 111  : 
; 112  : #define m 3
; 113  : #define n 3
; 114  : 
; 115  :   fprintf(ostream, "Matrix (float%dx%d): " CGLM_PRINT_COLOR "\n", m, n);

  00032	6a 03		 push	 3
  00034	6a 03		 push	 3
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MMCKFOME@Matrix?5?$CIfloat?$CFdx?$CFd?$CJ?3?5?$BL?$FL36m?6@
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _fprintf
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : 
; 117  :   cw[0] = cw[1] = cw[2] = 0;

  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	d1 e0		 shl	 eax, 1
  0004e	c7 44 05 b8 00
	00 00 00	 mov	 DWORD PTR _cw$[ebp+eax], 0
  00056	b9 04 00 00 00	 mov	 ecx, 4
  0005b	c1 e1 00	 shl	 ecx, 0
  0005e	c7 44 0d b8 00
	00 00 00	 mov	 DWORD PTR _cw$[ebp+ecx], 0
  00066	ba 04 00 00 00	 mov	 edx, 4
  0006b	6b c2 00	 imul	 eax, edx, 0
  0006e	c7 44 05 b8 00
	00 00 00	 mov	 DWORD PTR _cw$[ebp+eax], 0

; 118  : 
; 119  :   for (i = 0; i < m; i++) {

  00076	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007d	eb 09		 jmp	 SHORT $LN4@glm_mat3_p
$LN2@glm_mat3_p:
  0007f	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_mat3_p:
  00088	83 7d dc 03	 cmp	 DWORD PTR _i$[ebp], 3
  0008c	0f 8d ce 00 00
	00		 jge	 $LN3@glm_mat3_p

; 120  :     for (j = 0; j < n; j++) {

  00092	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN7@glm_mat3_p
$LN5@glm_mat3_p:
  0009b	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 d0	 mov	 DWORD PTR _j$[ebp], eax
$LN7@glm_mat3_p:
  000a4	83 7d d0 03	 cmp	 DWORD PTR _j$[ebp], 3
  000a8	0f 8d ad 00 00
	00		 jge	 $LN6@glm_mat3_p

; 121  :       if (matrix[i][j] < CGLM_PRINT_MAX_TO_SHORT)

  000ae	6b 45 dc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000b2	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  000b5	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  000b8	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  000bd	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  000c5	66 0f 2f c8	 comisd	 xmm1, xmm0
  000c9	76 2f		 jbe	 SHORT $LN14@glm_mat3_p

; 122  :         cwi = sprintf(buff, "% .*f", CGLM_PRINT_PRECISION, matrix[i][j]);

  000cb	6b 45 dc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000cf	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  000d2	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  000d5	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  000da	83 ec 08	 sub	 esp, 8
  000dd	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000e2	6a 05		 push	 5
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_05JOANDCMH@?$CF?5?4?$CKf@
  000e9	8d 55 e8	 lea	 edx, DWORD PTR _buff$[ebp]
  000ec	52		 push	 edx
  000ed	e8 00 00 00 00	 call	 _sprintf
  000f2	83 c4 14	 add	 esp, 20			; 00000014H
  000f5	89 45 ac	 mov	 DWORD PTR _cwi$[ebp], eax
  000f8	eb 2b		 jmp	 SHORT $LN15@glm_mat3_p
$LN14@glm_mat3_p:

; 123  :       else
; 124  :         cwi = sprintf(buff, "% g", matrix[i][j]);

  000fa	6b 45 dc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  000fe	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  00101	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  00104	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  00109	83 ec 08	 sub	 esp, 8
  0010c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_03FLKGMEGP@?$CF?5g@
  00116	8d 55 e8	 lea	 edx, DWORD PTR _buff$[ebp]
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 _sprintf
  0011f	83 c4 10	 add	 esp, 16			; 00000010H
  00122	89 45 ac	 mov	 DWORD PTR _cwi$[ebp], eax
$LN15@glm_mat3_p:

; 125  :       cw[i] = GLM_MAX(cw[i], cwi);

  00125	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00128	8b 4c 85 b8	 mov	 ecx, DWORD PTR _cw$[ebp+eax*4]
  0012c	3b 4d ac	 cmp	 ecx, DWORD PTR _cwi$[ebp]
  0012f	7e 0f		 jle	 SHORT $LN19@glm_mat3_p
  00131	8b 55 dc	 mov	 edx, DWORD PTR _i$[ebp]
  00134	8b 44 95 b8	 mov	 eax, DWORD PTR _cw$[ebp+edx*4]
  00138	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], eax
  0013e	eb 09		 jmp	 SHORT $LN20@glm_mat3_p
$LN19@glm_mat3_p:
  00140	8b 4d ac	 mov	 ecx, DWORD PTR _cwi$[ebp]
  00143	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv142[ebp], ecx
$LN20@glm_mat3_p:
  00149	8b 55 dc	 mov	 edx, DWORD PTR _i$[ebp]
  0014c	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv142[ebp]
  00152	89 44 95 b8	 mov	 DWORD PTR _cw$[ebp+edx*4], eax

; 126  :     }

  00156	e9 40 ff ff ff	 jmp	 $LN5@glm_mat3_p
$LN6@glm_mat3_p:

; 127  :   }

  0015b	e9 1f ff ff ff	 jmp	 $LN2@glm_mat3_p
$LN3@glm_mat3_p:

; 128  : 
; 129  :   for (i = 0; i < m; i++) {

  00160	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00167	eb 09		 jmp	 SHORT $LN10@glm_mat3_p
$LN8@glm_mat3_p:
  00169	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  0016c	83 c0 01	 add	 eax, 1
  0016f	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@glm_mat3_p:
  00172	83 7d dc 03	 cmp	 DWORD PTR _i$[ebp], 3
  00176	0f 8d c9 00 00
	00		 jge	 $LN9@glm_mat3_p

; 130  :     fprintf(ostream, "  |");

  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_03MFEOPPMH@?5?5?$HM@
  00181	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 _fprintf
  0018a	83 c4 08	 add	 esp, 8

; 131  :     
; 132  :     for (j = 0; j < n; j++)

  0018d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00194	eb 09		 jmp	 SHORT $LN13@glm_mat3_p
$LN11@glm_mat3_p:
  00196	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  00199	83 c0 01	 add	 eax, 1
  0019c	89 45 d0	 mov	 DWORD PTR _j$[ebp], eax
$LN13@glm_mat3_p:
  0019f	83 7d d0 03	 cmp	 DWORD PTR _j$[ebp], 3
  001a3	0f 8d 86 00 00
	00		 jge	 $LN12@glm_mat3_p

; 133  :       if (matrix[i][j] < CGLM_PRINT_MAX_TO_SHORT)

  001a9	6b 45 dc 0c	 imul	 eax, DWORD PTR _i$[ebp], 12
  001ad	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  001b0	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  001b3	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  001b8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  001c0	66 0f 2f c8	 comisd	 xmm1, xmm0
  001c4	76 34		 jbe	 SHORT $LN16@glm_mat3_p

; 134  :         fprintf(ostream, " % *.*f", cw[j], CGLM_PRINT_PRECISION, matrix[j][i]);

  001c6	6b 45 d0 0c	 imul	 eax, DWORD PTR _j$[ebp], 12
  001ca	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  001cd	8b 4d dc	 mov	 ecx, DWORD PTR _i$[ebp]
  001d0	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  001d5	83 ec 08	 sub	 esp, 8
  001d8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001dd	6a 05		 push	 5
  001df	8b 55 d0	 mov	 edx, DWORD PTR _j$[ebp]
  001e2	8b 44 95 b8	 mov	 eax, DWORD PTR _cw$[ebp+edx*4]
  001e6	50		 push	 eax
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_07DEGDLBHC@?5?$CF?5?$CK?4?$CKf@
  001ec	8b 4d 0c	 mov	 ecx, DWORD PTR _ostream$[ebp]
  001ef	51		 push	 ecx
  001f0	e8 00 00 00 00	 call	 _fprintf
  001f5	83 c4 18	 add	 esp, 24			; 00000018H
  001f8	eb 30		 jmp	 SHORT $LN17@glm_mat3_p
$LN16@glm_mat3_p:

; 135  :       else
; 136  :         fprintf(ostream, " % *g", cw[j], matrix[j][i]);

  001fa	6b 45 d0 0c	 imul	 eax, DWORD PTR _j$[ebp], 12
  001fe	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  00201	8b 4d dc	 mov	 ecx, DWORD PTR _i$[ebp]
  00204	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  00209	83 ec 08	 sub	 esp, 8
  0020c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00211	8b 55 d0	 mov	 edx, DWORD PTR _j$[ebp]
  00214	8b 44 95 b8	 mov	 eax, DWORD PTR _cw$[ebp+edx*4]
  00218	50		 push	 eax
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_05PPOEGKHG@?5?$CF?5?$CKg@
  0021e	8b 4d 0c	 mov	 ecx, DWORD PTR _ostream$[ebp]
  00221	51		 push	 ecx
  00222	e8 00 00 00 00	 call	 _fprintf
  00227	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@glm_mat3_p:
  0022a	e9 67 ff ff ff	 jmp	 $LN11@glm_mat3_p
$LN12@glm_mat3_p:

; 137  :     
; 138  :     fprintf(ostream, "  |\n");

  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_04PPCKPBGG@?5?5?$HM?6@
  00234	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  00237	50		 push	 eax
  00238	e8 00 00 00 00	 call	 _fprintf
  0023d	83 c4 08	 add	 esp, 8

; 139  :   }

  00240	e9 24 ff ff ff	 jmp	 $LN8@glm_mat3_p
$LN9@glm_mat3_p:

; 140  : 
; 141  :   fprintf(ostream, CGLM_PRINT_COLOR_RESET "\n");

  00245	68 00 00 00 00	 push	 OFFSET ??_C@_05CCCEBKIG@?$BL?$FL0m?6@
  0024a	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0024d	50		 push	 eax
  0024e	e8 00 00 00 00	 call	 _fprintf
  00253	83 c4 08	 add	 esp, 8

; 142  : 
; 143  : #undef m
; 144  : #undef n
; 145  : }

  00256	52		 push	 edx
  00257	8b cd		 mov	 ecx, ebp
  00259	50		 push	 eax
  0025a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@glm_mat3_p
  00260	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00265	58		 pop	 eax
  00266	5a		 pop	 edx
  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	5b		 pop	 ebx
  0026a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026d	33 cd		 xor	 ecx, ebp
  0026f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00274	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  0027a	3b ec		 cmp	 ebp, esp
  0027c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00281	8b e5		 mov	 esp, ebp
  00283	5d		 pop	 ebp
  00284	c3		 ret	 0
  00285	0f 1f 00	 npad	 3
$LN24@glm_mat3_p:
  00288	02 00 00 00	 DD	 2
  0028c	00 00 00 00	 DD	 $LN23@glm_mat3_p
$LN23@glm_mat3_p:
  00290	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00294	10 00 00 00	 DD	 16			; 00000010H
  00298	00 00 00 00	 DD	 $LN21@glm_mat3_p
  0029c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  002a0	10 00 00 00	 DD	 16			; 00000010H
  002a4	00 00 00 00	 DD	 $LN22@glm_mat3_p
$LN22@glm_mat3_p:
  002a8	63		 DB	 99			; 00000063H
  002a9	77		 DB	 119			; 00000077H
  002aa	00		 DB	 0
$LN21@glm_mat3_p:
  002ab	62		 DB	 98			; 00000062H
  002ac	75		 DB	 117			; 00000075H
  002ad	66		 DB	 102			; 00000066H
  002ae	66		 DB	 102			; 00000066H
  002af	00		 DB	 0
_glm_mat3_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\io.h
;	COMDAT _glm_mat4_print
_TEXT	SEGMENT
tv144 = -284						; size = 4
_cwi$ = -84						; size = 4
_cw$ = -72						; size = 16
_j$ = -48						; size = 4
_i$ = -36						; size = 4
_buff$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_matrix$ = 8						; size = 4
_ostream$ = 12						; size = 4
_glm_mat4_print PROC					; COMDAT

; 65   :                FILE * __restrict ostream) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-284]
  00012	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __98FD395E_io@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 66   :   char buff[16];
; 67   :   int  i, j, cw[4], cwi;
; 68   : 
; 69   : #define m 4
; 70   : #define n 4
; 71   : 
; 72   :   fprintf(ostream, "Matrix (float%dx%d): " CGLM_PRINT_COLOR "\n" , m, n);

  00032	6a 04		 push	 4
  00034	6a 04		 push	 4
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MMCKFOME@Matrix?5?$CIfloat?$CFdx?$CFd?$CJ?3?5?$BL?$FL36m?6@
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _fprintf
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 73   : 
; 74   :   cw[0] = cw[1] = cw[2] = cw[3] = 0;

  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	6b c8 03	 imul	 ecx, eax, 3
  0004f	c7 44 0d b8 00
	00 00 00	 mov	 DWORD PTR _cw$[ebp+ecx], 0
  00057	ba 04 00 00 00	 mov	 edx, 4
  0005c	d1 e2		 shl	 edx, 1
  0005e	c7 44 15 b8 00
	00 00 00	 mov	 DWORD PTR _cw$[ebp+edx], 0
  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	c1 e0 00	 shl	 eax, 0
  0006e	c7 44 05 b8 00
	00 00 00	 mov	 DWORD PTR _cw$[ebp+eax], 0
  00076	b9 04 00 00 00	 mov	 ecx, 4
  0007b	6b d1 00	 imul	 edx, ecx, 0
  0007e	c7 44 15 b8 00
	00 00 00	 mov	 DWORD PTR _cw$[ebp+edx], 0

; 75   : 
; 76   :   for (i = 0; i < m; i++) {

  00086	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0008d	eb 09		 jmp	 SHORT $LN4@glm_mat4_p
$LN2@glm_mat4_p:
  0008f	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00092	83 c0 01	 add	 eax, 1
  00095	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_mat4_p:
  00098	83 7d dc 04	 cmp	 DWORD PTR _i$[ebp], 4
  0009c	0f 8d d4 00 00
	00		 jge	 $LN3@glm_mat4_p

; 77   :     for (j = 0; j < n; j++) {

  000a2	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  000a9	eb 09		 jmp	 SHORT $LN7@glm_mat4_p
$LN5@glm_mat4_p:
  000ab	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  000ae	83 c0 01	 add	 eax, 1
  000b1	89 45 d0	 mov	 DWORD PTR _j$[ebp], eax
$LN7@glm_mat4_p:
  000b4	83 7d d0 04	 cmp	 DWORD PTR _j$[ebp], 4
  000b8	0f 8d b3 00 00
	00		 jge	 $LN6@glm_mat4_p

; 78   :       if (matrix[i][j] < CGLM_PRINT_MAX_TO_SHORT)

  000be	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  000c1	c1 e0 04	 shl	 eax, 4
  000c4	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  000c7	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  000ca	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  000cf	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  000d7	66 0f 2f c8	 comisd	 xmm1, xmm0
  000db	76 31		 jbe	 SHORT $LN14@glm_mat4_p

; 79   :         cwi = sprintf(buff, "% .*f", CGLM_PRINT_PRECISION, matrix[i][j]);

  000dd	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  000e0	c1 e0 04	 shl	 eax, 4
  000e3	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  000e6	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  000e9	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  000ee	83 ec 08	 sub	 esp, 8
  000f1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f6	6a 05		 push	 5
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_05JOANDCMH@?$CF?5?4?$CKf@
  000fd	8d 55 e8	 lea	 edx, DWORD PTR _buff$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 _sprintf
  00106	83 c4 14	 add	 esp, 20			; 00000014H
  00109	89 45 ac	 mov	 DWORD PTR _cwi$[ebp], eax
  0010c	eb 2d		 jmp	 SHORT $LN15@glm_mat4_p
$LN14@glm_mat4_p:

; 80   :       else
; 81   :         cwi = sprintf(buff, "% g", matrix[i][j]);

  0010e	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00111	c1 e0 04	 shl	 eax, 4
  00114	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  00117	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  0011a	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  0011f	83 ec 08	 sub	 esp, 8
  00122	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00127	68 00 00 00 00	 push	 OFFSET ??_C@_03FLKGMEGP@?$CF?5g@
  0012c	8d 55 e8	 lea	 edx, DWORD PTR _buff$[ebp]
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 _sprintf
  00135	83 c4 10	 add	 esp, 16			; 00000010H
  00138	89 45 ac	 mov	 DWORD PTR _cwi$[ebp], eax
$LN15@glm_mat4_p:

; 82   :       cw[i] = GLM_MAX(cw[i], cwi);

  0013b	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  0013e	8b 4c 85 b8	 mov	 ecx, DWORD PTR _cw$[ebp+eax*4]
  00142	3b 4d ac	 cmp	 ecx, DWORD PTR _cwi$[ebp]
  00145	7e 0f		 jle	 SHORT $LN19@glm_mat4_p
  00147	8b 55 dc	 mov	 edx, DWORD PTR _i$[ebp]
  0014a	8b 44 95 b8	 mov	 eax, DWORD PTR _cw$[ebp+edx*4]
  0014e	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv144[ebp], eax
  00154	eb 09		 jmp	 SHORT $LN20@glm_mat4_p
$LN19@glm_mat4_p:
  00156	8b 4d ac	 mov	 ecx, DWORD PTR _cwi$[ebp]
  00159	89 8d e4 fe ff
	ff		 mov	 DWORD PTR tv144[ebp], ecx
$LN20@glm_mat4_p:
  0015f	8b 55 dc	 mov	 edx, DWORD PTR _i$[ebp]
  00162	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv144[ebp]
  00168	89 44 95 b8	 mov	 DWORD PTR _cw$[ebp+edx*4], eax

; 83   :     }

  0016c	e9 3a ff ff ff	 jmp	 $LN5@glm_mat4_p
$LN6@glm_mat4_p:

; 84   :   }

  00171	e9 19 ff ff ff	 jmp	 $LN2@glm_mat4_p
$LN3@glm_mat4_p:

; 85   : 
; 86   :   for (i = 0; i < m; i++) {

  00176	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0017d	eb 09		 jmp	 SHORT $LN10@glm_mat4_p
$LN8@glm_mat4_p:
  0017f	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 45 dc	 mov	 DWORD PTR _i$[ebp], eax
$LN10@glm_mat4_p:
  00188	83 7d dc 04	 cmp	 DWORD PTR _i$[ebp], 4
  0018c	0f 8d cf 00 00
	00		 jge	 $LN9@glm_mat4_p

; 87   :     fprintf(ostream, "  |");

  00192	68 00 00 00 00	 push	 OFFSET ??_C@_03MFEOPPMH@?5?5?$HM@
  00197	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _fprintf
  001a0	83 c4 08	 add	 esp, 8

; 88   : 
; 89   :     for (j = 0; j < n; j++)

  001a3	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  001aa	eb 09		 jmp	 SHORT $LN13@glm_mat4_p
$LN11@glm_mat4_p:
  001ac	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  001af	83 c0 01	 add	 eax, 1
  001b2	89 45 d0	 mov	 DWORD PTR _j$[ebp], eax
$LN13@glm_mat4_p:
  001b5	83 7d d0 04	 cmp	 DWORD PTR _j$[ebp], 4
  001b9	0f 8d 8c 00 00
	00		 jge	 $LN12@glm_mat4_p

; 90   :       if (matrix[i][j] < CGLM_PRINT_MAX_TO_SHORT)

  001bf	8b 45 dc	 mov	 eax, DWORD PTR _i$[ebp]
  001c2	c1 e0 04	 shl	 eax, 4
  001c5	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  001c8	8b 4d d0	 mov	 ecx, DWORD PTR _j$[ebp]
  001cb	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  001d0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@40f86a0000000000
  001d8	66 0f 2f c8	 comisd	 xmm1, xmm0
  001dc	76 36		 jbe	 SHORT $LN16@glm_mat4_p

; 91   :         fprintf(ostream, " % *.*f", cw[j], CGLM_PRINT_PRECISION, matrix[j][i]);

  001de	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  001e1	c1 e0 04	 shl	 eax, 4
  001e4	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  001e7	8b 4d dc	 mov	 ecx, DWORD PTR _i$[ebp]
  001ea	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  001ef	83 ec 08	 sub	 esp, 8
  001f2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001f7	6a 05		 push	 5
  001f9	8b 55 d0	 mov	 edx, DWORD PTR _j$[ebp]
  001fc	8b 44 95 b8	 mov	 eax, DWORD PTR _cw$[ebp+edx*4]
  00200	50		 push	 eax
  00201	68 00 00 00 00	 push	 OFFSET ??_C@_07DEGDLBHC@?5?$CF?5?$CK?4?$CKf@
  00206	8b 4d 0c	 mov	 ecx, DWORD PTR _ostream$[ebp]
  00209	51		 push	 ecx
  0020a	e8 00 00 00 00	 call	 _fprintf
  0020f	83 c4 18	 add	 esp, 24			; 00000018H
  00212	eb 32		 jmp	 SHORT $LN17@glm_mat4_p
$LN16@glm_mat4_p:

; 92   :       else
; 93   :         fprintf(ostream, " % *g", cw[j], matrix[j][i]);

  00214	8b 45 d0	 mov	 eax, DWORD PTR _j$[ebp]
  00217	c1 e0 04	 shl	 eax, 4
  0021a	03 45 08	 add	 eax, DWORD PTR _matrix$[ebp]
  0021d	8b 4d dc	 mov	 ecx, DWORD PTR _i$[ebp]
  00220	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  00225	83 ec 08	 sub	 esp, 8
  00228	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0022d	8b 55 d0	 mov	 edx, DWORD PTR _j$[ebp]
  00230	8b 44 95 b8	 mov	 eax, DWORD PTR _cw$[ebp+edx*4]
  00234	50		 push	 eax
  00235	68 00 00 00 00	 push	 OFFSET ??_C@_05PPOEGKHG@?5?$CF?5?$CKg@
  0023a	8b 4d 0c	 mov	 ecx, DWORD PTR _ostream$[ebp]
  0023d	51		 push	 ecx
  0023e	e8 00 00 00 00	 call	 _fprintf
  00243	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@glm_mat4_p:
  00246	e9 61 ff ff ff	 jmp	 $LN11@glm_mat4_p
$LN12@glm_mat4_p:

; 94   : 
; 95   :     fprintf(ostream, "  |\n");

  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_04PPCKPBGG@?5?5?$HM?6@
  00250	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  00253	50		 push	 eax
  00254	e8 00 00 00 00	 call	 _fprintf
  00259	83 c4 08	 add	 esp, 8

; 96   :   }

  0025c	e9 1e ff ff ff	 jmp	 $LN8@glm_mat4_p
$LN9@glm_mat4_p:

; 97   : 
; 98   :   fprintf(ostream, CGLM_PRINT_COLOR_RESET "\n");

  00261	68 00 00 00 00	 push	 OFFSET ??_C@_05CCCEBKIG@?$BL?$FL0m?6@
  00266	8b 45 0c	 mov	 eax, DWORD PTR _ostream$[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 _fprintf
  0026f	83 c4 08	 add	 esp, 8

; 99   : 
; 100  : #undef m
; 101  : #undef n
; 102  : }

  00272	52		 push	 edx
  00273	8b cd		 mov	 ecx, ebp
  00275	50		 push	 eax
  00276	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@glm_mat4_p
  0027c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00281	58		 pop	 eax
  00282	5a		 pop	 edx
  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	5b		 pop	 ebx
  00286	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00289	33 cd		 xor	 ecx, ebp
  0028b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00290	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  00296	3b ec		 cmp	 ebp, esp
  00298	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029d	8b e5		 mov	 esp, ebp
  0029f	5d		 pop	 ebp
  002a0	c3		 ret	 0
  002a1	0f 1f 00	 npad	 3
$LN24@glm_mat4_p:
  002a4	02 00 00 00	 DD	 2
  002a8	00 00 00 00	 DD	 $LN23@glm_mat4_p
$LN23@glm_mat4_p:
  002ac	e8 ff ff ff	 DD	 -24			; ffffffe8H
  002b0	10 00 00 00	 DD	 16			; 00000010H
  002b4	00 00 00 00	 DD	 $LN21@glm_mat4_p
  002b8	b8 ff ff ff	 DD	 -72			; ffffffb8H
  002bc	10 00 00 00	 DD	 16			; 00000010H
  002c0	00 00 00 00	 DD	 $LN22@glm_mat4_p
$LN22@glm_mat4_p:
  002c4	63		 DB	 99			; 00000063H
  002c5	77		 DB	 119			; 00000077H
  002c6	00		 DB	 0
$LN21@glm_mat4_p:
  002c7	62		 DB	 98			; 00000062H
  002c8	75		 DB	 117			; 00000075H
  002c9	66		 DB	 102			; 00000066H
  002ca	66		 DB	 102			; 00000066H
  002cb	00		 DB	 0
_glm_mat4_print ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vsprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00028	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00033	52		 push	 edx
  00034	6a ff		 push	 -1
  00036	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __vsnprintf_l
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	83 ca 01	 or	 edx, 1
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	50		 push	 eax
  0004c	52		 push	 edx
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00053	83 c4 1c	 add	 esp, 28			; 0000001cH
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00060	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00064	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  00066	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00070	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00072	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  00075	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0007b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Stream$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vfprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 842  :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
