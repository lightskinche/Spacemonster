; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__537CFBD6_box@c DB 01H
msvcjmc	ENDS
PUBLIC	_sqrtf
PUBLIC	_glm_pow2
PUBLIC	_glm_min
PUBLIC	_glm_max
PUBLIC	_glm_vec3_broadcast
PUBLIC	_glm_vec3_max
PUBLIC	_glm_vec3_min
PUBLIC	_glm_vec3
PUBLIC	_glm_vec3_copy
PUBLIC	_glm_vec3_add
PUBLIC	_glm_vec3_scale
PUBLIC	_glm_vec3_maxadd
PUBLIC	_glm_vec3_minadd
PUBLIC	_glm_vec3_center
PUBLIC	_glm_vec3_distance2
PUBLIC	_glm_vec3_distance
PUBLIC	_glm_aabb_transform
PUBLIC	_glm_aabb_merge
PUBLIC	_glm_aabb_crop
PUBLIC	_glm_aabb_crop_until
PUBLIC	_glm_aabb_frustum
PUBLIC	_glm_aabb_invalidate
PUBLIC	_glm_aabb_isvalid
PUBLIC	_glm_aabb_size
PUBLIC	_glm_aabb_radius
PUBLIC	_glm_aabb_center
PUBLIC	_glm_aabb_aabb
PUBLIC	_glm_aabb_sphere
PUBLIC	_glm_aabb_point
PUBLIC	_glm_aabb_contains
PUBLIC	_glmc_aabb_transform
PUBLIC	_glmc_aabb_merge
PUBLIC	_glmc_aabb_crop
PUBLIC	_glmc_aabb_crop_until
PUBLIC	_glmc_aabb_frustum
PUBLIC	_glmc_aabb_invalidate
PUBLIC	_glmc_aabb_isvalid
PUBLIC	_glmc_aabb_size
PUBLIC	_glmc_aabb_radius
PUBLIC	_glmc_aabb_center
PUBLIC	_glmc_aabb_aabb
PUBLIC	_glmc_aabb_point
PUBLIC	_glmc_aabb_contains
PUBLIC	_glmc_aabb_sphere
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@ff7fffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_sqrt:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+38
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_sphere
_TEXT	SEGMENT
_box$ = 8						; size = 4
_s$ = 12						; size = 4
_glmc_aabb_sphere PROC					; COMDAT

; 94   : glmc_aabb_sphere(vec3 box[2], vec4 s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 95   :   return glm_aabb_sphere(box, s);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_aabb_sphere
  00035	83 c4 08	 add	 esp, 8

; 96   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_aabb_sphere ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_contains
_TEXT	SEGMENT
_box$ = 8						; size = 4
_other$ = 12						; size = 4
_glmc_aabb_contains PROC				; COMDAT

; 88   : glmc_aabb_contains(vec3 box[2], vec3 other[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 89   :   return glm_aabb_contains(box, other);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _other$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_aabb_contains
  00035	83 c4 08	 add	 esp, 8

; 90   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_aabb_contains ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_point
_TEXT	SEGMENT
_box$ = 8						; size = 4
_point$ = 12						; size = 4
_glmc_aabb_point PROC					; COMDAT

; 82   : glmc_aabb_point(vec3 box[2], vec3 point) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 83   :   return glm_aabb_point(box, point);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_aabb_point
  00035	83 c4 08	 add	 esp, 8

; 84   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_aabb_point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_aabb
_TEXT	SEGMENT
_box$ = 8						; size = 4
_other$ = 12						; size = 4
_glmc_aabb_aabb PROC					; COMDAT

; 76   : glmc_aabb_aabb(vec3 box[2], vec3 other[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 77   :   return glm_aabb_aabb(box, other);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _other$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_aabb_aabb
  00035	83 c4 08	 add	 esp, 8

; 78   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_aabb_aabb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_center
_TEXT	SEGMENT
_box$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_aabb_center PROC					; COMDAT

; 70   : glmc_aabb_center(vec3 box[2], vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 71   :   glm_aabb_center(box, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_aabb_center
  00035	83 c4 08	 add	 esp, 8

; 72   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_aabb_center ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_radius
_TEXT	SEGMENT
_box$ = 8						; size = 4
_glmc_aabb_radius PROC					; COMDAT

; 64   : glmc_aabb_radius(vec3 box[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 65   :   return glm_aabb_radius(box);

  00028	8b 45 08	 mov	 eax, DWORD PTR _box$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_aabb_radius
  00031	83 c4 04	 add	 esp, 4

; 66   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_aabb_radius ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_size
_TEXT	SEGMENT
_box$ = 8						; size = 4
_glmc_aabb_size PROC					; COMDAT

; 58   : glmc_aabb_size(vec3 box[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 59   :   return glm_aabb_size(box);

  00028	8b 45 08	 mov	 eax, DWORD PTR _box$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_aabb_size
  00031	83 c4 04	 add	 esp, 4

; 60   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_aabb_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_isvalid
_TEXT	SEGMENT
_box$ = 8						; size = 4
_glmc_aabb_isvalid PROC					; COMDAT

; 52   : glmc_aabb_isvalid(vec3 box[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 53   :   return glm_aabb_isvalid(box);

  00028	8b 45 08	 mov	 eax, DWORD PTR _box$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_aabb_isvalid
  00031	83 c4 04	 add	 esp, 4

; 54   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_aabb_isvalid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_invalidate
_TEXT	SEGMENT
_box$ = 8						; size = 4
_glmc_aabb_invalidate PROC				; COMDAT

; 46   : glmc_aabb_invalidate(vec3 box[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 47   :   glm_aabb_invalidate(box);

  00028	8b 45 08	 mov	 eax, DWORD PTR _box$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_aabb_invalidate
  00031	83 c4 04	 add	 esp, 4

; 48   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_aabb_invalidate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_frustum
_TEXT	SEGMENT
_box$ = 8						; size = 4
_planes$ = 12						; size = 4
_glmc_aabb_frustum PROC					; COMDAT

; 40   : glmc_aabb_frustum(vec3 box[2], vec4 planes[6]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 41   :   return glm_aabb_frustum(box, planes);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _planes$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_aabb_frustum
  00035	83 c4 08	 add	 esp, 8

; 42   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_aabb_frustum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_crop_until
_TEXT	SEGMENT
_box$ = 8						; size = 4
_cropBox$ = 12						; size = 4
_clampBox$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_aabb_crop_until PROC				; COMDAT

; 34   :                      vec3 dest[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 35   :   glm_aabb_crop_until(box, cropBox, clampBox, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _clampBox$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _cropBox$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _box$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _glm_aabb_crop_until
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 36   : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glmc_aabb_crop_until ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_crop
_TEXT	SEGMENT
_box$ = 8						; size = 4
_cropBox$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_aabb_crop PROC					; COMDAT

; 25   : glmc_aabb_crop(vec3 box[2], vec3 cropBox[2], vec3 dest[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_aabb_crop(box, cropBox, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _cropBox$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_aabb_crop
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 27   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_aabb_crop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_merge
_TEXT	SEGMENT
_box1$ = 8						; size = 4
_box2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_aabb_merge PROC					; COMDAT

; 19   : glmc_aabb_merge(vec3 box1[2], vec3 box2[2], vec3 dest[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_aabb_merge(box1, box2, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _box2$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _box1$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_aabb_merge
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 21   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_aabb_merge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\box.c
;	COMDAT _glmc_aabb_transform
_TEXT	SEGMENT
_box$ = 8						; size = 4
_m$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_aabb_transform PROC				; COMDAT

; 13   : glmc_aabb_transform(vec3 box[2], mat4 m, vec3 dest[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __537CFBD6_box@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_aabb_transform(box, m, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_aabb_transform
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_aabb_transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_contains
_TEXT	SEGMENT
tv152 = -200						; size = 4
tv150 = -196						; size = 4
_box$ = 8						; size = 4
_other$ = 12						; size = 4
_glm_aabb_contains PROC					; COMDAT

; 273  : glm_aabb_contains(vec3 box[2], vec3 other[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 274  :   return (box[0][0] <= other[0][0] && box[1][0] >= other[1][0])

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	03 55 0c	 add	 edx, DWORD PTR _other$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	f3 0f 10 04 32	 movss	 xmm0, DWORD PTR [edx+esi]
  00053	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  00057	0f 82 05 01 00
	00		 jb	 $LN3@glm_aabb_c
  0005d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00062	c1 e0 00	 shl	 eax, 0
  00065	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00068	b9 04 00 00 00	 mov	 ecx, 4
  0006d	6b d1 00	 imul	 edx, ecx, 0
  00070	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00075	c1 e1 00	 shl	 ecx, 0
  00078	03 4d 0c	 add	 ecx, DWORD PTR _other$[ebp]
  0007b	be 04 00 00 00	 mov	 esi, 4
  00080	6b f6 00	 imul	 esi, esi, 0
  00083	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00088	0f 2f 04 31	 comiss	 xmm0, DWORD PTR [ecx+esi]
  0008c	0f 82 d0 00 00
	00		 jb	 $LN3@glm_aabb_c
  00092	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00097	6b c2 00	 imul	 eax, edx, 0
  0009a	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	c1 e1 00	 shl	 ecx, 0
  000a5	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000aa	6b d2 00	 imul	 edx, edx, 0
  000ad	03 55 0c	 add	 edx, DWORD PTR _other$[ebp]
  000b0	be 04 00 00 00	 mov	 esi, 4
  000b5	c1 e6 00	 shl	 esi, 0
  000b8	f3 0f 10 04 32	 movss	 xmm0, DWORD PTR [edx+esi]
  000bd	0f 2f 04 08	 comiss	 xmm0, DWORD PTR [eax+ecx]
  000c1	0f 82 9b 00 00
	00		 jb	 $LN3@glm_aabb_c
  000c7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000cc	c1 e0 00	 shl	 eax, 0
  000cf	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  000d2	b9 04 00 00 00	 mov	 ecx, 4
  000d7	c1 e1 00	 shl	 ecx, 0
  000da	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000df	c1 e2 00	 shl	 edx, 0
  000e2	03 55 0c	 add	 edx, DWORD PTR _other$[ebp]
  000e5	be 04 00 00 00	 mov	 esi, 4
  000ea	c1 e6 00	 shl	 esi, 0
  000ed	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000f2	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  000f6	72 6a		 jb	 SHORT $LN3@glm_aabb_c
  000f8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000fd	6b c8 00	 imul	 ecx, eax, 0
  00100	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00103	ba 04 00 00 00	 mov	 edx, 4
  00108	d1 e2		 shl	 edx, 1
  0010a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0010f	6b c0 00	 imul	 eax, eax, 0
  00112	03 45 0c	 add	 eax, DWORD PTR _other$[ebp]
  00115	be 04 00 00 00	 mov	 esi, 4
  0011a	d1 e6		 shl	 esi, 1
  0011c	f3 0f 10 04 30	 movss	 xmm0, DWORD PTR [eax+esi]
  00121	0f 2f 04 11	 comiss	 xmm0, DWORD PTR [ecx+edx]
  00125	72 3b		 jb	 SHORT $LN3@glm_aabb_c
  00127	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0012c	c1 e1 00	 shl	 ecx, 0
  0012f	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00132	ba 04 00 00 00	 mov	 edx, 4
  00137	d1 e2		 shl	 edx, 1
  00139	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013e	c1 e0 00	 shl	 eax, 0
  00141	03 45 0c	 add	 eax, DWORD PTR _other$[ebp]
  00144	be 04 00 00 00	 mov	 esi, 4
  00149	d1 e6		 shl	 esi, 1
  0014b	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00150	0f 2f 04 30	 comiss	 xmm0, DWORD PTR [eax+esi]
  00154	72 0c		 jb	 SHORT $LN3@glm_aabb_c
  00156	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv150[ebp], 1
  00160	eb 0a		 jmp	 SHORT $LN6@glm_aabb_c
$LN3@glm_aabb_c:
  00162	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN6@glm_aabb_c:
  0016c	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv150[ebp], 0
  00173	75 0c		 jne	 SHORT $LN7@glm_aabb_c
  00175	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
  0017f	eb 0a		 jmp	 SHORT $LN8@glm_aabb_c
$LN7@glm_aabb_c:
  00181	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv152[ebp], 1
$LN8@glm_aabb_c:
  0018b	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv152[ebp]

; 275  :       && (box[0][1] <= other[0][1] && box[1][1] >= other[1][1])
; 276  :       && (box[0][2] <= other[0][2] && box[1][2] >= other[1][2]);
; 277  : }

  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  0019a	3b ec		 cmp	 ebp, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c3		 ret	 0
_glm_aabb_contains ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_point
_TEXT	SEGMENT
tv140 = -200						; size = 4
tv138 = -196						; size = 4
_box$ = 8						; size = 4
_point$ = 12						; size = 4
_glm_aabb_point PROC					; COMDAT

; 259  : glm_aabb_point(vec3 box[2], vec3 point) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 260  :   return (point[0] >= box[0][0] && point[0] <= box[1][0])

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  0003b	ba 04 00 00 00	 mov	 edx, 4
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	8b 75 0c	 mov	 esi, DWORD PTR _point$[ebp]
  00046	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0004b	0f 2f 04 10	 comiss	 xmm0, DWORD PTR [eax+edx]
  0004f	0f 82 dd 00 00
	00		 jb	 $LN3@glm_aabb_p
  00055	b8 04 00 00 00	 mov	 eax, 4
  0005a	6b c8 00	 imul	 ecx, eax, 0
  0005d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00062	c1 e2 00	 shl	 edx, 0
  00065	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	6b c0 00	 imul	 eax, eax, 0
  00070	8b 75 0c	 mov	 esi, DWORD PTR _point$[ebp]
  00073	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00078	0f 2f 04 0e	 comiss	 xmm0, DWORD PTR [esi+ecx]
  0007c	0f 82 b0 00 00
	00		 jb	 $LN3@glm_aabb_p
  00082	b9 04 00 00 00	 mov	 ecx, 4
  00087	c1 e1 00	 shl	 ecx, 0
  0008a	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0008f	6b c2 00	 imul	 eax, edx, 0
  00092	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00095	ba 04 00 00 00	 mov	 edx, 4
  0009a	c1 e2 00	 shl	 edx, 0
  0009d	8b 75 0c	 mov	 esi, DWORD PTR _point$[ebp]
  000a0	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  000a5	0f 2f 04 10	 comiss	 xmm0, DWORD PTR [eax+edx]
  000a9	0f 82 83 00 00
	00		 jb	 $LN3@glm_aabb_p
  000af	b8 04 00 00 00	 mov	 eax, 4
  000b4	c1 e0 00	 shl	 eax, 0
  000b7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000bc	c1 e1 00	 shl	 ecx, 0
  000bf	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  000c2	ba 04 00 00 00	 mov	 edx, 4
  000c7	c1 e2 00	 shl	 edx, 0
  000ca	8b 75 0c	 mov	 esi, DWORD PTR _point$[ebp]
  000cd	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000d2	0f 2f 04 06	 comiss	 xmm0, DWORD PTR [esi+eax]
  000d6	72 5a		 jb	 SHORT $LN3@glm_aabb_p
  000d8	b8 04 00 00 00	 mov	 eax, 4
  000dd	d1 e0		 shl	 eax, 1
  000df	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000e4	6b d1 00	 imul	 edx, ecx, 0
  000e7	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  000ea	b9 04 00 00 00	 mov	 ecx, 4
  000ef	d1 e1		 shl	 ecx, 1
  000f1	8b 75 0c	 mov	 esi, DWORD PTR _point$[ebp]
  000f4	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  000f9	0f 2f 04 0a	 comiss	 xmm0, DWORD PTR [edx+ecx]
  000fd	72 33		 jb	 SHORT $LN3@glm_aabb_p
  000ff	ba 04 00 00 00	 mov	 edx, 4
  00104	d1 e2		 shl	 edx, 1
  00106	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00111	b9 04 00 00 00	 mov	 ecx, 4
  00116	d1 e1		 shl	 ecx, 1
  00118	8b 75 0c	 mov	 esi, DWORD PTR _point$[ebp]
  0011b	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00120	0f 2f 04 16	 comiss	 xmm0, DWORD PTR [esi+edx]
  00124	72 0c		 jb	 SHORT $LN3@glm_aabb_p
  00126	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv138[ebp], 1
  00130	eb 0a		 jmp	 SHORT $LN6@glm_aabb_p
$LN3@glm_aabb_p:
  00132	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv138[ebp], 0
$LN6@glm_aabb_p:
  0013c	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv138[ebp], 0
  00143	75 0c		 jne	 SHORT $LN7@glm_aabb_p
  00145	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv140[ebp], 0
  0014f	eb 0a		 jmp	 SHORT $LN8@glm_aabb_p
$LN7@glm_aabb_p:
  00151	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv140[ebp], 1
$LN8@glm_aabb_p:
  0015b	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv140[ebp]

; 261  :       && (point[1] >= box[0][1] && point[1] <= box[1][1])
; 262  :       && (point[2] >= box[0][2] && point[2] <= box[1][2]);
; 263  : }

  00161	5f		 pop	 edi
  00162	5e		 pop	 esi
  00163	5b		 pop	 ebx
  00164	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  0016a	3b ec		 cmp	 ebp, esp
  0016c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
_glm_aabb_point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_sphere
_TEXT	SEGMENT
tv206 = -260						; size = 4
tv219 = -256						; size = 4
tv197 = -252						; size = 4
tv156 = -252						; size = 4
tv217 = -248						; size = 4
tv154 = -248						; size = 4
tv214 = -244						; size = 4
tv188 = -244						; size = 4
tv87 = -244						; size = 4
tv79 = -244						; size = 4
tv71 = -244						; size = 4
_c$ = -44						; size = 4
_b$ = -32						; size = 4
_a$ = -20						; size = 4
_dmin$ = -8						; size = 4
_box$ = 8						; size = 4
_s$ = 12						; size = 4
_glm_aabb_sphere PROC					; COMDAT

; 236  : glm_aabb_sphere(vec3 box[2], vec4 s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00012	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 237  :   float dmin;
; 238  :   int   a, b, c;
; 239  : 
; 240  :   a = s[0] >= box[0][0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  0003b	ba 04 00 00 00	 mov	 edx, 4
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00046	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0004b	0f 2f 04 10	 comiss	 xmm0, DWORD PTR [eax+edx]
  0004f	72 0c		 jb	 SHORT $LN3@glm_aabb_s
  00051	c7 85 0c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv71[ebp], 1
  0005b	eb 0a		 jmp	 SHORT $LN4@glm_aabb_s
$LN3@glm_aabb_s:
  0005d	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv71[ebp], 0
$LN4@glm_aabb_s:
  00067	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv71[ebp]
  0006d	89 45 ec	 mov	 DWORD PTR _a$[ebp], eax

; 241  :   b = s[1] >= box[0][1];

  00070	b8 04 00 00 00	 mov	 eax, 4
  00075	c1 e0 00	 shl	 eax, 0
  00078	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0007d	6b d1 00	 imul	 edx, ecx, 0
  00080	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  00083	b9 04 00 00 00	 mov	 ecx, 4
  00088	c1 e1 00	 shl	 ecx, 0
  0008b	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  0008e	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  00093	0f 2f 04 0a	 comiss	 xmm0, DWORD PTR [edx+ecx]
  00097	72 0c		 jb	 SHORT $LN5@glm_aabb_s
  00099	c7 85 0c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv79[ebp], 1
  000a3	eb 0a		 jmp	 SHORT $LN6@glm_aabb_s
$LN5@glm_aabb_s:
  000a5	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN6@glm_aabb_s:
  000af	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv79[ebp]
  000b5	89 55 e0	 mov	 DWORD PTR _b$[ebp], edx

; 242  :   c = s[2] >= box[0][2];

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	d1 e0		 shl	 eax, 1
  000bf	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000c4	6b d1 00	 imul	 edx, ecx, 0
  000c7	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  000ca	b9 04 00 00 00	 mov	 ecx, 4
  000cf	d1 e1		 shl	 ecx, 1
  000d1	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  000d4	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  000d9	0f 2f 04 0a	 comiss	 xmm0, DWORD PTR [edx+ecx]
  000dd	72 0c		 jb	 SHORT $LN7@glm_aabb_s
  000df	c7 85 0c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv87[ebp], 1
  000e9	eb 0a		 jmp	 SHORT $LN8@glm_aabb_s
$LN7@glm_aabb_s:
  000eb	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv87[ebp], 0
$LN8@glm_aabb_s:
  000f5	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  000fb	89 55 d4	 mov	 DWORD PTR _c$[ebp], edx

; 243  : 
; 244  :   dmin  = glm_pow2(s[0] - box[a][0])

  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	6b c8 00	 imul	 ecx, eax, 0
  00106	6b 55 ec 0c	 imul	 edx, DWORD PTR _a$[ebp], 12
  0010a	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	6b c0 00	 imul	 eax, eax, 0
  00115	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00118	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0011d	f3 0f 5c 04 02	 subss	 xmm0, DWORD PTR [edx+eax]
  00122	51		 push	 ecx
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	e8 00 00 00 00	 call	 _glm_pow2
  0012d	83 c4 04	 add	 esp, 4
  00130	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR tv188[ebp]
  00136	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR tv188[ebp]
  0013e	b9 04 00 00 00	 mov	 ecx, 4
  00143	c1 e1 00	 shl	 ecx, 0
  00146	6b 55 e0 0c	 imul	 edx, DWORD PTR _b$[ebp], 12
  0014a	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  0014d	b8 04 00 00 00	 mov	 eax, 4
  00152	c1 e0 00	 shl	 eax, 0
  00155	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00158	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  0015d	f3 0f 5c 0c 02	 subss	 xmm1, DWORD PTR [edx+eax]
  00162	51		 push	 ecx
  00163	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00168	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR tv217[ebp], xmm0
  00170	e8 00 00 00 00	 call	 _glm_pow2
  00175	83 c4 04	 add	 esp, 4
  00178	d9 9d 04 ff ff
	ff		 fstp	 DWORD PTR tv197[ebp]
  0017e	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv217[ebp]
  00186	f3 0f 58 85 04
	ff ff ff	 addss	 xmm0, DWORD PTR tv197[ebp]
  0018e	b9 04 00 00 00	 mov	 ecx, 4
  00193	d1 e1		 shl	 ecx, 1
  00195	6b 55 d4 0c	 imul	 edx, DWORD PTR _c$[ebp], 12
  00199	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  0019c	b8 04 00 00 00	 mov	 eax, 4
  001a1	d1 e0		 shl	 eax, 1
  001a3	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  001a6	f3 0f 10 0c 0e	 movss	 xmm1, DWORD PTR [esi+ecx]
  001ab	f3 0f 5c 0c 02	 subss	 xmm1, DWORD PTR [edx+eax]
  001b0	51		 push	 ecx
  001b1	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  001b6	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR tv219[ebp], xmm0
  001be	e8 00 00 00 00	 call	 _glm_pow2
  001c3	83 c4 04	 add	 esp, 4
  001c6	d9 9d fc fe ff
	ff		 fstp	 DWORD PTR tv206[ebp]
  001cc	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR tv219[ebp]
  001d4	f3 0f 58 85 fc
	fe ff ff	 addss	 xmm0, DWORD PTR tv206[ebp]
  001dc	f3 0f 11 45 f8	 movss	 DWORD PTR _dmin$[ebp], xmm0

; 245  :         + glm_pow2(s[1] - box[b][1])
; 246  :         + glm_pow2(s[2] - box[c][2]);
; 247  : 
; 248  :   return dmin <= glm_pow2(s[3]);

  001e1	b8 04 00 00 00	 mov	 eax, 4
  001e6	6b c8 03	 imul	 ecx, eax, 3
  001e9	8b 55 0c	 mov	 edx, DWORD PTR _s$[ebp]
  001ec	51		 push	 ecx
  001ed	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  001f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f7	e8 00 00 00 00	 call	 _glm_pow2
  001fc	83 c4 04	 add	 esp, 4
  001ff	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR tv214[ebp]
  00205	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR tv214[ebp]
  0020d	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _dmin$[ebp]
  00211	72 0c		 jb	 SHORT $LN9@glm_aabb_s
  00213	c7 85 08 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv154[ebp], 1
  0021d	eb 0a		 jmp	 SHORT $LN10@glm_aabb_s
$LN9@glm_aabb_s:
  0021f	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv154[ebp], 0
$LN10@glm_aabb_s:
  00229	83 bd 08 ff ff
	ff 00		 cmp	 DWORD PTR tv154[ebp], 0
  00230	75 0c		 jne	 SHORT $LN11@glm_aabb_s
  00232	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], 0
  0023c	eb 0a		 jmp	 SHORT $LN12@glm_aabb_s
$LN11@glm_aabb_s:
  0023e	c7 85 04 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv156[ebp], 1
$LN12@glm_aabb_s:
  00248	8a 85 04 ff ff
	ff		 mov	 al, BYTE PTR tv156[ebp]

; 249  : }

  0024e	5f		 pop	 edi
  0024f	5e		 pop	 esi
  00250	5b		 pop	 ebx
  00251	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  00257	3b ec		 cmp	 ebp, esp
  00259	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025e	8b e5		 mov	 esp, ebp
  00260	5d		 pop	 ebp
  00261	c3		 ret	 0
_glm_aabb_sphere ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_aabb
_TEXT	SEGMENT
tv152 = -200						; size = 4
tv150 = -196						; size = 4
_box$ = 8						; size = 4
_other$ = 12						; size = 4
_glm_aabb_aabb PROC					; COMDAT

; 219  : glm_aabb_aabb(vec3 box[2], vec3 other[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 220  :   return (box[0][0] <= other[1][0] && box[1][0] >= other[0][0])

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	c1 e2 00	 shl	 edx, 0
  00043	03 55 0c	 add	 edx, DWORD PTR _other$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	f3 0f 10 04 32	 movss	 xmm0, DWORD PTR [edx+esi]
  00053	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  00057	0f 82 05 01 00
	00		 jb	 $LN3@glm_aabb_a
  0005d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00062	c1 e0 00	 shl	 eax, 0
  00065	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00068	b9 04 00 00 00	 mov	 ecx, 4
  0006d	6b d1 00	 imul	 edx, ecx, 0
  00070	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00075	6b c9 00	 imul	 ecx, ecx, 0
  00078	03 4d 0c	 add	 ecx, DWORD PTR _other$[ebp]
  0007b	be 04 00 00 00	 mov	 esi, 4
  00080	6b f6 00	 imul	 esi, esi, 0
  00083	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00088	0f 2f 04 31	 comiss	 xmm0, DWORD PTR [ecx+esi]
  0008c	0f 82 d0 00 00
	00		 jb	 $LN3@glm_aabb_a
  00092	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00097	6b c2 00	 imul	 eax, edx, 0
  0009a	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	c1 e1 00	 shl	 ecx, 0
  000a5	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000aa	c1 e2 00	 shl	 edx, 0
  000ad	03 55 0c	 add	 edx, DWORD PTR _other$[ebp]
  000b0	be 04 00 00 00	 mov	 esi, 4
  000b5	c1 e6 00	 shl	 esi, 0
  000b8	f3 0f 10 04 32	 movss	 xmm0, DWORD PTR [edx+esi]
  000bd	0f 2f 04 08	 comiss	 xmm0, DWORD PTR [eax+ecx]
  000c1	0f 82 9b 00 00
	00		 jb	 $LN3@glm_aabb_a
  000c7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000cc	c1 e0 00	 shl	 eax, 0
  000cf	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  000d2	b9 04 00 00 00	 mov	 ecx, 4
  000d7	c1 e1 00	 shl	 ecx, 0
  000da	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000df	6b d2 00	 imul	 edx, edx, 0
  000e2	03 55 0c	 add	 edx, DWORD PTR _other$[ebp]
  000e5	be 04 00 00 00	 mov	 esi, 4
  000ea	c1 e6 00	 shl	 esi, 0
  000ed	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000f2	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  000f6	72 6a		 jb	 SHORT $LN3@glm_aabb_a
  000f8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000fd	6b c8 00	 imul	 ecx, eax, 0
  00100	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00103	ba 04 00 00 00	 mov	 edx, 4
  00108	d1 e2		 shl	 edx, 1
  0010a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0010f	c1 e0 00	 shl	 eax, 0
  00112	03 45 0c	 add	 eax, DWORD PTR _other$[ebp]
  00115	be 04 00 00 00	 mov	 esi, 4
  0011a	d1 e6		 shl	 esi, 1
  0011c	f3 0f 10 04 30	 movss	 xmm0, DWORD PTR [eax+esi]
  00121	0f 2f 04 11	 comiss	 xmm0, DWORD PTR [ecx+edx]
  00125	72 3b		 jb	 SHORT $LN3@glm_aabb_a
  00127	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0012c	c1 e1 00	 shl	 ecx, 0
  0012f	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00132	ba 04 00 00 00	 mov	 edx, 4
  00137	d1 e2		 shl	 edx, 1
  00139	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013e	6b c0 00	 imul	 eax, eax, 0
  00141	03 45 0c	 add	 eax, DWORD PTR _other$[ebp]
  00144	be 04 00 00 00	 mov	 esi, 4
  00149	d1 e6		 shl	 esi, 1
  0014b	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00150	0f 2f 04 30	 comiss	 xmm0, DWORD PTR [eax+esi]
  00154	72 0c		 jb	 SHORT $LN3@glm_aabb_a
  00156	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv150[ebp], 1
  00160	eb 0a		 jmp	 SHORT $LN6@glm_aabb_a
$LN3@glm_aabb_a:
  00162	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], 0
$LN6@glm_aabb_a:
  0016c	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv150[ebp], 0
  00173	75 0c		 jne	 SHORT $LN7@glm_aabb_a
  00175	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
  0017f	eb 0a		 jmp	 SHORT $LN8@glm_aabb_a
$LN7@glm_aabb_a:
  00181	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv152[ebp], 1
$LN8@glm_aabb_a:
  0018b	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv152[ebp]

; 221  :       && (box[0][1] <= other[1][1] && box[1][1] >= other[0][1])
; 222  :       && (box[0][2] <= other[1][2] && box[1][2] >= other[0][2]);
; 223  : }

  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  0019a	3b ec		 cmp	 ebp, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c3		 ret	 0
_glm_aabb_aabb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_center
_TEXT	SEGMENT
_box$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_aabb_center PROC					; COMDAT

; 207  : glm_aabb_center(vec3 box[2], vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 208  :   glm_vec3_center(box[0], box[1], dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00031	c1 e1 00	 shl	 ecx, 0
  00034	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00037	51		 push	 ecx
  00038	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0003d	6b c2 00	 imul	 eax, edx, 0
  00040	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _glm_vec3_center
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH

; 209  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_glm_aabb_center ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_radius
_TEXT	SEGMENT
tv75 = -200						; size = 4
tv73 = -196						; size = 4
_box$ = 8						; size = 4
_glm_aabb_radius PROC					; COMDAT

; 195  : glm_aabb_radius(vec3 box[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 196  :   return glm_aabb_size(box) * 0.5f;

  00028	8b 45 08	 mov	 eax, DWORD PTR _box$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_aabb_size
  00031	83 c4 04	 add	 esp, 4
  00034	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv73[ebp]
  0003a	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv73[ebp]
  00042	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0004a	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv75[ebp], xmm0
  00052	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv75[ebp]

; 197  : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_glm_aabb_radius ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_size
_TEXT	SEGMENT
_box$ = 8						; size = 4
_glm_aabb_size PROC					; COMDAT

; 184  : glm_aabb_size(vec3 box[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  :   return glm_vec3_distance(box[0], box[1]);

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	c1 e0 00	 shl	 eax, 0
  00030	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00033	50		 push	 eax
  00034	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00039	6b d1 00	 imul	 edx, ecx, 0
  0003c	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _glm_vec3_distance
  00045	83 c4 08	 add	 esp, 8

; 186  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_glm_aabb_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_isvalid
_TEXT	SEGMENT
tv76 = -208						; size = 4
tv74 = -204						; size = 4
tv91 = -200						; size = 4
tv84 = -196						; size = 4
_box$ = 8						; size = 4
_glm_aabb_isvalid PROC					; COMDAT

; 172  : glm_aabb_isvalid(vec3 box[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 173  :   return glm_vec3_max(box[0]) != FLT_MAX

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00033	51		 push	 ecx
  00034	e8 00 00 00 00	 call	 _glm_vec3_max
  00039	83 c4 04	 add	 esp, 4
  0003c	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv84[ebp]
  00042	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv84[ebp]
  0004a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@7f7fffff
  00051	9f		 lahf
  00052	f6 c4 44	 test	 ah, 68			; 00000044H
  00055	7b 3b		 jnp	 SHORT $LN3@glm_aabb_i
  00057	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0005c	c1 e2 00	 shl	 edx, 0
  0005f	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 _glm_vec3_min
  00068	83 c4 04	 add	 esp, 4
  0006b	d9 9d 38 ff ff
	ff		 fstp	 DWORD PTR tv91[ebp]
  00071	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv91[ebp]
  00079	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@ff7fffff
  00080	9f		 lahf
  00081	f6 c4 44	 test	 ah, 68			; 00000044H
  00084	7b 0c		 jnp	 SHORT $LN3@glm_aabb_i
  00086	c7 85 34 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv74[ebp], 1
  00090	eb 0a		 jmp	 SHORT $LN4@glm_aabb_i
$LN3@glm_aabb_i:
  00092	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
$LN4@glm_aabb_i:
  0009c	83 bd 34 ff ff
	ff 00		 cmp	 DWORD PTR tv74[ebp], 0
  000a3	75 0c		 jne	 SHORT $LN5@glm_aabb_i
  000a5	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv76[ebp], 0
  000af	eb 0a		 jmp	 SHORT $LN6@glm_aabb_i
$LN5@glm_aabb_i:
  000b1	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv76[ebp], 1
$LN6@glm_aabb_i:
  000bb	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv76[ebp]

; 174  :          && glm_vec3_min(box[1]) != -FLT_MAX;
; 175  : }

  000c1	5f		 pop	 edi
  000c2	5e		 pop	 esi
  000c3	5b		 pop	 ebx
  000c4	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000ca	3b ec		 cmp	 ebp, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
_glm_aabb_isvalid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_invalidate
_TEXT	SEGMENT
_box$ = 8						; size = 4
_glm_aabb_invalidate PROC				; COMDAT

; 160  : glm_aabb_invalidate(vec3 box[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 161  :   glm_vec3_broadcast(FLT_MAX,  box[0]);

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00033	51		 push	 ecx
  00034	51		 push	 ecx
  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 _glm_vec3_broadcast
  00047	83 c4 08	 add	 esp, 8

; 162  :   glm_vec3_broadcast(-FLT_MAX, box[1]);

  0004a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004f	c1 e0 00	 shl	 eax, 0
  00052	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@ff7fffff
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	e8 00 00 00 00	 call	 _glm_vec3_broadcast
  00069	83 c4 08	 add	 esp, 8

; 163  : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
_glm_aabb_invalidate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_frustum
_TEXT	SEGMENT
tv128 = -240						; size = 4
tv84 = -236						; size = 4
tv73 = -232						; size = 4
_i$ = -32						; size = 4
_dp$ = -20						; size = 4
_p$ = -8						; size = 4
_box$ = 8						; size = 4
_planes$ = 12						; size = 4
_glm_aabb_frustum PROC					; COMDAT

; 136  : glm_aabb_frustum(vec3 box[2], vec4 planes[6]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 137  :   float *p, dp;
; 138  :   int    i;
; 139  : 
; 140  :   for (i = 0; i < 6; i++) {

  00028	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@glm_aabb_f
$LN2@glm_aabb_f:
  00031	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 e0	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_aabb_f:
  0003a	83 7d e0 06	 cmp	 DWORD PTR _i$[ebp], 6
  0003e	0f 8d 3e 01 00
	00		 jge	 $LN3@glm_aabb_f

; 141  :     p  = planes[i];

  00044	8b 45 e0	 mov	 eax, DWORD PTR _i$[ebp]
  00047	c1 e0 04	 shl	 eax, 4
  0004a	03 45 0c	 add	 eax, DWORD PTR _planes$[ebp]
  0004d	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 142  :     dp = p[0] * box[p[0] > 0.0f][0]

  00050	b8 04 00 00 00	 mov	 eax, 4
  00055	6b c8 00	 imul	 ecx, eax, 0
  00058	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  0005b	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00060	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00067	76 0c		 jbe	 SHORT $LN7@glm_aabb_f
  00069	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv73[ebp], 1
  00073	eb 0a		 jmp	 SHORT $LN8@glm_aabb_f
$LN7@glm_aabb_f:
  00075	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv73[ebp], 0
$LN8@glm_aabb_f:
  0007f	b8 04 00 00 00	 mov	 eax, 4
  00084	c1 e0 00	 shl	 eax, 0
  00087	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  0008a	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0008f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00096	76 0c		 jbe	 SHORT $LN9@glm_aabb_f
  00098	c7 85 14 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv84[ebp], 1
  000a2	eb 0a		 jmp	 SHORT $LN10@glm_aabb_f
$LN9@glm_aabb_f:
  000a4	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN10@glm_aabb_f:
  000ae	ba 04 00 00 00	 mov	 edx, 4
  000b3	d1 e2		 shl	 edx, 1
  000b5	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  000b8	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000bd	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000c4	76 0c		 jbe	 SHORT $LN11@glm_aabb_f
  000c6	c7 85 10 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv128[ebp], 1
  000d0	eb 0a		 jmp	 SHORT $LN12@glm_aabb_f
$LN11@glm_aabb_f:
  000d2	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN12@glm_aabb_f:
  000dc	b9 04 00 00 00	 mov	 ecx, 4
  000e1	6b d1 00	 imul	 edx, ecx, 0
  000e4	6b 85 18 ff ff
	ff 0c		 imul	 eax, DWORD PTR tv73[ebp], 12
  000eb	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  000ee	b9 04 00 00 00	 mov	 ecx, 4
  000f3	6b c9 00	 imul	 ecx, ecx, 0
  000f6	8b 75 f8	 mov	 esi, DWORD PTR _p$[ebp]
  000f9	f3 0f 10 04 16	 movss	 xmm0, DWORD PTR [esi+edx]
  000fe	f3 0f 59 04 08	 mulss	 xmm0, DWORD PTR [eax+ecx]
  00103	ba 04 00 00 00	 mov	 edx, 4
  00108	c1 e2 00	 shl	 edx, 0
  0010b	6b 85 14 ff ff
	ff 0c		 imul	 eax, DWORD PTR tv84[ebp], 12
  00112	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00115	b9 04 00 00 00	 mov	 ecx, 4
  0011a	c1 e1 00	 shl	 ecx, 0
  0011d	8b 75 f8	 mov	 esi, DWORD PTR _p$[ebp]
  00120	f3 0f 10 0c 16	 movss	 xmm1, DWORD PTR [esi+edx]
  00125	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  0012a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0012e	ba 04 00 00 00	 mov	 edx, 4
  00133	d1 e2		 shl	 edx, 1
  00135	6b 85 10 ff ff
	ff 0c		 imul	 eax, DWORD PTR tv128[ebp], 12
  0013c	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  0013f	b9 04 00 00 00	 mov	 ecx, 4
  00144	d1 e1		 shl	 ecx, 1
  00146	8b 75 f8	 mov	 esi, DWORD PTR _p$[ebp]
  00149	f3 0f 10 0c 16	 movss	 xmm1, DWORD PTR [esi+edx]
  0014e	f3 0f 59 0c 08	 mulss	 xmm1, DWORD PTR [eax+ecx]
  00153	f3 0f 58 c1	 addss	 xmm0, xmm1
  00157	f3 0f 11 45 ec	 movss	 DWORD PTR _dp$[ebp], xmm0

; 143  :        + p[1] * box[p[1] > 0.0f][1]
; 144  :        + p[2] * box[p[2] > 0.0f][2];
; 145  : 
; 146  :     if (dp < -p[3])

  0015c	b8 04 00 00 00	 mov	 eax, 4
  00161	6b c8 03	 imul	 ecx, eax, 3
  00164	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  00167	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0016c	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00173	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _dp$[ebp]
  00177	76 04		 jbe	 SHORT $LN5@glm_aabb_f

; 147  :       return false;

  00179	32 c0		 xor	 al, al
  0017b	eb 07		 jmp	 SHORT $LN1@glm_aabb_f
$LN5@glm_aabb_f:

; 148  :   }

  0017d	e9 af fe ff ff	 jmp	 $LN2@glm_aabb_f
$LN3@glm_aabb_f:

; 149  : 
; 150  :   return true;

  00182	b0 01		 mov	 al, 1
$LN1@glm_aabb_f:

; 151  : }

  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0018d	3b ec		 cmp	 ebp, esp
  0018f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c3		 ret	 0
_glm_aabb_frustum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_crop_until
_TEXT	SEGMENT
_box$ = 8						; size = 4
_cropBox$ = 12						; size = 4
_clampBox$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_aabb_crop_until PROC				; COMDAT

; 115  :                     vec3 dest[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 116  :   glm_aabb_crop(box, cropBox, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _cropBox$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _box$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_aabb_crop
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  :   glm_aabb_merge(clampBox, dest, dest);

  0003c	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 14	 mov	 ecx, DWORD PTR _dest$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 10	 mov	 edx, DWORD PTR _clampBox$[ebp]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 _glm_aabb_merge
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 118  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_glm_aabb_crop_until ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_crop
_TEXT	SEGMENT
_box$ = 8						; size = 4
_cropBox$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_aabb_crop PROC					; COMDAT

; 88   : glm_aabb_crop(vec3 box[2], vec3 cropBox[2], vec3 dest[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 89   :   dest[0][0] = glm_max(box[0][0], cropBox[0][0]);

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 0c	 add	 ecx, DWORD PTR _cropBox$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	51		 push	 ecx
  0003c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0004b	6b d1 00	 imul	 edx, ecx, 0
  0004e	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	6b c8 00	 imul	 ecx, eax, 0
  00059	51		 push	 ecx
  0005a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	e8 00 00 00 00	 call	 _glm_max
  00069	83 c4 08	 add	 esp, 8
  0006c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00071	6b c2 00	 imul	 eax, edx, 0
  00074	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00077	b9 04 00 00 00	 mov	 ecx, 4
  0007c	6b d1 00	 imul	 edx, ecx, 0
  0007f	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 90   :   dest[0][1] = glm_max(box[0][1], cropBox[0][1]);

  00082	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00087	6b c8 00	 imul	 ecx, eax, 0
  0008a	03 4d 0c	 add	 ecx, DWORD PTR _cropBox$[ebp]
  0008d	ba 04 00 00 00	 mov	 edx, 4
  00092	c1 e2 00	 shl	 edx, 0
  00095	51		 push	 ecx
  00096	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  000ab	ba 04 00 00 00	 mov	 edx, 4
  000b0	c1 e2 00	 shl	 edx, 0
  000b3	51		 push	 ecx
  000b4	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	e8 00 00 00 00	 call	 _glm_max
  000c3	83 c4 08	 add	 esp, 8
  000c6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000cb	6b c8 00	 imul	 ecx, eax, 0
  000ce	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  000d1	ba 04 00 00 00	 mov	 edx, 4
  000d6	c1 e2 00	 shl	 edx, 0
  000d9	d9 1c 11	 fstp	 DWORD PTR [ecx+edx]

; 91   :   dest[0][2] = glm_max(box[0][2], cropBox[0][2]);

  000dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000e1	6b c8 00	 imul	 ecx, eax, 0
  000e4	03 4d 0c	 add	 ecx, DWORD PTR _cropBox$[ebp]
  000e7	ba 04 00 00 00	 mov	 edx, 4
  000ec	d1 e2		 shl	 edx, 1
  000ee	51		 push	 ecx
  000ef	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000fe	6b c8 00	 imul	 ecx, eax, 0
  00101	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00104	ba 04 00 00 00	 mov	 edx, 4
  00109	d1 e2		 shl	 edx, 1
  0010b	51		 push	 ecx
  0010c	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00116	e8 00 00 00 00	 call	 _glm_max
  0011b	83 c4 08	 add	 esp, 8
  0011e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00123	6b c8 00	 imul	 ecx, eax, 0
  00126	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00129	ba 04 00 00 00	 mov	 edx, 4
  0012e	d1 e2		 shl	 edx, 1
  00130	d9 1c 11	 fstp	 DWORD PTR [ecx+edx]

; 92   : 
; 93   :   dest[1][0] = glm_min(box[1][0], cropBox[1][0]);

  00133	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00138	c1 e0 00	 shl	 eax, 0
  0013b	03 45 0c	 add	 eax, DWORD PTR _cropBox$[ebp]
  0013e	b9 04 00 00 00	 mov	 ecx, 4
  00143	6b d1 00	 imul	 edx, ecx, 0
  00146	51		 push	 ecx
  00147	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00156	c1 e0 00	 shl	 eax, 0
  00159	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  0015c	b9 04 00 00 00	 mov	 ecx, 4
  00161	6b d1 00	 imul	 edx, ecx, 0
  00164	51		 push	 ecx
  00165	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0016a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016f	e8 00 00 00 00	 call	 _glm_min
  00174	83 c4 08	 add	 esp, 8
  00177	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0017c	c1 e0 00	 shl	 eax, 0
  0017f	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00182	b9 04 00 00 00	 mov	 ecx, 4
  00187	6b d1 00	 imul	 edx, ecx, 0
  0018a	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 94   :   dest[1][1] = glm_min(box[1][1], cropBox[1][1]);

  0018d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00192	c1 e0 00	 shl	 eax, 0
  00195	03 45 0c	 add	 eax, DWORD PTR _cropBox$[ebp]
  00198	b9 04 00 00 00	 mov	 ecx, 4
  0019d	c1 e1 00	 shl	 ecx, 0
  001a0	51		 push	 ecx
  001a1	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ab	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001b0	c1 e2 00	 shl	 edx, 0
  001b3	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  001b6	b8 04 00 00 00	 mov	 eax, 4
  001bb	c1 e0 00	 shl	 eax, 0
  001be	51		 push	 ecx
  001bf	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  001c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c9	e8 00 00 00 00	 call	 _glm_min
  001ce	83 c4 08	 add	 esp, 8
  001d1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001d6	c1 e1 00	 shl	 ecx, 0
  001d9	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  001dc	ba 04 00 00 00	 mov	 edx, 4
  001e1	c1 e2 00	 shl	 edx, 0
  001e4	d9 1c 11	 fstp	 DWORD PTR [ecx+edx]

; 95   :   dest[1][2] = glm_min(box[1][2], cropBox[1][2]);

  001e7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ec	c1 e0 00	 shl	 eax, 0
  001ef	03 45 0c	 add	 eax, DWORD PTR _cropBox$[ebp]
  001f2	b9 04 00 00 00	 mov	 ecx, 4
  001f7	d1 e1		 shl	 ecx, 1
  001f9	51		 push	 ecx
  001fa	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00209	c1 e2 00	 shl	 edx, 0
  0020c	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  0020f	b8 04 00 00 00	 mov	 eax, 4
  00214	d1 e0		 shl	 eax, 1
  00216	51		 push	 ecx
  00217	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0021c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00221	e8 00 00 00 00	 call	 _glm_min
  00226	83 c4 08	 add	 esp, 8
  00229	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0022e	c1 e1 00	 shl	 ecx, 0
  00231	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00234	ba 04 00 00 00	 mov	 edx, 4
  00239	d1 e2		 shl	 edx, 1
  0023b	d9 1c 11	 fstp	 DWORD PTR [ecx+edx]

; 96   : }

  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00247	3b ec		 cmp	 ebp, esp
  00249	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
_glm_aabb_crop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_merge
_TEXT	SEGMENT
_box1$ = 8						; size = 4
_box2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_aabb_merge PROC					; COMDAT

; 65   : glm_aabb_merge(vec3 box1[2], vec3 box2[2], vec3 dest[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 66   :   dest[0][0] = glm_min(box1[0][0], box2[0][0]);

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 0c	 add	 ecx, DWORD PTR _box2$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	51		 push	 ecx
  0003c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0004b	6b d1 00	 imul	 edx, ecx, 0
  0004e	03 55 08	 add	 edx, DWORD PTR _box1$[ebp]
  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	6b c8 00	 imul	 ecx, eax, 0
  00059	51		 push	 ecx
  0005a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	e8 00 00 00 00	 call	 _glm_min
  00069	83 c4 08	 add	 esp, 8
  0006c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00071	6b c2 00	 imul	 eax, edx, 0
  00074	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00077	b9 04 00 00 00	 mov	 ecx, 4
  0007c	6b d1 00	 imul	 edx, ecx, 0
  0007f	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 67   :   dest[0][1] = glm_min(box1[0][1], box2[0][1]);

  00082	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00087	6b c8 00	 imul	 ecx, eax, 0
  0008a	03 4d 0c	 add	 ecx, DWORD PTR _box2$[ebp]
  0008d	ba 04 00 00 00	 mov	 edx, 4
  00092	c1 e2 00	 shl	 edx, 0
  00095	51		 push	 ecx
  00096	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000a5	6b c8 00	 imul	 ecx, eax, 0
  000a8	03 4d 08	 add	 ecx, DWORD PTR _box1$[ebp]
  000ab	ba 04 00 00 00	 mov	 edx, 4
  000b0	c1 e2 00	 shl	 edx, 0
  000b3	51		 push	 ecx
  000b4	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	e8 00 00 00 00	 call	 _glm_min
  000c3	83 c4 08	 add	 esp, 8
  000c6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000cb	6b c8 00	 imul	 ecx, eax, 0
  000ce	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  000d1	ba 04 00 00 00	 mov	 edx, 4
  000d6	c1 e2 00	 shl	 edx, 0
  000d9	d9 1c 11	 fstp	 DWORD PTR [ecx+edx]

; 68   :   dest[0][2] = glm_min(box1[0][2], box2[0][2]);

  000dc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000e1	6b c8 00	 imul	 ecx, eax, 0
  000e4	03 4d 0c	 add	 ecx, DWORD PTR _box2$[ebp]
  000e7	ba 04 00 00 00	 mov	 edx, 4
  000ec	d1 e2		 shl	 edx, 1
  000ee	51		 push	 ecx
  000ef	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000fe	6b c8 00	 imul	 ecx, eax, 0
  00101	03 4d 08	 add	 ecx, DWORD PTR _box1$[ebp]
  00104	ba 04 00 00 00	 mov	 edx, 4
  00109	d1 e2		 shl	 edx, 1
  0010b	51		 push	 ecx
  0010c	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00116	e8 00 00 00 00	 call	 _glm_min
  0011b	83 c4 08	 add	 esp, 8
  0011e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00123	6b c8 00	 imul	 ecx, eax, 0
  00126	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00129	ba 04 00 00 00	 mov	 edx, 4
  0012e	d1 e2		 shl	 edx, 1
  00130	d9 1c 11	 fstp	 DWORD PTR [ecx+edx]

; 69   : 
; 70   :   dest[1][0] = glm_max(box1[1][0], box2[1][0]);

  00133	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00138	c1 e0 00	 shl	 eax, 0
  0013b	03 45 0c	 add	 eax, DWORD PTR _box2$[ebp]
  0013e	b9 04 00 00 00	 mov	 ecx, 4
  00143	6b d1 00	 imul	 edx, ecx, 0
  00146	51		 push	 ecx
  00147	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00156	c1 e0 00	 shl	 eax, 0
  00159	03 45 08	 add	 eax, DWORD PTR _box1$[ebp]
  0015c	b9 04 00 00 00	 mov	 ecx, 4
  00161	6b d1 00	 imul	 edx, ecx, 0
  00164	51		 push	 ecx
  00165	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0016a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016f	e8 00 00 00 00	 call	 _glm_max
  00174	83 c4 08	 add	 esp, 8
  00177	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0017c	c1 e0 00	 shl	 eax, 0
  0017f	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00182	b9 04 00 00 00	 mov	 ecx, 4
  00187	6b d1 00	 imul	 edx, ecx, 0
  0018a	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 71   :   dest[1][1] = glm_max(box1[1][1], box2[1][1]);

  0018d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00192	c1 e0 00	 shl	 eax, 0
  00195	03 45 0c	 add	 eax, DWORD PTR _box2$[ebp]
  00198	b9 04 00 00 00	 mov	 ecx, 4
  0019d	c1 e1 00	 shl	 ecx, 0
  001a0	51		 push	 ecx
  001a1	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ab	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001b0	c1 e2 00	 shl	 edx, 0
  001b3	03 55 08	 add	 edx, DWORD PTR _box1$[ebp]
  001b6	b8 04 00 00 00	 mov	 eax, 4
  001bb	c1 e0 00	 shl	 eax, 0
  001be	51		 push	 ecx
  001bf	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  001c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c9	e8 00 00 00 00	 call	 _glm_max
  001ce	83 c4 08	 add	 esp, 8
  001d1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001d6	c1 e1 00	 shl	 ecx, 0
  001d9	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  001dc	ba 04 00 00 00	 mov	 edx, 4
  001e1	c1 e2 00	 shl	 edx, 0
  001e4	d9 1c 11	 fstp	 DWORD PTR [ecx+edx]

; 72   :   dest[1][2] = glm_max(box1[1][2], box2[1][2]);

  001e7	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ec	c1 e0 00	 shl	 eax, 0
  001ef	03 45 0c	 add	 eax, DWORD PTR _box2$[ebp]
  001f2	b9 04 00 00 00	 mov	 ecx, 4
  001f7	d1 e1		 shl	 ecx, 1
  001f9	51		 push	 ecx
  001fa	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  001ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00204	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00209	c1 e2 00	 shl	 edx, 0
  0020c	03 55 08	 add	 edx, DWORD PTR _box1$[ebp]
  0020f	b8 04 00 00 00	 mov	 eax, 4
  00214	d1 e0		 shl	 eax, 1
  00216	51		 push	 ecx
  00217	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0021c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00221	e8 00 00 00 00	 call	 _glm_max
  00226	83 c4 08	 add	 esp, 8
  00229	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0022e	c1 e1 00	 shl	 ecx, 0
  00231	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00234	ba 04 00 00 00	 mov	 edx, 4
  00239	d1 e2		 shl	 edx, 1
  0023b	d9 1c 11	 fstp	 DWORD PTR [ecx+edx]

; 73   : }

  0023e	5f		 pop	 edi
  0023f	5e		 pop	 esi
  00240	5b		 pop	 ebx
  00241	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00247	3b ec		 cmp	 ebp, esp
  00249	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c3		 ret	 0
_glm_aabb_merge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\box.h
;	COMDAT _glm_aabb_transform
_TEXT	SEGMENT
_zb$ = -152						; size = 12
_za$ = -132						; size = 12
_yb$ = -112						; size = 12
_ya$ = -92						; size = 12
_xb$ = -72						; size = 12
_xa$ = -52						; size = 12
_v$ = -32						; size = 24
__$ArrayPad$ = -4					; size = 4
_box$ = 8						; size = 4
_m$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_aabb_transform PROC				; COMDAT

; 25   : glm_aabb_transform(vec3 box[2], mat4 m, vec3 dest[2]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd a4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-348]
  00012	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __8776585B_box@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   vec3 v[2], xa, xb, ya, yb, za, zb;
; 27   : 
; 28   :   glm_vec3_scale(m[0], box[0][0], xa);

  00032	8d 45 cc	 lea	 eax, DWORD PTR _xa$[ebp]
  00035	50		 push	 eax
  00036	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0003b	6b d1 00	 imul	 edx, ecx, 0
  0003e	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  00041	b8 04 00 00 00	 mov	 eax, 4
  00046	6b c8 00	 imul	 ecx, eax, 0
  00049	51		 push	 ecx
  0004a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00059	6b c2 00	 imul	 eax, edx, 0
  0005c	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 _glm_vec3_scale
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 29   :   glm_vec3_scale(m[0], box[1][0], xb);

  00068	8d 45 b8	 lea	 eax, DWORD PTR _xb$[ebp]
  0006b	50		 push	 eax
  0006c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00071	c1 e1 00	 shl	 ecx, 0
  00074	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00077	ba 04 00 00 00	 mov	 edx, 4
  0007c	6b c2 00	 imul	 eax, edx, 0
  0007f	51		 push	 ecx
  00080	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0008f	6b d1 00	 imul	 edx, ecx, 0
  00092	03 55 0c	 add	 edx, DWORD PTR _m$[ebp]
  00095	52		 push	 edx
  00096	e8 00 00 00 00	 call	 _glm_vec3_scale
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 30   : 
; 31   :   glm_vec3_scale(m[1], box[0][1], ya);

  0009e	8d 45 a4	 lea	 eax, DWORD PTR _ya$[ebp]
  000a1	50		 push	 eax
  000a2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000a7	6b d1 00	 imul	 edx, ecx, 0
  000aa	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  000ad	b8 04 00 00 00	 mov	 eax, 4
  000b2	c1 e0 00	 shl	 eax, 0
  000b5	51		 push	 ecx
  000b6	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000c5	c1 e1 00	 shl	 ecx, 0
  000c8	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _glm_vec3_scale
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   :   glm_vec3_scale(m[1], box[1][1], yb);

  000d4	8d 45 90	 lea	 eax, DWORD PTR _yb$[ebp]
  000d7	50		 push	 eax
  000d8	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000dd	c1 e1 00	 shl	 ecx, 0
  000e0	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  000e3	ba 04 00 00 00	 mov	 edx, 4
  000e8	c1 e2 00	 shl	 edx, 0
  000eb	51		 push	 ecx
  000ec	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000fb	c1 e0 00	 shl	 eax, 0
  000fe	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 _glm_vec3_scale
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH

; 33   : 
; 34   :   glm_vec3_scale(m[2], box[0][2], za);

  0010a	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _za$[ebp]
  00110	50		 push	 eax
  00111	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00116	6b d1 00	 imul	 edx, ecx, 0
  00119	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  0011c	b8 04 00 00 00	 mov	 eax, 4
  00121	d1 e0		 shl	 eax, 1
  00123	51		 push	 ecx
  00124	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00133	d1 e1		 shl	 ecx, 1
  00135	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 _glm_vec3_scale
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 35   :   glm_vec3_scale(m[2], box[1][2], zb);

  00141	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _zb$[ebp]
  00147	50		 push	 eax
  00148	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0014d	c1 e1 00	 shl	 ecx, 0
  00150	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00153	ba 04 00 00 00	 mov	 edx, 4
  00158	d1 e2		 shl	 edx, 1
  0015a	51		 push	 ecx
  0015b	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0016a	d1 e0		 shl	 eax, 1
  0016c	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 _glm_vec3_scale
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH

; 36   : 
; 37   :   /* translation + min(xa, xb) + min(ya, yb) + min(za, zb) */
; 38   :   glm_vec3(m[3], v[0]);

  00178	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	8d 54 0d e0	 lea	 edx, DWORD PTR _v$[ebp+ecx]
  00184	52		 push	 edx
  00185	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0018a	6b c8 03	 imul	 ecx, eax, 3
  0018d	03 4d 0c	 add	 ecx, DWORD PTR _m$[ebp]
  00190	51		 push	 ecx
  00191	e8 00 00 00 00	 call	 _glm_vec3
  00196	83 c4 08	 add	 esp, 8

; 39   :   glm_vec3_minadd(xa, xb, v[0]);

  00199	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0019e	6b c8 00	 imul	 ecx, eax, 0
  001a1	8d 54 0d e0	 lea	 edx, DWORD PTR _v$[ebp+ecx]
  001a5	52		 push	 edx
  001a6	8d 45 b8	 lea	 eax, DWORD PTR _xb$[ebp]
  001a9	50		 push	 eax
  001aa	8d 4d cc	 lea	 ecx, DWORD PTR _xa$[ebp]
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 _glm_vec3_minadd
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 40   :   glm_vec3_minadd(ya, yb, v[0]);

  001b6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001bb	6b c8 00	 imul	 ecx, eax, 0
  001be	8d 54 0d e0	 lea	 edx, DWORD PTR _v$[ebp+ecx]
  001c2	52		 push	 edx
  001c3	8d 45 90	 lea	 eax, DWORD PTR _yb$[ebp]
  001c6	50		 push	 eax
  001c7	8d 4d a4	 lea	 ecx, DWORD PTR _ya$[ebp]
  001ca	51		 push	 ecx
  001cb	e8 00 00 00 00	 call	 _glm_vec3_minadd
  001d0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   :   glm_vec3_minadd(za, zb, v[0]);

  001d3	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001d8	6b c8 00	 imul	 ecx, eax, 0
  001db	8d 54 0d e0	 lea	 edx, DWORD PTR _v$[ebp+ecx]
  001df	52		 push	 edx
  001e0	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _zb$[ebp]
  001e6	50		 push	 eax
  001e7	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _za$[ebp]
  001ed	51		 push	 ecx
  001ee	e8 00 00 00 00	 call	 _glm_vec3_minadd
  001f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : 
; 43   :   /* translation + max(xa, xb) + max(ya, yb) + max(za, zb) */
; 44   :   glm_vec3(m[3], v[1]);

  001f6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001fb	c1 e0 00	 shl	 eax, 0
  001fe	8d 4c 05 e0	 lea	 ecx, DWORD PTR _v$[ebp+eax]
  00202	51		 push	 ecx
  00203	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00208	6b c2 03	 imul	 eax, edx, 3
  0020b	03 45 0c	 add	 eax, DWORD PTR _m$[ebp]
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 _glm_vec3
  00214	83 c4 08	 add	 esp, 8

; 45   :   glm_vec3_maxadd(xa, xb, v[1]);

  00217	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0021c	c1 e0 00	 shl	 eax, 0
  0021f	8d 4c 05 e0	 lea	 ecx, DWORD PTR _v$[ebp+eax]
  00223	51		 push	 ecx
  00224	8d 55 b8	 lea	 edx, DWORD PTR _xb$[ebp]
  00227	52		 push	 edx
  00228	8d 45 cc	 lea	 eax, DWORD PTR _xa$[ebp]
  0022b	50		 push	 eax
  0022c	e8 00 00 00 00	 call	 _glm_vec3_maxadd
  00231	83 c4 0c	 add	 esp, 12			; 0000000cH

; 46   :   glm_vec3_maxadd(ya, yb, v[1]);

  00234	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00239	c1 e0 00	 shl	 eax, 0
  0023c	8d 4c 05 e0	 lea	 ecx, DWORD PTR _v$[ebp+eax]
  00240	51		 push	 ecx
  00241	8d 55 90	 lea	 edx, DWORD PTR _yb$[ebp]
  00244	52		 push	 edx
  00245	8d 45 a4	 lea	 eax, DWORD PTR _ya$[ebp]
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 _glm_vec3_maxadd
  0024e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 47   :   glm_vec3_maxadd(za, zb, v[1]);

  00251	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00256	c1 e0 00	 shl	 eax, 0
  00259	8d 4c 05 e0	 lea	 ecx, DWORD PTR _v$[ebp+eax]
  0025d	51		 push	 ecx
  0025e	8d 95 68 ff ff
	ff		 lea	 edx, DWORD PTR _zb$[ebp]
  00264	52		 push	 edx
  00265	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _za$[ebp]
  0026b	50		 push	 eax
  0026c	e8 00 00 00 00	 call	 _glm_vec3_maxadd
  00271	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   : 
; 49   :   glm_vec3_copy(v[0], dest[0]);

  00274	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00279	6b c8 00	 imul	 ecx, eax, 0
  0027c	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0027f	51		 push	 ecx
  00280	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00285	6b c2 00	 imul	 eax, edx, 0
  00288	8d 4c 05 e0	 lea	 ecx, DWORD PTR _v$[ebp+eax]
  0028c	51		 push	 ecx
  0028d	e8 00 00 00 00	 call	 _glm_vec3_copy
  00292	83 c4 08	 add	 esp, 8

; 50   :   glm_vec3_copy(v[1], dest[1]);

  00295	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0029a	c1 e0 00	 shl	 eax, 0
  0029d	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  002a0	50		 push	 eax
  002a1	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  002a6	c1 e1 00	 shl	 ecx, 0
  002a9	8d 54 0d e0	 lea	 edx, DWORD PTR _v$[ebp+ecx]
  002ad	52		 push	 edx
  002ae	e8 00 00 00 00	 call	 _glm_vec3_copy
  002b3	83 c4 08	 add	 esp, 8

; 51   : }

  002b6	52		 push	 edx
  002b7	8b cd		 mov	 ecx, ebp
  002b9	50		 push	 eax
  002ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@glm_aabb_t
  002c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002c5	58		 pop	 eax
  002c6	5a		 pop	 edx
  002c7	5f		 pop	 edi
  002c8	5e		 pop	 esi
  002c9	5b		 pop	 ebx
  002ca	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cd	33 cd		 xor	 ecx, ebp
  002cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d4	81 c4 5c 01 00
	00		 add	 esp, 348		; 0000015cH
  002da	3b ec		 cmp	 ebp, esp
  002dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e1	8b e5		 mov	 esp, ebp
  002e3	5d		 pop	 ebp
  002e4	c3		 ret	 0
  002e5	0f 1f 00	 npad	 3
$LN11@glm_aabb_t:
  002e8	07 00 00 00	 DD	 7
  002ec	00 00 00 00	 DD	 $LN10@glm_aabb_t
$LN10@glm_aabb_t:
  002f0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  002f4	18 00 00 00	 DD	 24			; 00000018H
  002f8	00 00 00 00	 DD	 $LN3@glm_aabb_t
  002fc	cc ff ff ff	 DD	 -52			; ffffffccH
  00300	0c 00 00 00	 DD	 12			; 0000000cH
  00304	00 00 00 00	 DD	 $LN4@glm_aabb_t
  00308	b8 ff ff ff	 DD	 -72			; ffffffb8H
  0030c	0c 00 00 00	 DD	 12			; 0000000cH
  00310	00 00 00 00	 DD	 $LN5@glm_aabb_t
  00314	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00318	0c 00 00 00	 DD	 12			; 0000000cH
  0031c	00 00 00 00	 DD	 $LN6@glm_aabb_t
  00320	90 ff ff ff	 DD	 -112			; ffffff90H
  00324	0c 00 00 00	 DD	 12			; 0000000cH
  00328	00 00 00 00	 DD	 $LN7@glm_aabb_t
  0032c	7c ff ff ff	 DD	 -132			; ffffff7cH
  00330	0c 00 00 00	 DD	 12			; 0000000cH
  00334	00 00 00 00	 DD	 $LN8@glm_aabb_t
  00338	68 ff ff ff	 DD	 -152			; ffffff68H
  0033c	0c 00 00 00	 DD	 12			; 0000000cH
  00340	00 00 00 00	 DD	 $LN9@glm_aabb_t
$LN9@glm_aabb_t:
  00344	7a		 DB	 122			; 0000007aH
  00345	62		 DB	 98			; 00000062H
  00346	00		 DB	 0
$LN8@glm_aabb_t:
  00347	7a		 DB	 122			; 0000007aH
  00348	61		 DB	 97			; 00000061H
  00349	00		 DB	 0
$LN7@glm_aabb_t:
  0034a	79		 DB	 121			; 00000079H
  0034b	62		 DB	 98			; 00000062H
  0034c	00		 DB	 0
$LN6@glm_aabb_t:
  0034d	79		 DB	 121			; 00000079H
  0034e	61		 DB	 97			; 00000061H
  0034f	00		 DB	 0
$LN5@glm_aabb_t:
  00350	78		 DB	 120			; 00000078H
  00351	62		 DB	 98			; 00000062H
  00352	00		 DB	 0
$LN4@glm_aabb_t:
  00353	78		 DB	 120			; 00000078H
  00354	61		 DB	 97			; 00000061H
  00355	00		 DB	 0
$LN3@glm_aabb_t:
  00356	76		 DB	 118			; 00000076H
  00357	00		 DB	 0
_glm_aabb_transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_distance
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_distance PROC					; COMDAT

; 767  : glm_vec3_distance(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 768  :   return sqrtf(glm_vec3_distance2(a, b));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_distance2
  00035	83 c4 04	 add	 esp, 4
  00038	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003b	e8 00 00 00 00	 call	 _sqrtf
  00040	83 c4 04	 add	 esp, 4

; 769  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glm_vec3_distance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_distance2
_TEXT	SEGMENT
tv154 = -216						; size = 4
tv152 = -212						; size = 4
tv159 = -208						; size = 4
tv142 = -204						; size = 4
tv157 = -200						; size = 4
tv132 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_distance2 PROC				; COMDAT

; 752  : glm_vec3_distance2(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 753  :   return glm_pow2(a[0] - b[0])

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00048	51		 push	 ecx
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	e8 00 00 00 00	 call	 _glm_pow2
  00053	83 c4 04	 add	 esp, 4
  00056	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv132[ebp]
  0005c	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv132[ebp]
  00064	b8 04 00 00 00	 mov	 eax, 4
  00069	c1 e0 00	 shl	 eax, 0
  0006c	b9 04 00 00 00	 mov	 ecx, 4
  00071	c1 e1 00	 shl	 ecx, 0
  00074	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00077	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0007a	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0007f	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  00084	51		 push	 ecx
  00085	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0008a	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv157[ebp], xmm0
  00092	e8 00 00 00 00	 call	 _glm_pow2
  00097	83 c4 04	 add	 esp, 4
  0009a	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR tv142[ebp]
  000a0	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv157[ebp]
  000a8	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR tv142[ebp]
  000b0	b8 04 00 00 00	 mov	 eax, 4
  000b5	d1 e0		 shl	 eax, 1
  000b7	b9 04 00 00 00	 mov	 ecx, 4
  000bc	d1 e1		 shl	 ecx, 1
  000be	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000c1	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000c4	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000c9	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  000ce	51		 push	 ecx
  000cf	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  000d4	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv159[ebp], xmm0
  000dc	e8 00 00 00 00	 call	 _glm_pow2
  000e1	83 c4 04	 add	 esp, 4
  000e4	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR tv152[ebp]
  000ea	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv159[ebp]
  000f2	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR tv152[ebp]
  000fa	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv154[ebp], xmm0
  00102	d9 85 28 ff ff
	ff		 fld	 DWORD PTR tv154[ebp]

; 754  :        + glm_pow2(a[1] - b[1])
; 755  :        + glm_pow2(a[2] - b[2]);
; 756  : }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00111	3b ec		 cmp	 ebp, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
_glm_vec3_distance2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_center
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_center PROC					; COMDAT

; 738  : glm_vec3_center(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 739  :   glm_vec3_add(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_add
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 740  :   glm_vec3_scale(dest, 0.5f, dest);

  0003c	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _glm_vec3_scale
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 741  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_glm_vec3_center ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_minadd
_TEXT	SEGMENT
tv181 = -196						; size = 4
tv164 = -196						; size = 4
tv147 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_minadd PROC					; COMDAT

; 499  : glm_vec3_minadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 500  :   dest[0] += glm_min(a[0], b[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b f0 00	 imul	 esi, eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	6b d1 00	 imul	 edx, ecx, 0
  00038	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0003b	51		 push	 ecx
  0003c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	b9 04 00 00 00	 mov	 ecx, 4
  0004b	6b d1 00	 imul	 edx, ecx, 0
  0004e	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00051	51		 push	 ecx
  00052	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	e8 00 00 00 00	 call	 _glm_min
  00061	83 c4 08	 add	 esp, 8
  00064	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv147[ebp]
  0006a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0006d	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv147[ebp]
  00075	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  0007a	ba 04 00 00 00	 mov	 edx, 4
  0007f	6b c2 00	 imul	 eax, edx, 0
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00085	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 501  :   dest[1] += glm_min(a[1], b[1]);

  0008a	be 04 00 00 00	 mov	 esi, 4
  0008f	c1 e6 00	 shl	 esi, 0
  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	c1 e0 00	 shl	 eax, 0
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0009d	51		 push	 ecx
  0009e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	ba 04 00 00 00	 mov	 edx, 4
  000ad	c1 e2 00	 shl	 edx, 0
  000b0	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000b3	51		 push	 ecx
  000b4	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	e8 00 00 00 00	 call	 _glm_min
  000c3	83 c4 08	 add	 esp, 8
  000c6	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv164[ebp]
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000cf	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv164[ebp]
  000d7	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  000dc	ba 04 00 00 00	 mov	 edx, 4
  000e1	c1 e2 00	 shl	 edx, 0
  000e4	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000e7	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 502  :   dest[2] += glm_min(a[2], b[2]);

  000ec	be 04 00 00 00	 mov	 esi, 4
  000f1	d1 e6		 shl	 esi, 1
  000f3	b8 04 00 00 00	 mov	 eax, 4
  000f8	d1 e0		 shl	 eax, 1
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  000fd	51		 push	 ecx
  000fe	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	ba 04 00 00 00	 mov	 edx, 4
  0010d	d1 e2		 shl	 edx, 1
  0010f	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00112	51		 push	 ecx
  00113	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	e8 00 00 00 00	 call	 _glm_min
  00122	83 c4 08	 add	 esp, 8
  00125	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv181[ebp]
  0012b	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0012e	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv181[ebp]
  00136	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  0013b	ba 04 00 00 00	 mov	 edx, 4
  00140	d1 e2		 shl	 edx, 1
  00142	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00145	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 503  : }

  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
_glm_vec3_minadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_maxadd
_TEXT	SEGMENT
tv181 = -196						; size = 4
tv164 = -196						; size = 4
tv147 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_maxadd PROC					; COMDAT

; 482  : glm_vec3_maxadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 483  :   dest[0] += glm_max(a[0], b[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b f0 00	 imul	 esi, eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	6b d1 00	 imul	 edx, ecx, 0
  00038	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0003b	51		 push	 ecx
  0003c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	b9 04 00 00 00	 mov	 ecx, 4
  0004b	6b d1 00	 imul	 edx, ecx, 0
  0004e	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00051	51		 push	 ecx
  00052	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	e8 00 00 00 00	 call	 _glm_max
  00061	83 c4 08	 add	 esp, 8
  00064	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv147[ebp]
  0006a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0006d	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv147[ebp]
  00075	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  0007a	ba 04 00 00 00	 mov	 edx, 4
  0007f	6b c2 00	 imul	 eax, edx, 0
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00085	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 484  :   dest[1] += glm_max(a[1], b[1]);

  0008a	be 04 00 00 00	 mov	 esi, 4
  0008f	c1 e6 00	 shl	 esi, 0
  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	c1 e0 00	 shl	 eax, 0
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0009d	51		 push	 ecx
  0009e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	ba 04 00 00 00	 mov	 edx, 4
  000ad	c1 e2 00	 shl	 edx, 0
  000b0	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000b3	51		 push	 ecx
  000b4	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	e8 00 00 00 00	 call	 _glm_max
  000c3	83 c4 08	 add	 esp, 8
  000c6	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv164[ebp]
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000cf	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv164[ebp]
  000d7	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  000dc	ba 04 00 00 00	 mov	 edx, 4
  000e1	c1 e2 00	 shl	 edx, 0
  000e4	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000e7	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 485  :   dest[2] += glm_max(a[2], b[2]);

  000ec	be 04 00 00 00	 mov	 esi, 4
  000f1	d1 e6		 shl	 esi, 1
  000f3	b8 04 00 00 00	 mov	 eax, 4
  000f8	d1 e0		 shl	 eax, 1
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  000fd	51		 push	 ecx
  000fe	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	ba 04 00 00 00	 mov	 edx, 4
  0010d	d1 e2		 shl	 edx, 1
  0010f	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00112	51		 push	 ecx
  00113	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	e8 00 00 00 00	 call	 _glm_max
  00122	83 c4 08	 add	 esp, 8
  00125	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv181[ebp]
  0012b	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0012e	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv181[ebp]
  00136	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  0013b	ba 04 00 00 00	 mov	 edx, 4
  00140	d1 e2		 shl	 edx, 1
  00142	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00145	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 486  : }

  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
_glm_vec3_maxadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_scale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_scale PROC					; COMDAT

; 346  : glm_vec3_scale(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 347  :   dest[0] = v[0] * s;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00048	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 348  :   dest[1] = v[1] * s;

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	c1 e0 00	 shl	 eax, 0
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0005d	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	c1 e2 00	 shl	 edx, 0
  0006a	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0006d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 349  :   dest[2] = v[2] * s;

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	d1 e0		 shl	 eax, 1
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0007c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00081	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	d1 e2		 shl	 edx, 1
  0008d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00090	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 350  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_glm_vec3_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_add
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_add PROC					; COMDAT

; 271  : glm_vec3_add(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 272  :   dest[0] = a[0] + b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 58 04 06	 addss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00053	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 273  :   dest[1] = a[1] + b[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 04 00 00 00	 mov	 ecx, 4
  00065	c1 e1 00	 shl	 ecx, 0
  00068	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00073	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	c1 e0 00	 shl	 eax, 0
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00083	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 274  :   dest[2] = a[2] + b[2];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	d1 e0		 shl	 eax, 1
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	d1 e1		 shl	 ecx, 1
  00096	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00099	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0009c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000a1	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	d1 e0		 shl	 eax, 1
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 275  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_copy
_TEXT	SEGMENT
_a$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_copy PROC					; COMDAT

; 146  : glm_vec3_copy(vec3 a, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 147  :   dest[0] = a[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 148  :   dest[1] = a[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 149  :   dest[2] = a[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 150  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec3_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3
_TEXT	SEGMENT
_v4$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_vec3 PROC						; COMDAT

; 132  : glm_vec3(vec4 v4, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  :   dest[0] = v4[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 134  :   dest[1] = v4[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 135  :   dest[2] = v4[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 136  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_min
_TEXT	SEGMENT
_min$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec3_min PROC					; COMDAT

; 154  : glm_vec3_min(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 155  :   float min;
; 156  : 
; 157  :   min = v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0

; 158  :   if (v[1] < min)

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	c1 e0 00	 shl	 eax, 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00048	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _min$[ebp]
  0004d	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  00051	76 15		 jbe	 SHORT $LN2@glm_vec3_m

; 159  :     min = v[1];

  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00063	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0
$LN2@glm_vec3_m:

; 160  :   if (v[2] < min)

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	d1 e0		 shl	 eax, 1
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00072	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _min$[ebp]
  00077	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  0007b	76 14		 jbe	 SHORT $LN3@glm_vec3_m

; 161  :     min = v[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	d1 e0		 shl	 eax, 1
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00087	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0008c	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0
$LN3@glm_vec3_m:

; 162  : 
; 163  :   return min;

  00091	d9 45 f8	 fld	 DWORD PTR _min$[ebp]

; 164  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_glm_vec3_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_max
_TEXT	SEGMENT
_max$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec3_max PROC					; COMDAT

; 135  : glm_vec3_max(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 136  :   float max;
; 137  : 
; 138  :   max = v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0

; 139  :   if (v[1] > max)

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	c1 e0 00	 shl	 eax, 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00048	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0004d	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _max$[ebp]
  00051	76 15		 jbe	 SHORT $LN2@glm_vec3_m

; 140  :     max = v[1];

  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00063	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0
$LN2@glm_vec3_m:

; 141  :   if (v[2] > max)

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	d1 e0		 shl	 eax, 1
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00072	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00077	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _max$[ebp]
  0007b	76 14		 jbe	 SHORT $LN3@glm_vec3_m

; 142  :     max = v[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	d1 e0		 shl	 eax, 1
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00087	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0008c	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0
$LN3@glm_vec3_m:

; 143  : 
; 144  :   return max;

  00091	d9 45 f8	 fld	 DWORD PTR _max$[ebp]

; 145  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_glm_vec3_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_broadcast
_TEXT	SEGMENT
_val$ = 8						; size = 4
_d$ = 12						; size = 4
_glm_vec3_broadcast PROC				; COMDAT

; 47   : glm_vec3_broadcast(float val, vec3 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 48   :   d[0] = d[1] = d[2] = val;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	d1 e0		 shl	 eax, 1
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _d$[ebp]
  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00037	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  0003c	ba 04 00 00 00	 mov	 edx, 4
  00041	c1 e2 00	 shl	 edx, 0
  00044	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  00047	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  0004c	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00051	b9 04 00 00 00	 mov	 ecx, 4
  00056	6b d1 00	 imul	 edx, ecx, 0
  00059	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  0005c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00061	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 49   : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_glm_vec3_broadcast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_max
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_max PROC						; COMDAT

; 144  : glm_max(float a, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  :   if (a > b)

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  0002d	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _b$[ebp]
  00031	76 05		 jbe	 SHORT $LN2@glm_max

; 146  :     return a;

  00033	d9 45 08	 fld	 DWORD PTR _a$[ebp]
  00036	eb 03		 jmp	 SHORT $LN1@glm_max
$LN2@glm_max:

; 147  :   return b;

  00038	d9 45 0c	 fld	 DWORD PTR _b$[ebp]
$LN1@glm_max:

; 148  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_min
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_min PROC						; COMDAT

; 130  : glm_min(float a, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  :   if (a < b)

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0002d	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _a$[ebp]
  00031	76 05		 jbe	 SHORT $LN2@glm_min

; 132  :     return a;

  00033	d9 45 08	 fld	 DWORD PTR _a$[ebp]
  00036	eb 03		 jmp	 SHORT $LN1@glm_min
$LN2@glm_min:

; 133  :   return b;

  00038	d9 45 0c	 fld	 DWORD PTR _b$[ebp]
$LN1@glm_min:

; 134  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_pow2
_TEXT	SEGMENT
tv68 = -196						; size = 4
_x$ = 8							; size = 4
_glm_pow2 PROC						; COMDAT

; 118  : glm_pow2(float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :   return x * x;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00032	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv68[ebp], xmm0
  0003a	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv68[ebp]

; 120  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_pow2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 760  :             return (float)sqrt(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sqrt
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 761  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
