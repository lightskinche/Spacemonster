; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\3DRendC\glmc\cam.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__D164993B_x86@h DB 01H
__51BD2C42_util@h DB 01H
__34F2E310_vec2-ext@h DB 01H
__83360300_vec2@h DB 01H
__9285E8A4_vec3-ext@h DB 01H
__5722D62A_vec4-ext@h DB 01H
__87BB7FB2_vec4@h DB 01H
__82F46937_vec3@h DB 01H
__6C51F661_mat4@h DB 01H
__D6E4440C_mat4@h DB 01H
__691EE0E4_mat3@h DB 01H
__D3AB5289_mat3@h DB 01H
__68DC8AD3_mat2@h DB 01H
__D26938BE_mat2@h DB 01H
__EF0FC99D_affine@h DB 01H
__8C09B87C_affine-mat@h DB 01H
__1A33B462_affine@h DB 01H
__26C2D243_plane@h DB 01H
__B1B2DC28_cam@h DB 01H
__26922CBA_frustum@h DB 01H
__9A782FAE_quat@h DB 01H
__20CD9DC3_quat@h DB 01H
__0105C43C_euler@h DB 01H
__76E0E330_box@h DB 01H
__AF25309F_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__98FD395E_io@h DB 01H
__253AA91C_project@h DB 01H
__C5964F96_sphere@h DB 01H
__CA1EBA5F_ease@h DB 01H
__E6C09561_curve@h DB 01H
__1F285908_bezier@h DB 01H
__F71D69B6_ray@h DB 01H
__C07C9586_affine2d@h DB 01H
__3F8BA224_vec3@h DB 01H
__3AC4B4A1_vec4@h DB 01H
__2BA5D20B_cam@c DB 01H
msvcjmc	ENDS
PUBLIC	_atanf
PUBLIC	_sqrtf
PUBLIC	_tanf
PUBLIC	_glm_vec3_dot
PUBLIC	_glm_vec3_norm2
PUBLIC	_glm_vec3_norm
PUBLIC	_glm_vec3_add
PUBLIC	_glm_vec3_sub
PUBLIC	_glm_vec3_scale
PUBLIC	_glm_vec3_normalize
PUBLIC	_glm_vec3_cross
PUBLIC	_glm_vec3_crossn
PUBLIC	_glm_vec3_ortho
PUBLIC	_glm_mat4_copy
PUBLIC	_glm_mat4_zero
PUBLIC	_glm_frustum
PUBLIC	_glm_ortho
PUBLIC	_glm_ortho_aabb
PUBLIC	_glm_ortho_aabb_p
PUBLIC	_glm_ortho_aabb_pz
PUBLIC	_glm_ortho_default
PUBLIC	_glm_ortho_default_s
PUBLIC	_glm_perspective
PUBLIC	_glm_persp_move_far
PUBLIC	_glm_perspective_default
PUBLIC	_glm_perspective_resize
PUBLIC	_glm_lookat
PUBLIC	_glm_look
PUBLIC	_glm_look_anyup
PUBLIC	_glm_persp_decomp
PUBLIC	_glm_persp_decompv
PUBLIC	_glm_persp_decomp_x
PUBLIC	_glm_persp_decomp_y
PUBLIC	_glm_persp_decomp_z
PUBLIC	_glm_persp_decomp_far
PUBLIC	_glm_persp_decomp_near
PUBLIC	_glm_persp_fovy
PUBLIC	_glm_persp_aspect
PUBLIC	_glm_persp_sizes
PUBLIC	_glmc_frustum
PUBLIC	_glmc_ortho
PUBLIC	_glmc_ortho_aabb
PUBLIC	_glmc_ortho_aabb_p
PUBLIC	_glmc_ortho_aabb_pz
PUBLIC	_glmc_ortho_default
PUBLIC	_glmc_ortho_default_s
PUBLIC	_glmc_perspective
PUBLIC	_glmc_persp_move_far
PUBLIC	_glmc_perspective_default
PUBLIC	_glmc_perspective_resize
PUBLIC	_glmc_lookat
PUBLIC	_glmc_look
PUBLIC	_glmc_look_anyup
PUBLIC	_glmc_persp_decomp
PUBLIC	_glmc_persp_decompv
PUBLIC	_glmc_persp_decomp_x
PUBLIC	_glmc_persp_decomp_y
PUBLIC	_glmc_persp_decomp_z
PUBLIC	_glmc_persp_decomp_far
PUBLIC	_glmc_persp_decomp_near
PUBLIC	_glmc_persp_fovy
PUBLIC	_glmc_persp_aspect
PUBLIC	_glmc_persp_sizes
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3f000000
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@42c80000
PUBLIC	__real@bf800000
PUBLIC	__real@c2c80000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_atan:PROC
EXTRN	_sqrt:PROC
EXTRN	_tan:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_sizes
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_fovy$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_persp_sizes PROC					; COMDAT

; 198  : glmc_persp_sizes(mat4 proj, float fovy, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 199  :   glm_persp_sizes(proj, fovy, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fovy$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _proj$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_persp_sizes
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 200  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_persp_sizes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_aspect
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_glmc_persp_aspect PROC					; COMDAT

; 192  : glmc_persp_aspect(mat4 proj) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 193  :   return glm_persp_aspect(proj);

  00028	8b 45 08	 mov	 eax, DWORD PTR _proj$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_persp_aspect
  00031	83 c4 04	 add	 esp, 4

; 194  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_persp_aspect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_fovy
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_glmc_persp_fovy PROC					; COMDAT

; 186  : glmc_persp_fovy(mat4 proj) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 187  :   return glm_persp_fovy(proj);

  00028	8b 45 08	 mov	 eax, DWORD PTR _proj$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_persp_fovy
  00031	83 c4 04	 add	 esp, 4

; 188  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_persp_fovy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_decomp_near
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_nearVal$ = 12						; size = 4
_glmc_persp_decomp_near PROC				; COMDAT

; 180  : glmc_persp_decomp_near(mat4 proj, float * __restrict nearVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 181  :   glm_persp_decomp_near(proj, nearVal);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _nearVal$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _proj$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_persp_decomp_near
  00035	83 c4 08	 add	 esp, 8

; 182  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_persp_decomp_near ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_decomp_far
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_farVal$ = 12						; size = 4
_glmc_persp_decomp_far PROC				; COMDAT

; 174  : glmc_persp_decomp_far(mat4 proj, float * __restrict farVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 175  :   glm_persp_decomp_far(proj, farVal);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _farVal$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _proj$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_persp_decomp_far
  00035	83 c4 08	 add	 esp, 8

; 176  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_persp_decomp_far ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_decomp_z
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_nearVal$ = 12						; size = 4
_farVal$ = 16						; size = 4
_glmc_persp_decomp_z PROC				; COMDAT

; 168  :                     float * __restrict farVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 169  :   glm_persp_decomp_z(proj, nearVal, farVal);

  00028	8b 45 10	 mov	 eax, DWORD PTR _farVal$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _nearVal$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _proj$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_persp_decomp_z
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 170  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_persp_decomp_z ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_decomp_y
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_top$ = 12						; size = 4
_bottom$ = 16						; size = 4
_glmc_persp_decomp_y PROC				; COMDAT

; 160  :                     float * __restrict bottom) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 161  :   glm_persp_decomp_y(proj, top, bottom);

  00028	8b 45 10	 mov	 eax, DWORD PTR _bottom$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _top$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _proj$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_persp_decomp_y
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 162  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_persp_decomp_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_decomp_x
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_glmc_persp_decomp_x PROC				; COMDAT

; 152  :                     float * __restrict right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 153  :   glm_persp_decomp_x(proj, left, right);

  00028	8b 45 10	 mov	 eax, DWORD PTR _right$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _left$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _proj$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_persp_decomp_x
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 154  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_persp_decomp_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_decompv
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_persp_decompv PROC				; COMDAT

; 144  : glmc_persp_decompv(mat4 proj, float dest[6]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  :   glm_persp_decompv(proj, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _proj$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_persp_decompv
  00035	83 c4 08	 add	 esp, 8

; 146  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_persp_decompv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_decomp
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_nearVal$ = 12						; size = 4
_farVal$ = 16						; size = 4
_top$ = 20						; size = 4
_bottom$ = 24						; size = 4
_left$ = 28						; size = 4
_right$ = 32						; size = 4
_glmc_persp_decomp PROC					; COMDAT

; 138  :                   float * __restrict right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 139  :   glm_persp_decomp(proj, nearVal, farVal, top, bottom, left, right);

  00028	8b 45 20	 mov	 eax, DWORD PTR _right$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 1c	 mov	 ecx, DWORD PTR _left$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 18	 mov	 edx, DWORD PTR _bottom$[ebp]
  00033	52		 push	 edx
  00034	8b 45 14	 mov	 eax, DWORD PTR _top$[ebp]
  00037	50		 push	 eax
  00038	8b 4d 10	 mov	 ecx, DWORD PTR _farVal$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _nearVal$[ebp]
  0003f	52		 push	 edx
  00040	8b 45 08	 mov	 eax, DWORD PTR _proj$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _glm_persp_decomp
  00049	83 c4 1c	 add	 esp, 28			; 0000001cH

; 140  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_glmc_persp_decomp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_look_anyup
_TEXT	SEGMENT
_eye$ = 8						; size = 4
_dir$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_look_anyup PROC					; COMDAT

; 126  : glmc_look_anyup(vec3 eye, vec3 dir, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 127  :   glm_look_anyup(eye, dir, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _dir$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _eye$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_look_anyup
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_look_anyup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_look
_TEXT	SEGMENT
_eye$ = 8						; size = 4
_dir$ = 12						; size = 4
_up$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_look PROC						; COMDAT

; 120  : glmc_look(vec3 eye, vec3 dir, vec3 up, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 121  :   glm_look(eye, dir, up, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _up$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _dir$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _eye$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _glm_look
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 122  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glmc_look ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_lookat
_TEXT	SEGMENT
_eye$ = 8						; size = 4
_center$ = 12						; size = 4
_up$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_lookat PROC					; COMDAT

; 114  :             mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 115  :   glm_lookat(eye, center, up, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _up$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _center$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _eye$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _glm_lookat
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 116  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glmc_lookat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_perspective_resize
_TEXT	SEGMENT
_aspect$ = 8						; size = 4
_proj$ = 12						; size = 4
_glmc_perspective_resize PROC				; COMDAT

; 105  : glmc_perspective_resize(float aspect, mat4 proj) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 106  :   glm_perspective_resize(aspect, proj);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _proj$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_perspective_resize
  0003c	83 c4 08	 add	 esp, 8

; 107  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_perspective_resize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_perspective_default
_TEXT	SEGMENT
_aspect$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_perspective_default PROC				; COMDAT

; 99   : glmc_perspective_default(float aspect, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 100  :   glm_perspective_default(aspect, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_perspective_default
  0003c	83 c4 08	 add	 esp, 8

; 101  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_perspective_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_persp_move_far
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_deltaFar$ = 12						; size = 4
_glmc_persp_move_far PROC				; COMDAT

; 93   : glmc_persp_move_far(mat4 proj, float deltaFar) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 94   :   glm_persp_move_far(proj, deltaFar);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _deltaFar$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _proj$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_persp_move_far
  0003c	83 c4 08	 add	 esp, 8

; 95   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_persp_move_far ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_perspective
_TEXT	SEGMENT
_fovy$ = 8						; size = 4
_aspect$ = 12						; size = 4
_nearVal$ = 16						; size = 4
_farVal$ = 20						; size = 4
_dest$ = 24						; size = 4
_glmc_perspective PROC					; COMDAT

; 83   :                  mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 84   :   glm_perspective(fovy,

  00028	8b 45 18	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	51		 push	 ecx
  00038	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _nearVal$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	51		 push	 ecx
  00043	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	51		 push	 ecx
  0004e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fovy$[ebp]
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 _glm_perspective
  0005d	83 c4 14	 add	 esp, 20			; 00000014H

; 85   :                   aspect,
; 86   :                   nearVal,
; 87   :                   farVal,
; 88   :                   dest);
; 89   : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_glmc_perspective ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_ortho_default_s
_TEXT	SEGMENT
_aspect$ = 8						; size = 4
_size$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_ortho_default_s PROC				; COMDAT

; 73   : glmc_ortho_default_s(float aspect, float size, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   glm_ortho_default_s(aspect, size, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	51		 push	 ecx
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 _glm_ortho_default_s
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 75   : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_glmc_ortho_default_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_ortho_default
_TEXT	SEGMENT
_aspect$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_ortho_default PROC				; COMDAT

; 67   : glmc_ortho_default(float aspect, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   :   glm_ortho_default(aspect, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_ortho_default
  0003c	83 c4 08	 add	 esp, 8

; 69   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_ortho_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_ortho_aabb_pz
_TEXT	SEGMENT
_box$ = 8						; size = 4
_padding$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_ortho_aabb_pz PROC				; COMDAT

; 61   : glmc_ortho_aabb_pz(vec3 box[2], float padding, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   glm_ortho_aabb_pz(box, padding, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _padding$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_ortho_aabb_pz
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_ortho_aabb_pz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_ortho_aabb_p
_TEXT	SEGMENT
_box$ = 8						; size = 4
_padding$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_ortho_aabb_p PROC					; COMDAT

; 55   : glmc_ortho_aabb_p(vec3 box[2], float padding, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   glm_ortho_aabb_p(box, padding, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _padding$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_ortho_aabb_p
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 57   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_ortho_aabb_p ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_ortho_aabb
_TEXT	SEGMENT
_box$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_ortho_aabb PROC					; COMDAT

; 49   : glmc_ortho_aabb(vec3 box[2], mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   glm_ortho_aabb(box, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _box$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_ortho_aabb
  00035	83 c4 08	 add	 esp, 8

; 51   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_ortho_aabb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_ortho
_TEXT	SEGMENT
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_nearVal$ = 24						; size = 4
_farVal$ = 28						; size = 4
_dest$ = 32						; size = 4
_glmc_ortho PROC					; COMDAT

; 37   :            mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   glm_ortho(left,

  00028	8b 45 20	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	51		 push	 ecx
  00038	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _nearVal$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	51		 push	 ecx
  00043	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	51		 push	 ecx
  0004e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _bottom$[ebp]
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	51		 push	 ecx
  00059	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	51		 push	 ecx
  00064	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _left$[ebp]
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	e8 00 00 00 00	 call	 _glm_ortho
  00073	83 c4 1c	 add	 esp, 28			; 0000001cH

; 39   :             right,
; 40   :             bottom,
; 41   :             top,
; 42   :             nearVal,
; 43   :             farVal,
; 44   :             dest);
; 45   : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_glmc_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\cam.c
;	COMDAT _glmc_frustum
_TEXT	SEGMENT
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_nearVal$ = 24						; size = 4
_farVal$ = 28						; size = 4
_dest$ = 32						; size = 4
_glmc_frustum PROC					; COMDAT

; 19   :              mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __2BA5D20B_cam@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_frustum(left,

  00028	8b 45 20	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	51		 push	 ecx
  00038	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _nearVal$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	51		 push	 ecx
  00043	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	51		 push	 ecx
  0004e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _bottom$[ebp]
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	51		 push	 ecx
  00059	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  0005e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00063	51		 push	 ecx
  00064	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _left$[ebp]
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	e8 00 00 00 00	 call	 _glm_frustum
  00073	83 c4 1c	 add	 esp, 28			; 0000001cH

; 21   :               right,
; 22   :               bottom,
; 23   :               top,
; 24   :               nearVal,
; 25   :               farVal,
; 26   :               dest);
; 27   : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_glmc_frustum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_sizes
_TEXT	SEGMENT
tv95 = -248						; size = 4
_farVal$ = -48						; size = 4
_nearVal$ = -36						; size = 4
_a$ = -24						; size = 4
_t$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_proj$ = 8						; size = 4
_fovy$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_persp_sizes PROC					; COMDAT

; 568  : glm_persp_sizes(mat4 proj, float fovy, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00012	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 569  :   float t, a, nearVal, farVal;
; 570  : 
; 571  :   t = 2.0f * tanf(fovy * 0.5f);

  00032	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fovy$[ebp]
  00037	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0003f	51		 push	 ecx
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	e8 00 00 00 00	 call	 _tanf
  0004a	83 c4 04	 add	 esp, 4
  0004d	d9 9d 08 ff ff
	ff		 fstp	 DWORD PTR tv95[ebp]
  00053	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR tv95[ebp]
  0005b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00063	f3 0f 11 45 f4	 movss	 DWORD PTR _t$[ebp], xmm0

; 572  :   a = glm_persp_aspect(proj);

  00068	8b 45 08	 mov	 eax, DWORD PTR _proj$[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _glm_persp_aspect
  00071	83 c4 04	 add	 esp, 4
  00074	d9 5d e8	 fstp	 DWORD PTR _a$[ebp]

; 573  : 
; 574  :   glm_persp_decomp_z(proj, &nearVal, &farVal);

  00077	8d 45 d0	 lea	 eax, DWORD PTR _farVal$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d dc	 lea	 ecx, DWORD PTR _nearVal$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR _proj$[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 _glm_persp_decomp_z
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 575  : 
; 576  :   dest[1]  = t * nearVal;

  0008b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  00090	f3 0f 59 45 dc	 mulss	 xmm0, DWORD PTR _nearVal$[ebp]
  00095	b8 04 00 00 00	 mov	 eax, 4
  0009a	c1 e0 00	 shl	 eax, 0
  0009d	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000a0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 577  :   dest[3]  = t * farVal;

  000a5	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _t$[ebp]
  000aa	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _farVal$[ebp]
  000af	b8 04 00 00 00	 mov	 eax, 4
  000b4	6b c8 03	 imul	 ecx, eax, 3
  000b7	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000ba	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 578  :   dest[0]  = a * dest[1];

  000bf	b8 04 00 00 00	 mov	 eax, 4
  000c4	c1 e0 00	 shl	 eax, 0
  000c7	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000ca	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _a$[ebp]
  000cf	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  000d4	ba 04 00 00 00	 mov	 edx, 4
  000d9	6b c2 00	 imul	 eax, edx, 0
  000dc	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000df	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 579  :   dest[2]  = a * dest[3];

  000e4	b8 04 00 00 00	 mov	 eax, 4
  000e9	6b c8 03	 imul	 ecx, eax, 3
  000ec	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000ef	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _a$[ebp]
  000f4	f3 0f 59 04 0a	 mulss	 xmm0, DWORD PTR [edx+ecx]
  000f9	b8 04 00 00 00	 mov	 eax, 4
  000fe	d1 e0		 shl	 eax, 1
  00100	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00103	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 580  : }

  00108	52		 push	 edx
  00109	8b cd		 mov	 ecx, ebp
  0010b	50		 push	 eax
  0010c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@glm_persp_
  00112	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00117	58		 pop	 eax
  00118	5a		 pop	 edx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011f	33 cd		 xor	 ecx, ebp
  00121	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00126	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  0012c	3b ec		 cmp	 ebp, esp
  0012e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
  00137	90		 npad	 1
$LN6@glm_persp_:
  00138	02 00 00 00	 DD	 2
  0013c	00 00 00 00	 DD	 $LN5@glm_persp_
$LN5@glm_persp_:
  00140	dc ff ff ff	 DD	 -36			; ffffffdcH
  00144	04 00 00 00	 DD	 4
  00148	00 00 00 00	 DD	 $LN3@glm_persp_
  0014c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00150	04 00 00 00	 DD	 4
  00154	00 00 00 00	 DD	 $LN4@glm_persp_
$LN4@glm_persp_:
  00158	66		 DB	 102			; 00000066H
  00159	61		 DB	 97			; 00000061H
  0015a	72		 DB	 114			; 00000072H
  0015b	56		 DB	 86			; 00000056H
  0015c	61		 DB	 97			; 00000061H
  0015d	6c		 DB	 108			; 0000006cH
  0015e	00		 DB	 0
$LN3@glm_persp_:
  0015f	6e		 DB	 110			; 0000006eH
  00160	65		 DB	 101			; 00000065H
  00161	61		 DB	 97			; 00000061H
  00162	72		 DB	 114			; 00000072H
  00163	56		 DB	 86			; 00000056H
  00164	61		 DB	 97			; 00000061H
  00165	6c		 DB	 108			; 0000006cH
  00166	00		 DB	 0
_glm_persp_sizes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_aspect
_TEXT	SEGMENT
tv80 = -196						; size = 4
_proj$ = 8						; size = 4
_glm_persp_aspect PROC					; COMDAT

; 555  : glm_persp_aspect(mat4 proj) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 556  :   return proj[1][1] / proj[0][0];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	c1 e0 00	 shl	 eax, 0
  00030	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  00033	b9 04 00 00 00	 mov	 ecx, 4
  00038	c1 e1 00	 shl	 ecx, 0
  0003b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	03 55 08	 add	 edx, DWORD PTR _proj$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00053	f3 0f 5e 04 32	 divss	 xmm0, DWORD PTR [edx+esi]
  00058	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv80[ebp], xmm0
  00060	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv80[ebp]

; 557  : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_glm_persp_aspect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_fovy
_TEXT	SEGMENT
tv84 = -200						; size = 4
tv81 = -196						; size = 4
_proj$ = 8						; size = 4
_glm_persp_fovy PROC					; COMDAT

; 544  : glm_persp_fovy(mat4 proj) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 545  :   return 2.0f * atanf(1.0f / proj[1][1]);

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	c1 e0 00	 shl	 eax, 0
  00030	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  00033	b9 04 00 00 00	 mov	 ecx, 4
  00038	c1 e1 00	 shl	 ecx, 0
  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00043	f3 0f 5e 04 08	 divss	 xmm0, DWORD PTR [eax+ecx]
  00048	51		 push	 ecx
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	e8 00 00 00 00	 call	 _atanf
  00053	83 c4 04	 add	 esp, 4
  00056	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv81[ebp]
  0005c	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv81[ebp]
  00064	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0006c	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv84[ebp], xmm0
  00074	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv84[ebp]

; 546  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_persp_fovy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_decomp_near
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_nearVal$ = 12						; size = 4
_glm_persp_decomp_near PROC				; COMDAT

; 530  : glm_persp_decomp_near(mat4 proj, float * __restrict nearVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 531  :   *nearVal = proj[3][2] / (proj[2][2] - 1.0f);

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 03	 imul	 ecx, eax, 3
  00030	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	d1 e2		 shl	 edx, 1
  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	d1 e0		 shl	 eax, 1
  00041	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  00044	be 04 00 00 00	 mov	 esi, 4
  00049	d1 e6		 shl	 esi, 1
  0004b	f3 0f 10 04 30	 movss	 xmm0, DWORD PTR [eax+esi]
  00050	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00058	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  0005d	f3 0f 5e c8	 divss	 xmm1, xmm0
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _nearVal$[ebp]
  00064	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1

; 532  : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_glm_persp_decomp_near ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_decomp_far
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_farVal$ = 12						; size = 4
_glm_persp_decomp_far PROC				; COMDAT

; 518  : glm_persp_decomp_far(mat4 proj, float * __restrict farVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 519  :   *farVal = proj[3][2] / (proj[2][2] + 1.0f);

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 03	 imul	 ecx, eax, 3
  00030	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	d1 e2		 shl	 edx, 1
  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	d1 e0		 shl	 eax, 1
  00041	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  00044	be 04 00 00 00	 mov	 esi, 4
  00049	d1 e6		 shl	 esi, 1
  0004b	f3 0f 10 04 30	 movss	 xmm0, DWORD PTR [eax+esi]
  00050	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00058	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  0005d	f3 0f 5e c8	 divss	 xmm1, xmm0
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR _farVal$[ebp]
  00064	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1

; 520  : }

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_glm_persp_decomp_far ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_decomp_z
_TEXT	SEGMENT
_m22$ = -20						; size = 4
_m32$ = -8						; size = 4
_proj$ = 8						; size = 4
_nearVal$ = 12						; size = 4
_farVal$ = 16						; size = 4
_glm_persp_decomp_z PROC				; COMDAT

; 500  :                    float * __restrict farVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 501  :   float m32, m22;
; 502  : 
; 503  :   m32 = proj[3][2];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 03	 imul	 ecx, eax, 3
  00030	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	d1 e2		 shl	 edx, 1
  0003a	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0003f	f3 0f 11 45 f8	 movss	 DWORD PTR _m32$[ebp], xmm0

; 504  :   m22 = proj[2][2];

  00044	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00049	d1 e0		 shl	 eax, 1
  0004b	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  0004e	b9 04 00 00 00	 mov	 ecx, 4
  00053	d1 e1		 shl	 ecx, 1
  00055	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0005a	f3 0f 11 45 ec	 movss	 DWORD PTR _m22$[ebp], xmm0

; 505  : 
; 506  :   *nearVal = m32 / (m22 - 1.0f);

  0005f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _m22$[ebp]
  00064	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0006c	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _m32$[ebp]
  00071	f3 0f 5e c8	 divss	 xmm1, xmm0
  00075	8b 45 0c	 mov	 eax, DWORD PTR _nearVal$[ebp]
  00078	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 507  :   *farVal  = m32 / (m22 + 1.0f);

  0007c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _m22$[ebp]
  00081	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00089	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _m32$[ebp]
  0008e	f3 0f 5e c8	 divss	 xmm1, xmm0
  00092	8b 45 10	 mov	 eax, DWORD PTR _farVal$[ebp]
  00095	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 508  : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
_glm_persp_decomp_z ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_decomp_y
_TEXT	SEGMENT
_m11$ = -32						; size = 4
_m21$ = -20						; size = 4
_nearVal$ = -8						; size = 4
_proj$ = 8						; size = 4
_top$ = 12						; size = 4
_bottom$ = 16						; size = 4
_glm_persp_decomp_y PROC				; COMDAT

; 477  :                    float * __restrict bottom) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 478  :   float nearVal, m21, m11;
; 479  : 
; 480  :   m21 = proj[2][1];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	d1 e0		 shl	 eax, 1
  0002f	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  00032	b9 04 00 00 00	 mov	 ecx, 4
  00037	c1 e1 00	 shl	 ecx, 0
  0003a	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0003f	f3 0f 11 45 ec	 movss	 DWORD PTR _m21$[ebp], xmm0

; 481  :   m11 = proj[1][1];

  00044	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00049	c1 e0 00	 shl	 eax, 0
  0004c	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  0004f	b9 04 00 00 00	 mov	 ecx, 4
  00054	c1 e1 00	 shl	 ecx, 0
  00057	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0005c	f3 0f 11 45 e0	 movss	 DWORD PTR _m11$[ebp], xmm0

; 482  : 
; 483  :   nearVal = proj[3][2] / (proj[3][3] - 1.0f);

  00061	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00066	6b c8 03	 imul	 ecx, eax, 3
  00069	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  0006c	ba 04 00 00 00	 mov	 edx, 4
  00071	d1 e2		 shl	 edx, 1
  00073	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00078	6b c0 03	 imul	 eax, eax, 3
  0007b	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  0007e	be 04 00 00 00	 mov	 esi, 4
  00083	6b f6 03	 imul	 esi, esi, 3
  00086	f3 0f 10 04 30	 movss	 xmm0, DWORD PTR [eax+esi]
  0008b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00093	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00098	f3 0f 5e c8	 divss	 xmm1, xmm0
  0009c	f3 0f 11 4d f8	 movss	 DWORD PTR _nearVal$[ebp], xmm1

; 484  :   *bottom = nearVal * (m21 - 1) / m11;

  000a1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _m21$[ebp]
  000a6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000ae	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _nearVal$[ebp]
  000b3	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _m11$[ebp]
  000b8	8b 45 10	 mov	 eax, DWORD PTR _bottom$[ebp]
  000bb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 485  :   *top    = nearVal * (m21 + 1) / m11;

  000bf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _m21$[ebp]
  000c4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000cc	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _nearVal$[ebp]
  000d1	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _m11$[ebp]
  000d6	8b 45 0c	 mov	 eax, DWORD PTR _top$[ebp]
  000d9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 486  : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000e6	3b ec		 cmp	 ebp, esp
  000e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
_glm_persp_decomp_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_decomp_x
_TEXT	SEGMENT
_m00$ = -32						; size = 4
_m20$ = -20						; size = 4
_nearVal$ = -8						; size = 4
_proj$ = 8						; size = 4
_left$ = 12						; size = 4
_right$ = 16						; size = 4
_glm_persp_decomp_x PROC				; COMDAT

; 454  :                    float * __restrict right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 455  :   float nearVal, m20, m00;
; 456  : 
; 457  :   m00 = proj[0][0];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 11 45 e0	 movss	 DWORD PTR _m00$[ebp], xmm0

; 458  :   m20 = proj[2][0];

  00045	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004a	d1 e0		 shl	 eax, 1
  0004c	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  0004f	b9 04 00 00 00	 mov	 ecx, 4
  00054	6b d1 00	 imul	 edx, ecx, 0
  00057	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0005c	f3 0f 11 45 ec	 movss	 DWORD PTR _m20$[ebp], xmm0

; 459  : 
; 460  :   nearVal = proj[3][2] / (proj[3][3] - 1.0f);

  00061	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00066	6b c8 03	 imul	 ecx, eax, 3
  00069	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  0006c	ba 04 00 00 00	 mov	 edx, 4
  00071	d1 e2		 shl	 edx, 1
  00073	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00078	6b c0 03	 imul	 eax, eax, 3
  0007b	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  0007e	be 04 00 00 00	 mov	 esi, 4
  00083	6b f6 03	 imul	 esi, esi, 3
  00086	f3 0f 10 04 30	 movss	 xmm0, DWORD PTR [eax+esi]
  0008b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00093	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00098	f3 0f 5e c8	 divss	 xmm1, xmm0
  0009c	f3 0f 11 4d f8	 movss	 DWORD PTR _nearVal$[ebp], xmm1

; 461  :   *left   = nearVal * (m20 - 1.0f) / m00;

  000a1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _m20$[ebp]
  000a6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000ae	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _nearVal$[ebp]
  000b3	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _m00$[ebp]
  000b8	8b 45 0c	 mov	 eax, DWORD PTR _left$[ebp]
  000bb	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 462  :   *right  = nearVal * (m20 + 1.0f) / m00;

  000bf	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _m20$[ebp]
  000c4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000cc	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _nearVal$[ebp]
  000d1	f3 0f 5e 45 e0	 divss	 xmm0, DWORD PTR _m00$[ebp]
  000d6	8b 45 10	 mov	 eax, DWORD PTR _right$[ebp]
  000d9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 463  : }

  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	5b		 pop	 ebx
  000e0	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000e6	3b ec		 cmp	 ebp, esp
  000e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c3		 ret	 0
_glm_persp_decomp_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_decompv
_TEXT	SEGMENT
_proj$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_persp_decompv PROC					; COMDAT

; 437  : glm_persp_decompv(mat4 proj, float dest[6]) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 438  :   glm_persp_decomp(proj, &dest[0], &dest[1], &dest[2],

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 05	 imul	 ecx, eax, 5
  00030	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00033	51		 push	 ecx
  00034	ba 04 00 00 00	 mov	 edx, 4
  00039	c1 e2 02	 shl	 edx, 2
  0003c	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0003f	52		 push	 edx
  00040	b8 04 00 00 00	 mov	 eax, 4
  00045	6b c8 03	 imul	 ecx, eax, 3
  00048	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0004b	51		 push	 ecx
  0004c	ba 04 00 00 00	 mov	 edx, 4
  00051	d1 e2		 shl	 edx, 1
  00053	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00056	52		 push	 edx
  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	c1 e0 00	 shl	 eax, 0
  0005f	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00062	50		 push	 eax
  00063	b9 04 00 00 00	 mov	 ecx, 4
  00068	6b d1 00	 imul	 edx, ecx, 0
  0006b	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0006e	52		 push	 edx
  0006f	8b 45 08	 mov	 eax, DWORD PTR _proj$[ebp]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _glm_persp_decomp
  00078	83 c4 1c	 add	 esp, 28			; 0000001cH

; 439  :                          &dest[3], &dest[4], &dest[5]);
; 440  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_glm_persp_decompv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_decomp
_TEXT	SEGMENT
_n_m00$ = -116						; size = 4
_n_m11$ = -104						; size = 4
_f$ = -92						; size = 4
_n$ = -80						; size = 4
_m32$ = -68						; size = 4
_m22$ = -56						; size = 4
_m21$ = -44						; size = 4
_m20$ = -32						; size = 4
_m11$ = -20						; size = 4
_m00$ = -8						; size = 4
_proj$ = 8						; size = 4
_nearVal$ = 12						; size = 4
_farVal$ = 16						; size = 4
_top$ = 20						; size = 4
_bottom$ = 24						; size = 4
_left$ = 28						; size = 4
_right$ = 32						; size = 4
_glm_persp_decomp PROC					; COMDAT

; 403  :                  float * __restrict left,    float * __restrict right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd c8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-312]
  00012	b9 4e 00 00 00	 mov	 ecx, 78			; 0000004eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 404  :   float m00, m11, m20, m21, m22, m32, n, f;
; 405  :   float n_m11, n_m00;
; 406  : 
; 407  :   m00 = proj[0][0];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _m00$[ebp], xmm0

; 408  :   m11 = proj[1][1];

  00045	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0005d	f3 0f 11 45 ec	 movss	 DWORD PTR _m11$[ebp], xmm0

; 409  :   m20 = proj[2][0];

  00062	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00067	d1 e0		 shl	 eax, 1
  00069	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  0006c	b9 04 00 00 00	 mov	 ecx, 4
  00071	6b d1 00	 imul	 edx, ecx, 0
  00074	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00079	f3 0f 11 45 e0	 movss	 DWORD PTR _m20$[ebp], xmm0

; 410  :   m21 = proj[2][1];

  0007e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00083	d1 e0		 shl	 eax, 1
  00085	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  00088	b9 04 00 00 00	 mov	 ecx, 4
  0008d	c1 e1 00	 shl	 ecx, 0
  00090	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00095	f3 0f 11 45 d4	 movss	 DWORD PTR _m21$[ebp], xmm0

; 411  :   m22 = proj[2][2];

  0009a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0009f	d1 e0		 shl	 eax, 1
  000a1	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  000a4	b9 04 00 00 00	 mov	 ecx, 4
  000a9	d1 e1		 shl	 ecx, 1
  000ab	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000b0	f3 0f 11 45 c8	 movss	 DWORD PTR _m22$[ebp], xmm0

; 412  :   m32 = proj[3][2];

  000b5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ba	6b c8 03	 imul	 ecx, eax, 3
  000bd	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  000c0	ba 04 00 00 00	 mov	 edx, 4
  000c5	d1 e2		 shl	 edx, 1
  000c7	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000cc	f3 0f 11 45 bc	 movss	 DWORD PTR _m32$[ebp], xmm0

; 413  : 
; 414  :   n = m32 / (m22 - 1.0f);

  000d1	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _m22$[ebp]
  000d6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000de	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _m32$[ebp]
  000e3	f3 0f 5e c8	 divss	 xmm1, xmm0
  000e7	f3 0f 11 4d b0	 movss	 DWORD PTR _n$[ebp], xmm1

; 415  :   f = m32 / (m22 + 1.0f);

  000ec	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _m22$[ebp]
  000f1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000f9	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _m32$[ebp]
  000fe	f3 0f 5e c8	 divss	 xmm1, xmm0
  00102	f3 0f 11 4d a4	 movss	 DWORD PTR _f$[ebp], xmm1

; 416  : 
; 417  :   n_m11 = n / m11;

  00107	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _n$[ebp]
  0010c	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _m11$[ebp]
  00111	f3 0f 11 45 98	 movss	 DWORD PTR _n_m11$[ebp], xmm0

; 418  :   n_m00 = n / m00;

  00116	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _n$[ebp]
  0011b	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _m00$[ebp]
  00120	f3 0f 11 45 8c	 movss	 DWORD PTR _n_m00$[ebp], xmm0

; 419  : 
; 420  :   *nearVal = n;

  00125	8b 45 0c	 mov	 eax, DWORD PTR _nearVal$[ebp]
  00128	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _n$[ebp]
  0012d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 421  :   *farVal  = f;

  00131	8b 45 10	 mov	 eax, DWORD PTR _farVal$[ebp]
  00134	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _f$[ebp]
  00139	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 422  :   *bottom  = n_m11 * (m21 - 1.0f);

  0013d	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _m21$[ebp]
  00142	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0014a	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _n_m11$[ebp]
  0014f	8b 45 18	 mov	 eax, DWORD PTR _bottom$[ebp]
  00152	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 423  :   *top     = n_m11 * (m21 + 1.0f);

  00156	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _m21$[ebp]
  0015b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00163	f3 0f 59 45 98	 mulss	 xmm0, DWORD PTR _n_m11$[ebp]
  00168	8b 45 14	 mov	 eax, DWORD PTR _top$[ebp]
  0016b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 424  :   *left    = n_m00 * (m20 - 1.0f);

  0016f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _m20$[ebp]
  00174	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0017c	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _n_m00$[ebp]
  00181	8b 45 1c	 mov	 eax, DWORD PTR _left$[ebp]
  00184	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 425  :   *right   = n_m00 * (m20 + 1.0f);

  00188	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _m20$[ebp]
  0018d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00195	f3 0f 59 45 8c	 mulss	 xmm0, DWORD PTR _n_m00$[ebp]
  0019a	8b 45 20	 mov	 eax, DWORD PTR _right$[ebp]
  0019d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 426  : }

  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	81 c4 38 01 00
	00		 add	 esp, 312		; 00000138H
  001aa	3b ec		 cmp	 ebp, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b1	8b e5		 mov	 esp, ebp
  001b3	5d		 pop	 ebp
  001b4	c3		 ret	 0
_glm_persp_decomp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_look_anyup
_TEXT	SEGMENT
_up$ = -24						; size = 12
__$ArrayPad$ = -4					; size = 4
_eye$ = 8						; size = 4
_dir$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_look_anyup PROC					; COMDAT

; 381  : glm_look_anyup(vec3 eye, vec3 dir, mat4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00024	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 382  :   CGLM_ALIGN(8) vec3 up;
; 383  :   glm_vec3_ortho(dir, up);

  00044	8d 45 e8	 lea	 eax, DWORD PTR _up$[ebp]
  00047	50		 push	 eax
  00048	8b 4b 0c	 mov	 ecx, DWORD PTR _dir$[ebx]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _glm_vec3_ortho
  00051	83 c4 08	 add	 esp, 8

; 384  :   glm_look(eye, dir, up, dest);

  00054	8b 43 10	 mov	 eax, DWORD PTR _dest$[ebx]
  00057	50		 push	 eax
  00058	8d 4d e8	 lea	 ecx, DWORD PTR _up$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 53 0c	 mov	 edx, DWORD PTR _dir$[ebx]
  0005f	52		 push	 edx
  00060	8b 43 08	 mov	 eax, DWORD PTR _eye$[ebx]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _glm_look
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 385  : }

  0006c	52		 push	 edx
  0006d	8b cd		 mov	 ecx, ebp
  0006f	50		 push	 eax
  00070	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_look_a
  00076	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007b	58		 pop	 eax
  0007c	5a		 pop	 edx
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	33 cd		 xor	 ecx, ebp
  00084	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	8b e3		 mov	 esp, ebx
  0008e	5b		 pop	 ebx
  0008f	c3		 ret	 0
$LN5@glm_look_a:
  00090	01 00 00 00	 DD	 1
  00094	00 00 00 00	 DD	 $LN4@glm_look_a
$LN4@glm_look_a:
  00098	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0009c	0c 00 00 00	 DD	 12			; 0000000cH
  000a0	00 00 00 00	 DD	 $LN3@glm_look_a
$LN3@glm_look_a:
  000a4	75		 DB	 117			; 00000075H
  000a5	70		 DB	 112			; 00000070H
  000a6	00		 DB	 0
_glm_look_anyup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_look
_TEXT	SEGMENT
_target$ = -24						; size = 12
__$ArrayPad$ = -4					; size = 4
_eye$ = 8						; size = 4
_dir$ = 12						; size = 4
_up$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_look PROC						; COMDAT

; 363  : glm_look(vec3 eye, vec3 dir, vec3 up, mat4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00024	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 364  :   CGLM_ALIGN(8) vec3 target;
; 365  :   glm_vec3_add(eye, dir, target);

  00044	8d 45 e8	 lea	 eax, DWORD PTR _target$[ebp]
  00047	50		 push	 eax
  00048	8b 4b 0c	 mov	 ecx, DWORD PTR _dir$[ebx]
  0004b	51		 push	 ecx
  0004c	8b 53 08	 mov	 edx, DWORD PTR _eye$[ebx]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 _glm_vec3_add
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 366  :   glm_lookat(eye, target, up, dest);

  00058	8b 43 14	 mov	 eax, DWORD PTR _dest$[ebx]
  0005b	50		 push	 eax
  0005c	8b 4b 10	 mov	 ecx, DWORD PTR _up$[ebx]
  0005f	51		 push	 ecx
  00060	8d 55 e8	 lea	 edx, DWORD PTR _target$[ebp]
  00063	52		 push	 edx
  00064	8b 43 08	 mov	 eax, DWORD PTR _eye$[ebx]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 _glm_lookat
  0006d	83 c4 10	 add	 esp, 16			; 00000010H

; 367  : }

  00070	52		 push	 edx
  00071	8b cd		 mov	 ecx, ebp
  00073	50		 push	 eax
  00074	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_look
  0007a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007f	58		 pop	 eax
  00080	5a		 pop	 edx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	33 cd		 xor	 ecx, ebp
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	8b e3		 mov	 esp, ebx
  00092	5b		 pop	 ebx
  00093	c3		 ret	 0
$LN5@glm_look:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN4@glm_look
$LN4@glm_look:
  0009c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000a0	0c 00 00 00	 DD	 12			; 0000000cH
  000a4	00 00 00 00	 DD	 $LN3@glm_look
$LN3@glm_look:
  000a8	74		 DB	 116			; 00000074H
  000a9	61		 DB	 97			; 00000061H
  000aa	72		 DB	 114			; 00000072H
  000ab	67		 DB	 103			; 00000067H
  000ac	65		 DB	 101			; 00000065H
  000ad	74		 DB	 116			; 00000074H
  000ae	00		 DB	 0
_glm_look ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_lookat
_TEXT	SEGMENT
tv263 = -272						; size = 4
tv255 = -272						; size = 4
_s$ = -72						; size = 12
_u$ = -48						; size = 12
_f$ = -24						; size = 12
__$ArrayPad$ = -4					; size = 4
_eye$ = 8						; size = 4
_center$ = 12						; size = 4
_up$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_lookat PROC					; COMDAT

; 322  : glm_lookat(vec3 eye, vec3 center, vec3 up, mat4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00024	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 323  :   CGLM_ALIGN(8) vec3 f, u, s;
; 324  : 
; 325  :   glm_vec3_sub(center, eye, f);

  00044	8d 45 e8	 lea	 eax, DWORD PTR _f$[ebp]
  00047	50		 push	 eax
  00048	8b 4b 08	 mov	 ecx, DWORD PTR _eye$[ebx]
  0004b	51		 push	 ecx
  0004c	8b 53 0c	 mov	 edx, DWORD PTR _center$[ebx]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 _glm_vec3_sub
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 326  :   glm_vec3_normalize(f);

  00058	8d 45 e8	 lea	 eax, DWORD PTR _f$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 _glm_vec3_normalize
  00061	83 c4 04	 add	 esp, 4

; 327  : 
; 328  :   glm_vec3_crossn(f, up, s);

  00064	8d 45 b8	 lea	 eax, DWORD PTR _s$[ebp]
  00067	50		 push	 eax
  00068	8b 4b 10	 mov	 ecx, DWORD PTR _up$[ebx]
  0006b	51		 push	 ecx
  0006c	8d 55 e8	 lea	 edx, DWORD PTR _f$[ebp]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 _glm_vec3_crossn
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH

; 329  :   glm_vec3_cross(s, f, u);

  00078	8d 45 d0	 lea	 eax, DWORD PTR _u$[ebp]
  0007b	50		 push	 eax
  0007c	8d 4d e8	 lea	 ecx, DWORD PTR _f$[ebp]
  0007f	51		 push	 ecx
  00080	8d 55 b8	 lea	 edx, DWORD PTR _s$[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 _glm_vec3_cross
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH

; 330  : 
; 331  :   dest[0][0] = s[0];

  0008c	b8 04 00 00 00	 mov	 eax, 4
  00091	6b c8 00	 imul	 ecx, eax, 0
  00094	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00099	6b c2 00	 imul	 eax, edx, 0
  0009c	03 43 14	 add	 eax, DWORD PTR _dest$[ebx]
  0009f	ba 04 00 00 00	 mov	 edx, 4
  000a4	6b d2 00	 imul	 edx, edx, 0
  000a7	8b 4c 0d b8	 mov	 ecx, DWORD PTR _s$[ebp+ecx]
  000ab	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 332  :   dest[0][1] = u[0];

  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	6b c8 00	 imul	 ecx, eax, 0
  000b6	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000bb	6b c2 00	 imul	 eax, edx, 0
  000be	03 43 14	 add	 eax, DWORD PTR _dest$[ebx]
  000c1	ba 04 00 00 00	 mov	 edx, 4
  000c6	c1 e2 00	 shl	 edx, 0
  000c9	8b 4c 0d d0	 mov	 ecx, DWORD PTR _u$[ebp+ecx]
  000cd	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 333  :   dest[0][2] =-f[0];

  000d0	b8 04 00 00 00	 mov	 eax, 4
  000d5	6b c8 00	 imul	 ecx, eax, 0
  000d8	f3 0f 10 44 0d
	e8		 movss	 xmm0, DWORD PTR _f$[ebp+ecx]
  000de	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e5	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000ea	6b c2 00	 imul	 eax, edx, 0
  000ed	03 43 14	 add	 eax, DWORD PTR _dest$[ebx]
  000f0	b9 04 00 00 00	 mov	 ecx, 4
  000f5	d1 e1		 shl	 ecx, 1
  000f7	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 334  :   dest[1][0] = s[1];

  000fc	b8 04 00 00 00	 mov	 eax, 4
  00101	c1 e0 00	 shl	 eax, 0
  00104	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00109	c1 e1 00	 shl	 ecx, 0
  0010c	03 4b 14	 add	 ecx, DWORD PTR _dest$[ebx]
  0010f	ba 04 00 00 00	 mov	 edx, 4
  00114	6b d2 00	 imul	 edx, edx, 0
  00117	8b 44 05 b8	 mov	 eax, DWORD PTR _s$[ebp+eax]
  0011b	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 335  :   dest[1][1] = u[1];

  0011e	b8 04 00 00 00	 mov	 eax, 4
  00123	c1 e0 00	 shl	 eax, 0
  00126	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0012b	c1 e1 00	 shl	 ecx, 0
  0012e	03 4b 14	 add	 ecx, DWORD PTR _dest$[ebx]
  00131	ba 04 00 00 00	 mov	 edx, 4
  00136	c1 e2 00	 shl	 edx, 0
  00139	8b 44 05 d0	 mov	 eax, DWORD PTR _u$[ebp+eax]
  0013d	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 336  :   dest[1][2] =-f[1];

  00140	b8 04 00 00 00	 mov	 eax, 4
  00145	c1 e0 00	 shl	 eax, 0
  00148	f3 0f 10 44 05
	e8		 movss	 xmm0, DWORD PTR _f$[ebp+eax]
  0014e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00155	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0015a	c1 e1 00	 shl	 ecx, 0
  0015d	03 4b 14	 add	 ecx, DWORD PTR _dest$[ebx]
  00160	ba 04 00 00 00	 mov	 edx, 4
  00165	d1 e2		 shl	 edx, 1
  00167	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 337  :   dest[2][0] = s[2];

  0016c	b8 04 00 00 00	 mov	 eax, 4
  00171	d1 e0		 shl	 eax, 1
  00173	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00178	d1 e1		 shl	 ecx, 1
  0017a	03 4b 14	 add	 ecx, DWORD PTR _dest$[ebx]
  0017d	ba 04 00 00 00	 mov	 edx, 4
  00182	6b d2 00	 imul	 edx, edx, 0
  00185	8b 44 05 b8	 mov	 eax, DWORD PTR _s$[ebp+eax]
  00189	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 338  :   dest[2][1] = u[2];

  0018c	b8 04 00 00 00	 mov	 eax, 4
  00191	d1 e0		 shl	 eax, 1
  00193	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00198	d1 e1		 shl	 ecx, 1
  0019a	03 4b 14	 add	 ecx, DWORD PTR _dest$[ebx]
  0019d	ba 04 00 00 00	 mov	 edx, 4
  001a2	c1 e2 00	 shl	 edx, 0
  001a5	8b 44 05 d0	 mov	 eax, DWORD PTR _u$[ebp+eax]
  001a9	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 339  :   dest[2][2] =-f[2];

  001ac	b8 04 00 00 00	 mov	 eax, 4
  001b1	d1 e0		 shl	 eax, 1
  001b3	f3 0f 10 44 05
	e8		 movss	 xmm0, DWORD PTR _f$[ebp+eax]
  001b9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001c0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001c5	d1 e1		 shl	 ecx, 1
  001c7	03 4b 14	 add	 ecx, DWORD PTR _dest$[ebx]
  001ca	ba 04 00 00 00	 mov	 edx, 4
  001cf	d1 e2		 shl	 edx, 1
  001d1	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 340  :   dest[3][0] =-glm_vec3_dot(s, eye);

  001d6	8b 43 08	 mov	 eax, DWORD PTR _eye$[ebx]
  001d9	50		 push	 eax
  001da	8d 4d b8	 lea	 ecx, DWORD PTR _s$[ebp]
  001dd	51		 push	 ecx
  001de	e8 00 00 00 00	 call	 _glm_vec3_dot
  001e3	83 c4 08	 add	 esp, 8
  001e6	d9 9d f0 fe ff
	ff		 fstp	 DWORD PTR tv255[ebp]
  001ec	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv255[ebp]
  001f4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001fb	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00200	6b c2 03	 imul	 eax, edx, 3
  00203	03 43 14	 add	 eax, DWORD PTR _dest$[ebx]
  00206	b9 04 00 00 00	 mov	 ecx, 4
  0020b	6b d1 00	 imul	 edx, ecx, 0
  0020e	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 341  :   dest[3][1] =-glm_vec3_dot(u, eye);

  00213	8b 43 08	 mov	 eax, DWORD PTR _eye$[ebx]
  00216	50		 push	 eax
  00217	8d 4d d0	 lea	 ecx, DWORD PTR _u$[ebp]
  0021a	51		 push	 ecx
  0021b	e8 00 00 00 00	 call	 _glm_vec3_dot
  00220	83 c4 08	 add	 esp, 8
  00223	d9 9d f0 fe ff
	ff		 fstp	 DWORD PTR tv263[ebp]
  00229	f3 0f 10 85 f0
	fe ff ff	 movss	 xmm0, DWORD PTR tv263[ebp]
  00231	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00238	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0023d	6b c2 03	 imul	 eax, edx, 3
  00240	03 43 14	 add	 eax, DWORD PTR _dest$[ebx]
  00243	b9 04 00 00 00	 mov	 ecx, 4
  00248	c1 e1 00	 shl	 ecx, 0
  0024b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 342  :   dest[3][2] = glm_vec3_dot(f, eye);

  00250	8b 43 08	 mov	 eax, DWORD PTR _eye$[ebx]
  00253	50		 push	 eax
  00254	8d 4d e8	 lea	 ecx, DWORD PTR _f$[ebp]
  00257	51		 push	 ecx
  00258	e8 00 00 00 00	 call	 _glm_vec3_dot
  0025d	83 c4 08	 add	 esp, 8
  00260	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00265	6b c2 03	 imul	 eax, edx, 3
  00268	03 43 14	 add	 eax, DWORD PTR _dest$[ebx]
  0026b	b9 04 00 00 00	 mov	 ecx, 4
  00270	d1 e1		 shl	 ecx, 1
  00272	d9 1c 08	 fstp	 DWORD PTR [eax+ecx]

; 343  :   dest[0][3] = dest[1][3] = dest[2][3] = 0.0f;

  00275	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0027a	d1 e0		 shl	 eax, 1
  0027c	03 43 14	 add	 eax, DWORD PTR _dest$[ebx]
  0027f	b9 04 00 00 00	 mov	 ecx, 4
  00284	6b d1 03	 imul	 edx, ecx, 3
  00287	0f 57 c0	 xorps	 xmm0, xmm0
  0028a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  0028f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00294	c1 e0 00	 shl	 eax, 0
  00297	03 43 14	 add	 eax, DWORD PTR _dest$[ebx]
  0029a	b9 04 00 00 00	 mov	 ecx, 4
  0029f	6b d1 03	 imul	 edx, ecx, 3
  002a2	0f 57 c0	 xorps	 xmm0, xmm0
  002a5	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  002aa	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002af	6b c8 00	 imul	 ecx, eax, 0
  002b2	03 4b 14	 add	 ecx, DWORD PTR _dest$[ebx]
  002b5	ba 04 00 00 00	 mov	 edx, 4
  002ba	6b c2 03	 imul	 eax, edx, 3
  002bd	0f 57 c0	 xorps	 xmm0, xmm0
  002c0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 344  :   dest[3][3] = 1.0f;

  002c5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002ca	6b c8 03	 imul	 ecx, eax, 3
  002cd	03 4b 14	 add	 ecx, DWORD PTR _dest$[ebx]
  002d0	ba 04 00 00 00	 mov	 edx, 4
  002d5	6b c2 03	 imul	 eax, edx, 3
  002d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002e0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 345  : }

  002e5	52		 push	 edx
  002e6	8b cd		 mov	 ecx, ebp
  002e8	50		 push	 eax
  002e9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@glm_lookat
  002ef	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002f4	58		 pop	 eax
  002f5	5a		 pop	 edx
  002f6	5f		 pop	 edi
  002f7	5e		 pop	 esi
  002f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002fb	33 cd		 xor	 ecx, ebp
  002fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00302	8b e5		 mov	 esp, ebp
  00304	5d		 pop	 ebp
  00305	8b e3		 mov	 esp, ebx
  00307	5b		 pop	 ebx
  00308	c3		 ret	 0
  00309	0f 1f 00	 npad	 3
$LN7@glm_lookat:
  0030c	03 00 00 00	 DD	 3
  00310	00 00 00 00	 DD	 $LN6@glm_lookat
$LN6@glm_lookat:
  00314	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00318	0c 00 00 00	 DD	 12			; 0000000cH
  0031c	00 00 00 00	 DD	 $LN3@glm_lookat
  00320	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00324	0c 00 00 00	 DD	 12			; 0000000cH
  00328	00 00 00 00	 DD	 $LN4@glm_lookat
  0032c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00330	0c 00 00 00	 DD	 12			; 0000000cH
  00334	00 00 00 00	 DD	 $LN5@glm_lookat
$LN5@glm_lookat:
  00338	73		 DB	 115			; 00000073H
  00339	00		 DB	 0
$LN4@glm_lookat:
  0033a	75		 DB	 117			; 00000075H
  0033b	00		 DB	 0
$LN3@glm_lookat:
  0033c	66		 DB	 102			; 00000066H
  0033d	00		 DB	 0
_glm_lookat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_perspective_resize
_TEXT	SEGMENT
_aspect$ = 8						; size = 4
_proj$ = 12						; size = 4
_glm_perspective_resize PROC				; COMDAT

; 302  : glm_perspective_resize(float aspect, mat4 proj) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 303  :   if (proj[0][0] == 0.0f)

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 0c	 add	 ecx, DWORD PTR _proj$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00047	9f		 lahf
  00048	f6 c4 44	 test	 ah, 68			; 00000044H
  0004b	7a 02		 jp	 SHORT $LN2@glm_perspe

; 304  :     return;

  0004d	eb 35		 jmp	 SHORT $LN1@glm_perspe
$LN2@glm_perspe:

; 305  : 
; 306  :   proj[0][0] = proj[1][1] / aspect;

  0004f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00054	c1 e0 00	 shl	 eax, 0
  00057	03 45 0c	 add	 eax, DWORD PTR _proj$[ebp]
  0005a	b9 04 00 00 00	 mov	 ecx, 4
  0005f	c1 e1 00	 shl	 ecx, 0
  00062	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00067	f3 0f 5e 45 08	 divss	 xmm0, DWORD PTR _aspect$[ebp]
  0006c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00071	6b c2 00	 imul	 eax, edx, 0
  00074	03 45 0c	 add	 eax, DWORD PTR _proj$[ebp]
  00077	b9 04 00 00 00	 mov	 ecx, 4
  0007c	6b d1 00	 imul	 edx, ecx, 0
  0007f	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
$LN1@glm_perspe:

; 307  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_glm_perspective_resize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_perspective_default
_TEXT	SEGMENT
_aspect$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_perspective_default PROC				; COMDAT

; 288  : glm_perspective_default(float aspect, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 289  :   glm_perspective(GLM_PI_4f, aspect, 0.01f, 100.0f, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003a	51		 push	 ecx
  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	51		 push	 ecx
  00049	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	51		 push	 ecx
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	e8 00 00 00 00	 call	 _glm_perspective
  00066	83 c4 14	 add	 esp, 20			; 00000014H

; 290  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_glm_perspective_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_persp_move_far
_TEXT	SEGMENT
_p32$ = -56						; size = 4
_p22$ = -44						; size = 4
_nearVal$ = -32						; size = 4
_farVal$ = -20						; size = 4
_fn$ = -8						; size = 4
_proj$ = 8						; size = 4
_deltaFar$ = 12						; size = 4
_glm_persp_move_far PROC				; COMDAT

; 265  : glm_persp_move_far(mat4 proj, float deltaFar) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 266  :   float fn, farVal, nearVal, p22, p32;
; 267  : 
; 268  :   p22        = proj[2][2];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	d1 e0		 shl	 eax, 1
  0002f	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  00032	b9 04 00 00 00	 mov	 ecx, 4
  00037	d1 e1		 shl	 ecx, 1
  00039	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0003e	f3 0f 11 45 d4	 movss	 DWORD PTR _p22$[ebp], xmm0

; 269  :   p32        = proj[3][2];

  00043	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00048	6b c8 03	 imul	 ecx, eax, 3
  0004b	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  0004e	ba 04 00 00 00	 mov	 edx, 4
  00053	d1 e2		 shl	 edx, 1
  00055	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0005a	f3 0f 11 45 c8	 movss	 DWORD PTR _p32$[ebp], xmm0

; 270  : 
; 271  :   nearVal    = p32 / (p22 - 1.0f);

  0005f	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _p22$[ebp]
  00064	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0006c	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _p32$[ebp]
  00071	f3 0f 5e c8	 divss	 xmm1, xmm0
  00075	f3 0f 11 4d e0	 movss	 DWORD PTR _nearVal$[ebp], xmm1

; 272  :   farVal     = p32 / (p22 + 1.0f) + deltaFar;

  0007a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _p22$[ebp]
  0007f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00087	f3 0f 10 4d c8	 movss	 xmm1, DWORD PTR _p32$[ebp]
  0008c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00090	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _deltaFar$[ebp]
  00095	f3 0f 11 4d ec	 movss	 DWORD PTR _farVal$[ebp], xmm1

; 273  :   fn         = 1.0f / (nearVal - farVal);

  0009a	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _nearVal$[ebp]
  0009f	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _farVal$[ebp]
  000a4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  000ac	f3 0f 5e c8	 divss	 xmm1, xmm0
  000b0	f3 0f 11 4d f8	 movss	 DWORD PTR _fn$[ebp], xmm1

; 274  : 
; 275  :   proj[2][2] = (nearVal + farVal) * fn;

  000b5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _nearVal$[ebp]
  000ba	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _farVal$[ebp]
  000bf	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  000c4	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000c9	d1 e0		 shl	 eax, 1
  000cb	03 45 08	 add	 eax, DWORD PTR _proj$[ebp]
  000ce	b9 04 00 00 00	 mov	 ecx, 4
  000d3	d1 e1		 shl	 ecx, 1
  000d5	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 276  :   proj[3][2] = 2.0f * nearVal * farVal * fn;

  000da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000e2	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _nearVal$[ebp]
  000e7	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _farVal$[ebp]
  000ec	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  000f1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000f6	6b c8 03	 imul	 ecx, eax, 3
  000f9	03 4d 08	 add	 ecx, DWORD PTR _proj$[ebp]
  000fc	ba 04 00 00 00	 mov	 edx, 4
  00101	d1 e2		 shl	 edx, 1
  00103	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 277  : }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00111	3b ec		 cmp	 ebp, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
_glm_persp_move_far ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_perspective
_TEXT	SEGMENT
tv138 = -220						; size = 4
_fn$ = -20						; size = 4
_f$ = -8						; size = 4
_fovy$ = 8						; size = 4
_aspect$ = 12						; size = 4
_nearVal$ = 16						; size = 4
_farVal$ = 20						; size = 4
_dest$ = 24						; size = 4
_glm_perspective PROC					; COMDAT

; 240  :                 mat4  dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 241  :   float f, fn;
; 242  : 
; 243  :   glm_mat4_zero(dest);

  00028	8b 45 18	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_zero
  00031	83 c4 04	 add	 esp, 4

; 244  : 
; 245  :   f  = 1.0f / tanf(fovy * 0.5f);

  00034	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fovy$[ebp]
  00039	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00041	51		 push	 ecx
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	e8 00 00 00 00	 call	 _tanf
  0004c	83 c4 04	 add	 esp, 4
  0004f	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv138[ebp]
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 5e 85 24
	ff ff ff	 divss	 xmm0, DWORD PTR tv138[ebp]
  00065	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 246  :   fn = 1.0f / (nearVal - farVal);

  0006a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _nearVal$[ebp]
  0006f	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _farVal$[ebp]
  00074	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0007c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00080	f3 0f 11 4d ec	 movss	 DWORD PTR _fn$[ebp], xmm1

; 247  : 
; 248  :   dest[0][0] = f / aspect;

  00085	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  0008a	f3 0f 5e 45 0c	 divss	 xmm0, DWORD PTR _aspect$[ebp]
  0008f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00094	6b c8 00	 imul	 ecx, eax, 0
  00097	03 4d 18	 add	 ecx, DWORD PTR _dest$[ebp]
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	6b c2 00	 imul	 eax, edx, 0
  000a2	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 249  :   dest[1][1] = f;

  000a7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ac	c1 e0 00	 shl	 eax, 0
  000af	03 45 18	 add	 eax, DWORD PTR _dest$[ebp]
  000b2	b9 04 00 00 00	 mov	 ecx, 4
  000b7	c1 e1 00	 shl	 ecx, 0
  000ba	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  000bf	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 250  :   dest[2][2] = (nearVal + farVal) * fn;

  000c4	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _nearVal$[ebp]
  000c9	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR _farVal$[ebp]
  000ce	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  000d3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d8	d1 e0		 shl	 eax, 1
  000da	03 45 18	 add	 eax, DWORD PTR _dest$[ebp]
  000dd	b9 04 00 00 00	 mov	 ecx, 4
  000e2	d1 e1		 shl	 ecx, 1
  000e4	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 251  :   dest[2][3] =-1.0f;

  000e9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ee	d1 e0		 shl	 eax, 1
  000f0	03 45 18	 add	 eax, DWORD PTR _dest$[ebp]
  000f3	b9 04 00 00 00	 mov	 ecx, 4
  000f8	6b d1 03	 imul	 edx, ecx, 3
  000fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00103	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 252  :   dest[3][2] = 2.0f * nearVal * farVal * fn;

  00108	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00110	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _nearVal$[ebp]
  00115	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _farVal$[ebp]
  0011a	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  0011f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00124	6b c8 03	 imul	 ecx, eax, 3
  00127	03 4d 18	 add	 ecx, DWORD PTR _dest$[ebp]
  0012a	ba 04 00 00 00	 mov	 edx, 4
  0012f	d1 e2		 shl	 edx, 1
  00131	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 253  : }

  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	5b		 pop	 ebx
  00139	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0013f	3b ec		 cmp	 ebp, esp
  00141	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00146	8b e5		 mov	 esp, ebp
  00148	5d		 pop	 ebp
  00149	c3		 ret	 0
_glm_perspective ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_ortho_default_s
_TEXT	SEGMENT
_aspect$ = 8						; size = 4
_size$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_ortho_default_s PROC				; COMDAT

; 204  : glm_ortho_default_s(float aspect, float size, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 205  :   if (aspect >= 1.0f) {

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  0002d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00034	72 7f		 jb	 SHORT $LN2@glm_ortho_

; 206  :     glm_ortho(-size * aspect,

  00036	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00039	50		 push	 eax
  0003a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  0003f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42c80000
  00047	51		 push	 ecx
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  00052	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00059	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000
  00061	51		 push	 ecx
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	51		 push	 ecx
  00068	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  00077	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0007e	51		 push	 ecx
  0007f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00084	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  00089	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _aspect$[ebp]
  0008e	51		 push	 ecx
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  00099	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000a0	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _aspect$[ebp]
  000a5	51		 push	 ecx
  000a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ab	e8 00 00 00 00	 call	 _glm_ortho
  000b0	83 c4 1c	 add	 esp, 28			; 0000001cH

; 207  :                size * aspect,
; 208  :               -size,
; 209  :                size,
; 210  :               -size - 100.0f,
; 211  :                size + 100.0f,
; 212  :                dest);
; 213  :     return;

  000b3	eb 7d		 jmp	 SHORT $LN1@glm_ortho_
$LN2@glm_ortho_:

; 214  :   }
; 215  : 
; 216  :   glm_ortho(-size,

  000b5	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000b8	50		 push	 eax
  000b9	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  000be	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42c80000
  000c6	51		 push	 ecx
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  000d1	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000d8	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000
  000e0	51		 push	 ecx
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  000eb	f3 0f 5e 45 08	 divss	 xmm0, DWORD PTR _aspect$[ebp]
  000f0	51		 push	 ecx
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  000fb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00102	f3 0f 5e 45 08	 divss	 xmm0, DWORD PTR _aspect$[ebp]
  00107	51		 push	 ecx
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _size$[ebp]
  0011d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00124	51		 push	 ecx
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	e8 00 00 00 00	 call	 _glm_ortho
  0012f	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@glm_ortho_:

; 217  :              size,
; 218  :             -size / aspect,
; 219  :              size / aspect,
; 220  :             -size - 100.0f,
; 221  :              size + 100.0f,
; 222  :              dest);
; 223  : }

  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx
  00135	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0013b	3b ec		 cmp	 ebp, esp
  0013d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
_glm_ortho_default_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_ortho_default
_TEXT	SEGMENT
_aspect$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_ortho_default PROC					; COMDAT

; 184  : glm_ortho_default(float aspect, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  :   if (aspect >= 1.0f) {

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  0002d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00034	72 63		 jb	 SHORT $LN2@glm_ortho_

; 186  :     glm_ortho(-aspect, aspect, -1.0f, 1.0f, -100.0f, 100.0f, dest);

  00036	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00039	50		 push	 eax
  0003a	51		 push	 ecx
  0003b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	51		 push	 ecx
  00049	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2c80000
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	51		 push	 ecx
  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00064	51		 push	 ecx
  00065	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	51		 push	 ecx
  00073	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  00082	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00089	51		 push	 ecx
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	e8 00 00 00 00	 call	 _glm_ortho
  00094	83 c4 1c	 add	 esp, 28			; 0000001cH

; 187  :     return;

  00097	eb 73		 jmp	 SHORT $LN1@glm_ortho_
$LN2@glm_ortho_:

; 188  :   }
; 189  : 
; 190  :   aspect = 1.0f / aspect;

  00099	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a1	f3 0f 5e 45 08	 divss	 xmm0, DWORD PTR _aspect$[ebp]
  000a6	f3 0f 11 45 08	 movss	 DWORD PTR _aspect$[ebp], xmm0

; 191  : 
; 192  :   glm_ortho(-1.0f, 1.0f, -aspect, aspect, -100.0f, 100.0f, dest);

  000ab	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  000ae	50		 push	 eax
  000af	51		 push	 ecx
  000b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bd	51		 push	 ecx
  000be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2c80000
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	51		 push	 ecx
  000cc	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _aspect$[ebp]
  000db	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e2	51		 push	 ecx
  000e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e8	51		 push	 ecx
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	51		 push	 ecx
  000f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	e8 00 00 00 00	 call	 _glm_ortho
  00109	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN1@glm_ortho_:

; 193  : }

  0010c	5f		 pop	 edi
  0010d	5e		 pop	 esi
  0010e	5b		 pop	 ebx
  0010f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00115	3b ec		 cmp	 ebp, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
_glm_ortho_default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_ortho_aabb_pz
_TEXT	SEGMENT
_box$ = 8						; size = 4
_padding$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_ortho_aabb_pz PROC					; COMDAT

; 169  : glm_ortho_aabb_pz(vec3 box[2], float padding, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 170  :   glm_ortho(box[0][0],              box[1][0],

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00031	6b d1 00	 imul	 edx, ecx, 0
  00034	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  00037	b8 04 00 00 00	 mov	 eax, 4
  0003c	d1 e0		 shl	 eax, 1
  0003e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00043	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _padding$[ebp]
  00048	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0004f	51		 push	 ecx
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0005a	c1 e1 00	 shl	 ecx, 0
  0005d	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00060	ba 04 00 00 00	 mov	 edx, 4
  00065	d1 e2		 shl	 edx, 1
  00067	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0006c	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _padding$[ebp]
  00071	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00078	51		 push	 ecx
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00083	c1 e0 00	 shl	 eax, 0
  00086	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00089	b9 04 00 00 00	 mov	 ecx, 4
  0008e	c1 e1 00	 shl	 ecx, 0
  00091	51		 push	 ecx
  00092	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00097	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000a1	6b c2 00	 imul	 eax, edx, 0
  000a4	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  000a7	b9 04 00 00 00	 mov	 ecx, 4
  000ac	c1 e1 00	 shl	 ecx, 0
  000af	51		 push	 ecx
  000b0	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ba	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000bf	c1 e2 00	 shl	 edx, 0
  000c2	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  000c5	b8 04 00 00 00	 mov	 eax, 4
  000ca	6b c8 00	 imul	 ecx, eax, 0
  000cd	51		 push	 ecx
  000ce	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000dd	6b c2 00	 imul	 eax, edx, 0
  000e0	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  000e3	b9 04 00 00 00	 mov	 ecx, 4
  000e8	6b d1 00	 imul	 edx, ecx, 0
  000eb	51		 push	 ecx
  000ec	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	e8 00 00 00 00	 call	 _glm_ortho
  000fb	83 c4 1c	 add	 esp, 28			; 0000001cH

; 171  :             box[0][1],              box[1][1],
; 172  :           -(box[1][2] + padding), -(box[0][2] - padding),
; 173  :             dest);
; 174  : }

  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
_glm_ortho_aabb_pz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_ortho_aabb_p
_TEXT	SEGMENT
_box$ = 8						; size = 4
_padding$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_ortho_aabb_p PROC					; COMDAT

; 151  : glm_ortho_aabb_p(vec3 box[2], float padding, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 152  :   glm_ortho(box[0][0] - padding,    box[1][0] + padding,

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00031	6b d1 00	 imul	 edx, ecx, 0
  00034	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  00037	b8 04 00 00 00	 mov	 eax, 4
  0003c	d1 e0		 shl	 eax, 1
  0003e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00043	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _padding$[ebp]
  00048	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0004f	51		 push	 ecx
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0005a	c1 e1 00	 shl	 ecx, 0
  0005d	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  00060	ba 04 00 00 00	 mov	 edx, 4
  00065	d1 e2		 shl	 edx, 1
  00067	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0006c	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _padding$[ebp]
  00071	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00078	51		 push	 ecx
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00083	c1 e0 00	 shl	 eax, 0
  00086	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  00089	b9 04 00 00 00	 mov	 ecx, 4
  0008e	c1 e1 00	 shl	 ecx, 0
  00091	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00096	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _padding$[ebp]
  0009b	51		 push	 ecx
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000a6	6b c2 00	 imul	 eax, edx, 0
  000a9	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  000ac	b9 04 00 00 00	 mov	 ecx, 4
  000b1	c1 e1 00	 shl	 ecx, 0
  000b4	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000b9	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _padding$[ebp]
  000be	51		 push	 ecx
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000c9	c1 e2 00	 shl	 edx, 0
  000cc	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  000cf	b8 04 00 00 00	 mov	 eax, 4
  000d4	6b c8 00	 imul	 ecx, eax, 0
  000d7	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000dc	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _padding$[ebp]
  000e1	51		 push	 ecx
  000e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e7	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ec	6b c2 00	 imul	 eax, edx, 0
  000ef	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  000f2	b9 04 00 00 00	 mov	 ecx, 4
  000f7	6b d1 00	 imul	 edx, ecx, 0
  000fa	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000ff	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _padding$[ebp]
  00104	51		 push	 ecx
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	e8 00 00 00 00	 call	 _glm_ortho
  0010f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 153  :             box[0][1] - padding,    box[1][1] + padding,
; 154  :           -(box[1][2] + padding), -(box[0][2] - padding),
; 155  :             dest);
; 156  : }

  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
_glm_ortho_aabb_p ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_ortho_aabb
_TEXT	SEGMENT
_box$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_ortho_aabb PROC					; COMDAT

; 133  : glm_ortho_aabb(vec3 box[2], mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 134  :   glm_ortho(box[0][0],  box[1][0],

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00031	6b d1 00	 imul	 edx, ecx, 0
  00034	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  00037	b8 04 00 00 00	 mov	 eax, 4
  0003c	d1 e0		 shl	 eax, 1
  0003e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00043	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0004a	51		 push	 ecx
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00055	c1 e1 00	 shl	 ecx, 0
  00058	03 4d 08	 add	 ecx, DWORD PTR _box$[ebp]
  0005b	ba 04 00 00 00	 mov	 edx, 4
  00060	d1 e2		 shl	 edx, 1
  00062	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00067	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0006e	51		 push	 ecx
  0006f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00074	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00079	c1 e0 00	 shl	 eax, 0
  0007c	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  0007f	b9 04 00 00 00	 mov	 ecx, 4
  00084	c1 e1 00	 shl	 ecx, 0
  00087	51		 push	 ecx
  00088	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00097	6b c2 00	 imul	 eax, edx, 0
  0009a	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	c1 e1 00	 shl	 ecx, 0
  000a5	51		 push	 ecx
  000a6	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b0	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000b5	c1 e2 00	 shl	 edx, 0
  000b8	03 55 08	 add	 edx, DWORD PTR _box$[ebp]
  000bb	b8 04 00 00 00	 mov	 eax, 4
  000c0	6b c8 00	 imul	 ecx, eax, 0
  000c3	51		 push	 ecx
  000c4	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000d3	6b c2 00	 imul	 eax, edx, 0
  000d6	03 45 08	 add	 eax, DWORD PTR _box$[ebp]
  000d9	b9 04 00 00 00	 mov	 ecx, 4
  000de	6b d1 00	 imul	 edx, ecx, 0
  000e1	51		 push	 ecx
  000e2	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 _glm_ortho
  000f1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 135  :             box[0][1],  box[1][1],
; 136  :            -box[1][2], -box[0][2],
; 137  :             dest);
; 138  : }

  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx
  000f7	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000fd	3b ec		 cmp	 ebp, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_glm_ortho_aabb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_ortho
_TEXT	SEGMENT
_fn$ = -32						; size = 4
_tb$ = -20						; size = 4
_rl$ = -8						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_nearVal$ = 24						; size = 4
_farVal$ = 28						; size = 4
_dest$ = 32						; size = 4
_glm_ortho PROC						; COMDAT

; 105  :           mat4  dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 106  :   float rl, tb, fn;
; 107  : 
; 108  :   glm_mat4_zero(dest);

  00028	8b 45 20	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_zero
  00031	83 c4 04	 add	 esp, 4

; 109  : 
; 110  :   rl = 1.0f / (right  - left);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  00039	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _left$[ebp]
  0003e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00046	f3 0f 5e c8	 divss	 xmm1, xmm0
  0004a	f3 0f 11 4d f8	 movss	 DWORD PTR _rl$[ebp], xmm1

; 111  :   tb = 1.0f / (top    - bottom);

  0004f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00054	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bottom$[ebp]
  00059	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00061	f3 0f 5e c8	 divss	 xmm1, xmm0
  00065	f3 0f 11 4d ec	 movss	 DWORD PTR _tb$[ebp], xmm1

; 112  :   fn =-1.0f / (farVal - nearVal);

  0006a	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  0006f	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _nearVal$[ebp]
  00074	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0007c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00080	f3 0f 11 4d e0	 movss	 DWORD PTR _fn$[ebp], xmm1

; 113  : 
; 114  :   dest[0][0] = 2.0f * rl;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00092	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	6b c2 00	 imul	 eax, edx, 0
  000a5	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 115  :   dest[1][1] = 2.0f * tb;

  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000b2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  000b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000bc	c1 e0 00	 shl	 eax, 0
  000bf	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000c2	b9 04 00 00 00	 mov	 ecx, 4
  000c7	c1 e1 00	 shl	 ecx, 0
  000ca	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 116  :   dest[2][2] = 2.0f * fn;

  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000d7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  000dc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000e1	d1 e0		 shl	 eax, 1
  000e3	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000e6	b9 04 00 00 00	 mov	 ecx, 4
  000eb	d1 e1		 shl	 ecx, 1
  000ed	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 117  :   dest[3][0] =-(right  + left)    * rl;

  000f2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  000f7	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _left$[ebp]
  000fc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00103	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  00108	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0010d	6b c8 03	 imul	 ecx, eax, 3
  00110	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00113	ba 04 00 00 00	 mov	 edx, 4
  00118	6b c2 00	 imul	 eax, edx, 0
  0011b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 118  :   dest[3][1] =-(top    + bottom)  * tb;

  00120	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00125	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _bottom$[ebp]
  0012a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00131	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  00136	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013b	6b c8 03	 imul	 ecx, eax, 3
  0013e	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00141	ba 04 00 00 00	 mov	 edx, 4
  00146	c1 e2 00	 shl	 edx, 0
  00149	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 119  :   dest[3][2] = (farVal + nearVal) * fn;

  0014e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00153	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _nearVal$[ebp]
  00158	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  0015d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00162	6b c8 03	 imul	 ecx, eax, 3
  00165	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00168	ba 04 00 00 00	 mov	 edx, 4
  0016d	d1 e2		 shl	 edx, 1
  0016f	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 120  :   dest[3][3] = 1.0f;

  00174	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00179	6b c8 03	 imul	 ecx, eax, 3
  0017c	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  0017f	ba 04 00 00 00	 mov	 edx, 4
  00184	6b c2 03	 imul	 eax, edx, 3
  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0018f	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 121  : }

  00194	5f		 pop	 edi
  00195	5e		 pop	 esi
  00196	5b		 pop	 ebx
  00197	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_glm_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\cam.h
;	COMDAT _glm_frustum
_TEXT	SEGMENT
_nv$ = -44						; size = 4
_fn$ = -32						; size = 4
_tb$ = -20						; size = 4
_rl$ = -8						; size = 4
_left$ = 8						; size = 4
_right$ = 12						; size = 4
_bottom$ = 16						; size = 4
_top$ = 20						; size = 4
_nearVal$ = 24						; size = 4
_farVal$ = 28						; size = 4
_dest$ = 32						; size = 4
_glm_frustum PROC					; COMDAT

; 70   :             mat4  dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00012	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B1B2DC28_cam@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 71   :   float rl, tb, fn, nv;
; 72   : 
; 73   :   glm_mat4_zero(dest);

  00028	8b 45 20	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_zero
  00031	83 c4 04	 add	 esp, 4

; 74   : 
; 75   :   rl = 1.0f / (right  - left);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  00039	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _left$[ebp]
  0003e	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00046	f3 0f 5e c8	 divss	 xmm1, xmm0
  0004a	f3 0f 11 4d f8	 movss	 DWORD PTR _rl$[ebp], xmm1

; 76   :   tb = 1.0f / (top    - bottom);

  0004f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00054	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bottom$[ebp]
  00059	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00061	f3 0f 5e c8	 divss	 xmm1, xmm0
  00065	f3 0f 11 4d ec	 movss	 DWORD PTR _tb$[ebp], xmm1

; 77   :   fn =-1.0f / (farVal - nearVal);

  0006a	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  0006f	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _nearVal$[ebp]
  00074	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@bf800000
  0007c	f3 0f 5e c8	 divss	 xmm1, xmm0
  00080	f3 0f 11 4d e0	 movss	 DWORD PTR _fn$[ebp], xmm1

; 78   :   nv = 2.0f * nearVal;

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0008d	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _nearVal$[ebp]
  00092	f3 0f 11 45 d4	 movss	 DWORD PTR _nv$[ebp], xmm0

; 79   : 
; 80   :   dest[0][0] = nv * rl;

  00097	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _nv$[ebp]
  0009c	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  000a1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000a6	6b c8 00	 imul	 ecx, eax, 0
  000a9	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  000ac	ba 04 00 00 00	 mov	 edx, 4
  000b1	6b c2 00	 imul	 eax, edx, 0
  000b4	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 81   :   dest[1][1] = nv * tb;

  000b9	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _nv$[ebp]
  000be	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  000c3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000c8	c1 e0 00	 shl	 eax, 0
  000cb	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000ce	b9 04 00 00 00	 mov	 ecx, 4
  000d3	c1 e1 00	 shl	 ecx, 0
  000d6	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 82   :   dest[2][0] = (right  + left)    * rl;

  000db	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _right$[ebp]
  000e0	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _left$[ebp]
  000e5	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _rl$[ebp]
  000ea	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ef	d1 e0		 shl	 eax, 1
  000f1	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  000f4	b9 04 00 00 00	 mov	 ecx, 4
  000f9	6b d1 00	 imul	 edx, ecx, 0
  000fc	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 83   :   dest[2][1] = (top    + bottom)  * tb;

  00101	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _top$[ebp]
  00106	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _bottom$[ebp]
  0010b	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _tb$[ebp]
  00110	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00115	d1 e0		 shl	 eax, 1
  00117	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  0011a	b9 04 00 00 00	 mov	 ecx, 4
  0011f	c1 e1 00	 shl	 ecx, 0
  00122	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 84   :   dest[2][2] = (farVal + nearVal) * fn;

  00127	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  0012c	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _nearVal$[ebp]
  00131	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  00136	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013b	d1 e0		 shl	 eax, 1
  0013d	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  00140	b9 04 00 00 00	 mov	 ecx, 4
  00145	d1 e1		 shl	 ecx, 1
  00147	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 85   :   dest[2][3] =-1.0f;

  0014c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00151	d1 e0		 shl	 eax, 1
  00153	03 45 20	 add	 eax, DWORD PTR _dest$[ebp]
  00156	b9 04 00 00 00	 mov	 ecx, 4
  0015b	6b d1 03	 imul	 edx, ecx, 3
  0015e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00166	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 86   :   dest[3][2] = farVal * nv * fn;

  0016b	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _farVal$[ebp]
  00170	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _nv$[ebp]
  00175	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _fn$[ebp]
  0017a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0017f	6b c8 03	 imul	 ecx, eax, 3
  00182	03 4d 20	 add	 ecx, DWORD PTR _dest$[ebp]
  00185	ba 04 00 00 00	 mov	 edx, 4
  0018a	d1 e2		 shl	 edx, 1
  0018c	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 87   : }

  00191	5f		 pop	 edi
  00192	5e		 pop	 esi
  00193	5b		 pop	 ebx
  00194	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0019a	3b ec		 cmp	 ebp, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c3		 ret	 0
_glm_frustum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat4.h
;	COMDAT _glm_mat4_zero
_TEXT	SEGMENT
_t$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat4_zero PROC					; COMDAT

; 189  : glm_mat4_zero(mat4 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __D6E4440C_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 190  :   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_ZERO_INIT;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 45 b0	 movss	 DWORD PTR _t$[ebp], xmm0
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 b4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 45 b8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 bc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+32], xmm0
  0008c	0f 57 c0	 xorps	 xmm0, xmm0
  0008f	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+36], xmm0
  00094	0f 57 c0	 xorps	 xmm0, xmm0
  00097	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+40], xmm0
  0009c	0f 57 c0	 xorps	 xmm0, xmm0
  0009f	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+44], xmm0
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+48], xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+52], xmm0
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+56], xmm0
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+60], xmm0

; 191  :   glm_mat4_copy(t, mat);

  000c4	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  000c7	50		 push	 eax
  000c8	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _glm_mat4_copy
  000d1	83 c4 08	 add	 esp, 8

; 192  : }

  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_z
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	8b e3		 mov	 esp, ebx
  000f6	5b		 pop	 ebx
  000f7	c3		 ret	 0
$LN5@glm_mat4_z:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN4@glm_mat4_z
$LN4@glm_mat4_z:
  00100	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00104	40 00 00 00	 DD	 64			; 00000040H
  00108	00 00 00 00	 DD	 $LN3@glm_mat4_z
$LN3@glm_mat4_z:
  0010c	74		 DB	 116			; 00000074H
  0010d	00		 DB	 0
_glm_mat4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat4.h
;	COMDAT _glm_mat4_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_copy PROC					; COMDAT

; 123  : glm_mat4_copy(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D6E4440C_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  : #ifdef __AVX__
; 125  :   glmm_store256(dest[0], glmm_load256(mat[0]));
; 126  :   glmm_store256(dest[2], glmm_load256(mat[2]));
; 127  : #elif defined( __SSE__ ) || defined( __SSE2__ )
; 128  :   glmm_store(dest[0], glmm_load(mat[0]));

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00036	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00041	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 129  :   glmm_store(dest[1], glmm_load(mat[1]));

  00044	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00049	c1 e0 00	 shl	 eax, 0
  0004c	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0004f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00052	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00057	c1 e1 00	 shl	 ecx, 0
  0005a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 130  :   glmm_store(dest[2], glmm_load(mat[2]));

  00060	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00065	d1 e0		 shl	 eax, 1
  00067	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00072	d1 e1		 shl	 ecx, 1
  00074	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00077	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 131  :   glmm_store(dest[3], glmm_load(mat[3]));

  0007a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00085	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00088	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0008d	6b c2 03	 imul	 eax, edx, 3
  00090	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00093	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 132  : #elif defined(CGLM_NEON_FP)
; 133  :   vst1q_f32(dest[0], vld1q_f32(mat[0]));
; 134  :   vst1q_f32(dest[1], vld1q_f32(mat[1]));
; 135  :   vst1q_f32(dest[2], vld1q_f32(mat[2]));
; 136  :   vst1q_f32(dest[3], vld1q_f32(mat[3]));
; 137  : #else
; 138  :   glm_mat4_ucopy(mat, dest);
; 139  : #endif
; 140  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_mat4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_ortho
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_ortho PROC					; COMDAT

; 809  : glm_vec3_ortho(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 810  :   dest[0] = v[1] - v[2];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	c1 e0 00	 shl	 eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	d1 e1		 shl	 ecx, 1
  00037	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0003a	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0003d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00042	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	6b c8 00	 imul	 ecx, eax, 0
  0004f	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00052	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 811  :   dest[1] = v[2] - v[0];

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	d1 e0		 shl	 eax, 1
  0005e	b9 04 00 00 00	 mov	 ecx, 4
  00063	6b d1 00	 imul	 edx, ecx, 0
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00069	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0006c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00071	f3 0f 5c 04 16	 subss	 xmm0, DWORD PTR [esi+edx]
  00076	ba 04 00 00 00	 mov	 edx, 4
  0007b	c1 e2 00	 shl	 edx, 0
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00081	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 812  :   dest[2] = v[0] - v[1];

  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	6b c8 00	 imul	 ecx, eax, 0
  0008e	ba 04 00 00 00	 mov	 edx, 4
  00093	c1 e2 00	 shl	 edx, 0
  00096	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00099	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0009c	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000a1	f3 0f 5c 04 16	 subss	 xmm0, DWORD PTR [esi+edx]
  000a6	b9 04 00 00 00	 mov	 ecx, 4
  000ab	d1 e1		 shl	 ecx, 1
  000ad	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 813  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_crossn
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_crossn PROC					; COMDAT

; 596  : glm_vec3_crossn(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 597  :   glm_vec3_cross(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_cross
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 598  :   glm_vec3_normalize(dest);

  0003c	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _glm_vec3_normalize
  00045	83 c4 04	 add	 esp, 4

; 599  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_glm_vec3_crossn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_cross
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_cross PROC					; COMDAT

; 580  : glm_vec3_cross(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 581  :   /* (u2.v3 - u3.v2, u3.v1 - u1.v3, u1.v2 - u2.v1) */
; 582  :   dest[0] = a[1] * b[2] - a[2] * b[1];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	c1 e0 00	 shl	 eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	d1 e1		 shl	 ecx, 1
  00037	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003a	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00042	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	d1 e0		 shl	 eax, 1
  0004e	b9 04 00 00 00	 mov	 ecx, 4
  00053	c1 e1 00	 shl	 ecx, 0
  00056	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00059	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0005c	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00061	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00066	f3 0f 5c c1	 subss	 xmm0, xmm1
  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	6b c8 00	 imul	 ecx, eax, 0
  00072	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00075	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 583  :   dest[1] = a[2] * b[0] - a[0] * b[2];

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	d1 e0		 shl	 eax, 1
  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	6b d1 00	 imul	 edx, ecx, 0
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0008c	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0008f	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00094	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  00099	ba 04 00 00 00	 mov	 edx, 4
  0009e	6b c2 00	 imul	 eax, edx, 0
  000a1	b9 04 00 00 00	 mov	 ecx, 4
  000a6	d1 e1		 shl	 ecx, 1
  000a8	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000ab	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000ae	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000b3	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  000b8	f3 0f 5c c1	 subss	 xmm0, xmm1
  000bc	b8 04 00 00 00	 mov	 eax, 4
  000c1	c1 e0 00	 shl	 eax, 0
  000c4	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000c7	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 584  :   dest[2] = a[0] * b[1] - a[1] * b[0];

  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	6b c8 00	 imul	 ecx, eax, 0
  000d4	ba 04 00 00 00	 mov	 edx, 4
  000d9	c1 e2 00	 shl	 edx, 0
  000dc	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000df	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000e2	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000e7	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  000ec	b9 04 00 00 00	 mov	 ecx, 4
  000f1	c1 e1 00	 shl	 ecx, 0
  000f4	ba 04 00 00 00	 mov	 edx, 4
  000f9	6b c2 00	 imul	 eax, edx, 0
  000fc	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000ff	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00102	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00107	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  0010c	f3 0f 5c c1	 subss	 xmm0, xmm1
  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	d1 e0		 shl	 eax, 1
  00117	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0011a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 585  : }

  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00128	3b ec		 cmp	 ebp, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
_glm_vec3_cross ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_normalize
_TEXT	SEGMENT
_norm$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec3_normalize PROC				; COMDAT

; 537  : glm_vec3_normalize(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 538  :   float norm;
; 539  : 
; 540  :   norm = glm_vec3_norm(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm
  00031	83 c4 04	 add	 esp, 4
  00034	d9 5d f8	 fstp	 DWORD PTR _norm$[ebp]

; 541  : 
; 542  :   if (norm == 0.0f) {

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _norm$[ebp]
  0003c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00043	9f		 lahf
  00044	f6 c4 44	 test	 ah, 68			; 00000044H
  00047	7a 3a		 jp	 SHORT $LN2@glm_vec3_n

; 543  :     v[0] = v[1] = v[2] = 0.0f;

  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	d1 e0		 shl	 eax, 1
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00053	0f 57 c0	 xorps	 xmm0, xmm0
  00056	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  0005b	ba 04 00 00 00	 mov	 edx, 4
  00060	c1 e2 00	 shl	 edx, 0
  00063	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00066	0f 57 c0	 xorps	 xmm0, xmm0
  00069	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  0006e	b9 04 00 00 00	 mov	 ecx, 4
  00073	6b d1 00	 imul	 edx, ecx, 0
  00076	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00079	0f 57 c0	 xorps	 xmm0, xmm0
  0007c	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 544  :     return;

  00081	eb 23		 jmp	 SHORT $LN1@glm_vec3_n
$LN2@glm_vec3_n:

; 545  :   }
; 546  : 
; 547  :   glm_vec3_scale(v, 1.0f / norm, v);

  00083	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00086	50		 push	 eax
  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008f	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _norm$[ebp]
  00094	51		 push	 ecx
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 _glm_vec3_scale
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@glm_vec3_n:

; 548  : }

  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000af	3b ec		 cmp	 ebp, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_glm_vec3_normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_scale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_scale PROC					; COMDAT

; 346  : glm_vec3_scale(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 347  :   dest[0] = v[0] * s;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00048	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 348  :   dest[1] = v[1] * s;

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	c1 e0 00	 shl	 eax, 0
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0005d	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	c1 e2 00	 shl	 edx, 0
  0006a	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0006d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 349  :   dest[2] = v[2] * s;

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	d1 e0		 shl	 eax, 1
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0007c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00081	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	d1 e2		 shl	 edx, 1
  0008d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00090	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 350  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_glm_vec3_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_sub
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_sub PROC					; COMDAT

; 301  : glm_vec3_sub(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 302  :   dest[0] = a[0] - b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00053	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 303  :   dest[1] = a[1] - b[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 04 00 00 00	 mov	 ecx, 4
  00065	c1 e1 00	 shl	 ecx, 0
  00068	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00073	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	c1 e0 00	 shl	 eax, 0
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00083	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 304  :   dest[2] = a[2] - b[2];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	d1 e0		 shl	 eax, 1
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	d1 e1		 shl	 ecx, 1
  00096	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00099	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0009c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000a1	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	d1 e0		 shl	 eax, 1
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 305  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_add
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_add PROC					; COMDAT

; 271  : glm_vec3_add(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 272  :   dest[0] = a[0] + b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 58 04 06	 addss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00053	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 273  :   dest[1] = a[1] + b[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 04 00 00 00	 mov	 ecx, 4
  00065	c1 e1 00	 shl	 ecx, 0
  00068	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00073	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	c1 e0 00	 shl	 eax, 0
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00083	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 274  :   dest[2] = a[2] + b[2];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	d1 e0		 shl	 eax, 1
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	d1 e1		 shl	 ecx, 1
  00096	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00099	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0009c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000a1	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	d1 e0		 shl	 eax, 1
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 275  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_norm
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec3_norm PROC					; COMDAT

; 215  : glm_vec3_norm(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 216  :   return sqrtf(glm_vec3_norm2(v));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm2
  00031	d9 1c 24	 fstp	 DWORD PTR [esp]
  00034	e8 00 00 00 00	 call	 _sqrtf
  00039	83 c4 04	 add	 esp, 4

; 217  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glm_vec3_norm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_norm2
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec3_norm2 PROC					; COMDAT

; 201  : glm_vec3_norm2(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 202  :   return glm_vec3_dot(v, v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_dot
  00035	83 c4 08	 add	 esp, 8

; 203  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_vec3_norm2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec3.h
;	COMDAT _glm_vec3_dot
_TEXT	SEGMENT
tv130 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_dot PROC					; COMDAT

; 184  : glm_vec3_dot(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __82F46937_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  :   return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	c1 e0 00	 shl	 eax, 0
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0005b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0005e	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00063	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00068	f3 0f 58 c1	 addss	 xmm0, xmm1
  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	d1 e0		 shl	 eax, 1
  00073	b9 04 00 00 00	 mov	 ecx, 4
  00078	d1 e1		 shl	 ecx, 1
  0007a	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0007d	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00080	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00085	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  0008a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0008e	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv130[ebp], xmm0
  00096	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv130[ebp]

; 186  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_glm_vec3_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 764  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 765  :             return (float)tan(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _tan
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 766  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 760  :             return (float)sqrt(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sqrt
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 761  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 638  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 639  :             return (float)atan(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _atan
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 640  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_atanf	ENDP
_TEXT	ENDS
END
