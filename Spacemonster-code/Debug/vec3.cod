; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__BF9EB221_vec3@c DB 01H
msvcjmc	ENDS
PUBLIC	_acosf
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_floorf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	_glm_signf
PUBLIC	_glm_pow2
PUBLIC	_glm_min
PUBLIC	_glm_max
PUBLIC	_glm_clamp
PUBLIC	_glm_clamp_zo
PUBLIC	_glm_step
PUBLIC	_glm_smooth
PUBLIC	_glm_smoothstep
PUBLIC	_glm_vec3_broadcast
PUBLIC	_glm_vec3_fill
PUBLIC	_glm_vec3_eq
PUBLIC	_glm_vec3_eq_eps
PUBLIC	_glm_vec3_eq_all
PUBLIC	_glm_vec3_eqv
PUBLIC	_glm_vec3_eqv_eps
PUBLIC	_glm_vec3_max
PUBLIC	_glm_vec3_min
PUBLIC	_glm_vec3_isnan
PUBLIC	_glm_vec3_isinf
PUBLIC	_glm_vec3_isvalid
PUBLIC	_glm_vec3_sign
PUBLIC	_glm_vec3_abs
PUBLIC	_glm_vec3_fract
PUBLIC	_glm_vec3_hadd
PUBLIC	_glm_vec3_sqrt
PUBLIC	_glm_vec4
PUBLIC	_glm_vec4_scale
PUBLIC	_glm_vec4_muladds
PUBLIC	_glm_vec4_normalize_to
PUBLIC	_glm_vec4_normalize
PUBLIC	_glm_vec3
PUBLIC	_glm_vec3_copy
PUBLIC	_glm_vec3_zero
PUBLIC	_glm_vec3_one
PUBLIC	_glm_vec3_dot
PUBLIC	_glm_vec3_norm2
PUBLIC	_glm_vec3_norm
PUBLIC	_glm_vec3_norm_one
PUBLIC	_glm_vec3_norm_inf
PUBLIC	_glm_vec3_add
PUBLIC	_glm_vec3_adds
PUBLIC	_glm_vec3_sub
PUBLIC	_glm_vec3_subs
PUBLIC	_glm_vec3_mul
PUBLIC	_glm_vec3_scale
PUBLIC	_glm_vec3_scale_as
PUBLIC	_glm_vec3_div
PUBLIC	_glm_vec3_divs
PUBLIC	_glm_vec3_addadd
PUBLIC	_glm_vec3_subadd
PUBLIC	_glm_vec3_muladd
PUBLIC	_glm_vec3_muladds
PUBLIC	_glm_vec3_maxadd
PUBLIC	_glm_vec3_minadd
PUBLIC	_glm_vec3_negate_to
PUBLIC	_glm_vec3_negate
PUBLIC	_glm_vec3_normalize
PUBLIC	_glm_vec3_normalize_to
PUBLIC	_glm_vec3_cross
PUBLIC	_glm_vec3_crossn
PUBLIC	_glm_vec3_angle
PUBLIC	_glm_vec3_rotate
PUBLIC	_glm_vec3_rotate_m4
PUBLIC	_glm_vec3_rotate_m3
PUBLIC	_glm_vec3_proj
PUBLIC	_glm_vec3_center
PUBLIC	_glm_vec3_distance2
PUBLIC	_glm_vec3_distance
PUBLIC	_glm_vec3_maxv
PUBLIC	_glm_vec3_minv
PUBLIC	_glm_vec3_ortho
PUBLIC	_glm_vec3_clamp
PUBLIC	_glm_vec3_lerp
PUBLIC	_glm_vec3_lerpc
PUBLIC	_glm_vec3_step_uni
PUBLIC	_glm_vec3_step
PUBLIC	_glm_vec3_smoothstep_uni
PUBLIC	_glm_vec3_smoothstep
PUBLIC	_glm_vec3_smoothinterp
PUBLIC	_glm_vec3_smoothinterpc
PUBLIC	_glmc_vec3
PUBLIC	_glmc_vec3_copy
PUBLIC	_glmc_vec3_zero
PUBLIC	_glmc_vec3_one
PUBLIC	_glmc_vec3_dot
PUBLIC	_glmc_vec3_cross
PUBLIC	_glmc_vec3_crossn
PUBLIC	_glmc_vec3_norm
PUBLIC	_glmc_vec3_norm2
PUBLIC	_glmc_vec3_norm_one
PUBLIC	_glmc_vec3_norm_inf
PUBLIC	_glmc_vec3_normalize_to
PUBLIC	_glmc_vec3_normalize
PUBLIC	_glmc_vec3_add
PUBLIC	_glmc_vec3_adds
PUBLIC	_glmc_vec3_sub
PUBLIC	_glmc_vec3_subs
PUBLIC	_glmc_vec3_mul
PUBLIC	_glmc_vec3_scale
PUBLIC	_glmc_vec3_scale_as
PUBLIC	_glmc_vec3_div
PUBLIC	_glmc_vec3_divs
PUBLIC	_glmc_vec3_addadd
PUBLIC	_glmc_vec3_subadd
PUBLIC	_glmc_vec3_muladd
PUBLIC	_glmc_vec3_muladds
PUBLIC	_glmc_vec3_maxadd
PUBLIC	_glmc_vec3_minadd
PUBLIC	_glmc_vec3_negate
PUBLIC	_glmc_vec3_negate_to
PUBLIC	_glmc_vec3_angle
PUBLIC	_glmc_vec3_rotate
PUBLIC	_glmc_vec3_rotate_m4
PUBLIC	_glmc_vec3_rotate_m3
PUBLIC	_glmc_vec3_proj
PUBLIC	_glmc_vec3_center
PUBLIC	_glmc_vec3_distance2
PUBLIC	_glmc_vec3_distance
PUBLIC	_glmc_vec3_maxv
PUBLIC	_glmc_vec3_minv
PUBLIC	_glmc_vec3_clamp
PUBLIC	_glmc_vec3_ortho
PUBLIC	_glmc_vec3_lerp
PUBLIC	_glmc_vec3_lerpc
PUBLIC	_glmc_vec3_step_uni
PUBLIC	_glmc_vec3_step
PUBLIC	_glmc_vec3_smoothstep_uni
PUBLIC	_glmc_vec3_smoothstep
PUBLIC	_glmc_vec3_smoothinterp
PUBLIC	_glmc_vec3_smoothinterpc
PUBLIC	_glmc_vec3_mulv
PUBLIC	_glmc_vec3_broadcast
PUBLIC	_glmc_vec3_fill
PUBLIC	_glmc_vec3_eq
PUBLIC	_glmc_vec3_eq_eps
PUBLIC	_glmc_vec3_eq_all
PUBLIC	_glmc_vec3_eqv
PUBLIC	_glmc_vec3_eqv_eps
PUBLIC	_glmc_vec3_max
PUBLIC	_glmc_vec3_min
PUBLIC	_glmc_vec3_isnan
PUBLIC	_glmc_vec3_isinf
PUBLIC	_glmc_vec3_isvalid
PUBLIC	_glmc_vec3_sign
PUBLIC	_glmc_vec3_abs
PUBLIC	_glmc_vec3_fract
PUBLIC	_glmc_vec3_hadd
PUBLIC	_glmc_vec3_sqrt
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3f000000
PUBLIC	__real@3f7fffff
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___fdclass:PROC
EXTRN	_acos:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	__imp__floor:PROC
EXTRN	__imp__fminf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fffff
CONST	SEGMENT
__real@3f7fffff DD 03f7fffffr			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-06
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_sqrt
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec3_sqrt PROC					; COMDAT

; 417  : glmc_vec3_sqrt(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 418  :   glm_vec3_sqrt(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_sqrt
  00035	83 c4 08	 add	 esp, 8

; 419  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_sqrt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_hadd
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_hadd PROC					; COMDAT

; 411  : glmc_vec3_hadd(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 412  :   return glm_vec3_hadd(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_hadd
  00031	83 c4 04	 add	 esp, 4

; 413  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_hadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_fract
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec3_fract PROC					; COMDAT

; 405  : glmc_vec3_fract(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 406  :   glm_vec3_fract(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_fract
  00035	83 c4 08	 add	 esp, 8

; 407  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_fract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_abs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec3_abs PROC					; COMDAT

; 399  : glmc_vec3_abs(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 400  :   glm_vec3_abs(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_abs
  00035	83 c4 08	 add	 esp, 8

; 401  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_abs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_sign
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec3_sign PROC					; COMDAT

; 393  : glmc_vec3_sign(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 394  :   glm_vec3_sign(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_sign
  00035	83 c4 08	 add	 esp, 8

; 395  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_isvalid
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_isvalid PROC					; COMDAT

; 387  : glmc_vec3_isvalid(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 388  :   return glm_vec3_isvalid(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_isvalid
  00031	83 c4 04	 add	 esp, 4

; 389  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_isvalid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_isinf
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_isinf PROC					; COMDAT

; 381  : glmc_vec3_isinf(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 382  :   return glm_vec3_isinf(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_isinf
  00031	83 c4 04	 add	 esp, 4

; 383  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_isinf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_isnan
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_isnan PROC					; COMDAT

; 375  : glmc_vec3_isnan(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 376  :   return glm_vec3_isnan(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_isnan
  00031	83 c4 04	 add	 esp, 4

; 377  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_isnan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_min
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_min PROC					; COMDAT

; 369  : glmc_vec3_min(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 370  :   return glm_vec3_min(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_min
  00031	83 c4 04	 add	 esp, 4

; 371  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_max
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_max PROC					; COMDAT

; 363  : glmc_vec3_max(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 364  :   return glm_vec3_max(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_max
  00031	83 c4 04	 add	 esp, 4

; 365  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_eqv_eps
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec3_eqv_eps PROC					; COMDAT

; 357  : glmc_vec3_eqv_eps(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 358  :   return glm_vec3_eqv_eps(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_eqv_eps
  00035	83 c4 08	 add	 esp, 8

; 359  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_eqv_eps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_eqv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec3_eqv PROC					; COMDAT

; 351  : glmc_vec3_eqv(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 352  :   return glm_vec3_eqv(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_eqv
  00035	83 c4 08	 add	 esp, 8

; 353  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_eqv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_eq_all
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_eq_all PROC					; COMDAT

; 345  : glmc_vec3_eq_all(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 346  :   return glm_vec3_eq_all(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_eq_all
  00031	83 c4 04	 add	 esp, 4

; 347  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_eq_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_eq_eps
_TEXT	SEGMENT
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glmc_vec3_eq_eps PROC					; COMDAT

; 339  : glmc_vec3_eq_eps(vec3 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 340  :   return glm_vec3_eq_eps(v, val);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_vec3_eq_eps
  0003c	83 c4 08	 add	 esp, 8

; 341  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec3_eq_eps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_eq
_TEXT	SEGMENT
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glmc_vec3_eq PROC					; COMDAT

; 333  : glmc_vec3_eq(vec3 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 334  :   return glm_vec3_eq(v, val);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_vec3_eq
  0003c	83 c4 08	 add	 esp, 8

; 335  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec3_eq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_fill
_TEXT	SEGMENT
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glmc_vec3_fill PROC					; COMDAT

; 327  : glmc_vec3_fill(vec3 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 328  :   glm_vec3_fill(v, val);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_vec3_fill
  0003c	83 c4 08	 add	 esp, 8

; 329  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec3_fill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_broadcast
_TEXT	SEGMENT
_val$ = 8						; size = 4
_d$ = 12						; size = 4
_glmc_vec3_broadcast PROC				; COMDAT

; 321  : glmc_vec3_broadcast(float val, vec3 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 322  :   glm_vec3_broadcast(val, d);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_vec3_broadcast
  0003c	83 c4 08	 add	 esp, 8

; 323  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec3_broadcast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_mulv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_d$ = 16						; size = 4
_glmc_vec3_mulv PROC					; COMDAT

; 315  : glmc_vec3_mulv(vec3 a, vec3 b, vec3 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 316  :   glm_vec3_mulv(a, b, d);

  00028	8b 45 10	 mov	 eax, DWORD PTR _d$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_mul
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 317  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_smoothinterpc
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec3_smoothinterpc PROC				; COMDAT

; 307  : glmc_vec3_smoothinterpc(vec3 from, vec3 to, float t, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 308  :   glm_vec3_smoothinterpc(from, to, t, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec3_smoothinterpc
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 309  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_vec3_smoothinterpc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_smoothinterp
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec3_smoothinterp PROC				; COMDAT

; 301  : glmc_vec3_smoothinterp(vec3 from, vec3 to, float t, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 302  :   glm_vec3_smoothinterp(from, to, t, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec3_smoothinterp
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 303  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_vec3_smoothinterp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_smoothstep
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec3_smoothstep PROC				; COMDAT

; 295  : glmc_vec3_smoothstep(vec3 edge0, vec3 edge1, vec3 x, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 296  :   glm_vec3_smoothstep(edge0, edge1, x, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _edge1$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _edge0$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _glm_vec3_smoothstep
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 297  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glmc_vec3_smoothstep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_smoothstep_uni
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec3_smoothstep_uni PROC				; COMDAT

; 289  : glmc_vec3_smoothstep_uni(float edge0, float edge1, vec3 x, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :   glm_vec3_smoothstep_uni(edge0, edge1, x, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  0002f	51		 push	 ecx
  00030	51		 push	 ecx
  00031	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	51		 push	 ecx
  0003c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 _glm_vec3_smoothstep_uni
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 291  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_glmc_vec3_smoothstep_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_step
_TEXT	SEGMENT
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_step PROC					; COMDAT

; 283  : glmc_vec3_step(vec3 edge, vec3 x, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 284  :   glm_vec3_step(edge, x, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_step
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 285  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_step ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_step_uni
_TEXT	SEGMENT
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_step_uni PROC				; COMDAT

; 277  : glmc_vec3_step_uni(float edge, vec3 x, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 278  :   glm_vec3_step_uni(edge, x, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002f	51		 push	 ecx
  00030	51		 push	 ecx
  00031	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 _glm_vec3_step_uni
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 279  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec3_step_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_lerpc
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec3_lerpc PROC					; COMDAT

; 271  : glmc_vec3_lerpc(vec3 from, vec3 to, float t, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 272  :   glm_vec3_lerpc(from, to, t, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec3_lerpc
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 273  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_vec3_lerpc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_lerp
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec3_lerp PROC					; COMDAT

; 265  : glmc_vec3_lerp(vec3 from, vec3 to, float t, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 266  :   glm_vec3_lerp(from, to, t, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec3_lerp
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 267  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_vec3_lerp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_ortho
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec3_ortho PROC					; COMDAT

; 259  : glmc_vec3_ortho(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 260  :   glm_vec3_ortho(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_ortho
  00035	83 c4 08	 add	 esp, 8

; 261  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_clamp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_minVal$ = 12						; size = 4
_maxVal$ = 16						; size = 4
_glmc_vec3_clamp PROC					; COMDAT

; 253  : glmc_vec3_clamp(vec3 v, float minVal, float maxVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 254  :   glm_vec3_clamp(v, minVal, maxVal);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _minVal$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _glm_vec3_clamp
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 255  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_glmc_vec3_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_minv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_minv PROC					; COMDAT

; 247  : glmc_vec3_minv(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 248  :   glm_vec3_minv(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_minv
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 249  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_minv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_maxv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_maxv PROC					; COMDAT

; 241  : glmc_vec3_maxv(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 242  :   glm_vec3_maxv(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_maxv
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 243  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_maxv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_distance
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec3_distance PROC				; COMDAT

; 229  : glmc_vec3_distance(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 230  :   return glm_vec3_distance(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_distance
  00035	83 c4 08	 add	 esp, 8

; 231  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_distance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_distance2
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec3_distance2 PROC				; COMDAT

; 235  : glmc_vec3_distance2(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 236  :   return glm_vec3_distance2(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_distance2
  00035	83 c4 08	 add	 esp, 8

; 237  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_distance2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_center
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_center PROC					; COMDAT

; 223  : glmc_vec3_center(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 224  :   glm_vec3_center(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_center
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 225  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_center ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_proj
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_proj PROC					; COMDAT

; 217  : glmc_vec3_proj(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 218  :   glm_vec3_proj(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_proj
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 219  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_proj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_rotate_m3
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_rotate_m3 PROC				; COMDAT

; 211  : glmc_vec3_rotate_m3(mat3 m, vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 212  :   glm_vec3_rotate_m3(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_rotate_m3
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 213  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_rotate_m3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_rotate_m4
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_rotate_m4 PROC				; COMDAT

; 205  : glmc_vec3_rotate_m4(mat4 m, vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 206  :   glm_vec3_rotate_m4(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_rotate_m4
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_rotate_m4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_rotate
_TEXT	SEGMENT
_v$ = 8							; size = 4
_angle$ = 12						; size = 4
_axis$ = 16						; size = 4
_glmc_vec3_rotate PROC					; COMDAT

; 199  : glmc_vec3_rotate(vec3 v, float angle, vec3 axis) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 200  :   glm_vec3_rotate(v, angle, axis);

  00028	8b 45 10	 mov	 eax, DWORD PTR _axis$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec3_rotate
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 201  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec3_rotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_angle
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec3_angle PROC					; COMDAT

; 193  : glmc_vec3_angle(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 194  :   return glm_vec3_angle(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_angle
  00035	83 c4 08	 add	 esp, 8

; 195  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_angle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_negate_to
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec3_negate_to PROC				; COMDAT

; 187  : glmc_vec3_negate_to(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 188  :   glm_vec3_negate_to(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_negate_to
  00035	83 c4 08	 add	 esp, 8

; 189  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_negate_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_negate
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_negate PROC					; COMDAT

; 181  : glmc_vec3_negate(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 182  :   glm_vec3_negate(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_negate
  00031	83 c4 04	 add	 esp, 4

; 183  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_negate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_minadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_minadd PROC					; COMDAT

; 175  : glmc_vec3_minadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 176  :   glm_vec3_minadd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_minadd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 177  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_minadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_maxadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_maxadd PROC					; COMDAT

; 169  : glmc_vec3_maxadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 170  :   glm_vec3_maxadd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_maxadd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_maxadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_muladds
_TEXT	SEGMENT
_a$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_muladds PROC					; COMDAT

; 163  : glmc_vec3_muladds(vec3 a, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 164  :   glm_vec3_muladds(a, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec3_muladds
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 165  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec3_muladds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_muladd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_muladd PROC					; COMDAT

; 157  : glmc_vec3_muladd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 158  :   glm_vec3_muladd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_muladd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 159  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_muladd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_subadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_subadd PROC					; COMDAT

; 151  : glmc_vec3_subadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 152  :   glm_vec3_subadd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_subadd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 153  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_subadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_addadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_addadd PROC					; COMDAT

; 145  : glmc_vec3_addadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :   glm_vec3_addadd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_addadd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 147  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_addadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_divs
_TEXT	SEGMENT
_a$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_divs PROC					; COMDAT

; 139  : glmc_vec3_divs(vec3 a, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  :   glm_vec3_divs(a, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec3_divs
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec3_divs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_div
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_div PROC					; COMDAT

; 133  : glmc_vec3_div(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 134  :   glm_vec3_div(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_div
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 135  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_div ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_scale_as
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_scale_as PROC				; COMDAT

; 127  : glmc_vec3_scale_as(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 128  :   glm_vec3_scale_as(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec3_scale_as
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 129  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec3_scale_as ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_scale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_scale PROC					; COMDAT

; 121  : glmc_vec3_scale(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 122  :   glm_vec3_scale(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec3_scale
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec3_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_mul
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_d$ = 16						; size = 4
_glmc_vec3_mul PROC					; COMDAT

; 115  : glmc_vec3_mul(vec3 a, vec3 b, vec3 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 116  :   glm_vec3_mul(a, b, d);

  00028	8b 45 10	 mov	 eax, DWORD PTR _d$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_mul
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_subs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_subs PROC					; COMDAT

; 109  : glmc_vec3_subs(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  :   glm_vec3_subs(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec3_subs
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec3_subs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_sub
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_sub PROC					; COMDAT

; 103  : glmc_vec3_sub(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 104  :   glm_vec3_sub(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_sub
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 105  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_adds
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_adds PROC					; COMDAT

; 97   : glmc_vec3_adds(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 98   :   glm_vec3_adds(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec3_adds
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 99   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec3_adds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_add
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_add PROC					; COMDAT

; 91   : glmc_vec3_add(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 92   :   glm_vec3_add(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_add
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 93   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_normalize
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_normalize PROC				; COMDAT

; 67   : glmc_vec3_normalize(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   :   glm_vec3_normalize(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_normalize
  00031	83 c4 04	 add	 esp, 4

; 69   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_normalize_to
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec3_normalize_to PROC				; COMDAT

; 61   : glmc_vec3_normalize_to(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   glm_vec3_normalize_to(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_normalize_to
  00035	83 c4 08	 add	 esp, 8

; 63   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_normalize_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_norm_inf
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_norm_inf PROC				; COMDAT

; 85   : glmc_vec3_norm_inf(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 86   :   return glm_vec3_norm_inf(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm_inf
  00031	83 c4 04	 add	 esp, 4

; 87   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_norm_inf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_norm_one
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_norm_one PROC				; COMDAT

; 79   : glmc_vec3_norm_one(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :   return glm_vec3_norm_one(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm_one
  00031	83 c4 04	 add	 esp, 4

; 81   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_norm_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_norm2
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_norm2 PROC					; COMDAT

; 73   : glmc_vec3_norm2(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   return glm_vec3_norm2(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm2
  00031	83 c4 04	 add	 esp, 4

; 75   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_norm2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_norm
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_norm PROC					; COMDAT

; 55   : glmc_vec3_norm(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   return glm_vec3_norm(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm
  00031	83 c4 04	 add	 esp, 4

; 57   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_norm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_crossn
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_crossn PROC					; COMDAT

; 49   : glmc_vec3_crossn(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   glm_vec3_crossn(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_crossn
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_crossn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_cross
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec3_cross PROC					; COMDAT

; 43   : glmc_vec3_cross(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 44   :   glm_vec3_cross(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_cross
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 45   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec3_cross ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_dot
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec3_dot PROC					; COMDAT

; 37   : glmc_vec3_dot(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   return glm_vec3_dot(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_dot
  00035	83 c4 08	 add	 esp, 8

; 39   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_one
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_one PROC					; COMDAT

; 31   : glmc_vec3_one(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   glm_vec3_one(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_one
  00031	83 c4 04	 add	 esp, 4

; 33   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_zero
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec3_zero PROC					; COMDAT

; 25   : glmc_vec3_zero(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_vec3_zero(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_zero
  00031	83 c4 04	 add	 esp, 4

; 27   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec3_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3_copy
_TEXT	SEGMENT
_a$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec3_copy PROC					; COMDAT

; 19   : glmc_vec3_copy(vec3 a, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_vec3_copy(a, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_copy
  00035	83 c4 08	 add	 esp, 8

; 21   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec3.c
;	COMDAT _glmc_vec3
_TEXT	SEGMENT
_v4$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_vec3 PROC						; COMDAT

; 13   : glmc_vec3(vec4 v4, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BF9EB221_vec3@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_vec3(v4, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v4$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3
  00035	83 c4 08	 add	 esp, 8

; 15   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_smoothinterpc
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec3_smoothinterpc PROC				; COMDAT

; 996  : glm_vec3_smoothinterpc(vec3 from, vec3 to, float t, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 997  :   glm_vec3_smoothinterp(from, to, glm_clamp_zo(t), dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_clamp_zo
  0003c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 _glm_vec3_smoothinterp
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 998  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_glm_vec3_smoothinterpc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_smoothinterp
_TEXT	SEGMENT
_v$ = -40						; size = 12
_s$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec3_smoothinterp PROC				; COMDAT

; 974  : glm_vec3_smoothinterp(vec3 from, vec3 to, float t, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 975  :   vec3 s, v;
; 976  :     
; 977  :   /* from + s * (to - from) */
; 978  :   glm_vec3_broadcast(glm_smooth(t), s);

  00032	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00035	50		 push	 eax
  00036	51		 push	 ecx
  00037	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	e8 00 00 00 00	 call	 _glm_smooth
  00046	d9 1c 24	 fstp	 DWORD PTR [esp]
  00049	e8 00 00 00 00	 call	 _glm_vec3_broadcast
  0004e	83 c4 08	 add	 esp, 8

; 979  :   glm_vec3_sub(to, from, v);

  00051	8d 45 d8	 lea	 eax, DWORD PTR _v$[ebp]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _from$[ebp]
  00058	51		 push	 ecx
  00059	8b 55 0c	 mov	 edx, DWORD PTR _to$[ebp]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _glm_vec3_sub
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 980  :   glm_vec3_mul(s, v, v);

  00065	8d 45 d8	 lea	 eax, DWORD PTR _v$[ebp]
  00068	50		 push	 eax
  00069	8d 4d d8	 lea	 ecx, DWORD PTR _v$[ebp]
  0006c	51		 push	 ecx
  0006d	8d 55 ec	 lea	 edx, DWORD PTR _s$[ebp]
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 _glm_vec3_mul
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 981  :   glm_vec3_add(from, v, dest);

  00079	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0007c	50		 push	 eax
  0007d	8d 4d d8	 lea	 ecx, DWORD PTR _v$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _glm_vec3_add
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 982  : }

  0008d	52		 push	 edx
  0008e	8b cd		 mov	 ecx, ebp
  00090	50		 push	 eax
  00091	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@glm_vec3_s
  00097	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009c	58		 pop	 eax
  0009d	5a		 pop	 edx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
$LN6@glm_vec3_s:
  000bc	02 00 00 00	 DD	 2
  000c0	00 00 00 00	 DD	 $LN5@glm_vec3_s
$LN5@glm_vec3_s:
  000c4	ec ff ff ff	 DD	 -20			; ffffffecH
  000c8	0c 00 00 00	 DD	 12			; 0000000cH
  000cc	00 00 00 00	 DD	 $LN3@glm_vec3_s
  000d0	d8 ff ff ff	 DD	 -40			; ffffffd8H
  000d4	0c 00 00 00	 DD	 12			; 0000000cH
  000d8	00 00 00 00	 DD	 $LN4@glm_vec3_s
$LN4@glm_vec3_s:
  000dc	76		 DB	 118			; 00000076H
  000dd	00		 DB	 0
$LN3@glm_vec3_s:
  000de	73		 DB	 115			; 00000073H
  000df	00		 DB	 0
_glm_vec3_smoothinterp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_smoothstep
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec3_smoothstep PROC				; COMDAT

; 956  : glm_vec3_smoothstep(vec3 edge0, vec3 edge1, vec3 x, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 957  :   dest[0] = glm_smoothstep(edge0[0], edge1[0], x[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 00	 imul	 ecx, eax, 0
  00046	8b 55 0c	 mov	 edx, DWORD PTR _edge1$[ebp]
  00049	51		 push	 ecx
  0004a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	8b 55 08	 mov	 edx, DWORD PTR _edge0$[ebp]
  0005f	51		 push	 ecx
  00060	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	e8 00 00 00 00	 call	 _glm_smoothstep
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	6b c8 00	 imul	 ecx, eax, 0
  0007a	8b 55 14	 mov	 edx, DWORD PTR _dest$[ebp]
  0007d	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 958  :   dest[1] = glm_smoothstep(edge0[1], edge1[1], x[1]);

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	c1 e0 00	 shl	 eax, 0
  00088	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	c1 e2 00	 shl	 edx, 0
  0009e	8b 45 0c	 mov	 eax, DWORD PTR _edge1$[ebp]
  000a1	51		 push	 ecx
  000a2	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	b9 04 00 00 00	 mov	 ecx, 4
  000b1	c1 e1 00	 shl	 ecx, 0
  000b4	8b 55 08	 mov	 edx, DWORD PTR _edge0$[ebp]
  000b7	51		 push	 ecx
  000b8	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	e8 00 00 00 00	 call	 _glm_smoothstep
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	b8 04 00 00 00	 mov	 eax, 4
  000cf	c1 e0 00	 shl	 eax, 0
  000d2	8b 4d 14	 mov	 ecx, DWORD PTR _dest$[ebp]
  000d5	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 959  :   dest[2] = glm_smoothstep(edge0[2], edge1[2], x[2]);

  000d8	b8 04 00 00 00	 mov	 eax, 4
  000dd	d1 e0		 shl	 eax, 1
  000df	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  000e2	51		 push	 ecx
  000e3	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	ba 04 00 00 00	 mov	 edx, 4
  000f2	d1 e2		 shl	 edx, 1
  000f4	8b 45 0c	 mov	 eax, DWORD PTR _edge1$[ebp]
  000f7	51		 push	 ecx
  000f8	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	b9 04 00 00 00	 mov	 ecx, 4
  00107	d1 e1		 shl	 ecx, 1
  00109	8b 55 08	 mov	 edx, DWORD PTR _edge0$[ebp]
  0010c	51		 push	 ecx
  0010d	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	e8 00 00 00 00	 call	 _glm_smoothstep
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	b8 04 00 00 00	 mov	 eax, 4
  00124	d1 e0		 shl	 eax, 1
  00126	8b 4d 14	 mov	 ecx, DWORD PTR _dest$[ebp]
  00129	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 960  : }

  0012c	5f		 pop	 edi
  0012d	5e		 pop	 esi
  0012e	5b		 pop	 ebx
  0012f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00135	3b ec		 cmp	 ebp, esp
  00137	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
_glm_vec3_smoothstep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_smoothstep_uni
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec3_smoothstep_uni PROC				; COMDAT

; 940  : glm_vec3_smoothstep_uni(float edge0, float edge1, vec3 x, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 941  :   dest[0] = glm_smoothstep(edge0, edge1, x[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	e8 00 00 00 00	 call	 _glm_smoothstep
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8b 55 14	 mov	 edx, DWORD PTR _dest$[ebp]
  00067	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 942  :   dest[1] = glm_smoothstep(edge0, edge1, x[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	51		 push	 ecx
  00081	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	51		 push	 ecx
  0008c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 _glm_smoothstep
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009e	ba 04 00 00 00	 mov	 edx, 4
  000a3	c1 e2 00	 shl	 edx, 0
  000a6	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  000a9	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 943  :   dest[2] = glm_smoothstep(edge0, edge1, x[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	51		 push	 ecx
  000c2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	51		 push	 ecx
  000cd	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	e8 00 00 00 00	 call	 _glm_smoothstep
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000df	ba 04 00 00 00	 mov	 edx, 4
  000e4	d1 e2		 shl	 edx, 1
  000e6	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  000e9	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 944  : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_glm_vec3_smoothstep_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_step
_TEXT	SEGMENT
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_step PROC					; COMDAT

; 924  : glm_vec3_step(vec3 edge, vec3 x, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 925  :   dest[0] = glm_step(edge[0], x[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 00	 imul	 ecx, eax, 0
  00046	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00049	51		 push	 ecx
  0004a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	e8 00 00 00 00	 call	 _glm_step
  00059	83 c4 08	 add	 esp, 8
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00067	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 926  :   dest[1] = glm_step(edge[1], x[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	ba 04 00 00 00	 mov	 edx, 4
  00085	c1 e2 00	 shl	 edx, 0
  00088	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 _glm_step
  0009b	83 c4 08	 add	 esp, 8
  0009e	b9 04 00 00 00	 mov	 ecx, 4
  000a3	c1 e1 00	 shl	 ecx, 0
  000a6	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000a9	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 927  :   dest[2] = glm_step(edge[2], x[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	ba 04 00 00 00	 mov	 edx, 4
  000c6	d1 e2		 shl	 edx, 1
  000c8	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  000cb	51		 push	 ecx
  000cc	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 _glm_step
  000db	83 c4 08	 add	 esp, 8
  000de	b9 04 00 00 00	 mov	 ecx, 4
  000e3	d1 e1		 shl	 ecx, 1
  000e5	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000e8	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 928  : }

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_glm_vec3_step ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_step_uni
_TEXT	SEGMENT
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_step_uni PROC					; COMDAT

; 909  : glm_vec3_step_uni(float edge, vec3 x, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 910  :   dest[0] = glm_step(edge, x[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 _glm_step
  0004e	83 c4 08	 add	 esp, 8
  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	6b c8 00	 imul	 ecx, eax, 0
  00059	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0005c	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 911  :   dest[1] = glm_step(edge, x[1]);

  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	c1 e0 00	 shl	 eax, 0
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0006a	51		 push	 ecx
  0006b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	51		 push	 ecx
  00076	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _glm_step
  00085	83 c4 08	 add	 esp, 8
  00088	ba 04 00 00 00	 mov	 edx, 4
  0008d	c1 e2 00	 shl	 edx, 0
  00090	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00093	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 912  :   dest[2] = glm_step(edge, x[2]);

  00096	b8 04 00 00 00	 mov	 eax, 4
  0009b	d1 e0		 shl	 eax, 1
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  000a0	51		 push	 ecx
  000a1	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ab	51		 push	 ecx
  000ac	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 _glm_step
  000bb	83 c4 08	 add	 esp, 8
  000be	ba 04 00 00 00	 mov	 edx, 4
  000c3	d1 e2		 shl	 edx, 1
  000c5	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000c8	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 913  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_glm_vec3_step_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_lerpc
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec3_lerpc PROC					; COMDAT

; 864  : glm_vec3_lerpc(vec3 from, vec3 to, float t, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 865  :   glm_vec3_lerp(from, to, glm_clamp_zo(t), dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_clamp_zo
  0003c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 _glm_vec3_lerp
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 866  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_glm_vec3_lerpc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_lerp
_TEXT	SEGMENT
_v$ = -40						; size = 12
_s$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec3_lerp PROC					; COMDAT

; 842  : glm_vec3_lerp(vec3 from, vec3 to, float t, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 843  :   vec3 s, v;
; 844  : 
; 845  :   /* from + s * (to - from) */
; 846  :   glm_vec3_broadcast(t, s);

  00032	8d 45 ec	 lea	 eax, DWORD PTR _s$[ebp]
  00035	50		 push	 eax
  00036	51		 push	 ecx
  00037	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00041	e8 00 00 00 00	 call	 _glm_vec3_broadcast
  00046	83 c4 08	 add	 esp, 8

; 847  :   glm_vec3_sub(to, from, v);

  00049	8d 45 d8	 lea	 eax, DWORD PTR _v$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _from$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 0c	 mov	 edx, DWORD PTR _to$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _glm_vec3_sub
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 848  :   glm_vec3_mul(s, v, v);

  0005d	8d 45 d8	 lea	 eax, DWORD PTR _v$[ebp]
  00060	50		 push	 eax
  00061	8d 4d d8	 lea	 ecx, DWORD PTR _v$[ebp]
  00064	51		 push	 ecx
  00065	8d 55 ec	 lea	 edx, DWORD PTR _s$[ebp]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _glm_vec3_mul
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 849  :   glm_vec3_add(from, v, dest);

  00071	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  00074	50		 push	 eax
  00075	8d 4d d8	 lea	 ecx, DWORD PTR _v$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 _glm_vec3_add
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 850  : }

  00085	52		 push	 edx
  00086	8b cd		 mov	 ecx, ebp
  00088	50		 push	 eax
  00089	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@glm_vec3_l
  0008f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00094	58		 pop	 eax
  00095	5a		 pop	 edx
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
$LN6@glm_vec3_l:
  000b4	02 00 00 00	 DD	 2
  000b8	00 00 00 00	 DD	 $LN5@glm_vec3_l
$LN5@glm_vec3_l:
  000bc	ec ff ff ff	 DD	 -20			; ffffffecH
  000c0	0c 00 00 00	 DD	 12			; 0000000cH
  000c4	00 00 00 00	 DD	 $LN3@glm_vec3_l
  000c8	d8 ff ff ff	 DD	 -40			; ffffffd8H
  000cc	0c 00 00 00	 DD	 12			; 0000000cH
  000d0	00 00 00 00	 DD	 $LN4@glm_vec3_l
$LN4@glm_vec3_l:
  000d4	76		 DB	 118			; 00000076H
  000d5	00		 DB	 0
$LN3@glm_vec3_l:
  000d6	73		 DB	 115			; 00000073H
  000d7	00		 DB	 0
_glm_vec3_lerp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_clamp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_minVal$ = 12						; size = 4
_maxVal$ = 16						; size = 4
_glm_vec3_clamp PROC					; COMDAT

; 824  : glm_vec3_clamp(vec3 v, float minVal, float maxVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 825  :   v[0] = glm_clamp(v[0], minVal, maxVal);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _minVal$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 00	 imul	 ecx, eax, 0
  00046	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00049	51		 push	 ecx
  0004a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	e8 00 00 00 00	 call	 _glm_clamp
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00067	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 826  :   v[1] = glm_clamp(v[1], minVal, maxVal);

  0006a	51		 push	 ecx
  0006b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	51		 push	 ecx
  00076	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _minVal$[ebp]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	c1 e0 00	 shl	 eax, 0
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 _glm_clamp
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009e	ba 04 00 00 00	 mov	 edx, 4
  000a3	c1 e2 00	 shl	 edx, 0
  000a6	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000a9	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 827  :   v[2] = glm_clamp(v[2], minVal, maxVal);

  000ac	51		 push	 ecx
  000ad	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	51		 push	 ecx
  000b8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _minVal$[ebp]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	b8 04 00 00 00	 mov	 eax, 4
  000c7	d1 e0		 shl	 eax, 1
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  000cc	51		 push	 ecx
  000cd	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	e8 00 00 00 00	 call	 _glm_clamp
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000df	ba 04 00 00 00	 mov	 edx, 4
  000e4	d1 e2		 shl	 edx, 1
  000e6	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000e9	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 828  : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_glm_vec3_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_ortho
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_ortho PROC					; COMDAT

; 809  : glm_vec3_ortho(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 810  :   dest[0] = v[1] - v[2];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	c1 e0 00	 shl	 eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	d1 e1		 shl	 ecx, 1
  00037	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0003a	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0003d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00042	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	6b c8 00	 imul	 ecx, eax, 0
  0004f	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00052	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 811  :   dest[1] = v[2] - v[0];

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	d1 e0		 shl	 eax, 1
  0005e	b9 04 00 00 00	 mov	 ecx, 4
  00063	6b d1 00	 imul	 edx, ecx, 0
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00069	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0006c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00071	f3 0f 5c 04 16	 subss	 xmm0, DWORD PTR [esi+edx]
  00076	ba 04 00 00 00	 mov	 edx, 4
  0007b	c1 e2 00	 shl	 edx, 0
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00081	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 812  :   dest[2] = v[0] - v[1];

  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	6b c8 00	 imul	 ecx, eax, 0
  0008e	ba 04 00 00 00	 mov	 edx, 4
  00093	c1 e2 00	 shl	 edx, 0
  00096	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00099	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0009c	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000a1	f3 0f 5c 04 16	 subss	 xmm0, DWORD PTR [esi+edx]
  000a6	b9 04 00 00 00	 mov	 ecx, 4
  000ab	d1 e1		 shl	 ecx, 1
  000ad	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 813  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_ortho ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_minv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_minv PROC					; COMDAT

; 795  : glm_vec3_minv(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 796  :   dest[0] = glm_min(a[0], b[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 00	 imul	 ecx, eax, 0
  00046	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00049	51		 push	 ecx
  0004a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	e8 00 00 00 00	 call	 _glm_min
  00059	83 c4 08	 add	 esp, 8
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00067	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 797  :   dest[1] = glm_min(a[1], b[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	ba 04 00 00 00	 mov	 edx, 4
  00085	c1 e2 00	 shl	 edx, 0
  00088	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 _glm_min
  0009b	83 c4 08	 add	 esp, 8
  0009e	b9 04 00 00 00	 mov	 ecx, 4
  000a3	c1 e1 00	 shl	 ecx, 0
  000a6	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000a9	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 798  :   dest[2] = glm_min(a[2], b[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	ba 04 00 00 00	 mov	 edx, 4
  000c6	d1 e2		 shl	 edx, 1
  000c8	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000cb	51		 push	 ecx
  000cc	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 _glm_min
  000db	83 c4 08	 add	 esp, 8
  000de	b9 04 00 00 00	 mov	 ecx, 4
  000e3	d1 e1		 shl	 ecx, 1
  000e5	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000e8	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 799  : }

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_glm_vec3_minv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_maxv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_maxv PROC					; COMDAT

; 780  : glm_vec3_maxv(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 781  :   dest[0] = glm_max(a[0], b[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 00	 imul	 ecx, eax, 0
  00046	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00049	51		 push	 ecx
  0004a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	e8 00 00 00 00	 call	 _glm_max
  00059	83 c4 08	 add	 esp, 8
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00067	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 782  :   dest[1] = glm_max(a[1], b[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	ba 04 00 00 00	 mov	 edx, 4
  00085	c1 e2 00	 shl	 edx, 0
  00088	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 _glm_max
  0009b	83 c4 08	 add	 esp, 8
  0009e	b9 04 00 00 00	 mov	 ecx, 4
  000a3	c1 e1 00	 shl	 ecx, 0
  000a6	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000a9	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 783  :   dest[2] = glm_max(a[2], b[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	ba 04 00 00 00	 mov	 edx, 4
  000c6	d1 e2		 shl	 edx, 1
  000c8	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000cb	51		 push	 ecx
  000cc	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 _glm_max
  000db	83 c4 08	 add	 esp, 8
  000de	b9 04 00 00 00	 mov	 ecx, 4
  000e3	d1 e1		 shl	 ecx, 1
  000e5	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000e8	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 784  : }

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_glm_vec3_maxv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_distance
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_distance PROC					; COMDAT

; 767  : glm_vec3_distance(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 768  :   return sqrtf(glm_vec3_distance2(a, b));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_distance2
  00035	83 c4 04	 add	 esp, 4
  00038	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003b	e8 00 00 00 00	 call	 _sqrtf
  00040	83 c4 04	 add	 esp, 4

; 769  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glm_vec3_distance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_distance2
_TEXT	SEGMENT
tv154 = -216						; size = 4
tv152 = -212						; size = 4
tv159 = -208						; size = 4
tv142 = -204						; size = 4
tv157 = -200						; size = 4
tv132 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_distance2 PROC				; COMDAT

; 752  : glm_vec3_distance2(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 753  :   return glm_pow2(a[0] - b[0])

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00048	51		 push	 ecx
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	e8 00 00 00 00	 call	 _glm_pow2
  00053	83 c4 04	 add	 esp, 4
  00056	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv132[ebp]
  0005c	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv132[ebp]
  00064	b8 04 00 00 00	 mov	 eax, 4
  00069	c1 e0 00	 shl	 eax, 0
  0006c	b9 04 00 00 00	 mov	 ecx, 4
  00071	c1 e1 00	 shl	 ecx, 0
  00074	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00077	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0007a	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0007f	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  00084	51		 push	 ecx
  00085	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0008a	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv157[ebp], xmm0
  00092	e8 00 00 00 00	 call	 _glm_pow2
  00097	83 c4 04	 add	 esp, 4
  0009a	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR tv142[ebp]
  000a0	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv157[ebp]
  000a8	f3 0f 58 85 34
	ff ff ff	 addss	 xmm0, DWORD PTR tv142[ebp]
  000b0	b8 04 00 00 00	 mov	 eax, 4
  000b5	d1 e0		 shl	 eax, 1
  000b7	b9 04 00 00 00	 mov	 ecx, 4
  000bc	d1 e1		 shl	 ecx, 1
  000be	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000c1	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000c4	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000c9	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  000ce	51		 push	 ecx
  000cf	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  000d4	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv159[ebp], xmm0
  000dc	e8 00 00 00 00	 call	 _glm_pow2
  000e1	83 c4 04	 add	 esp, 4
  000e4	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR tv152[ebp]
  000ea	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv159[ebp]
  000f2	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR tv152[ebp]
  000fa	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR tv154[ebp], xmm0
  00102	d9 85 28 ff ff
	ff		 fld	 DWORD PTR tv154[ebp]

; 754  :        + glm_pow2(a[1] - b[1])
; 755  :        + glm_pow2(a[2] - b[2]);
; 756  : }

  00108	5f		 pop	 edi
  00109	5e		 pop	 esi
  0010a	5b		 pop	 ebx
  0010b	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00111	3b ec		 cmp	 ebp, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
_glm_vec3_distance2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_center
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_center PROC					; COMDAT

; 738  : glm_vec3_center(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 739  :   glm_vec3_add(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_add
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 740  :   glm_vec3_scale(dest, 0.5f, dest);

  0003c	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0003f	50		 push	 eax
  00040	51		 push	 ecx
  00041	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _glm_vec3_scale
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 741  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00063	3b ec		 cmp	 ebp, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_glm_vec3_center ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_proj
_TEXT	SEGMENT
tv85 = -204						; size = 4
tv90 = -200						; size = 4
tv80 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_proj PROC					; COMDAT

; 723  : glm_vec3_proj(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 724  :   glm_vec3_scale(b,

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_dot
  00039	83 c4 08	 add	 esp, 8
  0003c	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv80[ebp]
  00042	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv80[ebp]
  0004a	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0004d	50		 push	 eax
  0004e	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv90[ebp], xmm0
  00056	e8 00 00 00 00	 call	 _glm_vec3_norm2
  0005b	83 c4 04	 add	 esp, 4
  0005e	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR tv85[ebp]
  00064	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv90[ebp]
  0006c	f3 0f 5e 85 34
	ff ff ff	 divss	 xmm0, DWORD PTR tv85[ebp]
  00074	51		 push	 ecx
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _glm_vec3_scale
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 725  :                  glm_vec3_dot(a, b) / glm_vec3_norm2(b),
; 726  :                  dest);
; 727  : }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_glm_vec3_proj ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_rotate_m3
_TEXT	SEGMENT
_z$ = -128						; size = 16
_y$ = -96						; size = 16
_x$ = -64						; size = 16
_res$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_rotate_m3 PROC				; COMDAT

; 696  : glm_vec3_rotate_m3(mat3 m, vec3 v, vec3 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd b8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-328]
  00024	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 697  :   vec4 res, x, y, z;
; 698  : 
; 699  :   glm_vec4(m[0], 0.0f, x);

  00044	8d 45 c0	 lea	 eax, DWORD PTR _x$[ebp]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	0f 57 c0	 xorps	 xmm0, xmm0
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00056	6b d1 00	 imul	 edx, ecx, 0
  00059	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  0005c	52		 push	 edx
  0005d	e8 00 00 00 00	 call	 _glm_vec4
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 700  :   glm_vec4(m[1], 0.0f, y);

  00065	8d 45 a0	 lea	 eax, DWORD PTR _y$[ebp]
  00068	50		 push	 eax
  00069	51		 push	 ecx
  0006a	0f 57 c0	 xorps	 xmm0, xmm0
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00077	c1 e1 00	 shl	 ecx, 0
  0007a	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _glm_vec4
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 701  :   glm_vec4(m[2], 0.0f, z);

  00086	8d 45 80	 lea	 eax, DWORD PTR _z$[ebp]
  00089	50		 push	 eax
  0008a	51		 push	 ecx
  0008b	0f 57 c0	 xorps	 xmm0, xmm0
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00098	d1 e1		 shl	 ecx, 1
  0009a	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 _glm_vec4
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 702  : 
; 703  :   glm_vec4_normalize(x);

  000a6	8d 45 c0	 lea	 eax, DWORD PTR _x$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _glm_vec4_normalize
  000af	83 c4 04	 add	 esp, 4

; 704  :   glm_vec4_normalize(y);

  000b2	8d 45 a0	 lea	 eax, DWORD PTR _y$[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _glm_vec4_normalize
  000bb	83 c4 04	 add	 esp, 4

; 705  :   glm_vec4_normalize(z);

  000be	8d 45 80	 lea	 eax, DWORD PTR _z$[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 _glm_vec4_normalize
  000c7	83 c4 04	 add	 esp, 4

; 706  : 
; 707  :   glm_vec4_scale(x,   v[0], res);

  000ca	8d 45 e0	 lea	 eax, DWORD PTR _res$[ebp]
  000cd	50		 push	 eax
  000ce	b9 04 00 00 00	 mov	 ecx, 4
  000d3	6b d1 00	 imul	 edx, ecx, 0
  000d6	8b 43 0c	 mov	 eax, DWORD PTR _v$[ebx]
  000d9	51		 push	 ecx
  000da	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	8d 4d c0	 lea	 ecx, DWORD PTR _x$[ebp]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _glm_vec4_scale
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 708  :   glm_vec4_muladds(y, v[1], res);

  000f0	8d 45 e0	 lea	 eax, DWORD PTR _res$[ebp]
  000f3	50		 push	 eax
  000f4	b9 04 00 00 00	 mov	 ecx, 4
  000f9	c1 e1 00	 shl	 ecx, 0
  000fc	8b 53 0c	 mov	 edx, DWORD PTR _v$[ebx]
  000ff	51		 push	 ecx
  00100	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	8d 45 a0	 lea	 eax, DWORD PTR _y$[ebp]
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _glm_vec4_muladds
  00113	83 c4 0c	 add	 esp, 12			; 0000000cH

; 709  :   glm_vec4_muladds(z, v[2], res);

  00116	8d 45 e0	 lea	 eax, DWORD PTR _res$[ebp]
  00119	50		 push	 eax
  0011a	b9 04 00 00 00	 mov	 ecx, 4
  0011f	d1 e1		 shl	 ecx, 1
  00121	8b 53 0c	 mov	 edx, DWORD PTR _v$[ebx]
  00124	51		 push	 ecx
  00125	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	8d 45 80	 lea	 eax, DWORD PTR _z$[ebp]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 _glm_vec4_muladds
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH

; 710  : 
; 711  :   glm_vec3(res, dest);

  0013b	8b 43 10	 mov	 eax, DWORD PTR _dest$[ebx]
  0013e	50		 push	 eax
  0013f	8d 4d e0	 lea	 ecx, DWORD PTR _res$[ebp]
  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 _glm_vec3
  00148	83 c4 08	 add	 esp, 8

; 712  : }

  0014b	52		 push	 edx
  0014c	8b cd		 mov	 ecx, ebp
  0014e	50		 push	 eax
  0014f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@glm_vec3_r
  00155	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0015a	58		 pop	 eax
  0015b	5a		 pop	 edx
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	8b e3		 mov	 esp, ebx
  0016d	5b		 pop	 ebx
  0016e	c3		 ret	 0
  0016f	90		 npad	 1
$LN8@glm_vec3_r:
  00170	04 00 00 00	 DD	 4
  00174	00 00 00 00	 DD	 $LN7@glm_vec3_r
$LN7@glm_vec3_r:
  00178	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0017c	10 00 00 00	 DD	 16			; 00000010H
  00180	00 00 00 00	 DD	 $LN3@glm_vec3_r
  00184	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00188	10 00 00 00	 DD	 16			; 00000010H
  0018c	00 00 00 00	 DD	 $LN4@glm_vec3_r
  00190	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00194	10 00 00 00	 DD	 16			; 00000010H
  00198	00 00 00 00	 DD	 $LN5@glm_vec3_r
  0019c	80 ff ff ff	 DD	 -128			; ffffff80H
  001a0	10 00 00 00	 DD	 16			; 00000010H
  001a4	00 00 00 00	 DD	 $LN6@glm_vec3_r
$LN6@glm_vec3_r:
  001a8	7a		 DB	 122			; 0000007aH
  001a9	00		 DB	 0
$LN5@glm_vec3_r:
  001aa	79		 DB	 121			; 00000079H
  001ab	00		 DB	 0
$LN4@glm_vec3_r:
  001ac	78		 DB	 120			; 00000078H
  001ad	00		 DB	 0
$LN3@glm_vec3_r:
  001ae	72		 DB	 114			; 00000072H
  001af	65		 DB	 101			; 00000065H
  001b0	73		 DB	 115			; 00000073H
  001b1	00		 DB	 0
_glm_vec3_rotate_m3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_rotate_m4
_TEXT	SEGMENT
_res$ = -128						; size = 16
_z$ = -96						; size = 16
_y$ = -64						; size = 16
_x$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_rotate_m4 PROC				; COMDAT

; 673  : glm_vec3_rotate_m4(mat4 m, vec3 v, vec3 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd b8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-328]
  00024	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 674  :   vec4 x, y, z, res;
; 675  : 
; 676  :   glm_vec4_normalize_to(m[0], x);

  00044	8d 45 e0	 lea	 eax, DWORD PTR _x$[ebp]
  00047	50		 push	 eax
  00048	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0004d	6b d1 00	 imul	 edx, ecx, 0
  00050	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 _glm_vec4_normalize_to
  00059	83 c4 08	 add	 esp, 8

; 677  :   glm_vec4_normalize_to(m[1], y);

  0005c	8d 45 c0	 lea	 eax, DWORD PTR _y$[ebp]
  0005f	50		 push	 eax
  00060	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00065	c1 e1 00	 shl	 ecx, 0
  00068	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _glm_vec4_normalize_to
  00071	83 c4 08	 add	 esp, 8

; 678  :   glm_vec4_normalize_to(m[2], z);

  00074	8d 45 a0	 lea	 eax, DWORD PTR _z$[ebp]
  00077	50		 push	 eax
  00078	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007d	d1 e1		 shl	 ecx, 1
  0007f	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 _glm_vec4_normalize_to
  00088	83 c4 08	 add	 esp, 8

; 679  : 
; 680  :   glm_vec4_scale(x,   v[0], res);

  0008b	8d 45 80	 lea	 eax, DWORD PTR _res$[ebp]
  0008e	50		 push	 eax
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	6b d1 00	 imul	 edx, ecx, 0
  00097	8b 43 0c	 mov	 eax, DWORD PTR _v$[ebx]
  0009a	51		 push	 ecx
  0009b	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a5	8d 4d e0	 lea	 ecx, DWORD PTR _x$[ebp]
  000a8	51		 push	 ecx
  000a9	e8 00 00 00 00	 call	 _glm_vec4_scale
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 681  :   glm_vec4_muladds(y, v[1], res);

  000b1	8d 45 80	 lea	 eax, DWORD PTR _res$[ebp]
  000b4	50		 push	 eax
  000b5	b9 04 00 00 00	 mov	 ecx, 4
  000ba	c1 e1 00	 shl	 ecx, 0
  000bd	8b 53 0c	 mov	 edx, DWORD PTR _v$[ebx]
  000c0	51		 push	 ecx
  000c1	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	8d 45 c0	 lea	 eax, DWORD PTR _y$[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _glm_vec4_muladds
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 682  :   glm_vec4_muladds(z, v[2], res);

  000d7	8d 45 80	 lea	 eax, DWORD PTR _res$[ebp]
  000da	50		 push	 eax
  000db	b9 04 00 00 00	 mov	 ecx, 4
  000e0	d1 e1		 shl	 ecx, 1
  000e2	8b 53 0c	 mov	 edx, DWORD PTR _v$[ebx]
  000e5	51		 push	 ecx
  000e6	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	8d 45 a0	 lea	 eax, DWORD PTR _z$[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 _glm_vec4_muladds
  000f9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 683  : 
; 684  :   glm_vec3(res, dest);

  000fc	8b 43 10	 mov	 eax, DWORD PTR _dest$[ebx]
  000ff	50		 push	 eax
  00100	8d 4d 80	 lea	 ecx, DWORD PTR _res$[ebp]
  00103	51		 push	 ecx
  00104	e8 00 00 00 00	 call	 _glm_vec3
  00109	83 c4 08	 add	 esp, 8

; 685  : }

  0010c	52		 push	 edx
  0010d	8b cd		 mov	 ecx, ebp
  0010f	50		 push	 eax
  00110	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@glm_vec3_r
  00116	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011b	58		 pop	 eax
  0011c	5a		 pop	 edx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	33 cd		 xor	 ecx, ebp
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	8b e3		 mov	 esp, ebx
  0012e	5b		 pop	 ebx
  0012f	c3		 ret	 0
$LN8@glm_vec3_r:
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN7@glm_vec3_r
$LN7@glm_vec3_r:
  00138	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0013c	10 00 00 00	 DD	 16			; 00000010H
  00140	00 00 00 00	 DD	 $LN3@glm_vec3_r
  00144	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00148	10 00 00 00	 DD	 16			; 00000010H
  0014c	00 00 00 00	 DD	 $LN4@glm_vec3_r
  00150	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00154	10 00 00 00	 DD	 16			; 00000010H
  00158	00 00 00 00	 DD	 $LN5@glm_vec3_r
  0015c	80 ff ff ff	 DD	 -128			; ffffff80H
  00160	10 00 00 00	 DD	 16			; 00000010H
  00164	00 00 00 00	 DD	 $LN6@glm_vec3_r
$LN6@glm_vec3_r:
  00168	72		 DB	 114			; 00000072H
  00169	65		 DB	 101			; 00000065H
  0016a	73		 DB	 115			; 00000073H
  0016b	00		 DB	 0
$LN5@glm_vec3_r:
  0016c	7a		 DB	 122			; 0000007aH
  0016d	00		 DB	 0
$LN4@glm_vec3_r:
  0016e	79		 DB	 121			; 00000079H
  0016f	00		 DB	 0
$LN3@glm_vec3_r:
  00170	78		 DB	 120			; 00000078H
  00171	00		 DB	 0
_glm_vec3_rotate_m4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_rotate
_TEXT	SEGMENT
tv156 = -284						; size = 4
_s$ = -84						; size = 4
_c$ = -72						; size = 4
_k$ = -60						; size = 12
_v2$ = -40						; size = 12
_v1$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
_angle$ = 12						; size = 4
_axis$ = 16						; size = 4
_glm_vec3_rotate PROC					; COMDAT

; 635  : glm_vec3_rotate(vec3 v, float angle, vec3 axis) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-284]
  00012	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 636  :   vec3   v1, v2, k;
; 637  :   float  c, s;
; 638  : 
; 639  :   c = cosf(angle);

  00032	51		 push	 ecx
  00033	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	e8 00 00 00 00	 call	 _cosf
  00042	83 c4 04	 add	 esp, 4
  00045	d9 5d b8	 fstp	 DWORD PTR _c$[ebp]

; 640  :   s = sinf(angle);

  00048	51		 push	 ecx
  00049	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	e8 00 00 00 00	 call	 _sinf
  00058	83 c4 04	 add	 esp, 4
  0005b	d9 5d ac	 fstp	 DWORD PTR _s$[ebp]

; 641  : 
; 642  :   glm_vec3_normalize_to(axis, k);

  0005e	8d 45 c4	 lea	 eax, DWORD PTR _k$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 10	 mov	 ecx, DWORD PTR _axis$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 _glm_vec3_normalize_to
  0006b	83 c4 08	 add	 esp, 8

; 643  : 
; 644  :   /* Right Hand, Rodrigues' rotation formula:
; 645  :         v = v*cos(t) + (kxv)sin(t) + k*(k.v)(1 - cos(t))
; 646  :    */
; 647  :   glm_vec3_scale(v, c, v1);

  0006e	8d 45 ec	 lea	 eax, DWORD PTR _v1$[ebp]
  00071	50		 push	 eax
  00072	51		 push	 ecx
  00073	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _c$[ebp]
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 _glm_vec3_scale
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 648  : 
; 649  :   glm_vec3_cross(k, v, v2);

  00089	8d 45 d8	 lea	 eax, DWORD PTR _v2$[ebp]
  0008c	50		 push	 eax
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00090	51		 push	 ecx
  00091	8d 55 c4	 lea	 edx, DWORD PTR _k$[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 _glm_vec3_cross
  0009a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 650  :   glm_vec3_scale(v2, s, v2);

  0009d	8d 45 d8	 lea	 eax, DWORD PTR _v2$[ebp]
  000a0	50		 push	 eax
  000a1	51		 push	 ecx
  000a2	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _s$[ebp]
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	8d 4d d8	 lea	 ecx, DWORD PTR _v2$[ebp]
  000af	51		 push	 ecx
  000b0	e8 00 00 00 00	 call	 _glm_vec3_scale
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 651  : 
; 652  :   glm_vec3_add(v1, v2, v1);

  000b8	8d 45 ec	 lea	 eax, DWORD PTR _v1$[ebp]
  000bb	50		 push	 eax
  000bc	8d 4d d8	 lea	 ecx, DWORD PTR _v2$[ebp]
  000bf	51		 push	 ecx
  000c0	8d 55 ec	 lea	 edx, DWORD PTR _v1$[ebp]
  000c3	52		 push	 edx
  000c4	e8 00 00 00 00	 call	 _glm_vec3_add
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 653  : 
; 654  :   glm_vec3_scale(k, glm_vec3_dot(k, v) * (1.0f - c), v2);

  000cc	8d 45 d8	 lea	 eax, DWORD PTR _v2$[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  000d3	51		 push	 ecx
  000d4	8d 55 c4	 lea	 edx, DWORD PTR _k$[ebp]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 _glm_vec3_dot
  000dd	83 c4 08	 add	 esp, 8
  000e0	d9 9d e4 fe ff
	ff		 fstp	 DWORD PTR tv156[ebp]
  000e6	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv156[ebp]
  000ee	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  000f6	f3 0f 5c 4d b8	 subss	 xmm1, DWORD PTR _c$[ebp]
  000fb	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000ff	51		 push	 ecx
  00100	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00105	8d 45 c4	 lea	 eax, DWORD PTR _k$[ebp]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _glm_vec3_scale
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 655  :   glm_vec3_add(v1, v2, v);

  00111	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00114	50		 push	 eax
  00115	8d 4d d8	 lea	 ecx, DWORD PTR _v2$[ebp]
  00118	51		 push	 ecx
  00119	8d 55 ec	 lea	 edx, DWORD PTR _v1$[ebp]
  0011c	52		 push	 edx
  0011d	e8 00 00 00 00	 call	 _glm_vec3_add
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH

; 656  : }

  00125	52		 push	 edx
  00126	8b cd		 mov	 ecx, ebp
  00128	50		 push	 eax
  00129	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@glm_vec3_r
  0012f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00134	58		 pop	 eax
  00135	5a		 pop	 edx
  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	5b		 pop	 ebx
  00139	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013c	33 cd		 xor	 ecx, ebp
  0013e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00143	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  00149	3b ec		 cmp	 ebp, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c3		 ret	 0
$LN7@glm_vec3_r:
  00154	03 00 00 00	 DD	 3
  00158	00 00 00 00	 DD	 $LN6@glm_vec3_r
$LN6@glm_vec3_r:
  0015c	ec ff ff ff	 DD	 -20			; ffffffecH
  00160	0c 00 00 00	 DD	 12			; 0000000cH
  00164	00 00 00 00	 DD	 $LN3@glm_vec3_r
  00168	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0016c	0c 00 00 00	 DD	 12			; 0000000cH
  00170	00 00 00 00	 DD	 $LN4@glm_vec3_r
  00174	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00178	0c 00 00 00	 DD	 12			; 0000000cH
  0017c	00 00 00 00	 DD	 $LN5@glm_vec3_r
$LN5@glm_vec3_r:
  00180	6b		 DB	 107			; 0000006bH
  00181	00		 DB	 0
$LN4@glm_vec3_r:
  00182	76		 DB	 118			; 00000076H
  00183	32		 DB	 50			; 00000032H
  00184	00		 DB	 0
$LN3@glm_vec3_r:
  00185	76		 DB	 118			; 00000076H
  00186	31		 DB	 49			; 00000031H
  00187	00		 DB	 0
_glm_vec3_rotate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_angle
_TEXT	SEGMENT
tv91 = -228						; size = 4
tv141 = -224						; size = 4
tv130 = -220						; size = 4
tv86 = -220						; size = 4
_dot$ = -20						; size = 4
_norm$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_angle PROC					; COMDAT

; 611  : glm_vec3_angle(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 612  :   float norm, dot;
; 613  : 
; 614  :   /* maybe compiler generate approximation instruction (rcp) */
; 615  :   norm = 1.0f / (glm_vec3_norm(a) * glm_vec3_norm(b));

  00028	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm
  00031	83 c4 04	 add	 esp, 4
  00034	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv86[ebp]
  0003a	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv86[ebp]
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00045	51		 push	 ecx
  00046	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR tv141[ebp], xmm0
  0004e	e8 00 00 00 00	 call	 _glm_vec3_norm
  00053	83 c4 04	 add	 esp, 4
  00056	d9 9d 1c ff ff
	ff		 fstp	 DWORD PTR tv91[ebp]
  0005c	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR tv141[ebp]
  00064	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR tv91[ebp]
  0006c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00074	f3 0f 5e c8	 divss	 xmm1, xmm0
  00078	f3 0f 11 4d f8	 movss	 DWORD PTR _norm$[ebp], xmm1

; 616  :   dot  = glm_vec3_dot(a, b) * norm;

  0007d	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 _glm_vec3_dot
  0008a	83 c4 08	 add	 esp, 8
  0008d	d9 9d 24 ff ff
	ff		 fstp	 DWORD PTR tv130[ebp]
  00093	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR tv130[ebp]
  0009b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _norm$[ebp]
  000a0	f3 0f 11 45 ec	 movss	 DWORD PTR _dot$[ebp], xmm0

; 617  : 
; 618  :   if (dot > 1.0f)

  000a5	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dot$[ebp]
  000aa	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000b1	76 06		 jbe	 SHORT $LN2@glm_vec3_a

; 619  :     return 0.0f;

  000b3	d9 ee		 fldz
  000b5	eb 2b		 jmp	 SHORT $LN1@glm_vec3_a
  000b7	eb 16		 jmp	 SHORT $LN4@glm_vec3_a
$LN2@glm_vec3_a:

; 620  :   else if (dot < -1.0f)

  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000c1	0f 2f 45 ec	 comiss	 xmm0, DWORD PTR _dot$[ebp]
  000c5	76 08		 jbe	 SHORT $LN4@glm_vec3_a

; 621  :     return CGLM_PI;

  000c7	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@40490fdb
  000cd	eb 13		 jmp	 SHORT $LN1@glm_vec3_a
$LN4@glm_vec3_a:

; 622  : 
; 623  :   return acosf(dot);

  000cf	51		 push	 ecx
  000d0	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _dot$[ebp]
  000d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000da	e8 00 00 00 00	 call	 _acosf
  000df	83 c4 04	 add	 esp, 4
$LN1@glm_vec3_a:

; 624  : }

  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000eb	3b ec		 cmp	 ebp, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c3		 ret	 0
_glm_vec3_angle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_crossn
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_crossn PROC					; COMDAT

; 596  : glm_vec3_crossn(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 597  :   glm_vec3_cross(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec3_cross
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 598  :   glm_vec3_normalize(dest);

  0003c	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _glm_vec3_normalize
  00045	83 c4 04	 add	 esp, 4

; 599  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_glm_vec3_crossn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_cross
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_cross PROC					; COMDAT

; 580  : glm_vec3_cross(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 581  :   /* (u2.v3 - u3.v2, u3.v1 - u1.v3, u1.v2 - u2.v1) */
; 582  :   dest[0] = a[1] * b[2] - a[2] * b[1];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	c1 e0 00	 shl	 eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	d1 e1		 shl	 ecx, 1
  00037	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003a	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00042	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	d1 e0		 shl	 eax, 1
  0004e	b9 04 00 00 00	 mov	 ecx, 4
  00053	c1 e1 00	 shl	 ecx, 0
  00056	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00059	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0005c	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00061	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00066	f3 0f 5c c1	 subss	 xmm0, xmm1
  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	6b c8 00	 imul	 ecx, eax, 0
  00072	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00075	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 583  :   dest[1] = a[2] * b[0] - a[0] * b[2];

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	d1 e0		 shl	 eax, 1
  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	6b d1 00	 imul	 edx, ecx, 0
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0008c	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0008f	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00094	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  00099	ba 04 00 00 00	 mov	 edx, 4
  0009e	6b c2 00	 imul	 eax, edx, 0
  000a1	b9 04 00 00 00	 mov	 ecx, 4
  000a6	d1 e1		 shl	 ecx, 1
  000a8	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000ab	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000ae	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000b3	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  000b8	f3 0f 5c c1	 subss	 xmm0, xmm1
  000bc	b8 04 00 00 00	 mov	 eax, 4
  000c1	c1 e0 00	 shl	 eax, 0
  000c4	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000c7	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 584  :   dest[2] = a[0] * b[1] - a[1] * b[0];

  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	6b c8 00	 imul	 ecx, eax, 0
  000d4	ba 04 00 00 00	 mov	 edx, 4
  000d9	c1 e2 00	 shl	 edx, 0
  000dc	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000df	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000e2	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000e7	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  000ec	b9 04 00 00 00	 mov	 ecx, 4
  000f1	c1 e1 00	 shl	 ecx, 0
  000f4	ba 04 00 00 00	 mov	 edx, 4
  000f9	6b c2 00	 imul	 eax, edx, 0
  000fc	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000ff	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00102	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00107	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  0010c	f3 0f 5c c1	 subss	 xmm0, xmm1
  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	d1 e0		 shl	 eax, 1
  00117	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0011a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 585  : }

  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00128	3b ec		 cmp	 ebp, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
_glm_vec3_cross ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_normalize_to
_TEXT	SEGMENT
_norm$ = -8						; size = 4
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_normalize_to PROC				; COMDAT

; 558  : glm_vec3_normalize_to(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 559  :   float norm;
; 560  : 
; 561  :   norm = glm_vec3_norm(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm
  00031	83 c4 04	 add	 esp, 4
  00034	d9 5d f8	 fstp	 DWORD PTR _norm$[ebp]

; 562  : 
; 563  :   if (norm == 0.0f) {

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _norm$[ebp]
  0003c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00043	9f		 lahf
  00044	f6 c4 44	 test	 ah, 68			; 00000044H
  00047	7a 0e		 jp	 SHORT $LN2@glm_vec3_n

; 564  :     glm_vec3_zero(dest);

  00049	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _glm_vec3_zero
  00052	83 c4 04	 add	 esp, 4

; 565  :     return;

  00055	eb 23		 jmp	 SHORT $LN1@glm_vec3_n
$LN2@glm_vec3_n:

; 566  :   }
; 567  : 
; 568  :   glm_vec3_scale(v, 1.0f / norm, dest);

  00057	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0005a	50		 push	 eax
  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00063	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _norm$[ebp]
  00068	51		 push	 ecx
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 _glm_vec3_scale
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@glm_vec3_n:

; 569  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec3_normalize_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_normalize
_TEXT	SEGMENT
_norm$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec3_normalize PROC				; COMDAT

; 537  : glm_vec3_normalize(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 538  :   float norm;
; 539  : 
; 540  :   norm = glm_vec3_norm(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm
  00031	83 c4 04	 add	 esp, 4
  00034	d9 5d f8	 fstp	 DWORD PTR _norm$[ebp]

; 541  : 
; 542  :   if (norm == 0.0f) {

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _norm$[ebp]
  0003c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00043	9f		 lahf
  00044	f6 c4 44	 test	 ah, 68			; 00000044H
  00047	7a 3a		 jp	 SHORT $LN2@glm_vec3_n

; 543  :     v[0] = v[1] = v[2] = 0.0f;

  00049	b8 04 00 00 00	 mov	 eax, 4
  0004e	d1 e0		 shl	 eax, 1
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00053	0f 57 c0	 xorps	 xmm0, xmm0
  00056	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  0005b	ba 04 00 00 00	 mov	 edx, 4
  00060	c1 e2 00	 shl	 edx, 0
  00063	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00066	0f 57 c0	 xorps	 xmm0, xmm0
  00069	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  0006e	b9 04 00 00 00	 mov	 ecx, 4
  00073	6b d1 00	 imul	 edx, ecx, 0
  00076	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00079	0f 57 c0	 xorps	 xmm0, xmm0
  0007c	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 544  :     return;

  00081	eb 23		 jmp	 SHORT $LN1@glm_vec3_n
$LN2@glm_vec3_n:

; 545  :   }
; 546  : 
; 547  :   glm_vec3_scale(v, 1.0f / norm, v);

  00083	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00086	50		 push	 eax
  00087	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008f	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _norm$[ebp]
  00094	51		 push	 ecx
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 _glm_vec3_scale
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@glm_vec3_n:

; 548  : }

  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000af	3b ec		 cmp	 ebp, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_glm_vec3_normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_negate
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec3_negate PROC					; COMDAT

; 526  : glm_vec3_negate(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 527  :   glm_vec3_negate_to(v, v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_negate_to
  00035	83 c4 08	 add	 esp, 8

; 528  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_vec3_negate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_negate_to
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_negate_to PROC				; COMDAT

; 513  : glm_vec3_negate_to(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 514  :   dest[0] = -v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0003f	b8 04 00 00 00	 mov	 eax, 4
  00044	6b c8 00	 imul	 ecx, eax, 0
  00047	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0004a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 515  :   dest[1] = -v[1];

  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	c1 e0 00	 shl	 eax, 0
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005a	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0005f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00066	ba 04 00 00 00	 mov	 edx, 4
  0006b	c1 e2 00	 shl	 edx, 0
  0006e	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00071	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 516  :   dest[2] = -v[2];

  00076	b8 04 00 00 00	 mov	 eax, 4
  0007b	d1 e0		 shl	 eax, 1
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00080	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00085	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00096	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 517  : }

  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000a4	3b ec		 cmp	 ebp, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_glm_vec3_negate_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_minadd
_TEXT	SEGMENT
tv181 = -196						; size = 4
tv164 = -196						; size = 4
tv147 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_minadd PROC					; COMDAT

; 499  : glm_vec3_minadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 500  :   dest[0] += glm_min(a[0], b[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b f0 00	 imul	 esi, eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	6b d1 00	 imul	 edx, ecx, 0
  00038	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0003b	51		 push	 ecx
  0003c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	b9 04 00 00 00	 mov	 ecx, 4
  0004b	6b d1 00	 imul	 edx, ecx, 0
  0004e	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00051	51		 push	 ecx
  00052	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	e8 00 00 00 00	 call	 _glm_min
  00061	83 c4 08	 add	 esp, 8
  00064	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv147[ebp]
  0006a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0006d	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv147[ebp]
  00075	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  0007a	ba 04 00 00 00	 mov	 edx, 4
  0007f	6b c2 00	 imul	 eax, edx, 0
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00085	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 501  :   dest[1] += glm_min(a[1], b[1]);

  0008a	be 04 00 00 00	 mov	 esi, 4
  0008f	c1 e6 00	 shl	 esi, 0
  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	c1 e0 00	 shl	 eax, 0
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0009d	51		 push	 ecx
  0009e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	ba 04 00 00 00	 mov	 edx, 4
  000ad	c1 e2 00	 shl	 edx, 0
  000b0	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000b3	51		 push	 ecx
  000b4	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	e8 00 00 00 00	 call	 _glm_min
  000c3	83 c4 08	 add	 esp, 8
  000c6	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv164[ebp]
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000cf	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv164[ebp]
  000d7	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  000dc	ba 04 00 00 00	 mov	 edx, 4
  000e1	c1 e2 00	 shl	 edx, 0
  000e4	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000e7	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 502  :   dest[2] += glm_min(a[2], b[2]);

  000ec	be 04 00 00 00	 mov	 esi, 4
  000f1	d1 e6		 shl	 esi, 1
  000f3	b8 04 00 00 00	 mov	 eax, 4
  000f8	d1 e0		 shl	 eax, 1
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  000fd	51		 push	 ecx
  000fe	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	ba 04 00 00 00	 mov	 edx, 4
  0010d	d1 e2		 shl	 edx, 1
  0010f	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00112	51		 push	 ecx
  00113	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	e8 00 00 00 00	 call	 _glm_min
  00122	83 c4 08	 add	 esp, 8
  00125	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv181[ebp]
  0012b	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0012e	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv181[ebp]
  00136	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  0013b	ba 04 00 00 00	 mov	 edx, 4
  00140	d1 e2		 shl	 edx, 1
  00142	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00145	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 503  : }

  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
_glm_vec3_minadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_maxadd
_TEXT	SEGMENT
tv181 = -196						; size = 4
tv164 = -196						; size = 4
tv147 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_maxadd PROC					; COMDAT

; 482  : glm_vec3_maxadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 483  :   dest[0] += glm_max(a[0], b[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b f0 00	 imul	 esi, eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	6b d1 00	 imul	 edx, ecx, 0
  00038	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0003b	51		 push	 ecx
  0003c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	b9 04 00 00 00	 mov	 ecx, 4
  0004b	6b d1 00	 imul	 edx, ecx, 0
  0004e	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00051	51		 push	 ecx
  00052	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	e8 00 00 00 00	 call	 _glm_max
  00061	83 c4 08	 add	 esp, 8
  00064	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv147[ebp]
  0006a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0006d	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv147[ebp]
  00075	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  0007a	ba 04 00 00 00	 mov	 edx, 4
  0007f	6b c2 00	 imul	 eax, edx, 0
  00082	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00085	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 484  :   dest[1] += glm_max(a[1], b[1]);

  0008a	be 04 00 00 00	 mov	 esi, 4
  0008f	c1 e6 00	 shl	 esi, 0
  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	c1 e0 00	 shl	 eax, 0
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0009d	51		 push	 ecx
  0009e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	ba 04 00 00 00	 mov	 edx, 4
  000ad	c1 e2 00	 shl	 edx, 0
  000b0	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000b3	51		 push	 ecx
  000b4	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000be	e8 00 00 00 00	 call	 _glm_max
  000c3	83 c4 08	 add	 esp, 8
  000c6	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv164[ebp]
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000cf	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv164[ebp]
  000d7	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  000dc	ba 04 00 00 00	 mov	 edx, 4
  000e1	c1 e2 00	 shl	 edx, 0
  000e4	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000e7	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 485  :   dest[2] += glm_max(a[2], b[2]);

  000ec	be 04 00 00 00	 mov	 esi, 4
  000f1	d1 e6		 shl	 esi, 1
  000f3	b8 04 00 00 00	 mov	 eax, 4
  000f8	d1 e0		 shl	 eax, 1
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  000fd	51		 push	 ecx
  000fe	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00103	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00108	ba 04 00 00 00	 mov	 edx, 4
  0010d	d1 e2		 shl	 edx, 1
  0010f	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00112	51		 push	 ecx
  00113	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	e8 00 00 00 00	 call	 _glm_max
  00122	83 c4 08	 add	 esp, 8
  00125	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv181[ebp]
  0012b	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0012e	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv181[ebp]
  00136	f3 0f 58 04 31	 addss	 xmm0, DWORD PTR [ecx+esi]
  0013b	ba 04 00 00 00	 mov	 edx, 4
  00140	d1 e2		 shl	 edx, 1
  00142	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00145	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 486  : }

  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5b		 pop	 ebx
  0014d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
_glm_vec3_maxadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_muladds
_TEXT	SEGMENT
_a$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_muladds PROC					; COMDAT

; 465  : glm_vec3_muladds(vec3 a, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 466  :   dest[0] += a[0] * s;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00040	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00045	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00048	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0004d	b9 04 00 00 00	 mov	 ecx, 4
  00052	6b d1 00	 imul	 edx, ecx, 0
  00055	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00058	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 467  :   dest[1] += a[1] * s;

  0005d	b8 04 00 00 00	 mov	 eax, 4
  00062	c1 e0 00	 shl	 eax, 0
  00065	b9 04 00 00 00	 mov	 ecx, 4
  0006a	c1 e1 00	 shl	 ecx, 0
  0006d	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00070	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00075	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0007d	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00082	ba 04 00 00 00	 mov	 edx, 4
  00087	c1 e2 00	 shl	 edx, 0
  0008a	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0008d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 468  :   dest[2] += a[2] * s;

  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	d1 e0		 shl	 eax, 1
  00099	b9 04 00 00 00	 mov	 ecx, 4
  0009e	d1 e1		 shl	 ecx, 1
  000a0	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000a3	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000a8	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  000b5	ba 04 00 00 00	 mov	 edx, 4
  000ba	d1 e2		 shl	 edx, 1
  000bc	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000bf	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 469  : }

  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx
  000c7	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
_glm_vec3_muladds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_muladd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_muladd PROC					; COMDAT

; 448  : glm_vec3_muladd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 449  :   dest[0] += a[0] * b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	ba 04 00 00 00	 mov	 edx, 4
  0003d	6b d2 00	 imul	 edx, edx, 0
  00040	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00043	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  00046	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  0004b	f3 0f 59 04 17	 mulss	 xmm0, DWORD PTR [edi+edx]
  00050	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00053	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00058	b9 04 00 00 00	 mov	 ecx, 4
  0005d	6b d1 00	 imul	 edx, ecx, 0
  00060	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00063	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 450  :   dest[1] += a[1] * b[1];

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	c1 e0 00	 shl	 eax, 0
  00070	b9 04 00 00 00	 mov	 ecx, 4
  00075	c1 e1 00	 shl	 ecx, 0
  00078	ba 04 00 00 00	 mov	 edx, 4
  0007d	c1 e2 00	 shl	 edx, 0
  00080	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00083	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  00086	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0008b	f3 0f 59 04 17	 mulss	 xmm0, DWORD PTR [edi+edx]
  00090	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00093	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00098	ba 04 00 00 00	 mov	 edx, 4
  0009d	c1 e2 00	 shl	 edx, 0
  000a0	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000a3	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 451  :   dest[2] += a[2] * b[2];

  000a8	b8 04 00 00 00	 mov	 eax, 4
  000ad	d1 e0		 shl	 eax, 1
  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	d1 e1		 shl	 ecx, 1
  000b6	ba 04 00 00 00	 mov	 edx, 4
  000bb	d1 e2		 shl	 edx, 1
  000bd	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  000c0	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  000c3	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  000c8	f3 0f 59 04 17	 mulss	 xmm0, DWORD PTR [edi+edx]
  000cd	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000d0	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  000d5	ba 04 00 00 00	 mov	 edx, 4
  000da	d1 e2		 shl	 edx, 1
  000dc	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000df	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 452  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_glm_vec3_muladd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_subadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_subadd PROC					; COMDAT

; 431  : glm_vec3_subadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 432  :   dest[0] += a[0] - b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	ba 04 00 00 00	 mov	 edx, 4
  0003d	6b d2 00	 imul	 edx, edx, 0
  00040	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00043	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  00046	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  0004b	f3 0f 5c 04 17	 subss	 xmm0, DWORD PTR [edi+edx]
  00050	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00053	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00058	b9 04 00 00 00	 mov	 ecx, 4
  0005d	6b d1 00	 imul	 edx, ecx, 0
  00060	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00063	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 433  :   dest[1] += a[1] - b[1];

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	c1 e0 00	 shl	 eax, 0
  00070	b9 04 00 00 00	 mov	 ecx, 4
  00075	c1 e1 00	 shl	 ecx, 0
  00078	ba 04 00 00 00	 mov	 edx, 4
  0007d	c1 e2 00	 shl	 edx, 0
  00080	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00083	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  00086	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0008b	f3 0f 5c 04 17	 subss	 xmm0, DWORD PTR [edi+edx]
  00090	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00093	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00098	ba 04 00 00 00	 mov	 edx, 4
  0009d	c1 e2 00	 shl	 edx, 0
  000a0	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000a3	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 434  :   dest[2] += a[2] - b[2];

  000a8	b8 04 00 00 00	 mov	 eax, 4
  000ad	d1 e0		 shl	 eax, 1
  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	d1 e1		 shl	 ecx, 1
  000b6	ba 04 00 00 00	 mov	 edx, 4
  000bb	d1 e2		 shl	 edx, 1
  000bd	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  000c0	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  000c3	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  000c8	f3 0f 5c 04 17	 subss	 xmm0, DWORD PTR [edi+edx]
  000cd	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000d0	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  000d5	ba 04 00 00 00	 mov	 edx, 4
  000da	d1 e2		 shl	 edx, 1
  000dc	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000df	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 435  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_glm_vec3_subadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_addadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_addadd PROC					; COMDAT

; 414  : glm_vec3_addadd(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 415  :   dest[0] += a[0] + b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	ba 04 00 00 00	 mov	 edx, 4
  0003d	6b d2 00	 imul	 edx, edx, 0
  00040	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00043	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  00046	f3 0f 10 04 06	 movss	 xmm0, DWORD PTR [esi+eax]
  0004b	f3 0f 58 04 17	 addss	 xmm0, DWORD PTR [edi+edx]
  00050	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00053	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00058	b9 04 00 00 00	 mov	 ecx, 4
  0005d	6b d1 00	 imul	 edx, ecx, 0
  00060	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00063	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 416  :   dest[1] += a[1] + b[1];

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	c1 e0 00	 shl	 eax, 0
  00070	b9 04 00 00 00	 mov	 ecx, 4
  00075	c1 e1 00	 shl	 ecx, 0
  00078	ba 04 00 00 00	 mov	 edx, 4
  0007d	c1 e2 00	 shl	 edx, 0
  00080	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00083	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  00086	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  0008b	f3 0f 58 04 17	 addss	 xmm0, DWORD PTR [edi+edx]
  00090	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00093	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00098	ba 04 00 00 00	 mov	 edx, 4
  0009d	c1 e2 00	 shl	 edx, 0
  000a0	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000a3	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 417  :   dest[2] += a[2] + b[2];

  000a8	b8 04 00 00 00	 mov	 eax, 4
  000ad	d1 e0		 shl	 eax, 1
  000af	b9 04 00 00 00	 mov	 ecx, 4
  000b4	d1 e1		 shl	 ecx, 1
  000b6	ba 04 00 00 00	 mov	 edx, 4
  000bb	d1 e2		 shl	 edx, 1
  000bd	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  000c0	8b 7d 0c	 mov	 edi, DWORD PTR _b$[ebp]
  000c3	f3 0f 10 04 0e	 movss	 xmm0, DWORD PTR [esi+ecx]
  000c8	f3 0f 58 04 17	 addss	 xmm0, DWORD PTR [edi+edx]
  000cd	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000d0	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  000d5	ba 04 00 00 00	 mov	 edx, 4
  000da	d1 e2		 shl	 edx, 1
  000dc	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000df	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 418  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_glm_vec3_addadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_divs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_divs PROC					; COMDAT

; 397  : glm_vec3_divs(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 398  :   dest[0] = v[0] / s;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 5e 45 0c	 divss	 xmm0, DWORD PTR _s$[ebp]
  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00048	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 399  :   dest[1] = v[1] / s;

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	c1 e0 00	 shl	 eax, 0
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0005d	f3 0f 5e 45 0c	 divss	 xmm0, DWORD PTR _s$[ebp]
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	c1 e2 00	 shl	 edx, 0
  0006a	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0006d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 400  :   dest[2] = v[2] / s;

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	d1 e0		 shl	 eax, 1
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0007c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00081	f3 0f 5e 45 0c	 divss	 xmm0, DWORD PTR _s$[ebp]
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	d1 e2		 shl	 edx, 1
  0008d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00090	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 401  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_glm_vec3_divs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_div
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_div PROC					; COMDAT

; 382  : glm_vec3_div(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 383  :   dest[0] = a[0] / b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 5e 04 06	 divss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00053	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 384  :   dest[1] = a[1] / b[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 04 00 00 00	 mov	 ecx, 4
  00065	c1 e1 00	 shl	 ecx, 0
  00068	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00073	f3 0f 5e 04 0e	 divss	 xmm0, DWORD PTR [esi+ecx]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	c1 e0 00	 shl	 eax, 0
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00083	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 385  :   dest[2] = a[2] / b[2];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	d1 e0		 shl	 eax, 1
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	d1 e1		 shl	 ecx, 1
  00096	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00099	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0009c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000a1	f3 0f 5e 04 0e	 divss	 xmm0, DWORD PTR [esi+ecx]
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	d1 e0		 shl	 eax, 1
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 386  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_div ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_scale_as
_TEXT	SEGMENT
_norm$ = -8						; size = 4
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_scale_as PROC					; COMDAT

; 361  : glm_vec3_scale_as(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 362  :   float norm;
; 363  :   norm = glm_vec3_norm(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm
  00031	83 c4 04	 add	 esp, 4
  00034	d9 5d f8	 fstp	 DWORD PTR _norm$[ebp]

; 364  : 
; 365  :   if (norm == 0.0f) {

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _norm$[ebp]
  0003c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00043	9f		 lahf
  00044	f6 c4 44	 test	 ah, 68			; 00000044H
  00047	7a 0e		 jp	 SHORT $LN2@glm_vec3_s

; 366  :     glm_vec3_zero(dest);

  00049	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _glm_vec3_zero
  00052	83 c4 04	 add	 esp, 4

; 367  :     return;

  00055	eb 20		 jmp	 SHORT $LN1@glm_vec3_s
$LN2@glm_vec3_s:

; 368  :   }
; 369  : 
; 370  :   glm_vec3_scale(v, s / norm, dest);

  00057	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0005a	50		 push	 eax
  0005b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00060	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _norm$[ebp]
  00065	51		 push	 ecx
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _glm_vec3_scale
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@glm_vec3_s:

; 371  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
_glm_vec3_scale_as ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_scale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_scale PROC					; COMDAT

; 346  : glm_vec3_scale(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 347  :   dest[0] = v[0] * s;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00048	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 348  :   dest[1] = v[1] * s;

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	c1 e0 00	 shl	 eax, 0
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0005d	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	c1 e2 00	 shl	 edx, 0
  0006a	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0006d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 349  :   dest[2] = v[2] * s;

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	d1 e0		 shl	 eax, 1
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0007c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00081	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	d1 e2		 shl	 edx, 1
  0008d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00090	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 350  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_glm_vec3_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_mul
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_mul PROC					; COMDAT

; 331  : glm_vec3_mul(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 332  :   dest[0] = a[0] * b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00053	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 333  :   dest[1] = a[1] * b[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 04 00 00 00	 mov	 ecx, 4
  00065	c1 e1 00	 shl	 ecx, 0
  00068	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00073	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	c1 e0 00	 shl	 eax, 0
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00083	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 334  :   dest[2] = a[2] * b[2];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	d1 e0		 shl	 eax, 1
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	d1 e1		 shl	 ecx, 1
  00096	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00099	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0009c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000a1	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	d1 e0		 shl	 eax, 1
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 335  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_subs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_subs PROC					; COMDAT

; 316  : glm_vec3_subs(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 317  :   dest[0] = v[0] - s;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _s$[ebp]
  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00048	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 318  :   dest[1] = v[1] - s;

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	c1 e0 00	 shl	 eax, 0
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0005d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _s$[ebp]
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	c1 e2 00	 shl	 edx, 0
  0006a	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0006d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 319  :   dest[2] = v[2] - s;

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	d1 e0		 shl	 eax, 1
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0007c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00081	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _s$[ebp]
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	d1 e2		 shl	 edx, 1
  0008d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00090	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 320  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_glm_vec3_subs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_sub
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_sub PROC					; COMDAT

; 301  : glm_vec3_sub(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 302  :   dest[0] = a[0] - b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00053	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 303  :   dest[1] = a[1] - b[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 04 00 00 00	 mov	 ecx, 4
  00065	c1 e1 00	 shl	 ecx, 0
  00068	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00073	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	c1 e0 00	 shl	 eax, 0
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00083	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 304  :   dest[2] = a[2] - b[2];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	d1 e0		 shl	 eax, 1
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	d1 e1		 shl	 ecx, 1
  00096	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00099	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0009c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000a1	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	d1 e0		 shl	 eax, 1
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 305  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_adds
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_adds PROC					; COMDAT

; 286  : glm_vec3_adds(vec3 v, float s, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 287  :   dest[0] = v[0] + s;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _s$[ebp]
  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00048	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 288  :   dest[1] = v[1] + s;

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	c1 e0 00	 shl	 eax, 0
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0005d	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _s$[ebp]
  00062	ba 04 00 00 00	 mov	 edx, 4
  00067	c1 e2 00	 shl	 edx, 0
  0006a	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0006d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 289  :   dest[2] = v[2] + s;

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	d1 e0		 shl	 eax, 1
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0007c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00081	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _s$[ebp]
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	d1 e2		 shl	 edx, 1
  0008d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00090	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 290  : }

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_glm_vec3_adds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_add
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_add PROC					; COMDAT

; 271  : glm_vec3_add(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 272  :   dest[0] = a[0] + b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 58 04 06	 addss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00053	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 273  :   dest[1] = a[1] + b[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 04 00 00 00	 mov	 ecx, 4
  00065	c1 e1 00	 shl	 ecx, 0
  00068	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00073	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	c1 e0 00	 shl	 eax, 0
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00083	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 274  :   dest[2] = a[2] + b[2];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	d1 e0		 shl	 eax, 1
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	d1 e1		 shl	 ecx, 1
  00096	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00099	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0009c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000a1	f3 0f 58 04 0e	 addss	 xmm0, DWORD PTR [esi+ecx]
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	d1 e0		 shl	 eax, 1
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 275  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_norm_inf
_TEXT	SEGMENT
_t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
_glm_vec3_norm_inf PROC					; COMDAT

; 256  : glm_vec3_norm_inf(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 257  :   vec3 t;
; 258  :   glm_vec3_abs(v, t);

  00032	8d 45 ec	 lea	 eax, DWORD PTR _t$[ebp]
  00035	50		 push	 eax
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _glm_vec3_abs
  0003f	83 c4 08	 add	 esp, 8

; 259  :   return glm_vec3_max(t);

  00042	8d 45 ec	 lea	 eax, DWORD PTR _t$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _glm_vec3_max
  0004b	83 c4 04	 add	 esp, 4

; 260  : }

  0004e	52		 push	 edx
  0004f	8b cd		 mov	 ecx, ebp
  00051	50		 push	 eax
  00052	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_vec3_n
  00058	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0005d	58		 pop	 eax
  0005e	5a		 pop	 edx
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN5@glm_vec3_n:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN4@glm_vec3_n
$LN4@glm_vec3_n:
  00088	ec ff ff ff	 DD	 -20			; ffffffecH
  0008c	0c 00 00 00	 DD	 12			; 0000000cH
  00090	00 00 00 00	 DD	 $LN3@glm_vec3_n
$LN3@glm_vec3_n:
  00094	74		 DB	 116			; 00000074H
  00095	00		 DB	 0
_glm_vec3_norm_inf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_norm_one
_TEXT	SEGMENT
_t$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
_glm_vec3_norm_one PROC					; COMDAT

; 235  : glm_vec3_norm_one(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 236  :   vec3 t;
; 237  :   glm_vec3_abs(v, t);

  00032	8d 45 ec	 lea	 eax, DWORD PTR _t$[ebp]
  00035	50		 push	 eax
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _glm_vec3_abs
  0003f	83 c4 08	 add	 esp, 8

; 238  :   return glm_vec3_hadd(t);

  00042	8d 45 ec	 lea	 eax, DWORD PTR _t$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _glm_vec3_hadd
  0004b	83 c4 04	 add	 esp, 4

; 239  : }

  0004e	52		 push	 edx
  0004f	8b cd		 mov	 ecx, ebp
  00051	50		 push	 eax
  00052	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_vec3_n
  00058	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0005d	58		 pop	 eax
  0005e	5a		 pop	 edx
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	33 cd		 xor	 ecx, ebp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN5@glm_vec3_n:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN4@glm_vec3_n
$LN4@glm_vec3_n:
  00088	ec ff ff ff	 DD	 -20			; ffffffecH
  0008c	0c 00 00 00	 DD	 12			; 0000000cH
  00090	00 00 00 00	 DD	 $LN3@glm_vec3_n
$LN3@glm_vec3_n:
  00094	74		 DB	 116			; 00000074H
  00095	00		 DB	 0
_glm_vec3_norm_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_norm
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec3_norm PROC					; COMDAT

; 215  : glm_vec3_norm(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 216  :   return sqrtf(glm_vec3_norm2(v));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_norm2
  00031	d9 1c 24	 fstp	 DWORD PTR [esp]
  00034	e8 00 00 00 00	 call	 _sqrtf
  00039	83 c4 04	 add	 esp, 4

; 217  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glm_vec3_norm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_norm2
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec3_norm2 PROC					; COMDAT

; 201  : glm_vec3_norm2(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 202  :   return glm_vec3_dot(v, v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec3_dot
  00035	83 c4 08	 add	 esp, 8

; 203  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_vec3_norm2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_dot
_TEXT	SEGMENT
tv130 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_dot PROC					; COMDAT

; 184  : glm_vec3_dot(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  :   return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	c1 e0 00	 shl	 eax, 0
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0005b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0005e	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00063	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00068	f3 0f 58 c1	 addss	 xmm0, xmm1
  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	d1 e0		 shl	 eax, 1
  00073	b9 04 00 00 00	 mov	 ecx, 4
  00078	d1 e1		 shl	 ecx, 1
  0007a	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0007d	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00080	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00085	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  0008a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0008e	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv130[ebp], xmm0
  00096	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv130[ebp]

; 186  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_glm_vec3_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_one
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec3_one PROC					; COMDAT

; 170  : glm_vec3_one(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 171  :   v[0] = v[1] = v[2] = 1.0f;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	d1 e0		 shl	 eax, 1
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0003a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  0003f	ba 04 00 00 00	 mov	 edx, 4
  00044	c1 e2 00	 shl	 edx, 0
  00047	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0004a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00052	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00057	b9 04 00 00 00	 mov	 ecx, 4
  0005c	6b d1 00	 imul	 edx, ecx, 0
  0005f	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 172  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_glm_vec3_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_zero
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec3_zero PROC					; COMDAT

; 159  : glm_vec3_zero(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 160  :   v[0] = v[1] = v[2] = 0.0f;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	d1 e0		 shl	 eax, 1
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  0003a	ba 04 00 00 00	 mov	 edx, 4
  0003f	c1 e2 00	 shl	 edx, 0
  00042	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00045	0f 57 c0	 xorps	 xmm0, xmm0
  00048	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  0004d	b9 04 00 00 00	 mov	 ecx, 4
  00052	6b d1 00	 imul	 edx, ecx, 0
  00055	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00058	0f 57 c0	 xorps	 xmm0, xmm0
  0005b	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 161  : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_glm_vec3_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_copy
_TEXT	SEGMENT
_a$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_copy PROC					; COMDAT

; 146  : glm_vec3_copy(vec3 a, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 147  :   dest[0] = a[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 148  :   dest[1] = a[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 149  :   dest[2] = a[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 150  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec3_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3
_TEXT	SEGMENT
_v4$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_vec3 PROC						; COMDAT

; 132  : glm_vec3(vec4 v4, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  :   dest[0] = v4[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 134  :   dest[1] = v4[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 135  :   dest[2] = v4[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 136  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_normalize
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_normalize PROC				; COMDAT

; 747  : glm_vec4_normalize(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 748  :   glm_vec4_normalize_to(v, v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_normalize_to
  00035	83 c4 08	 add	 esp, 8

; 749  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_vec4_normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_normalize_to
_TEXT	SEGMENT
tv72 = -276						; size = 4
_dot$ = -76						; size = 4
_x0$ = -64						; size = 16
_xdot$ = -32						; size = 16
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_normalize_to PROC				; COMDAT

; 711  : glm_vec4_normalize_to(vec4 v, vec4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 712  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 713  :   __m128 xdot, x0;
; 714  :   float  dot;
; 715  : 
; 716  :   x0   = glmm_load(v);

  0003a	8b 43 08	 mov	 eax, DWORD PTR _v$[ebx]
  0003d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00040	0f 29 45 c0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 717  :   xdot = glmm_vdot(x0, x0);

  00044	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00048	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0004c	e8 00 00 00 00	 call	 _glmm_vdot
  00051	0f 29 45 e0	 movaps	 XMMWORD PTR _xdot$[ebp], xmm0

; 718  :   dot  = _mm_cvtss_f32(xdot);

  00055	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xdot$[ebp]
  00059	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR tv72[ebp], xmm0
  00061	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR tv72[ebp]
  00069	f3 0f 11 45 b4	 movss	 DWORD PTR _dot$[ebp], xmm0

; 719  : 
; 720  :   if (dot == 0.0f) {

  0006e	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dot$[ebp]
  00073	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0007a	9f		 lahf
  0007b	f6 c4 44	 test	 ah, 68			; 00000044H
  0007e	7a 0b		 jp	 SHORT $LN2@glm_vec4_n

; 721  :     glmm_store(dest, _mm_setzero_ps());

  00080	0f 57 c0	 xorps	 xmm0, xmm0
  00083	8b 43 0c	 mov	 eax, DWORD PTR _dest$[ebx]
  00086	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 722  :     return;

  00089	eb 11		 jmp	 SHORT $LN1@glm_vec4_n
$LN2@glm_vec4_n:

; 723  :   }
; 724  : 
; 725  :   glmm_store(dest, _mm_div_ps(x0, _mm_sqrt_ps(xdot)));

  0008b	0f 51 45 e0	 sqrtps	 xmm0, XMMWORD PTR _xdot$[ebp]
  0008f	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00093	0f 5e c8	 divps	 xmm1, xmm0
  00096	8b 43 0c	 mov	 eax, DWORD PTR _dest$[ebx]
  00099	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1
$LN1@glm_vec4_n:

; 726  : #else
; 727  :   float norm;
; 728  : 
; 729  :   norm = glm_vec4_norm(v);
; 730  : 
; 731  :   if (norm == 0.0f) {
; 732  :     glm_vec4_zero(dest);
; 733  :     return;
; 734  :   }
; 735  : 
; 736  :   glm_vec4_scale(v, 1.0f / norm, dest);
; 737  : #endif
; 738  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	8b e3		 mov	 esp, ebx
  000a3	5b		 pop	 ebx
  000a4	c3		 ret	 0
_glm_vec4_normalize_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_muladds
_TEXT	SEGMENT
_a$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_muladds PROC					; COMDAT

; 598  : glm_vec4_muladds(vec4 a, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 599  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 600  :   glmm_store(dest, _mm_add_ps(glmm_load(dest),

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00034	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00037	0f 59 c8	 mulps	 xmm1, xmm0
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003d	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00040	0f 58 c1	 addps	 xmm0, xmm1
  00043	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00046	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 601  :                               _mm_mul_ps(glmm_load(a),
; 602  :                                          _mm_set1_ps(s))));
; 603  : #elif defined(CGLM_NEON_FP)
; 604  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(dest),
; 605  :                             vmulq_f32(vld1q_f32(a),
; 606  :                                       vdupq_n_f32(s))));
; 607  : #else
; 608  :   dest[0] += a[0] * s;
; 609  :   dest[1] += a[1] * s;
; 610  :   dest[2] += a[2] * s;
; 611  :   dest[3] += a[3] * s;
; 612  : #endif
; 613  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_glm_vec4_muladds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_scale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_scale PROC					; COMDAT

; 432  : glm_vec4_scale(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 433  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 434  :   glmm_store(dest, _mm_mul_ps(glmm_load(v), _mm_set1_ps(s)));

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00034	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00037	0f 59 c8	 mulps	 xmm1, xmm0
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003d	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1

; 435  : #elif defined(CGLM_NEON_FP)
; 436  :   vst1q_f32(dest, vmulq_f32(vld1q_f32(v), vdupq_n_f32(s)));
; 437  : #else
; 438  :   dest[0] = v[0] * s;
; 439  :   dest[1] = v[1] * s;
; 440  :   dest[2] = v[2] * s;
; 441  :   dest[3] = v[3] * s;
; 442  : #endif
; 443  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_vec4_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4
_TEXT	SEGMENT
_v3$ = 8						; size = 4
_last$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4 PROC						; COMDAT

; 110  : glm_vec4(vec3 v3, float last, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  :   dest[0] = v3[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 112  :   dest[1] = v3[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 113  :   dest[2] = v3[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 114  :   dest[3] = last;

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00085	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _last$[ebp]
  0008a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 115  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_glm_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_sqrt
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_sqrt PROC					; COMDAT

; 266  : glm_vec3_sqrt(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 267  :   dest[0] = sqrtf(v[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _sqrtf
  00043	83 c4 04	 add	 esp, 4
  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	6b c8 00	 imul	 ecx, eax, 0
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00051	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 268  :   dest[1] = sqrtf(v[1]);

  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	c1 e0 00	 shl	 eax, 0
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005f	51		 push	 ecx
  00060	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	e8 00 00 00 00	 call	 _sqrtf
  0006f	83 c4 04	 add	 esp, 4
  00072	ba 04 00 00 00	 mov	 edx, 4
  00077	c1 e2 00	 shl	 edx, 0
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0007d	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 269  :   dest[2] = sqrtf(v[2]);

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	d1 e0		 shl	 eax, 1
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0008a	51		 push	 ecx
  0008b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 _sqrtf
  0009a	83 c4 04	 add	 esp, 4
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	d1 e2		 shl	 edx, 1
  000a4	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  000a7	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 270  : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_glm_vec3_sqrt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_hadd
_TEXT	SEGMENT
tv81 = -196						; size = 4
_v$ = 8							; size = 4
_glm_vec3_hadd PROC					; COMDAT

; 254  : glm_vec3_hadd(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 255  :   return v[0] + v[1] + v[2];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	c1 e2 00	 shl	 edx, 0
  00038	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0003e	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00043	f3 0f 58 04 16	 addss	 xmm0, DWORD PTR [esi+edx]
  00048	b9 04 00 00 00	 mov	 ecx, 4
  0004d	d1 e1		 shl	 ecx, 1
  0004f	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00052	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  00057	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv81[ebp], xmm0
  0005f	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv81[ebp]

; 256  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_glm_vec3_hadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_fract
_TEXT	SEGMENT
tv183 = -196						; size = 4
tv163 = -196						; size = 4
tv143 = -196						; size = 4
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_fract PROC					; COMDAT

; 239  : glm_vec3_fract(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 240  :   dest[0] = fminf(v[0] - floorf(v[0]), 0x1.fffffep-1f);

  00028	8b f4		 mov	 esi, esp
  0002a	51		 push	 ecx
  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fffff
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	b8 04 00 00 00	 mov	 eax, 4
  0003d	6b f8 00	 imul	 edi, eax, 0
  00040	b9 04 00 00 00	 mov	 ecx, 4
  00045	6b d1 00	 imul	 edx, ecx, 0
  00048	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0004b	51		 push	 ecx
  0004c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	e8 00 00 00 00	 call	 _floorf
  0005b	83 c4 04	 add	 esp, 4
  0005e	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv143[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00067	f3 0f 10 04 39	 movss	 xmm0, DWORD PTR [ecx+edi]
  0006c	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv143[ebp]
  00074	51		 push	 ecx
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fminf
  00080	83 c4 08	 add	 esp, 8
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	ba 04 00 00 00	 mov	 edx, 4
  0008f	6b c2 00	 imul	 eax, edx, 0
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00095	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 241  :   dest[1] = fminf(v[1] - floorf(v[1]), 0x1.fffffep-1f);

  00098	8b f4		 mov	 esi, esp
  0009a	51		 push	 ecx
  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fffff
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	bf 04 00 00 00	 mov	 edi, 4
  000ad	c1 e7 00	 shl	 edi, 0
  000b0	b8 04 00 00 00	 mov	 eax, 4
  000b5	c1 e0 00	 shl	 eax, 0
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  000bb	51		 push	 ecx
  000bc	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	e8 00 00 00 00	 call	 _floorf
  000cb	83 c4 04	 add	 esp, 4
  000ce	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv163[ebp]
  000d4	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  000d7	f3 0f 10 04 3a	 movss	 xmm0, DWORD PTR [edx+edi]
  000dc	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv163[ebp]
  000e4	51		 push	 ecx
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fminf
  000f0	83 c4 08	 add	 esp, 8
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	b8 04 00 00 00	 mov	 eax, 4
  000ff	c1 e0 00	 shl	 eax, 0
  00102	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00105	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 242  :   dest[2] = fminf(v[2] - floorf(v[2]), 0x1.fffffep-1f);

  00108	8b f4		 mov	 esi, esp
  0010a	51		 push	 ecx
  0010b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fffff
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	bf 04 00 00 00	 mov	 edi, 4
  0011d	d1 e7		 shl	 edi, 1
  0011f	b8 04 00 00 00	 mov	 eax, 4
  00124	d1 e0		 shl	 eax, 1
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00129	51		 push	 ecx
  0012a	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	e8 00 00 00 00	 call	 _floorf
  00139	83 c4 04	 add	 esp, 4
  0013c	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv183[ebp]
  00142	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00145	f3 0f 10 04 3a	 movss	 xmm0, DWORD PTR [edx+edi]
  0014a	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv183[ebp]
  00152	51		 push	 ecx
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fminf
  0015e	83 c4 08	 add	 esp, 8
  00161	3b f4		 cmp	 esi, esp
  00163	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00168	b8 04 00 00 00	 mov	 eax, 4
  0016d	d1 e0		 shl	 eax, 1
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00172	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 243  : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0017e	3b ec		 cmp	 ebp, esp
  00180	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
_glm_vec3_fract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_abs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_abs PROC					; COMDAT

; 225  : glm_vec3_abs(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 226  :   dest[0] = fabsf(v[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _fabsf
  00043	83 c4 04	 add	 esp, 4
  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	6b c8 00	 imul	 ecx, eax, 0
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00051	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 227  :   dest[1] = fabsf(v[1]);

  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	c1 e0 00	 shl	 eax, 0
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005f	51		 push	 ecx
  00060	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	e8 00 00 00 00	 call	 _fabsf
  0006f	83 c4 04	 add	 esp, 4
  00072	ba 04 00 00 00	 mov	 edx, 4
  00077	c1 e2 00	 shl	 edx, 0
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0007d	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 228  :   dest[2] = fabsf(v[2]);

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	d1 e0		 shl	 eax, 1
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0008a	51		 push	 ecx
  0008b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 _fabsf
  0009a	83 c4 04	 add	 esp, 4
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	d1 e2		 shl	 edx, 1
  000a4	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  000a7	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 229  : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_glm_vec3_abs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_sign
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec3_sign PROC					; COMDAT

; 211  : glm_vec3_sign(vec3 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 212  :   dest[0] = glm_signf(v[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	e8 00 00 00 00	 call	 _glm_signf
  00043	83 c4 04	 add	 esp, 4
  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	6b c8 00	 imul	 ecx, eax, 0
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00051	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 213  :   dest[1] = glm_signf(v[1]);

  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	c1 e0 00	 shl	 eax, 0
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005f	51		 push	 ecx
  00060	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	e8 00 00 00 00	 call	 _glm_signf
  0006f	83 c4 04	 add	 esp, 4
  00072	ba 04 00 00 00	 mov	 edx, 4
  00077	c1 e2 00	 shl	 edx, 0
  0007a	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0007d	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 214  :   dest[2] = glm_signf(v[2]);

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	d1 e0		 shl	 eax, 1
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0008a	51		 push	 ecx
  0008b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 _glm_signf
  0009a	83 c4 04	 add	 esp, 4
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	d1 e2		 shl	 edx, 1
  000a4	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  000a7	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 215  : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_glm_vec3_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_isvalid
_TEXT	SEGMENT
tv74 = -200						; size = 4
tv72 = -196						; size = 4
_v$ = 8							; size = 4
_glm_vec3_isvalid PROC					; COMDAT

; 198  : glm_vec3_isvalid(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 199  :   return !glm_vec3_isnan(v) && !glm_vec3_isinf(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_isnan
  00031	83 c4 04	 add	 esp, 4
  00034	0f b6 c8	 movzx	 ecx, al
  00037	85 c9		 test	 ecx, ecx
  00039	75 1f		 jne	 SHORT $LN3@glm_vec3_i
  0003b	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec3_isinf
  00044	83 c4 04	 add	 esp, 4
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	75 0c		 jne	 SHORT $LN3@glm_vec3_i
  0004e	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv72[ebp], 1
  00058	eb 0a		 jmp	 SHORT $LN4@glm_vec3_i
$LN3@glm_vec3_i:
  0005a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv72[ebp], 0
$LN4@glm_vec3_i:
  00064	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv72[ebp], 0
  0006b	75 0c		 jne	 SHORT $LN5@glm_vec3_i
  0006d	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
  00077	eb 0a		 jmp	 SHORT $LN6@glm_vec3_i
$LN5@glm_vec3_i:
  00079	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv74[ebp], 1
$LN6@glm_vec3_i:
  00083	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv74[ebp]

; 200  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_glm_vec3_isvalid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_isinf
_TEXT	SEGMENT
tv87 = -200						; size = 4
tv85 = -196						; size = 4
_v$ = 8							; size = 4
_glm_vec3_isinf PROC					; COMDAT

; 186  : glm_vec3_isinf(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 187  :   return isinf(v[0]) || isinf(v[1]) || isinf(v[2]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	8b f4		 mov	 esi, esp
  0003a	51		 push	 ecx
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  00046	83 c4 04	 add	 esp, 4
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	98		 cwde
  00051	83 f8 01	 cmp	 eax, 1
  00054	74 67		 je	 SHORT $LN3@glm_vec3_i
  00056	b9 04 00 00 00	 mov	 ecx, 4
  0005b	c1 e1 00	 shl	 ecx, 0
  0005e	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00061	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00066	8b f4		 mov	 esi, esp
  00068	51		 push	 ecx
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  00074	83 c4 04	 add	 esp, 4
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	98		 cwde
  0007f	83 f8 01	 cmp	 eax, 1
  00082	74 39		 je	 SHORT $LN3@glm_vec3_i
  00084	b9 04 00 00 00	 mov	 ecx, 4
  00089	d1 e1		 shl	 ecx, 1
  0008b	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0008e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00093	8b f4		 mov	 esi, esp
  00095	51		 push	 ecx
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  000a1	83 c4 04	 add	 esp, 4
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	98		 cwde
  000ac	83 f8 01	 cmp	 eax, 1
  000af	74 0c		 je	 SHORT $LN3@glm_vec3_i
  000b1	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
  000bb	eb 0a		 jmp	 SHORT $LN4@glm_vec3_i
$LN3@glm_vec3_i:
  000bd	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv85[ebp], 1
$LN4@glm_vec3_i:
  000c7	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv85[ebp], 0
  000ce	75 0c		 jne	 SHORT $LN5@glm_vec3_i
  000d0	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv87[ebp], 0
  000da	eb 0a		 jmp	 SHORT $LN6@glm_vec3_i
$LN5@glm_vec3_i:
  000dc	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv87[ebp], 1
$LN6@glm_vec3_i:
  000e6	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv87[ebp]

; 188  : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_glm_vec3_isinf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_isnan
_TEXT	SEGMENT
tv87 = -200						; size = 4
tv85 = -196						; size = 4
_v$ = 8							; size = 4
_glm_vec3_isnan PROC					; COMDAT

; 174  : glm_vec3_isnan(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 175  :   return isnan(v[0]) || isnan(v[1]) || isnan(v[2]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	8b f4		 mov	 esi, esp
  0003a	51		 push	 ecx
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  00046	83 c4 04	 add	 esp, 4
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	98		 cwde
  00051	83 f8 02	 cmp	 eax, 2
  00054	74 67		 je	 SHORT $LN3@glm_vec3_i
  00056	b9 04 00 00 00	 mov	 ecx, 4
  0005b	c1 e1 00	 shl	 ecx, 0
  0005e	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00061	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00066	8b f4		 mov	 esi, esp
  00068	51		 push	 ecx
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  00074	83 c4 04	 add	 esp, 4
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	98		 cwde
  0007f	83 f8 02	 cmp	 eax, 2
  00082	74 39		 je	 SHORT $LN3@glm_vec3_i
  00084	b9 04 00 00 00	 mov	 ecx, 4
  00089	d1 e1		 shl	 ecx, 1
  0008b	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0008e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00093	8b f4		 mov	 esi, esp
  00095	51		 push	 ecx
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  000a1	83 c4 04	 add	 esp, 4
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	98		 cwde
  000ac	83 f8 02	 cmp	 eax, 2
  000af	74 0c		 je	 SHORT $LN3@glm_vec3_i
  000b1	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
  000bb	eb 0a		 jmp	 SHORT $LN4@glm_vec3_i
$LN3@glm_vec3_i:
  000bd	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv85[ebp], 1
$LN4@glm_vec3_i:
  000c7	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv85[ebp], 0
  000ce	75 0c		 jne	 SHORT $LN5@glm_vec3_i
  000d0	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv87[ebp], 0
  000da	eb 0a		 jmp	 SHORT $LN6@glm_vec3_i
$LN5@glm_vec3_i:
  000dc	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv87[ebp], 1
$LN6@glm_vec3_i:
  000e6	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv87[ebp]

; 176  : }

  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_glm_vec3_isnan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_min
_TEXT	SEGMENT
_min$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec3_min PROC					; COMDAT

; 154  : glm_vec3_min(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 155  :   float min;
; 156  : 
; 157  :   min = v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0

; 158  :   if (v[1] < min)

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	c1 e0 00	 shl	 eax, 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00048	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _min$[ebp]
  0004d	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  00051	76 15		 jbe	 SHORT $LN2@glm_vec3_m

; 159  :     min = v[1];

  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00063	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0
$LN2@glm_vec3_m:

; 160  :   if (v[2] < min)

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	d1 e0		 shl	 eax, 1
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00072	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _min$[ebp]
  00077	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  0007b	76 14		 jbe	 SHORT $LN3@glm_vec3_m

; 161  :     min = v[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	d1 e0		 shl	 eax, 1
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00087	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0008c	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0
$LN3@glm_vec3_m:

; 162  : 
; 163  :   return min;

  00091	d9 45 f8	 fld	 DWORD PTR _min$[ebp]

; 164  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_glm_vec3_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_max
_TEXT	SEGMENT
_max$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec3_max PROC					; COMDAT

; 135  : glm_vec3_max(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 136  :   float max;
; 137  : 
; 138  :   max = v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0

; 139  :   if (v[1] > max)

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	c1 e0 00	 shl	 eax, 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00048	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0004d	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _max$[ebp]
  00051	76 15		 jbe	 SHORT $LN2@glm_vec3_m

; 140  :     max = v[1];

  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00063	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0
$LN2@glm_vec3_m:

; 141  :   if (v[2] > max)

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	d1 e0		 shl	 eax, 1
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00072	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00077	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _max$[ebp]
  0007b	76 14		 jbe	 SHORT $LN3@glm_vec3_m

; 142  :     max = v[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	d1 e0		 shl	 eax, 1
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00087	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0008c	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0
$LN3@glm_vec3_m:

; 143  : 
; 144  :   return max;

  00091	d9 45 f8	 fld	 DWORD PTR _max$[ebp]

; 145  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_glm_vec3_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_eqv_eps
_TEXT	SEGMENT
tv93 = -224						; size = 4
tv91 = -220						; size = 4
tv164 = -216						; size = 8
tv152 = -208						; size = 8
tv140 = -200						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_eqv_eps PROC					; COMDAT

; 122  : glm_vec3_eqv_eps(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 123  :   return fabsf(a[0] - b[0]) <= GLM_FLT_EPSILON

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00048	51		 push	 ecx
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	e8 00 00 00 00	 call	 _fabsf
  00053	83 c4 04	 add	 esp, 4
  00056	dd 9d 38 ff ff
	ff		 fstp	 QWORD PTR tv140[ebp]
  0005c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00064	66 0f 2f 85 38
	ff ff ff	 comisd	 xmm0, QWORD PTR tv140[ebp]
  0006c	0f 82 96 00 00
	00		 jb	 $LN3@glm_vec3_e
  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	c1 e0 00	 shl	 eax, 0
  0007a	b9 04 00 00 00	 mov	 ecx, 4
  0007f	c1 e1 00	 shl	 ecx, 0
  00082	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00085	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00088	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0008d	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00092	51		 push	 ecx
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	e8 00 00 00 00	 call	 _fabsf
  0009d	83 c4 04	 add	 esp, 4
  000a0	dd 9d 30 ff ff
	ff		 fstp	 QWORD PTR tv152[ebp]
  000a6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  000ae	66 0f 2f 85 30
	ff ff ff	 comisd	 xmm0, QWORD PTR tv152[ebp]
  000b6	72 50		 jb	 SHORT $LN3@glm_vec3_e
  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	d1 e0		 shl	 eax, 1
  000bf	b9 04 00 00 00	 mov	 ecx, 4
  000c4	d1 e1		 shl	 ecx, 1
  000c6	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000c9	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000cc	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000d1	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  000d6	51		 push	 ecx
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	e8 00 00 00 00	 call	 _fabsf
  000e1	83 c4 04	 add	 esp, 4
  000e4	dd 9d 28 ff ff
	ff		 fstp	 QWORD PTR tv164[ebp]
  000ea	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  000f2	66 0f 2f 85 28
	ff ff ff	 comisd	 xmm0, QWORD PTR tv164[ebp]
  000fa	72 0c		 jb	 SHORT $LN3@glm_vec3_e
  000fc	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv91[ebp], 1
  00106	eb 0a		 jmp	 SHORT $LN4@glm_vec3_e
$LN3@glm_vec3_e:
  00108	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv91[ebp], 0
$LN4@glm_vec3_e:
  00112	83 bd 24 ff ff
	ff 00		 cmp	 DWORD PTR tv91[ebp], 0
  00119	75 0c		 jne	 SHORT $LN5@glm_vec3_e
  0011b	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv93[ebp], 0
  00125	eb 0a		 jmp	 SHORT $LN6@glm_vec3_e
$LN5@glm_vec3_e:
  00127	c7 85 20 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv93[ebp], 1
$LN6@glm_vec3_e:
  00131	8a 85 20 ff ff
	ff		 mov	 al, BYTE PTR tv93[ebp]

; 124  :          && fabsf(a[1] - b[1]) <= GLM_FLT_EPSILON
; 125  :          && fabsf(a[2] - b[2]) <= GLM_FLT_EPSILON;
; 126  : }

  00137	5f		 pop	 edi
  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  00140	3b ec		 cmp	 ebp, esp
  00142	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c3		 ret	 0
_glm_vec3_eqv_eps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_eqv
_TEXT	SEGMENT
tv81 = -200						; size = 4
tv79 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_eqv PROC					; COMDAT

; 108  : glm_vec3_eqv(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  :   return a[0] == b[0]

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	0f 2e 04 06	 ucomiss xmm0, DWORD PTR [esi+eax]
  00047	9f		 lahf
  00048	f6 c4 44	 test	 ah, 68			; 00000044H
  0004b	7a 54		 jp	 SHORT $LN3@glm_vec3_e
  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	c1 e0 00	 shl	 eax, 0
  00055	b9 04 00 00 00	 mov	 ecx, 4
  0005a	c1 e1 00	 shl	 ecx, 0
  0005d	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00060	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00063	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00068	0f 2e 04 0e	 ucomiss xmm0, DWORD PTR [esi+ecx]
  0006c	9f		 lahf
  0006d	f6 c4 44	 test	 ah, 68			; 00000044H
  00070	7a 2f		 jp	 SHORT $LN3@glm_vec3_e
  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	d1 e0		 shl	 eax, 1
  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	d1 e1		 shl	 ecx, 1
  00080	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00083	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00086	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0008b	0f 2e 04 0e	 ucomiss xmm0, DWORD PTR [esi+ecx]
  0008f	9f		 lahf
  00090	f6 c4 44	 test	 ah, 68			; 00000044H
  00093	7a 0c		 jp	 SHORT $LN3@glm_vec3_e
  00095	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv79[ebp], 1
  0009f	eb 0a		 jmp	 SHORT $LN4@glm_vec3_e
$LN3@glm_vec3_e:
  000a1	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
$LN4@glm_vec3_e:
  000ab	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv79[ebp], 0
  000b2	75 0c		 jne	 SHORT $LN5@glm_vec3_e
  000b4	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv81[ebp], 0
  000be	eb 0a		 jmp	 SHORT $LN6@glm_vec3_e
$LN5@glm_vec3_e:
  000c0	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv81[ebp], 1
$LN6@glm_vec3_e:
  000ca	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv81[ebp]

; 110  :          && a[1] == b[1]
; 111  :          && a[2] == b[2];
; 112  : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_glm_vec3_eqv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_eq_all
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec3_eq_all PROC					; COMDAT

; 96   : glm_vec3_eq_all(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 97   :   return glm_vec3_eq_eps(v, v[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _glm_vec3_eq_eps
  00047	83 c4 08	 add	 esp, 8

; 98   : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_glm_vec3_eq_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_eq_eps
_TEXT	SEGMENT
tv87 = -224						; size = 4
tv85 = -220						; size = 4
tv152 = -216						; size = 8
tv142 = -208						; size = 8
tv132 = -200						; size = 8
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glm_vec3_eq_eps PROC					; COMDAT

; 83   : glm_vec3_eq_eps(vec3 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 84   :   return fabsf(v[0] - val) <= GLM_FLT_EPSILON

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _val$[ebp]
  0003d	51		 push	 ecx
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	e8 00 00 00 00	 call	 _fabsf
  00048	83 c4 04	 add	 esp, 4
  0004b	dd 9d 38 ff ff
	ff		 fstp	 QWORD PTR tv132[ebp]
  00051	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00059	66 0f 2f 85 38
	ff ff ff	 comisd	 xmm0, QWORD PTR tv132[ebp]
  00061	0f 82 81 00 00
	00		 jb	 $LN3@glm_vec3_e
  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	c1 e0 00	 shl	 eax, 0
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00072	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00077	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _val$[ebp]
  0007c	51		 push	 ecx
  0007d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00082	e8 00 00 00 00	 call	 _fabsf
  00087	83 c4 04	 add	 esp, 4
  0008a	dd 9d 30 ff ff
	ff		 fstp	 QWORD PTR tv142[ebp]
  00090	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00098	66 0f 2f 85 30
	ff ff ff	 comisd	 xmm0, QWORD PTR tv142[ebp]
  000a0	72 46		 jb	 SHORT $LN3@glm_vec3_e
  000a2	ba 04 00 00 00	 mov	 edx, 4
  000a7	d1 e2		 shl	 edx, 1
  000a9	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000ac	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000b1	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _val$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	e8 00 00 00 00	 call	 _fabsf
  000c1	83 c4 04	 add	 esp, 4
  000c4	dd 9d 28 ff ff
	ff		 fstp	 QWORD PTR tv152[ebp]
  000ca	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  000d2	66 0f 2f 85 28
	ff ff ff	 comisd	 xmm0, QWORD PTR tv152[ebp]
  000da	72 0c		 jb	 SHORT $LN3@glm_vec3_e
  000dc	c7 85 24 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv85[ebp], 1
  000e6	eb 0a		 jmp	 SHORT $LN4@glm_vec3_e
$LN3@glm_vec3_e:
  000e8	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv85[ebp], 0
$LN4@glm_vec3_e:
  000f2	83 bd 24 ff ff
	ff 00		 cmp	 DWORD PTR tv85[ebp], 0
  000f9	75 0c		 jne	 SHORT $LN5@glm_vec3_e
  000fb	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv87[ebp], 0
  00105	eb 0a		 jmp	 SHORT $LN6@glm_vec3_e
$LN5@glm_vec3_e:
  00107	c7 85 20 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv87[ebp], 1
$LN6@glm_vec3_e:
  00111	8a 85 20 ff ff
	ff		 mov	 al, BYTE PTR tv87[ebp]

; 85   :          && fabsf(v[1] - val) <= GLM_FLT_EPSILON
; 86   :          && fabsf(v[2] - val) <= GLM_FLT_EPSILON;
; 87   : }

  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	5b		 pop	 ebx
  0011a	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  00120	3b ec		 cmp	 ebp, esp
  00122	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
_glm_vec3_eq_eps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_eq
_TEXT	SEGMENT
tv79 = -200						; size = 4
tv77 = -196						; size = 4
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glm_vec3_eq PROC					; COMDAT

; 71   : glm_vec3_eq(vec3 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 72   :   return v[0] == val && v[0] == v[1] && v[0] == v[2];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	0f 2e 45 0c	 ucomiss xmm0, DWORD PTR _val$[ebp]
  0003c	9f		 lahf
  0003d	f6 c4 44	 test	 ah, 68			; 00000044H
  00040	7a 55		 jp	 SHORT $LN3@glm_vec3_e
  00042	b8 04 00 00 00	 mov	 eax, 4
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	ba 04 00 00 00	 mov	 edx, 4
  0004f	c1 e2 00	 shl	 edx, 0
  00052	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00055	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0005d	0f 2e 04 16	 ucomiss xmm0, DWORD PTR [esi+edx]
  00061	9f		 lahf
  00062	f6 c4 44	 test	 ah, 68			; 00000044H
  00065	7a 30		 jp	 SHORT $LN3@glm_vec3_e
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	6b d1 00	 imul	 edx, ecx, 0
  0006f	b8 04 00 00 00	 mov	 eax, 4
  00074	d1 e0		 shl	 eax, 1
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00079	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0007c	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00081	0f 2e 04 06	 ucomiss xmm0, DWORD PTR [esi+eax]
  00085	9f		 lahf
  00086	f6 c4 44	 test	 ah, 68			; 00000044H
  00089	7a 0c		 jp	 SHORT $LN3@glm_vec3_e
  0008b	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv77[ebp], 1
  00095	eb 0a		 jmp	 SHORT $LN4@glm_vec3_e
$LN3@glm_vec3_e:
  00097	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN4@glm_vec3_e:
  000a1	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv77[ebp], 0
  000a8	75 0c		 jne	 SHORT $LN5@glm_vec3_e
  000aa	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], 0
  000b4	eb 0a		 jmp	 SHORT $LN6@glm_vec3_e
$LN5@glm_vec3_e:
  000b6	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv79[ebp], 1
$LN6@glm_vec3_e:
  000c0	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv79[ebp]

; 73   : }

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
_glm_vec3_eq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_fill
_TEXT	SEGMENT
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glm_vec3_fill PROC					; COMDAT

; 59   : glm_vec3_fill(vec3 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 60   :   v[0] = v[1] = v[2] = val;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	d1 e0		 shl	 eax, 1
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00032	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  00037	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  0003c	ba 04 00 00 00	 mov	 edx, 4
  00041	c1 e2 00	 shl	 edx, 0
  00044	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00047	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  0004c	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00051	b9 04 00 00 00	 mov	 ecx, 4
  00056	6b d1 00	 imul	 edx, ecx, 0
  00059	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0005c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  00061	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 61   : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_glm_vec3_fill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_broadcast
_TEXT	SEGMENT
_val$ = 8						; size = 4
_d$ = 12						; size = 4
_glm_vec3_broadcast PROC				; COMDAT

; 47   : glm_vec3_broadcast(float val, vec3 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 48   :   d[0] = d[1] = d[2] = val;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	d1 e0		 shl	 eax, 1
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _d$[ebp]
  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00037	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0
  0003c	ba 04 00 00 00	 mov	 edx, 4
  00041	c1 e2 00	 shl	 edx, 0
  00044	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  00047	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  0004c	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00051	b9 04 00 00 00	 mov	 ecx, 4
  00056	6b d1 00	 imul	 edx, ecx, 0
  00059	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  0005c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00061	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 49   : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_glm_vec3_broadcast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_smoothstep
_TEXT	SEGMENT
_t$ = -8						; size = 4
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_glm_smoothstep PROC					; COMDAT

; 247  : glm_smoothstep(float edge0, float edge1, float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 248  :   float t;
; 249  :   t = glm_clamp_zo((x - edge0) / (edge1 - edge0));

  00028	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x$[ebp]
  0002d	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _edge0$[ebp]
  00032	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _edge1$[ebp]
  00037	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _edge0$[ebp]
  0003c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00040	51		 push	 ecx
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 _glm_clamp_zo
  0004b	83 c4 04	 add	 esp, 4
  0004e	d9 5d f8	 fstp	 DWORD PTR _t$[ebp]

; 250  :   return glm_smooth(t);

  00051	51		 push	 ecx
  00052	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _t$[ebp]
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	e8 00 00 00 00	 call	 _glm_smooth
  00061	83 c4 04	 add	 esp, 4

; 251  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_glm_smoothstep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_smooth
_TEXT	SEGMENT
tv74 = -196						; size = 4
_t$ = 8							; size = 4
_glm_smooth PROC					; COMDAT

; 232  : glm_smooth(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 233  :   return t * t * (3.0f - 2.0f * t);

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  0003a	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _t$[ebp]
  0003f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40400000
  00047	f3 0f 5c d1	 subss	 xmm2, xmm1
  0004b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0004f	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv74[ebp], xmm0
  00057	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv74[ebp]

; 234  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_glm_smooth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_step
_TEXT	SEGMENT
tv65 = -196						; size = 4
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_glm_step PROC						; COMDAT

; 213  : glm_step(float edge, float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 214  :   /* branching - no type conversion */
; 215  :   return (x < edge) ? 0.0f : 1.0f;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  0002d	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _x$[ebp]
  00031	76 0d		 jbe	 SHORT $LN3@glm_step
  00033	0f 57 c0	 xorps	 xmm0, xmm0
  00036	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv65[ebp], xmm0
  0003e	eb 10		 jmp	 SHORT $LN4@glm_step
$LN3@glm_step:
  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00048	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv65[ebp], xmm0
$LN4@glm_step:
  00050	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv65[ebp]

; 216  :   /*
; 217  :    * An alternative implementation without branching
; 218  :    * but with type conversion could be:
; 219  :    * return !(x < edge);
; 220  :    */
; 221  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_glm_step ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_clamp_zo
_TEXT	SEGMENT
_val$ = 8						; size = 4
_glm_clamp_zo PROC					; COMDAT

; 170  : glm_clamp_zo(float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 171  :   return glm_clamp(val, 0.0f, 1.0f);

  00028	51		 push	 ecx
  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00036	51		 push	 ecx
  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 _glm_clamp
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_glm_clamp_zo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_clamp
_TEXT	SEGMENT
_val$ = 8						; size = 4
_minVal$ = 12						; size = 4
_maxVal$ = 16						; size = 4
_glm_clamp PROC						; COMDAT

; 159  : glm_clamp(float val, float minVal, float maxVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 160  :   return glm_min(glm_max(val, minVal), maxVal);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _minVal$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 _glm_max
  0004e	83 c4 04	 add	 esp, 4
  00051	d9 1c 24	 fstp	 DWORD PTR [esp]
  00054	e8 00 00 00 00	 call	 _glm_min
  00059	83 c4 08	 add	 esp, 8

; 161  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_glm_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_max
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_max PROC						; COMDAT

; 144  : glm_max(float a, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  :   if (a > b)

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  0002d	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _b$[ebp]
  00031	76 05		 jbe	 SHORT $LN2@glm_max

; 146  :     return a;

  00033	d9 45 08	 fld	 DWORD PTR _a$[ebp]
  00036	eb 03		 jmp	 SHORT $LN1@glm_max
$LN2@glm_max:

; 147  :   return b;

  00038	d9 45 0c	 fld	 DWORD PTR _b$[ebp]
$LN1@glm_max:

; 148  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_min
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_min PROC						; COMDAT

; 130  : glm_min(float a, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  :   if (a < b)

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0002d	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _a$[ebp]
  00031	76 05		 jbe	 SHORT $LN2@glm_min

; 132  :     return a;

  00033	d9 45 08	 fld	 DWORD PTR _a$[ebp]
  00036	eb 03		 jmp	 SHORT $LN1@glm_min
$LN2@glm_min:

; 133  :   return b;

  00038	d9 45 0c	 fld	 DWORD PTR _b$[ebp]
$LN1@glm_min:

; 134  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_pow2
_TEXT	SEGMENT
tv68 = -196						; size = 4
_x$ = 8							; size = 4
_glm_pow2 PROC						; COMDAT

; 118  : glm_pow2(float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :   return x * x;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00032	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv68[ebp], xmm0
  0003a	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv68[ebp]

; 120  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_pow2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_signf
_TEXT	SEGMENT
tv75 = -208						; size = 4
tv74 = -204						; size = 4
tv66 = -200						; size = 4
tv67 = -196						; size = 4
_val$ = 8						; size = 4
_glm_signf PROC						; COMDAT

; 63   : glm_signf(float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   :   return (float)((val > 0.0f) - (val < 0.0f));

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00034	76 0c		 jbe	 SHORT $LN5@glm_signf
  00036	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
  00040	eb 0a		 jmp	 SHORT $LN6@glm_signf
$LN5@glm_signf:
  00042	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
$LN6@glm_signf:
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _val$[ebp]
  00053	76 0c		 jbe	 SHORT $LN3@glm_signf
  00055	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0005f	eb 0a		 jmp	 SHORT $LN4@glm_signf
$LN3@glm_signf:
  00061	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@glm_signf:
  0006b	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv67[ebp]
  00071	2b 85 38 ff ff
	ff		 sub	 eax, DWORD PTR tv66[ebp]
  00077	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
  0007d	db 85 34 ff ff
	ff		 fild	 DWORD PTR tv74[ebp]
  00083	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv75[ebp]
  00089	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv75[ebp]

; 65   : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_glm_signf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vdot
_TEXT	SEGMENT
_x0$ = -96						; size = 16
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_glmm_vdot PROC						; COMDAT
; _a$ = xmm0
; _b$ = xmm1

; 126  : glmm_vdot(__m128 a, __m128 b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 4d c0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 127  : #if (defined(__SSE4_1__) || defined(__SSE4_2__)) && defined(CGLM_SSE4_DOT)
; 128  :   return _mm_dp_ps(a, b, 0xFF);
; 129  : #elif defined(__SSE3__) && defined(CGLM_SSE3_DOT)
; 130  :   __m128 x0, x1;
; 131  :   x0 = _mm_mul_ps(a, b);
; 132  :   x1 = _mm_hadd_ps(x0, x0);
; 133  :   return _mm_hadd_ps(x1, x1);
; 134  : #else
; 135  :   __m128 x0;
; 136  :   x0 = _mm_mul_ps(a, b);

  00042	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00046	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _b$[ebp]
  0004a	0f 29 45 a0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 137  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 1, 0, 3, 2));

  0004e	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00052	0f c6 45 a0 4e	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 78 ; 0000004eH
  00057	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  0005b	0f 58 c8	 addps	 xmm1, xmm0
  0005e	0f 29 4d a0	 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 138  :   return _mm_add_ps(x0, glmm_shuff1(x0, 0, 1, 0, 1));

  00062	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00066	0f c6 45 a0 11	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 17 ; 00000011H
  0006b	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  0006f	0f 58 c8	 addps	 xmm1, xmm0
  00072	0f 28 c1	 movaps	 xmm0, xmm1

; 139  : #endif
; 140  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	8b e3		 mov	 esp, ebx
  0007c	5b		 pop	 ebx
  0007d	c3		 ret	 0
_glmm_vdot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 760  :             return (float)sqrt(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sqrt
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 761  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 750  :             return (float)sin(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sin
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 751  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv74 = -196						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 685  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 686  :             return (float)floor(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	8b f4		 mov	 esi, esp
  0002f	83 ec 08	 sub	 esp, 8
  00032	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  0003d	83 c4 08	 add	 esp, 8
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv74[ebp]
  0004d	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv74[ebp]

; 687  :         }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 672  :             return (float)fabs(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _fabs
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 673  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 649  :             return (float)cos(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _cos
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 650  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 623  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 624  :             return (float)acos(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _acos
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 625  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
END
