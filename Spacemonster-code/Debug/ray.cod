; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ray.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__D2817150_ray@c DB 01H
msvcjmc	ENDS
PUBLIC	_glm_vec3_dot
PUBLIC	_glm_vec3_sub
PUBLIC	_glm_vec3_cross
PUBLIC	_glm_ray_triangle
PUBLIC	_glmc_ray_triangle
PUBLIC	__JustMyCode_Default
PUBLIC	__real@358637bd
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-06
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ray.c
;	COMDAT _glmc_ray_triangle
_TEXT	SEGMENT
_origin$ = 8						; size = 4
_direction$ = 12					; size = 4
_v0$ = 16						; size = 4
_v1$ = 20						; size = 4
_v2$ = 24						; size = 4
_d$ = 28						; size = 4
_glmc_ray_triangle PROC					; COMDAT

; 11   :                   float *d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D2817150_ray@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 12   :     return glm_ray_triangle(origin, direction, v0, v1, v2, d);

  00028	8b 45 1c	 mov	 eax, DWORD PTR _d$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 18	 mov	 ecx, DWORD PTR _v2$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp]
  00033	52		 push	 edx
  00034	8b 45 10	 mov	 eax, DWORD PTR _v0$[ebp]
  00037	50		 push	 eax
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _direction$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 08	 mov	 edx, DWORD PTR _origin$[ebp]
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _glm_ray_triangle
  00045	83 c4 18	 add	 esp, 24			; 00000018H

; 13   : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_glmc_ray_triangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ray.h
;	COMDAT _glm_ray_triangle
_TEXT	SEGMENT
tv139 = -376						; size = 4
tv194 = -372						; size = 4
tv184 = -372						; size = 4
tv171 = -372						; size = 4
tv137 = -372						; size = 4
_epsilon$ = -172					; size = 4
_dist$ = -160						; size = 4
_v$ = -148						; size = 4
_u$ = -136						; size = 4
_inv_det$ = -124					; size = 4
_det$ = -112						; size = 4
_q$ = -100						; size = 12
_t$ = -80						; size = 12
_p$ = -60						; size = 12
_edge2$ = -40						; size = 12
_edge1$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_origin$ = 8						; size = 4
_direction$ = 12					; size = 4
_v0$ = 16						; size = 4
_v1$ = 20						; size = 4
_v2$ = 24						; size = 4
_d$ = 28						; size = 4
_glm_ray_triangle PROC					; COMDAT

; 42   :                  float *d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 88 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-376]
  00012	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __068BD2DD_ray@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   :   vec3        edge1, edge2, p, t, q;
; 44   :   float       det, inv_det, u, v, dist;
; 45   :   const float epsilon = 0.000001f;

  00032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@358637bd
  0003a	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _epsilon$[ebp], xmm0

; 46   : 
; 47   :   glm_vec3_sub(v1, v0, edge1);

  00042	8d 45 ec	 lea	 eax, DWORD PTR _edge1$[ebp]
  00045	50		 push	 eax
  00046	8b 4d 10	 mov	 ecx, DWORD PTR _v0$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 14	 mov	 edx, DWORD PTR _v1$[ebp]
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 _glm_vec3_sub
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   :   glm_vec3_sub(v2, v0, edge2);

  00056	8d 45 d8	 lea	 eax, DWORD PTR _edge2$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 10	 mov	 ecx, DWORD PTR _v0$[ebp]
  0005d	51		 push	 ecx
  0005e	8b 55 18	 mov	 edx, DWORD PTR _v2$[ebp]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 _glm_vec3_sub
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 49   :   glm_vec3_cross(direction, edge2, p);

  0006a	8d 45 c4	 lea	 eax, DWORD PTR _p$[ebp]
  0006d	50		 push	 eax
  0006e	8d 4d d8	 lea	 ecx, DWORD PTR _edge2$[ebp]
  00071	51		 push	 ecx
  00072	8b 55 0c	 mov	 edx, DWORD PTR _direction$[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 _glm_vec3_cross
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 50   : 
; 51   :   det = glm_vec3_dot(edge1, p);

  0007e	8d 45 c4	 lea	 eax, DWORD PTR _p$[ebp]
  00081	50		 push	 eax
  00082	8d 4d ec	 lea	 ecx, DWORD PTR _edge1$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 _glm_vec3_dot
  0008b	83 c4 08	 add	 esp, 8
  0008e	d9 5d 90	 fstp	 DWORD PTR _det$[ebp]

; 52   :   if (det > -epsilon && det < epsilon)

  00091	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00099	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000a0	f3 0f 10 4d 90	 movss	 xmm1, DWORD PTR _det$[ebp]
  000a5	0f 2f c8	 comiss	 xmm1, xmm0
  000a8	76 15		 jbe	 SHORT $LN2@glm_ray_tr
  000aa	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  000b2	0f 2f 45 90	 comiss	 xmm0, DWORD PTR _det$[ebp]
  000b6	76 07		 jbe	 SHORT $LN2@glm_ray_tr

; 53   :     return false;

  000b8	32 c0		 xor	 al, al
  000ba	e9 6c 01 00 00	 jmp	 $LN1@glm_ray_tr
$LN2@glm_ray_tr:

; 54   : 
; 55   :   inv_det = 1.0f / det;

  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c7	f3 0f 5e 45 90	 divss	 xmm0, DWORD PTR _det$[ebp]
  000cc	f3 0f 11 45 84	 movss	 DWORD PTR _inv_det$[ebp], xmm0

; 56   :   
; 57   :   glm_vec3_sub(origin, v0, t);

  000d1	8d 45 b0	 lea	 eax, DWORD PTR _t$[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d 10	 mov	 ecx, DWORD PTR _v0$[ebp]
  000d8	51		 push	 ecx
  000d9	8b 55 08	 mov	 edx, DWORD PTR _origin$[ebp]
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 _glm_vec3_sub
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 
; 59   :   u = inv_det * glm_vec3_dot(t, p);

  000e5	8d 45 c4	 lea	 eax, DWORD PTR _p$[ebp]
  000e8	50		 push	 eax
  000e9	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _glm_vec3_dot
  000f2	83 c4 08	 add	 esp, 8
  000f5	d9 9d 8c fe ff
	ff		 fstp	 DWORD PTR tv171[ebp]
  000fb	f3 0f 10 85 8c
	fe ff ff	 movss	 xmm0, DWORD PTR tv171[ebp]
  00103	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR _inv_det$[ebp]
  00108	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _u$[ebp], xmm0

; 60   :   if (u < 0.0f || u > 1.0f)

  00110	0f 57 c0	 xorps	 xmm0, xmm0
  00113	0f 2f 85 78 ff
	ff ff		 comiss	 xmm0, DWORD PTR _u$[ebp]
  0011a	77 11		 ja	 SHORT $LN4@glm_ray_tr
  0011c	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00124	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0012b	76 07		 jbe	 SHORT $LN3@glm_ray_tr
$LN4@glm_ray_tr:

; 61   :     return false;

  0012d	32 c0		 xor	 al, al
  0012f	e9 f7 00 00 00	 jmp	 $LN1@glm_ray_tr
$LN3@glm_ray_tr:

; 62   : 
; 63   :   glm_vec3_cross(t, edge1, q);

  00134	8d 45 9c	 lea	 eax, DWORD PTR _q$[ebp]
  00137	50		 push	 eax
  00138	8d 4d ec	 lea	 ecx, DWORD PTR _edge1$[ebp]
  0013b	51		 push	 ecx
  0013c	8d 55 b0	 lea	 edx, DWORD PTR _t$[ebp]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 _glm_vec3_cross
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH

; 64   : 
; 65   :   v = inv_det * glm_vec3_dot(direction, q);

  00148	8d 45 9c	 lea	 eax, DWORD PTR _q$[ebp]
  0014b	50		 push	 eax
  0014c	8b 4d 0c	 mov	 ecx, DWORD PTR _direction$[ebp]
  0014f	51		 push	 ecx
  00150	e8 00 00 00 00	 call	 _glm_vec3_dot
  00155	83 c4 08	 add	 esp, 8
  00158	d9 9d 8c fe ff
	ff		 fstp	 DWORD PTR tv184[ebp]
  0015e	f3 0f 10 85 8c
	fe ff ff	 movss	 xmm0, DWORD PTR tv184[ebp]
  00166	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR _inv_det$[ebp]
  0016b	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _v$[ebp], xmm0

; 66   :   if (v < 0.0f || u + v > 1.0f)

  00173	0f 57 c0	 xorps	 xmm0, xmm0
  00176	0f 2f 85 6c ff
	ff ff		 comiss	 xmm0, DWORD PTR _v$[ebp]
  0017d	77 19		 ja	 SHORT $LN6@glm_ray_tr
  0017f	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _u$[ebp]
  00187	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _v$[ebp]
  0018f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00196	76 07		 jbe	 SHORT $LN5@glm_ray_tr
$LN6@glm_ray_tr:

; 67   :     return false;

  00198	32 c0		 xor	 al, al
  0019a	e9 8c 00 00 00	 jmp	 $LN1@glm_ray_tr
$LN5@glm_ray_tr:

; 68   : 
; 69   :   dist = inv_det * glm_vec3_dot(edge2, q);

  0019f	8d 45 9c	 lea	 eax, DWORD PTR _q$[ebp]
  001a2	50		 push	 eax
  001a3	8d 4d d8	 lea	 ecx, DWORD PTR _edge2$[ebp]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 _glm_vec3_dot
  001ac	83 c4 08	 add	 esp, 8
  001af	d9 9d 8c fe ff
	ff		 fstp	 DWORD PTR tv194[ebp]
  001b5	f3 0f 10 85 8c
	fe ff ff	 movss	 xmm0, DWORD PTR tv194[ebp]
  001bd	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR _inv_det$[ebp]
  001c2	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR _dist$[ebp], xmm0

; 70   : 
; 71   :   if (d)

  001ca	83 7d 1c 00	 cmp	 DWORD PTR _d$[ebp], 0
  001ce	74 0f		 je	 SHORT $LN7@glm_ray_tr

; 72   :     *d = dist;

  001d0	8b 45 1c	 mov	 eax, DWORD PTR _d$[ebp]
  001d3	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _dist$[ebp]
  001db	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN7@glm_ray_tr:

; 73   : 
; 74   :   return dist > epsilon;

  001df	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _dist$[ebp]
  001e7	0f 2f 85 54 ff
	ff ff		 comiss	 xmm0, DWORD PTR _epsilon$[ebp]
  001ee	76 0c		 jbe	 SHORT $LN9@glm_ray_tr
  001f0	c7 85 8c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv137[ebp], 1
  001fa	eb 0a		 jmp	 SHORT $LN10@glm_ray_tr
$LN9@glm_ray_tr:
  001fc	c7 85 8c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv137[ebp], 0
$LN10@glm_ray_tr:
  00206	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR tv137[ebp], 0
  0020d	75 0c		 jne	 SHORT $LN11@glm_ray_tr
  0020f	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv139[ebp], 0
  00219	eb 0a		 jmp	 SHORT $LN12@glm_ray_tr
$LN11@glm_ray_tr:
  0021b	c7 85 88 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv139[ebp], 1
$LN12@glm_ray_tr:
  00225	8a 85 88 fe ff
	ff		 mov	 al, BYTE PTR tv139[ebp]
$LN1@glm_ray_tr:

; 75   : }

  0022b	52		 push	 edx
  0022c	8b cd		 mov	 ecx, ebp
  0022e	50		 push	 eax
  0022f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@glm_ray_tr
  00235	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0023a	58		 pop	 eax
  0023b	5a		 pop	 edx
  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	5b		 pop	 ebx
  0023f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00242	33 cd		 xor	 ecx, ebp
  00244	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00249	81 c4 78 01 00
	00		 add	 esp, 376		; 00000178H
  0024f	3b ec		 cmp	 ebp, esp
  00251	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00256	8b e5		 mov	 esp, ebp
  00258	5d		 pop	 ebp
  00259	c3		 ret	 0
  0025a	66 90		 npad	 2
$LN19@glm_ray_tr:
  0025c	05 00 00 00	 DD	 5
  00260	00 00 00 00	 DD	 $LN18@glm_ray_tr
$LN18@glm_ray_tr:
  00264	ec ff ff ff	 DD	 -20			; ffffffecH
  00268	0c 00 00 00	 DD	 12			; 0000000cH
  0026c	00 00 00 00	 DD	 $LN13@glm_ray_tr
  00270	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00274	0c 00 00 00	 DD	 12			; 0000000cH
  00278	00 00 00 00	 DD	 $LN14@glm_ray_tr
  0027c	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00280	0c 00 00 00	 DD	 12			; 0000000cH
  00284	00 00 00 00	 DD	 $LN15@glm_ray_tr
  00288	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0028c	0c 00 00 00	 DD	 12			; 0000000cH
  00290	00 00 00 00	 DD	 $LN16@glm_ray_tr
  00294	9c ff ff ff	 DD	 -100			; ffffff9cH
  00298	0c 00 00 00	 DD	 12			; 0000000cH
  0029c	00 00 00 00	 DD	 $LN17@glm_ray_tr
$LN17@glm_ray_tr:
  002a0	71		 DB	 113			; 00000071H
  002a1	00		 DB	 0
$LN16@glm_ray_tr:
  002a2	74		 DB	 116			; 00000074H
  002a3	00		 DB	 0
$LN15@glm_ray_tr:
  002a4	70		 DB	 112			; 00000070H
  002a5	00		 DB	 0
$LN14@glm_ray_tr:
  002a6	65		 DB	 101			; 00000065H
  002a7	64		 DB	 100			; 00000064H
  002a8	67		 DB	 103			; 00000067H
  002a9	65		 DB	 101			; 00000065H
  002aa	32		 DB	 50			; 00000032H
  002ab	00		 DB	 0
$LN13@glm_ray_tr:
  002ac	65		 DB	 101			; 00000065H
  002ad	64		 DB	 100			; 00000064H
  002ae	67		 DB	 103			; 00000067H
  002af	65		 DB	 101			; 00000065H
  002b0	31		 DB	 49			; 00000031H
  002b1	00		 DB	 0
_glm_ray_triangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_cross
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_cross PROC					; COMDAT

; 580  : glm_vec3_cross(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 581  :   /* (u2.v3 - u3.v2, u3.v1 - u1.v3, u1.v2 - u2.v1) */
; 582  :   dest[0] = a[1] * b[2] - a[2] * b[1];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	c1 e0 00	 shl	 eax, 0
  00030	b9 04 00 00 00	 mov	 ecx, 4
  00035	d1 e1		 shl	 ecx, 1
  00037	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003a	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00042	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00047	b8 04 00 00 00	 mov	 eax, 4
  0004c	d1 e0		 shl	 eax, 1
  0004e	b9 04 00 00 00	 mov	 ecx, 4
  00053	c1 e1 00	 shl	 ecx, 0
  00056	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00059	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0005c	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00061	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00066	f3 0f 5c c1	 subss	 xmm0, xmm1
  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	6b c8 00	 imul	 ecx, eax, 0
  00072	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00075	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 583  :   dest[1] = a[2] * b[0] - a[0] * b[2];

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	d1 e0		 shl	 eax, 1
  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	6b d1 00	 imul	 edx, ecx, 0
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0008c	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0008f	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00094	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  00099	ba 04 00 00 00	 mov	 edx, 4
  0009e	6b c2 00	 imul	 eax, edx, 0
  000a1	b9 04 00 00 00	 mov	 ecx, 4
  000a6	d1 e1		 shl	 ecx, 1
  000a8	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000ab	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000ae	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000b3	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  000b8	f3 0f 5c c1	 subss	 xmm0, xmm1
  000bc	b8 04 00 00 00	 mov	 eax, 4
  000c1	c1 e0 00	 shl	 eax, 0
  000c4	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000c7	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 584  :   dest[2] = a[0] * b[1] - a[1] * b[0];

  000cc	b8 04 00 00 00	 mov	 eax, 4
  000d1	6b c8 00	 imul	 ecx, eax, 0
  000d4	ba 04 00 00 00	 mov	 edx, 4
  000d9	c1 e2 00	 shl	 edx, 0
  000dc	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000df	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000e2	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000e7	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  000ec	b9 04 00 00 00	 mov	 ecx, 4
  000f1	c1 e1 00	 shl	 ecx, 0
  000f4	ba 04 00 00 00	 mov	 edx, 4
  000f9	6b c2 00	 imul	 eax, edx, 0
  000fc	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000ff	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00102	f3 0f 10 0c 0a	 movss	 xmm1, DWORD PTR [edx+ecx]
  00107	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  0010c	f3 0f 5c c1	 subss	 xmm0, xmm1
  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	d1 e0		 shl	 eax, 1
  00117	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0011a	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 585  : }

  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi
  00121	5b		 pop	 ebx
  00122	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00128	3b ec		 cmp	 ebp, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c3		 ret	 0
_glm_vec3_cross ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_sub
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec3_sub PROC					; COMDAT

; 301  : glm_vec3_sub(vec3 a, vec3 b, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 302  :   dest[0] = a[0] - b[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00053	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 303  :   dest[1] = a[1] - b[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 04 00 00 00	 mov	 ecx, 4
  00065	c1 e1 00	 shl	 ecx, 0
  00068	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0006e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00073	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00078	b8 04 00 00 00	 mov	 eax, 4
  0007d	c1 e0 00	 shl	 eax, 0
  00080	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00083	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 304  :   dest[2] = a[2] - b[2];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	d1 e0		 shl	 eax, 1
  0008f	b9 04 00 00 00	 mov	 ecx, 4
  00094	d1 e1		 shl	 ecx, 1
  00096	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00099	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0009c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000a1	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	d1 e0		 shl	 eax, 1
  000ad	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  000b0	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 305  : }

  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_glm_vec3_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3_dot
_TEXT	SEGMENT
tv130 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec3_dot PROC					; COMDAT

; 184  : glm_vec3_dot(vec3 a, vec3 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  :   return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	c1 e0 00	 shl	 eax, 0
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0005b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0005e	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00063	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00068	f3 0f 58 c1	 addss	 xmm0, xmm1
  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	d1 e0		 shl	 eax, 1
  00073	b9 04 00 00 00	 mov	 ecx, 4
  00078	d1 e1		 shl	 ecx, 1
  0007a	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0007d	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00080	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00085	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  0008a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0008e	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv130[ebp], xmm0
  00096	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv130[ebp]

; 186  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	5b		 pop	 ebx
  0009f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  000a5	3b ec		 cmp	 ebp, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
_glm_vec3_dot ENDP
_TEXT	ENDS
END
