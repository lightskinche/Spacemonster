; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__F7746149_ease@c DB 01H
msvcjmc	ENDS
PUBLIC	_cosf
PUBLIC	_powf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	_glm_ease_linear
PUBLIC	_glm_ease_sine_in
PUBLIC	_glm_ease_sine_out
PUBLIC	_glm_ease_sine_inout
PUBLIC	_glm_ease_quad_in
PUBLIC	_glm_ease_quad_out
PUBLIC	_glm_ease_quad_inout
PUBLIC	_glm_ease_cubic_in
PUBLIC	_glm_ease_cubic_out
PUBLIC	_glm_ease_cubic_inout
PUBLIC	_glm_ease_quart_in
PUBLIC	_glm_ease_quart_out
PUBLIC	_glm_ease_quart_inout
PUBLIC	_glm_ease_quint_in
PUBLIC	_glm_ease_quint_out
PUBLIC	_glm_ease_quint_inout
PUBLIC	_glm_ease_exp_in
PUBLIC	_glm_ease_exp_out
PUBLIC	_glm_ease_exp_inout
PUBLIC	_glm_ease_circ_in
PUBLIC	_glm_ease_circ_out
PUBLIC	_glm_ease_circ_inout
PUBLIC	_glm_ease_back_in
PUBLIC	_glm_ease_back_out
PUBLIC	_glm_ease_back_inout
PUBLIC	_glm_ease_elast_in
PUBLIC	_glm_ease_elast_out
PUBLIC	_glm_ease_elast_inout
PUBLIC	_glm_ease_bounce_out
PUBLIC	_glm_ease_bounce_in
PUBLIC	_glm_ease_bounce_inout
PUBLIC	_glmc_ease_linear
PUBLIC	_glmc_ease_sine_in
PUBLIC	_glmc_ease_sine_out
PUBLIC	_glmc_ease_sine_inout
PUBLIC	_glmc_ease_quad_in
PUBLIC	_glmc_ease_quad_out
PUBLIC	_glmc_ease_quad_inout
PUBLIC	_glmc_ease_cubic_in
PUBLIC	_glmc_ease_cubic_out
PUBLIC	_glmc_ease_cubic_inout
PUBLIC	_glmc_ease_quart_in
PUBLIC	_glmc_ease_quart_out
PUBLIC	_glmc_ease_quart_inout
PUBLIC	_glmc_ease_quint_in
PUBLIC	_glmc_ease_quint_out
PUBLIC	_glmc_ease_quint_inout
PUBLIC	_glmc_ease_exp_in
PUBLIC	_glmc_ease_exp_out
PUBLIC	_glmc_ease_exp_inout
PUBLIC	_glmc_ease_circ_in
PUBLIC	_glmc_ease_circ_out
PUBLIC	_glmc_ease_circ_inout
PUBLIC	_glmc_ease_back_in
PUBLIC	_glmc_ease_back_out
PUBLIC	_glmc_ease_back_inout
PUBLIC	_glmc_ease_elast_in
PUBLIC	_glmc_ease_elast_out
PUBLIC	_glmc_ease_elast_inout
PUBLIC	_glmc_ease_bounce_out
PUBLIC	_glmc_ease_bounce_in
PUBLIC	_glmc_ease_bounce_inout
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@3eba2e8c
PUBLIC	__real@3f000000
PUBLIC	__real@3f3a2e8c
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3fc33333
PUBLIC	__real@3fc90fdb
PUBLIC	__real@3fd9cd60
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@4059999a
PUBLIC	__real@40800000
PUBLIC	__real@41000000
PUBLIC	__real@410e5e75
PUBLIC	__real@41113333
PUBLIC	__real@411e6666
PUBLIC	__real@41200000
PUBLIC	__real@412b851f
PUBLIC	__real@412ccccd
PUBLIC	__real@4141104f
PUBLIC	__real@41800000
PUBLIC	__real@419d156b
PUBLIC	__real@41a00000
PUBLIC	__real@41a35ce2
PUBLIC	__real@41a428f6
PUBLIC	__real@42f20000
PUBLIC	__real@bf000000
PUBLIC	__real@c0000000
PUBLIC	__real@c1000000
PUBLIC	__real@c1200000
PUBLIC	__real@c1a00000
PUBLIC	__real@c1a35ce2
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_cos:PROC
EXTRN	_pow:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c1a35ce2
CONST	SEGMENT
__real@c1a35ce2 DD 0c1a35ce2r			; -20.4204
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@42f20000
CONST	SEGMENT
__real@42f20000 DD 042f20000r			; 121
CONST	ENDS
;	COMDAT __real@41a428f6
CONST	SEGMENT
__real@41a428f6 DD 041a428f6r			; 20.52
CONST	ENDS
;	COMDAT __real@41a35ce2
CONST	SEGMENT
__real@41a35ce2 DD 041a35ce2r			; 20.4204
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@419d156b
CONST	SEGMENT
__real@419d156b DD 0419d156br			; 19.6355
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@4141104f
CONST	SEGMENT
__real@4141104f DD 04141104fr			; 12.0665
CONST	ENDS
;	COMDAT __real@412ccccd
CONST	SEGMENT
__real@412ccccd DD 0412ccccdr			; 10.8
CONST	ENDS
;	COMDAT __real@412b851f
CONST	SEGMENT
__real@412b851f DD 0412b851fr			; 10.72
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@411e6666
CONST	SEGMENT
__real@411e6666 DD 0411e6666r			; 9.9
CONST	ENDS
;	COMDAT __real@41113333
CONST	SEGMENT
__real@41113333 DD 041113333r			; 9.075
CONST	ENDS
;	COMDAT __real@410e5e75
CONST	SEGMENT
__real@410e5e75 DD 0410e5e75r			; 8.89806
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@4059999a
CONST	SEGMENT
__real@4059999a DD 04059999ar			; 3.4
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fd9cd60
CONST	SEGMENT
__real@3fd9cd60 DD 03fd9cd60r			; 1.70158
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3fc33333
CONST	SEGMENT
__real@3fc33333 DD 03fc33333r			; 1.525
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f3a2e8c
CONST	SEGMENT
__real@3f3a2e8c DD 03f3a2e8cr			; 0.727273
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3eba2e8c
CONST	SEGMENT
__real@3eba2e8c DD 03eba2e8cr			; 0.363636
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_bounce_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_bounce_inout PROC				; COMDAT

; 193  : glmc_ease_bounce_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 194  :   return glm_ease_bounce_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_bounce_inout
  00038	83 c4 04	 add	 esp, 4

; 195  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_bounce_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_bounce_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_bounce_in PROC				; COMDAT

; 187  : glmc_ease_bounce_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 188  :   return glm_ease_bounce_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_bounce_in
  00038	83 c4 04	 add	 esp, 4

; 189  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_bounce_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_bounce_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_bounce_out PROC				; COMDAT

; 181  : glmc_ease_bounce_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 182  :   return glm_ease_bounce_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_bounce_out
  00038	83 c4 04	 add	 esp, 4

; 183  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_bounce_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_elast_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_elast_inout PROC				; COMDAT

; 175  : glmc_ease_elast_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 176  :   return glm_ease_elast_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_elast_inout
  00038	83 c4 04	 add	 esp, 4

; 177  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_elast_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_elast_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_elast_out PROC				; COMDAT

; 169  : glmc_ease_elast_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 170  :   return glm_ease_elast_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_elast_out
  00038	83 c4 04	 add	 esp, 4

; 171  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_elast_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_elast_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_elast_in PROC				; COMDAT

; 163  : glmc_ease_elast_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 164  :   return glm_ease_elast_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_elast_in
  00038	83 c4 04	 add	 esp, 4

; 165  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_elast_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_back_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_back_inout PROC				; COMDAT

; 157  : glmc_ease_back_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 158  :   return glm_ease_back_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_back_inout
  00038	83 c4 04	 add	 esp, 4

; 159  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_back_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_back_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_back_out PROC				; COMDAT

; 151  : glmc_ease_back_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 152  :   return glm_ease_back_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_back_out
  00038	83 c4 04	 add	 esp, 4

; 153  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_back_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_back_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_back_in PROC					; COMDAT

; 145  : glmc_ease_back_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :   return glm_ease_back_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_back_in
  00038	83 c4 04	 add	 esp, 4

; 147  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_back_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_circ_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_circ_inout PROC				; COMDAT

; 139  : glmc_ease_circ_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  :   return glm_ease_circ_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_circ_inout
  00038	83 c4 04	 add	 esp, 4

; 141  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_circ_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_circ_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_circ_out PROC				; COMDAT

; 133  : glmc_ease_circ_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 134  :   return glm_ease_circ_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_circ_out
  00038	83 c4 04	 add	 esp, 4

; 135  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_circ_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_circ_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_circ_in PROC					; COMDAT

; 127  : glmc_ease_circ_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 128  :   return glm_ease_circ_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_circ_in
  00038	83 c4 04	 add	 esp, 4

; 129  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_circ_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_exp_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_exp_inout PROC				; COMDAT

; 121  : glmc_ease_exp_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 122  :   return glm_ease_exp_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_exp_inout
  00038	83 c4 04	 add	 esp, 4

; 123  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_exp_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_exp_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_exp_out PROC					; COMDAT

; 115  : glmc_ease_exp_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 116  :   return glm_ease_exp_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_exp_out
  00038	83 c4 04	 add	 esp, 4

; 117  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_exp_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_exp_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_exp_in PROC					; COMDAT

; 109  : glmc_ease_exp_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  :   return glm_ease_exp_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_exp_in
  00038	83 c4 04	 add	 esp, 4

; 111  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_exp_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quint_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quint_inout PROC				; COMDAT

; 103  : glmc_ease_quint_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 104  :   return glm_ease_quint_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quint_inout
  00038	83 c4 04	 add	 esp, 4

; 105  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quint_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quint_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quint_out PROC				; COMDAT

; 97   : glmc_ease_quint_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 98   :   return glm_ease_quint_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quint_out
  00038	83 c4 04	 add	 esp, 4

; 99   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quint_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quint_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quint_in PROC				; COMDAT

; 91   : glmc_ease_quint_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 92   :   return glm_ease_quint_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quint_in
  00038	83 c4 04	 add	 esp, 4

; 93   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quint_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quart_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quart_inout PROC				; COMDAT

; 85   : glmc_ease_quart_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 86   :   return glm_ease_quart_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quart_inout
  00038	83 c4 04	 add	 esp, 4

; 87   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quart_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quart_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quart_out PROC				; COMDAT

; 79   : glmc_ease_quart_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :   return glm_ease_quart_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quart_out
  00038	83 c4 04	 add	 esp, 4

; 81   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quart_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quart_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quart_in PROC				; COMDAT

; 73   : glmc_ease_quart_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   return glm_ease_quart_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quart_in
  00038	83 c4 04	 add	 esp, 4

; 75   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quart_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_cubic_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_cubic_inout PROC				; COMDAT

; 67   : glmc_ease_cubic_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   :   return glm_ease_cubic_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_cubic_inout
  00038	83 c4 04	 add	 esp, 4

; 69   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_cubic_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_cubic_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_cubic_out PROC				; COMDAT

; 61   : glmc_ease_cubic_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   return glm_ease_cubic_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_cubic_out
  00038	83 c4 04	 add	 esp, 4

; 63   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_cubic_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_cubic_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_cubic_in PROC				; COMDAT

; 55   : glmc_ease_cubic_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   return glm_ease_cubic_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_cubic_in
  00038	83 c4 04	 add	 esp, 4

; 57   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_cubic_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quad_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quad_inout PROC				; COMDAT

; 49   : glmc_ease_quad_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   return glm_ease_quad_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quad_inout
  00038	83 c4 04	 add	 esp, 4

; 51   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quad_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quad_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quad_out PROC				; COMDAT

; 43   : glmc_ease_quad_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 44   :   return glm_ease_quad_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quad_out
  00038	83 c4 04	 add	 esp, 4

; 45   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quad_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_quad_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_quad_in PROC					; COMDAT

; 37   : glmc_ease_quad_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   return glm_ease_quad_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_quad_in
  00038	83 c4 04	 add	 esp, 4

; 39   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_quad_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_sine_inout
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_sine_inout PROC				; COMDAT

; 31   : glmc_ease_sine_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   return glm_ease_sine_inout(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_sine_inout
  00038	83 c4 04	 add	 esp, 4

; 33   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_sine_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_sine_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_sine_out PROC				; COMDAT

; 25   : glmc_ease_sine_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   return glm_ease_sine_out(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_sine_out
  00038	83 c4 04	 add	 esp, 4

; 27   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_sine_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_sine_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_sine_in PROC					; COMDAT

; 19   : glmc_ease_sine_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   return glm_ease_sine_in(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_sine_in
  00038	83 c4 04	 add	 esp, 4

; 21   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_sine_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\ease.c
;	COMDAT _glmc_ease_linear
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glmc_ease_linear PROC					; COMDAT

; 13   : glmc_ease_linear(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F7746149_ease@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   return glm_ease_linear(t);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _glm_ease_linear
  00038	83 c4 04	 add	 esp, 4

; 15   : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glmc_ease_linear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_bounce_inout
_TEXT	SEGMENT
tv133 = -200						; size = 4
tv91 = -200						; size = 4
tv130 = -196						; size = 4
tv87 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_bounce_inout PROC				; COMDAT

; 310  : glm_ease_bounce_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 311  :   if (t < 0.5f)

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00030	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00034	76 49		 jbe	 SHORT $LN2@glm_ease_b

; 312  :     return 0.5f * (1.0f - glm_ease_bounce_out(t * 2.0f));

  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00043	51		 push	 ecx
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 _glm_ease_bounce_out
  0004e	83 c4 04	 add	 esp, 4
  00051	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv87[ebp]
  00057	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005f	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv87[ebp]
  00067	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0006f	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv91[ebp], xmm0
  00077	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv91[ebp]
  0007d	eb 4f		 jmp	 SHORT $LN1@glm_ease_b
$LN2@glm_ease_b:

; 313  : 
; 314  :   return 0.5f * glm_ease_bounce_out(t * 2.0f - 1.0f) + 0.5f;

  0007f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  00084	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0008c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00094	51		 push	 ecx
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	e8 00 00 00 00	 call	 _glm_ease_bounce_out
  0009f	83 c4 04	 add	 esp, 4
  000a2	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv130[ebp]
  000a8	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv130[ebp]
  000b0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000b8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000c0	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv133[ebp], xmm0
  000c8	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv133[ebp]
$LN1@glm_ease_b:

; 315  : }

  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx
  000d1	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  000d7	3b ec		 cmp	 ebp, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
_glm_ease_bounce_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_bounce_in
_TEXT	SEGMENT
tv78 = -200						; size = 4
tv75 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_bounce_in PROC				; COMDAT

; 304  : glm_ease_bounce_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 305  :   return 1.0f - glm_ease_bounce_out(1.0f - t);

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00030	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _t$[ebp]
  00035	51		 push	 ecx
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 _glm_ease_bounce_out
  00040	83 c4 04	 add	 esp, 4
  00043	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv75[ebp]
  00049	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00051	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv75[ebp]
  00059	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv78[ebp], xmm0
  00061	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv78[ebp]

; 306  : }

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
_glm_ease_bounce_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_bounce_out
_TEXT	SEGMENT
tv144 = -208						; size = 4
tv139 = -208						; size = 4
tv133 = -208						; size = 4
tv95 = -208						; size = 4
_tt$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_bounce_out PROC				; COMDAT

; 283  : glm_ease_bounce_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 284  :   float tt;
; 285  : 
; 286  :   tt = t * t;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 45 f8	 movss	 DWORD PTR _tt$[ebp], xmm0

; 287  : 
; 288  :   if (t < (4.0f / 11.0f))

  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eba2e8c
  0003f	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00043	76 28		 jbe	 SHORT $LN2@glm_ease_b

; 289  :     return (121.0f * tt) / 16.0f;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42f20000
  0004d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _tt$[ebp]
  00052	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41800000
  0005a	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv95[ebp], xmm0
  00062	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv95[ebp]
  00068	e9 bc 00 00 00	 jmp	 $LN1@glm_ease_b
$LN2@glm_ease_b:

; 290  : 
; 291  :   if (t < 8.0f / 11.0f)

  0006d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f3a2e8c
  00075	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00079	76 36		 jbe	 SHORT $LN3@glm_ease_b

; 292  :     return ((363.0f / 40.0f) * tt) - ((99.0f / 10.0f) * t) + (17.0f / 5.0f);

  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41113333
  00083	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _tt$[ebp]
  00088	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@411e6666
  00090	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _t$[ebp]
  00095	f3 0f 5c c1	 subss	 xmm0, xmm1
  00099	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@4059999a
  000a1	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv133[ebp], xmm0
  000a9	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv133[ebp]
  000af	eb 78		 jmp	 SHORT $LN1@glm_ease_b
$LN3@glm_ease_b:

; 293  : 
; 294  :   if (t < (9.0f / 10.0f))

  000b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  000b9	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  000bd	76 36		 jbe	 SHORT $LN4@glm_ease_b

; 295  :     return (4356.0f / 361.0f) * tt

  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4141104f
  000c7	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _tt$[ebp]
  000cc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@419d156b
  000d4	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _t$[ebp]
  000d9	f3 0f 5c c1	 subss	 xmm0, xmm1
  000dd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@410e5e75
  000e5	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv139[ebp], xmm0
  000ed	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv139[ebp]
  000f3	eb 34		 jmp	 SHORT $LN1@glm_ease_b
$LN4@glm_ease_b:

; 296  :             - (35442.0f / 1805.0f) * t
; 297  :             + (16061.0f / 1805.0f);
; 298  : 
; 299  :   return ((54.0f / 5.0f) * tt) - ((513.0f / 25.0f) * t) + (268.0f / 25.0f);

  000f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@412ccccd
  000fd	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _tt$[ebp]
  00102	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41a428f6
  0010a	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _t$[ebp]
  0010f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00113	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@412b851f
  0011b	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv144[ebp], xmm0
  00123	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv144[ebp]
$LN1@glm_ease_b:

; 300  : }

  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00132	3b ec		 cmp	 ebp, esp
  00134	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00139	8b e5		 mov	 esp, ebp
  0013b	5d		 pop	 ebp
  0013c	c3		 ret	 0
_glm_ease_bounce_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_elast_inout
_TEXT	SEGMENT
tv166 = -220						; size = 4
tv147 = -220						; size = 4
tv163 = -216						; size = 4
tv145 = -216						; size = 4
tv171 = -212						; size = 4
tv169 = -212						; size = 4
tv154 = -208						; size = 4
tv135 = -208						; size = 4
_a$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_elast_inout PROC				; COMDAT

; 268  : glm_ease_elast_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 269  :   float a;
; 270  : 
; 271  :   a = 2.0f * t;

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00030	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _a$[ebp], xmm0

; 272  : 
; 273  :   if (t < 0.5f)

  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00042	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00046	0f 86 93 00 00
	00		 jbe	 $LN2@glm_ease_e

; 274  :     return 0.5f * sinf(13.0f * GLM_PI_2f * a)

  0004c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a35ce2
  00054	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _a$[ebp]
  00059	51		 push	 ecx
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 _sinf
  00064	83 c4 04	 add	 esp, 4
  00067	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv135[ebp]
  0006d	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv135[ebp]
  00075	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0007d	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _a$[ebp]
  00082	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  0008a	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@41200000
  00092	51		 push	 ecx
  00093	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00098	51		 push	 ecx
  00099	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  000a1	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  000a6	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR tv169[ebp], xmm0
  000ae	e8 00 00 00 00	 call	 _powf
  000b3	83 c4 08	 add	 esp, 8
  000b6	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR tv145[ebp]
  000bc	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR tv169[ebp]
  000c4	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR tv145[ebp]
  000cc	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv147[ebp], xmm0
  000d4	d9 85 24 ff ff
	ff		 fld	 DWORD PTR tv147[ebp]
  000da	e9 96 00 00 00	 jmp	 $LN1@glm_ease_e
$LN2@glm_ease_e:

; 275  :                 * powf(2.0f, 10.0f * (a - 1.0f));
; 276  : 
; 277  :   return 0.5f * (sinf(-13.0f * GLM_PI_2f * a)

  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1a35ce2
  000e7	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _a$[ebp]
  000ec	51		 push	 ecx
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	e8 00 00 00 00	 call	 _sinf
  000f7	83 c4 04	 add	 esp, 4
  000fa	d9 9d 30 ff ff
	ff		 fstp	 DWORD PTR tv154[ebp]
  00100	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR tv154[ebp]
  00108	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _a$[ebp]
  0010d	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  00115	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@c1200000
  0011d	51		 push	 ecx
  0011e	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00123	51		 push	 ecx
  00124	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  0012c	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00131	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR tv171[ebp], xmm0
  00139	e8 00 00 00 00	 call	 _powf
  0013e	83 c4 08	 add	 esp, 8
  00141	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR tv163[ebp]
  00147	f3 0f 10 85 2c
	ff ff ff	 movss	 xmm0, DWORD PTR tv171[ebp]
  0014f	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR tv163[ebp]
  00157	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  0015f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00167	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv166[ebp], xmm0
  0016f	d9 85 24 ff ff
	ff		 fld	 DWORD PTR tv166[ebp]
$LN1@glm_ease_e:

; 278  :                  * powf(2.0f, -10.0f * (a - 1.0f)) + 2.0f);
; 279  : }

  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	5b		 pop	 ebx
  00178	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0017e	3b ec		 cmp	 ebp, esp
  00180	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
_glm_ease_elast_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_elast_out
_TEXT	SEGMENT
tv94 = -208						; size = 4
tv92 = -204						; size = 4
tv129 = -200						; size = 4
tv84 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_elast_out PROC				; COMDAT

; 262  : glm_ease_elast_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 263  :   return sinf(-13.0f * GLM_PI_2f * (t + 1.0f)) * powf(2.0f, -10.0f * t) + 1.0f;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00035	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c1a35ce2
  0003d	51		 push	 ecx
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	e8 00 00 00 00	 call	 _sinf
  00048	83 c4 04	 add	 esp, 4
  0004b	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv84[ebp]
  00051	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv84[ebp]
  00059	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c1200000
  00061	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _t$[ebp]
  00066	51		 push	 ecx
  00067	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0006c	51		 push	 ecx
  0006d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00075	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0007a	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv129[ebp], xmm0
  00082	e8 00 00 00 00	 call	 _powf
  00087	83 c4 08	 add	 esp, 8
  0008a	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR tv92[ebp]
  00090	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv129[ebp]
  00098	f3 0f 59 85 34
	ff ff ff	 mulss	 xmm0, DWORD PTR tv92[ebp]
  000a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000a8	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv94[ebp], xmm0
  000b0	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv94[ebp]

; 264  : }

  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000bf	3b ec		 cmp	 ebp, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
_glm_ease_elast_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_elast_in
_TEXT	SEGMENT
tv93 = -208						; size = 4
tv91 = -204						; size = 4
tv128 = -200						; size = 4
tv82 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_elast_in PROC					; COMDAT

; 256  : glm_ease_elast_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 257  :   return sinf(13.0f * GLM_PI_2f * t) * powf(2.0f, 10.0f * (t - 1.0f));

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a35ce2
  00030	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00035	51		 push	 ecx
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 _sinf
  00040	83 c4 04	 add	 esp, 4
  00043	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv82[ebp]
  00049	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv82[ebp]
  00051	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _t$[ebp]
  00056	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  0005e	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@41200000
  00066	51		 push	 ecx
  00067	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0006c	51		 push	 ecx
  0006d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00075	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0007a	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv128[ebp], xmm0
  00082	e8 00 00 00 00	 call	 _powf
  00087	83 c4 08	 add	 esp, 8
  0008a	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR tv91[ebp]
  00090	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv128[ebp]
  00098	f3 0f 59 85 34
	ff ff ff	 mulss	 xmm0, DWORD PTR tv91[ebp]
  000a0	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv93[ebp], xmm0
  000a8	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv93[ebp]

; 258  : }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_glm_ease_elast_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_back_inout
_TEXT	SEGMENT
tv134 = -268						; size = 4
tv95 = -268						; size = 4
_x$ = -68						; size = 4
_s$ = -56						; size = 4
_m$ = -44						; size = 4
_n$ = -32						; size = 4
_z$ = -20						; size = 4
_o$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_back_inout PROC				; COMDAT

; 233  : glm_ease_back_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00012	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 234  :   float o, z, n, m, s, x;
; 235  : 
; 236  :   o = 1.70158f;

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fd9cd60
  00030	f3 0f 11 45 f8	 movss	 DWORD PTR _o$[ebp], xmm0

; 237  :   s = o * 1.525f;

  00035	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _o$[ebp]
  0003a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc33333
  00042	f3 0f 11 45 c8	 movss	 DWORD PTR _s$[ebp], xmm0

; 238  :   x = 0.5;

  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0004f	f3 0f 11 45 bc	 movss	 DWORD PTR _x$[ebp], xmm0

; 239  :   n = t / 0.5f;

  00054	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  00059	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@3f000000
  00061	f3 0f 11 45 e0	 movss	 DWORD PTR _n$[ebp], xmm0

; 240  : 
; 241  :   if (n < 1.0f) {

  00066	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006e	0f 2f 45 e0	 comiss	 xmm0, DWORD PTR _n$[ebp]
  00072	76 4a		 jbe	 SHORT $LN2@glm_ease_b

; 242  :     z = (s + 1) * n - s;

  00074	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _s$[ebp]
  00079	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00081	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _n$[ebp]
  00086	f3 0f 5c 45 c8	 subss	 xmm0, DWORD PTR _s$[ebp]
  0008b	f3 0f 11 45 ec	 movss	 DWORD PTR _z$[ebp], xmm0

; 243  :     m = n * n * z;

  00090	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _n$[ebp]
  00095	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _n$[ebp]
  0009a	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _z$[ebp]
  0009f	f3 0f 11 45 d4	 movss	 DWORD PTR _m$[ebp], xmm0

; 244  :     return x * m;

  000a4	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _x$[ebp]
  000a9	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _m$[ebp]
  000ae	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR tv95[ebp], xmm0
  000b6	d9 85 f4 fe ff
	ff		 fld	 DWORD PTR tv95[ebp]
  000bc	eb 62		 jmp	 SHORT $LN1@glm_ease_b
$LN2@glm_ease_b:

; 245  :   }
; 246  : 
; 247  :   n -= 2.0f;

  000be	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _n$[ebp]
  000c3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  000cb	f3 0f 11 45 e0	 movss	 DWORD PTR _n$[ebp], xmm0

; 248  :   z  = (s + 1.0f) * n + s;

  000d0	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _s$[ebp]
  000d5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000dd	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _n$[ebp]
  000e2	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR _s$[ebp]
  000e7	f3 0f 11 45 ec	 movss	 DWORD PTR _z$[ebp], xmm0

; 249  :   m  = (n * n * z) + 2;

  000ec	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _n$[ebp]
  000f1	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _n$[ebp]
  000f6	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _z$[ebp]
  000fb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40000000
  00103	f3 0f 11 45 d4	 movss	 DWORD PTR _m$[ebp], xmm0

; 250  : 
; 251  :   return x * m;

  00108	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _x$[ebp]
  0010d	f3 0f 59 45 d4	 mulss	 xmm0, DWORD PTR _m$[ebp]
  00112	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR tv134[ebp], xmm0
  0011a	d9 85 f4 fe ff
	ff		 fld	 DWORD PTR tv134[ebp]
$LN1@glm_ease_b:

; 252  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00129	3b ec		 cmp	 ebp, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
_glm_ease_back_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_back_out
_TEXT	SEGMENT
tv78 = -232						; size = 4
_n$ = -32						; size = 4
_z$ = -20						; size = 4
_o$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_back_out PROC					; COMDAT

; 221  : glm_ease_back_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 222  :   float o, z, n;
; 223  : 
; 224  :   o = 1.70158f;

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fd9cd60
  00030	f3 0f 11 45 f8	 movss	 DWORD PTR _o$[ebp], xmm0

; 225  :   n = t - 1.0f;

  00035	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00042	f3 0f 11 45 e0	 movss	 DWORD PTR _n$[ebp], xmm0

; 226  :   z = (o + 1.0f) * n + o;

  00047	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _o$[ebp]
  0004c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00054	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _n$[ebp]
  00059	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _o$[ebp]
  0005e	f3 0f 11 45 ec	 movss	 DWORD PTR _z$[ebp], xmm0

; 227  : 
; 228  :   return n * n * z + 1.0f;

  00063	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _n$[ebp]
  00068	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _n$[ebp]
  0006d	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _z$[ebp]
  00072	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0007a	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR tv78[ebp], xmm0
  00082	d9 85 18 ff ff
	ff		 fld	 DWORD PTR tv78[ebp]

; 229  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_glm_ease_back_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_back_in
_TEXT	SEGMENT
tv76 = -220						; size = 4
_z$ = -20						; size = 4
_o$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_back_in PROC					; COMDAT

; 210  : glm_ease_back_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 211  :   float o, z;
; 212  : 
; 213  :   o = 1.70158f;

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fd9cd60
  00030	f3 0f 11 45 f8	 movss	 DWORD PTR _o$[ebp], xmm0

; 214  :   z = ((o + 1.0f) * t) - o;

  00035	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _o$[ebp]
  0003a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00042	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00047	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _o$[ebp]
  0004c	f3 0f 11 45 ec	 movss	 DWORD PTR _z$[ebp], xmm0

; 215  : 
; 216  :   return t * t * z;

  00051	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  00056	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0005b	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _z$[ebp]
  00060	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv76[ebp], xmm0
  00068	d9 85 24 ff ff
	ff		 fld	 DWORD PTR tv76[ebp]

; 217  : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_glm_ease_back_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_circ_inout
_TEXT	SEGMENT
tv148 = -200						; size = 4
tv137 = -200						; size = 4
tv145 = -196						; size = 4
tv133 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_circ_inout PROC				; COMDAT

; 201  : glm_ease_circ_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 202  :   if (t < 0.5f)

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00030	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00034	76 5a		 jbe	 SHORT $LN2@glm_ease_c

; 203  :     return 0.5f * (1.0f - sqrtf(1.0f - 4.0f * (t * t)));

  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003b	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00040	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  00048	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00050	f3 0f 5c c8	 subss	 xmm1, xmm0
  00054	51		 push	 ecx
  00055	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0005a	e8 00 00 00 00	 call	 _sqrtf
  0005f	83 c4 04	 add	 esp, 4
  00062	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv133[ebp]
  00068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00070	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv133[ebp]
  00078	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00080	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv137[ebp], xmm0
  00088	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv137[ebp]
  0008e	eb 6f		 jmp	 SHORT $LN1@glm_ease_c
$LN2@glm_ease_c:

; 204  : 
; 205  :   return 0.5f * (sqrtf(-((2.0f * t) - 3.0f) * ((2.0f * t) - 1.0f)) + 1.0f);

  00090	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00098	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0009d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40400000
  000a5	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000ac	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  000b4	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _t$[ebp]
  000b9	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  000c1	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000c5	51		 push	 ecx
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	e8 00 00 00 00	 call	 _sqrtf
  000d0	83 c4 04	 add	 esp, 4
  000d3	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv145[ebp]
  000d9	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv145[ebp]
  000e1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000f1	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv148[ebp], xmm0
  000f9	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv148[ebp]
$LN1@glm_ease_c:

; 206  : }

  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
_glm_ease_circ_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_circ_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glm_ease_circ_out PROC					; COMDAT

; 195  : glm_ease_circ_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 196  :   return sqrtf((2.0f - t) * t);

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00030	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _t$[ebp]
  00035	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0003a	51		 push	 ecx
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	e8 00 00 00 00	 call	 _sqrtf
  00045	83 c4 04	 add	 esp, 4

; 197  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_glm_ease_circ_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_circ_in
_TEXT	SEGMENT
tv81 = -200						; size = 4
tv78 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_circ_in PROC					; COMDAT

; 189  : glm_ease_circ_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 190  :   return 1.0f - sqrtf(1.0f - (t * t));

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0003a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00044	e8 00 00 00 00	 call	 _sqrtf
  00049	83 c4 04	 add	 esp, 4
  0004c	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv78[ebp]
  00052	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005a	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv78[ebp]
  00062	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv81[ebp], xmm0
  0006a	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv81[ebp]

; 191  : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_glm_ease_circ_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_exp_inout
_TEXT	SEGMENT
tv148 = -200						; size = 4
tv136 = -200						; size = 4
tv145 = -196						; size = 4
tv133 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_exp_inout PROC				; COMDAT

; 177  : glm_ease_exp_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 178  :   if (t == 0.0f || t == 1.0f)

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00034	9f		 lahf
  00035	f6 c4 44	 test	 ah, 68			; 00000044H
  00038	7b 12		 jnp	 SHORT $LN3@glm_ease_e
  0003a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003f	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  00046	9f		 lahf
  00047	f6 c4 44	 test	 ah, 68			; 00000044H
  0004a	7a 08		 jp	 SHORT $LN2@glm_ease_e
$LN3@glm_ease_e:

; 179  :     return t;

  0004c	d9 45 08	 fld	 DWORD PTR _t$[ebp]
  0004f	e9 c2 00 00 00	 jmp	 $LN1@glm_ease_e
$LN2@glm_ease_e:

; 180  : 
; 181  :   if (t < 0.5f)

  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0005c	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00060	76 57		 jbe	 SHORT $LN4@glm_ease_e

; 182  :     return 0.5f * powf(2.0f, (20.0f * t) - 10.0f);

  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  0006a	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0006f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@41200000
  00077	51		 push	 ecx
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	51		 push	 ecx
  0007e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	e8 00 00 00 00	 call	 _powf
  00090	83 c4 08	 add	 esp, 8
  00093	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv133[ebp]
  00099	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv133[ebp]
  000a1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000a9	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv136[ebp], xmm0
  000b1	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv136[ebp]
  000b7	eb 5d		 jmp	 SHORT $LN1@glm_ease_e
$LN4@glm_ease_e:

; 183  : 
; 184  :   return -0.5f * powf(2.0f, (-20.0f * t) + 10.0f) + 1.0f;

  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1a00000
  000c1	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  000c6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  000ce	51		 push	 ecx
  000cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d4	51		 push	 ecx
  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	e8 00 00 00 00	 call	 _powf
  000e7	83 c4 08	 add	 esp, 8
  000ea	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv145[ebp]
  000f0	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv145[ebp]
  000f8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf000000
  00100	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00108	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv148[ebp], xmm0
  00110	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv148[ebp]
$LN1@glm_ease_e:

; 185  : }

  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  0011f	3b ec		 cmp	 ebp, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
_glm_ease_exp_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_exp_out
_TEXT	SEGMENT
tv86 = -200						; size = 4
tv83 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_exp_out PROC					; COMDAT

; 168  : glm_ease_exp_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 169  :   if (t == 1.0f)

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  00034	9f		 lahf
  00035	f6 c4 44	 test	 ah, 68			; 00000044H
  00038	7a 05		 jp	 SHORT $LN2@glm_ease_e

; 170  :     return t;

  0003a	d9 45 08	 fld	 DWORD PTR _t$[ebp]
  0003d	eb 4d		 jmp	 SHORT $LN1@glm_ease_e
$LN2@glm_ease_e:

; 171  : 
; 172  :   return 1.0f - powf(2.0f, -10.0f * t);

  0003f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1200000
  00047	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0004c	51		 push	 ecx
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	51		 push	 ecx
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	e8 00 00 00 00	 call	 _powf
  00065	83 c4 08	 add	 esp, 8
  00068	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv83[ebp]
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00076	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv83[ebp]
  0007e	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv86[ebp], xmm0
  00086	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv86[ebp]
$LN1@glm_ease_e:

; 173  : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
_glm_ease_exp_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_exp_in
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glm_ease_exp_in PROC					; COMDAT

; 159  : glm_ease_exp_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 160  :   if (t == 0.0f)

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00034	9f		 lahf
  00035	f6 c4 44	 test	 ah, 68			; 00000044H
  00038	7a 05		 jp	 SHORT $LN2@glm_ease_e

; 161  :     return t;

  0003a	d9 45 08	 fld	 DWORD PTR _t$[ebp]
  0003d	eb 31		 jmp	 SHORT $LN1@glm_ease_e
$LN2@glm_ease_e:

; 162  : 
; 163  :   return powf(2.0f,  10.0f * (t - 1.0f));

  0003f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  00044	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41200000
  00054	51		 push	 ecx
  00055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005a	51		 push	 ecx
  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	e8 00 00 00 00	 call	 _powf
  0006d	83 c4 08	 add	 esp, 8
$LN1@glm_ease_e:

; 164  : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_glm_ease_exp_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quint_inout
_TEXT	SEGMENT
tv88 = -220						; size = 4
tv82 = -220						; size = 4
_g$ = -20						; size = 4
_f$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_quint_inout PROC				; COMDAT

; 143  : glm_ease_quint_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 144  :   float f, g;
; 145  : 
; 146  :   if (t < 0.5f) {

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00030	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00034	76 36		 jbe	 SHORT $LN2@glm_ease_q

; 147  :     f = t * t;

  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003b	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 148  :     return 16.0f * f * f * t;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41800000
  0004d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00052	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00057	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0005c	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv82[ebp], xmm0
  00064	d9 85 24 ff ff
	ff		 fld	 DWORD PTR tv82[ebp]
  0006a	eb 56		 jmp	 SHORT $LN1@glm_ease_q
$LN2@glm_ease_q:

; 149  :   }
; 150  : 
; 151  :   f = 2.0f * t - 2.0f;

  0006c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00074	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00079	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  00081	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 152  :   g = f * f;

  00086	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  0008b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00090	f3 0f 11 45 ec	 movss	 DWORD PTR _g$[ebp], xmm0

; 153  : 
; 154  :   return 0.5f * g * g * f + 1.0f;

  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0009d	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _g$[ebp]
  000a2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _g$[ebp]
  000a7	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  000ac	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000b4	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv88[ebp], xmm0
  000bc	d9 85 24 ff ff
	ff		 fld	 DWORD PTR tv88[ebp]
$LN1@glm_ease_q:

; 155  : }

  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx
  000c5	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_glm_ease_quint_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quint_out
_TEXT	SEGMENT
tv74 = -220						; size = 4
_g$ = -20						; size = 4
_f$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_quint_out PROC				; COMDAT

; 132  : glm_ease_quint_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  :   float f, g;
; 134  : 
; 135  :   f = t - 1.0f;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 136  :   g = f * f;

  0003a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  0003f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00044	f3 0f 11 45 ec	 movss	 DWORD PTR _g$[ebp], xmm0

; 137  : 
; 138  :   return g * g * f + 1.0f;

  00049	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _g$[ebp]
  0004e	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _g$[ebp]
  00053	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00058	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00060	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv74[ebp], xmm0
  00068	d9 85 24 ff ff
	ff		 fld	 DWORD PTR tv74[ebp]

; 139  : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_glm_ease_quint_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quint_in
_TEXT	SEGMENT
tv71 = -208						; size = 4
_f$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_quint_in PROC					; COMDAT

; 124  : glm_ease_quint_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 125  :   float f;
; 126  :   f = t * t;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 127  :   return f * f * t;

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  0003c	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00041	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00046	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv71[ebp], xmm0
  0004e	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv71[ebp]

; 128  : }

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_glm_ease_quint_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quart_inout
_TEXT	SEGMENT
tv85 = -220						; size = 4
tv79 = -220						; size = 4
_g$ = -20						; size = 4
_f$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_quart_inout PROC				; COMDAT

; 108  : glm_ease_quart_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  :   float f, g;
; 110  : 
; 111  :   if (t < 0.5f) {

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00030	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00034	76 31		 jbe	 SHORT $LN2@glm_ease_q

; 112  :     f = t * t;

  00036	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0003b	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 113  :     return 8.0f * f * f;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0004d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00052	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00057	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv79[ebp], xmm0
  0005f	d9 85 24 ff ff
	ff		 fld	 DWORD PTR tv79[ebp]
  00065	eb 49		 jmp	 SHORT $LN1@glm_ease_q
$LN2@glm_ease_q:

; 114  :   }
; 115  : 
; 116  :   f = t - 1.0f;

  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0006c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00074	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 117  :   g = f * f;

  00079	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  0007e	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00083	f3 0f 11 45 ec	 movss	 DWORD PTR _g$[ebp], xmm0

; 118  : 
; 119  :   return -8.0f * g * g + 1.0f;

  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1000000
  00090	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _g$[ebp]
  00095	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _g$[ebp]
  0009a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000a2	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv85[ebp], xmm0
  000aa	d9 85 24 ff ff
	ff		 fld	 DWORD PTR tv85[ebp]
$LN1@glm_ease_q:

; 120  : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000b9	3b ec		 cmp	 ebp, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_glm_ease_quart_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quart_out
_TEXT	SEGMENT
tv76 = -208						; size = 4
_f$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_quart_out PROC				; COMDAT

; 98   : glm_ease_quart_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 99   :   float f;
; 100  : 
; 101  :   f = t - 1.0f;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 102  : 
; 103  :   return f * f * f * (1.0f - t) + 1.0f;

  0003a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  0003f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00044	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00049	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00051	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _t$[ebp]
  00056	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0005a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00062	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv76[ebp], xmm0
  0006a	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv76[ebp]

; 104  : }

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_glm_ease_quart_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quart_in
_TEXT	SEGMENT
tv70 = -208						; size = 4
_f$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_quart_in PROC					; COMDAT

; 90   : glm_ease_quart_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :   float f;
; 92   :   f = t * t;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 93   :   return f * f;

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  0003c	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00041	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv70[ebp], xmm0
  00049	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv70[ebp]

; 94   : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_glm_ease_quart_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_cubic_inout
_TEXT	SEGMENT
tv84 = -208						; size = 4
tv79 = -208						; size = 4
_f$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_cubic_inout PROC				; COMDAT

; 77   : glm_ease_cubic_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   :   float f;
; 79   : 
; 80   :   if (t < 0.5f)

  00028	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00030	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00034	76 27		 jbe	 SHORT $LN2@glm_ease_c

; 81   :     return 4.0f * t * t * t;

  00036	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  0003e	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00043	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00048	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0004d	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv79[ebp], xmm0
  00055	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv79[ebp]
  0005b	eb 47		 jmp	 SHORT $LN1@glm_ease_c
$LN2@glm_ease_c:

; 82   : 
; 83   :   f = 2.0f * t - 2.0f;

  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00065	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0006a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  00072	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 84   : 
; 85   :   return 0.5f * f * f * f + 1.0f;

  00077	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0007f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00084	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00089	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  0008e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00096	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv84[ebp], xmm0
  0009e	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv84[ebp]
$LN1@glm_ease_c:

; 86   : }

  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_glm_ease_cubic_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_cubic_out
_TEXT	SEGMENT
tv72 = -208						; size = 4
_f$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_cubic_out PROC				; COMDAT

; 69   : glm_ease_cubic_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 70   :   float f;
; 71   :   f = t - 1.0f;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00035	f3 0f 11 45 f8	 movss	 DWORD PTR _f$[ebp], xmm0

; 72   :   return f * f * f + 1.0f;

  0003a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _f$[ebp]
  0003f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00044	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00049	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00051	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv72[ebp], xmm0
  00059	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 73   : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_glm_ease_cubic_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_cubic_in
_TEXT	SEGMENT
tv69 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_cubic_in PROC					; COMDAT

; 63   : glm_ease_cubic_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   :   return t * t * t;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00037	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv69[ebp], xmm0
  0003f	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv69[ebp]

; 65   : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_glm_ease_cubic_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quad_inout
_TEXT	SEGMENT
tv84 = -208						; size = 4
tv79 = -208						; size = 4
_tt$ = -8						; size = 4
_t$ = 8							; size = 4
_glm_ease_quad_inout PROC				; COMDAT

; 51   : glm_ease_quad_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 52   :   float tt;
; 53   : 
; 54   :   tt = t * t;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 45 f8	 movss	 DWORD PTR _tt$[ebp], xmm0

; 55   :   if (t < 0.5f)

  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0003f	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00043	76 1d		 jbe	 SHORT $LN2@glm_ease_q

; 56   :     return 2.0f * tt;

  00045	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0004d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _tt$[ebp]
  00052	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv79[ebp], xmm0
  0005a	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv79[ebp]
  00060	eb 34		 jmp	 SHORT $LN1@glm_ease_q
$LN2@glm_ease_q:

; 57   : 
; 58   :   return (-2.0f * tt) + (4.0f * t) - 1.0f;

  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  0006a	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _tt$[ebp]
  0006f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40800000
  00077	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _t$[ebp]
  0007c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00080	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00088	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR tv84[ebp], xmm0
  00090	d9 85 30 ff ff
	ff		 fld	 DWORD PTR tv84[ebp]
$LN1@glm_ease_q:

; 59   : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_ease_quad_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quad_out
_TEXT	SEGMENT
tv73 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_quad_out PROC					; COMDAT

; 45   : glm_ease_quad_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 46   :   return -(t * (t - 2.0f));

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  00035	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  0003a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00041	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv73[ebp], xmm0
  00049	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv73[ebp]

; 47   : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_glm_ease_quad_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_quad_in
_TEXT	SEGMENT
tv68 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_quad_in PROC					; COMDAT

; 39   : glm_ease_quad_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 40   :   return t * t;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv68[ebp], xmm0
  0003a	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv68[ebp]

; 41   : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_ease_quad_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_sine_inout
_TEXT	SEGMENT
tv81 = -200						; size = 4
tv77 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_sine_inout PROC				; COMDAT

; 33   : glm_ease_sine_inout(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 34   :   return 0.5f * (1.0f - cosf(t * GLM_PIf));

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
  00035	51		 push	 ecx
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 _cosf
  00040	83 c4 04	 add	 esp, 4
  00043	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv77[ebp]
  00049	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00051	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv77[ebp]
  00059	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00061	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv81[ebp], xmm0
  00069	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv81[ebp]

; 35   : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_glm_ease_sine_inout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_sine_out
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glm_ease_sine_out PROC					; COMDAT

; 27   : glm_ease_sine_out(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 28   :   return sinf(t * GLM_PI_2f);

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc90fdb
  00035	51		 push	 ecx
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 _sinf
  00040	83 c4 04	 add	 esp, 4

; 29   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glm_ease_sine_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_sine_in
_TEXT	SEGMENT
tv79 = -200						; size = 4
tv77 = -196						; size = 4
_t$ = 8							; size = 4
_glm_ease_sine_in PROC					; COMDAT

; 21   : glm_ease_sine_in(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 22   :   return sinf((t - 1.0f) * GLM_PI_2f) + 1.0f;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00035	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fc90fdb
  0003d	51		 push	 ecx
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	e8 00 00 00 00	 call	 _sinf
  00048	83 c4 04	 add	 esp, 4
  0004b	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv77[ebp]
  00051	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv77[ebp]
  00059	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00061	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR tv79[ebp], xmm0
  00069	d9 85 38 ff ff
	ff		 fld	 DWORD PTR tv79[ebp]

; 23   : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_glm_ease_sine_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\ease.h
;	COMDAT _glm_ease_linear
_TEXT	SEGMENT
_t$ = 8							; size = 4
_glm_ease_linear PROC					; COMDAT

; 15   : glm_ease_linear(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __108F9434_ease@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 16   :   return t;

  00028	d9 45 08	 fld	 DWORD PTR _t$[ebp]

; 17   : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_glm_ease_linear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 760  :             return (float)sqrt(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sqrt
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 761  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 750  :             return (float)sin(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sin
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 751  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _powf
_TEXT	SEGMENT
tv75 = -196						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_powf	PROC						; COMDAT

; 744  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 745  :             return (float)pow(_X, _Y);

  00028	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0003a	83 ec 08	 sub	 esp, 8
  0003d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 _pow
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv75[ebp]
  00050	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv75[ebp]

; 746  :         }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_powf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 649  :             return (float)cos(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _cos
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 650  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
END
