; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\curve.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__660F4AA8_curve@c DB 01H
msvcjmc	ENDS
PUBLIC	_glm_vec4_dot
PUBLIC	_glm_vec4_cubic
PUBLIC	_glm_mat4_mulv_sse2
PUBLIC	_glm_mat4_mulv
PUBLIC	_glm_mat4_rmc
PUBLIC	_glm_smc
PUBLIC	_glmc_smc
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f800000
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\curve.c
;	COMDAT _glmc_smc
_TEXT	SEGMENT
_s$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glmc_smc PROC						; COMDAT

; 13   : glmc_smc(float s, mat4 m, vec4 c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __660F4AA8_curve@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   return glm_smc(s, m, c);

  00028	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	51		 push	 ecx
  00031	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 _glm_smc
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_smc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\curve.h
;	COMDAT _glm_smc
_TEXT	SEGMENT
_vs$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glm_smc PROC						; COMDAT

; 34   : glm_smc(float s, mat4 m, vec4 c) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __3C7ABC9F_curve@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 35   :   vec4 vs;
; 36   :   glm_vec4_cubic(s, vs);

  00044	8d 45 e0	 lea	 eax, DWORD PTR _vs$[ebp]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _s$[ebx]
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	e8 00 00 00 00	 call	 _glm_vec4_cubic
  00058	83 c4 08	 add	 esp, 8

; 37   :   return glm_mat4_rmc(vs, m, c);

  0005b	8b 43 10	 mov	 eax, DWORD PTR _c$[ebx]
  0005e	50		 push	 eax
  0005f	8b 4b 0c	 mov	 ecx, DWORD PTR _m$[ebx]
  00062	51		 push	 ecx
  00063	8d 55 e0	 lea	 edx, DWORD PTR _vs$[ebp]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _glm_mat4_rmc
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 38   : }

  0006f	52		 push	 edx
  00070	8b cd		 mov	 ecx, ebp
  00072	50		 push	 eax
  00073	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_smc
  00079	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007e	58		 pop	 eax
  0007f	5a		 pop	 edx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00085	33 cd		 xor	 ecx, ebp
  00087	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	8b e3		 mov	 esp, ebx
  00091	5b		 pop	 ebx
  00092	c3		 ret	 0
  00093	90		 npad	 1
$LN5@glm_smc:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN4@glm_smc
$LN4@glm_smc:
  0009c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000a0	10 00 00 00	 DD	 16			; 00000010H
  000a4	00 00 00 00	 DD	 $LN3@glm_smc
$LN3@glm_smc:
  000a8	76		 DB	 118			; 00000076H
  000a9	73		 DB	 115			; 00000073H
  000aa	00		 DB	 0
_glm_smc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_rmc
_TEXT	SEGMENT
_tmp$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glm_mat4_rmc PROC					; COMDAT

; 721  : glm_mat4_rmc(vec4 r, mat4 m, vec4 c) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 722  :   vec4 tmp;
; 723  :   glm_mat4_mulv(m, c, tmp);

  00044	8d 45 e0	 lea	 eax, DWORD PTR _tmp$[ebp]
  00047	50		 push	 eax
  00048	8b 4b 10	 mov	 ecx, DWORD PTR _c$[ebx]
  0004b	51		 push	 ecx
  0004c	8b 53 0c	 mov	 edx, DWORD PTR _m$[ebx]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 _glm_mat4_mulv
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 724  :   return glm_vec4_dot(r, tmp);

  00058	8d 45 e0	 lea	 eax, DWORD PTR _tmp$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4b 08	 mov	 ecx, DWORD PTR _r$[ebx]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _glm_vec4_dot
  00065	83 c4 08	 add	 esp, 8

; 725  : }

  00068	52		 push	 edx
  00069	8b cd		 mov	 ecx, ebp
  0006b	50		 push	 eax
  0006c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_r
  00072	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00077	58		 pop	 eax
  00078	5a		 pop	 edx
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007e	33 cd		 xor	 ecx, ebp
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	8b e3		 mov	 esp, ebx
  0008a	5b		 pop	 ebx
  0008b	c3		 ret	 0
$LN5@glm_mat4_r:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN4@glm_mat4_r
$LN4@glm_mat4_r:
  00094	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00098	10 00 00 00	 DD	 16			; 00000010H
  0009c	00 00 00 00	 DD	 $LN3@glm_mat4_r
$LN3@glm_mat4_r:
  000a0	74		 DB	 116			; 00000074H
  000a1	6d		 DB	 109			; 0000006dH
  000a2	70		 DB	 112			; 00000070H
  000a3	00		 DB	 0
_glm_mat4_rmc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_mulv
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mulv PROC					; COMDAT

; 358  : glm_mat4_mulv(mat4 m, vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 359  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 360  :   glm_mat4_mulv_sse2(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_mulv_sse2
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 361  : #elif defined(CGLM_NEON_FP)
; 362  :   glm_mat4_mulv_neon(m, v, dest);
; 363  : #else
; 364  :   vec4 res;
; 365  :   res[0] = m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3];
; 366  :   res[1] = m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3];
; 367  :   res[2] = m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3];
; 368  :   res[3] = m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3];
; 369  :   glm_vec4_copy(res, dest);
; 370  : #endif
; 371  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glm_mat4_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_mulv_sse2
_TEXT	SEGMENT
_x2$ = -96						; size = 16
_x1$ = -64						; size = 16
_x0$ = -32						; size = 16
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mulv_sse2 PROC				; COMDAT

; 88   : glm_mat4_mulv_sse2(mat4 m, vec4 v, vec4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 89   :   __m128 x0, x1, x2;
; 90   : 
; 91   :   x0 = glmm_load(v);

  0003a	8b 43 0c	 mov	 eax, DWORD PTR _v$[ebx]
  0003d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00040	0f 29 45 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 92   :   x1 = _mm_add_ps(_mm_mul_ps(glmm_load(m[0]), glmm_shuff1x(x0, 0)),

  00044	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00048	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 85 ; 00000055H
  0004d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00052	c1 e0 00	 shl	 eax, 0
  00055	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00058	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  0005b	0f 59 c8	 mulps	 xmm1, xmm0
  0005e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00062	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 0
  00067	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006c	6b d1 00	 imul	 edx, ecx, 0
  0006f	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  00072	0f 10 12	 movups	 xmm2, XMMWORD PTR [edx]
  00075	0f 59 d0	 mulps	 xmm2, xmm0
  00078	0f 58 d1	 addps	 xmm2, xmm1
  0007b	0f 29 55 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm2

; 93   :                   _mm_mul_ps(glmm_load(m[1]), glmm_shuff1x(x0, 1)));
; 94   : 
; 95   :   x2 = _mm_add_ps(_mm_mul_ps(glmm_load(m[2]), glmm_shuff1x(x0, 2)),

  0007f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00083	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 255 ; 000000ffH
  00088	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0008d	6b c8 03	 imul	 ecx, eax, 3
  00090	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  00093	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  00096	0f 59 c8	 mulps	 xmm1, xmm0
  00099	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0009d	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 170 ; 000000aaH
  000a2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000a7	d1 e2		 shl	 edx, 1
  000a9	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  000ac	0f 10 12	 movups	 xmm2, XMMWORD PTR [edx]
  000af	0f 59 d0	 mulps	 xmm2, xmm0
  000b2	0f 58 d1	 addps	 xmm2, xmm1
  000b5	0f 29 55 a0	 movaps	 XMMWORD PTR _x2$[ebp], xmm2

; 96   :                   _mm_mul_ps(glmm_load(m[3]), glmm_shuff1x(x0, 3)));
; 97   : 
; 98   :   glmm_store(dest, _mm_add_ps(x1, x2));

  000b9	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000bd	0f 58 45 a0	 addps	 xmm0, XMMWORD PTR _x2$[ebp]
  000c1	8b 43 10	 mov	 eax, DWORD PTR _dest$[ebx]
  000c4	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 99   : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	8b e3		 mov	 esp, ebx
  000ce	5b		 pop	 ebx
  000cf	c3		 ret	 0
_glm_mat4_mulv_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_cubic
_TEXT	SEGMENT
_ss$ = -8						; size = 4
_s$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_cubic PROC					; COMDAT

; 1045 : glm_vec4_cubic(float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1046 :   float ss;
; 1047 : 
; 1048 :   ss = s * s;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 45 f8	 movss	 DWORD PTR _ss$[ebp], xmm0

; 1049 : 
; 1050 :   dest[0] = ss * s;

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ss$[ebp]
  0003c	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00041	b8 04 00 00 00	 mov	 eax, 4
  00046	6b c8 00	 imul	 ecx, eax, 0
  00049	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0004c	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 1051 :   dest[1] = ss;

  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	c1 e0 00	 shl	 eax, 0
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  0005c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ss$[ebp]
  00061	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 1052 :   dest[2] = s;

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	d1 e0		 shl	 eax, 1
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00070	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  00075	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 1053 :   dest[3] = 1.0f;

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008d	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 1054 : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_glm_vec4_cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_dot
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec4_dot PROC					; COMDAT

; 219  : glm_vec4_dot(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 220  : #if defined(CGLM_SIMD)
; 221  :   return glmm_dot(glmm_load(a), glmm_load(b));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00031	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00034	e8 00 00 00 00	 call	 _glmm_dot

; 222  : #else
; 223  :   return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
; 224  : #endif
; 225  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_glm_vec4_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_dot
_TEXT	SEGMENT
tv69 = -264						; size = 4
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_glmm_dot PROC						; COMDAT
; _a$ = xmm0
; _b$ = xmm1

; 144  : glmm_dot(__m128 a, __m128 b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 4d c0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  :   return _mm_cvtss_f32(glmm_vdots(a, b));

  00042	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _b$[ebp]
  00046	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  0004a	e8 00 00 00 00	 call	 _glmm_vdots
  0004f	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR tv69[ebp], xmm0
  00057	d9 85 f8 fe ff
	ff		 fld	 DWORD PTR tv69[ebp]

; 146  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	8b e3		 mov	 esp, ebx
  00064	5b		 pop	 ebx
  00065	c3		 ret	 0
_glmm_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vdots
_TEXT	SEGMENT
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_glmm_vdots PROC					; COMDAT
; _a$ = xmm0
; _b$ = xmm1

; 111  : glmm_vdots(__m128 a, __m128 b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 4d c0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 112  : #if (defined(__SSE4_1__) || defined(__SSE4_2__)) && defined(CGLM_SSE4_DOT)
; 113  :   return _mm_dp_ps(a, b, 0xFF);
; 114  : #elif defined(__SSE3__) && defined(CGLM_SSE3_DOT)
; 115  :   __m128 x0, x1;
; 116  :   x0 = _mm_mul_ps(a, b);
; 117  :   x1 = _mm_hadd_ps(x0, x0);
; 118  :   return _mm_hadd_ps(x1, x1);
; 119  : #else
; 120  :   return glmm_vhadds(_mm_mul_ps(a, b));

  00042	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00046	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _b$[ebp]
  0004a	e8 00 00 00 00	 call	 _glmm_vhadds

; 121  : #endif
; 122  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	8b e3		 mov	 esp, ebx
  00056	5b		 pop	 ebx
  00057	c3		 ret	 0
_glmm_vdots ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vhadds
_TEXT	SEGMENT
_sums$ = -96						; size = 16
_shuf$ = -64						; size = 16
_v$ = -32						; size = 16
_glmm_vhadds PROC					; COMDAT
; _v$ = xmm0

; 53   : glmm_vhadds(__m128 v) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _v$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 54   : #if defined(__SSE3__)
; 55   :   __m128 shuf, sums;
; 56   :   shuf = _mm_movehdup_ps(v);
; 57   :   sums = _mm_add_ps(v, shuf);
; 58   :   shuf = _mm_movehl_ps(shuf, sums);
; 59   :   sums = _mm_add_ss(sums, shuf);
; 60   :   return sums;
; 61   : #else
; 62   :   __m128 shuf, sums;
; 63   :   shuf = glmm_shuff1(v, 2, 3, 0, 1);

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  00042	0f c6 45 e0 b1	 shufps	 xmm0, XMMWORD PTR _v$[ebp], 177 ; 000000b1H
  00047	0f 29 45 c0	 movaps	 XMMWORD PTR _shuf$[ebp], xmm0

; 64   :   sums = _mm_add_ps(v, shuf);

  0004b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  0004f	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _shuf$[ebp]
  00053	0f 29 45 a0	 movaps	 XMMWORD PTR _sums$[ebp], xmm0

; 65   :   shuf = _mm_movehl_ps(shuf, sums);

  00057	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]
  0005b	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _shuf$[ebp]
  0005f	0f 12 c8	 movhlps xmm1, xmm0
  00062	0f 29 4d c0	 movaps	 XMMWORD PTR _shuf$[ebp], xmm1

; 66   :   sums = _mm_add_ss(sums, shuf);

  00066	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]
  0006a	f3 0f 58 45 c0	 addss	 xmm0, XMMWORD PTR _shuf$[ebp]
  0006f	0f 29 45 a0	 movaps	 XMMWORD PTR _sums$[ebp], xmm0

; 67   :   return sums;

  00073	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]

; 68   : #endif
; 69   : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	8b e3		 mov	 esp, ebx
  0007e	5b		 pop	 ebx
  0007f	c3		 ret	 0
_glmm_vhadds ENDP
_TEXT	ENDS
END
