; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__BAD1A4A4_vec4@c DB 01H
msvcjmc	ENDS
PUBLIC	_fabsf
PUBLIC	_floorf
PUBLIC	_glm_min
PUBLIC	_glm_max
PUBLIC	_glm_clamp
PUBLIC	_glm_clamp_zo
PUBLIC	_glm_step
PUBLIC	_glm_smooth
PUBLIC	_glm_smoothstep
PUBLIC	_glm_vec3_max
PUBLIC	_glm_vec3_min
PUBLIC	_glm_vec4_broadcast
PUBLIC	_glm_vec4_fill
PUBLIC	_glm_vec4_eq
PUBLIC	_glm_vec4_eq_eps
PUBLIC	_glm_vec4_eq_all
PUBLIC	_glm_vec4_eqv
PUBLIC	_glm_vec4_eqv_eps
PUBLIC	_glm_vec4_max
PUBLIC	_glm_vec4_min
PUBLIC	_glm_vec4_isnan
PUBLIC	_glm_vec4_isinf
PUBLIC	_glm_vec4_isvalid
PUBLIC	_glm_vec4_sign
PUBLIC	_glm_vec4_abs
PUBLIC	_glm_vec4_fract
PUBLIC	_glm_vec4_hadd
PUBLIC	_glm_vec4_sqrt
PUBLIC	_glm_vec4
PUBLIC	_glm_vec4_copy3
PUBLIC	_glm_vec4_copy
PUBLIC	_glm_vec4_ucopy
PUBLIC	_glm_vec4_zero
PUBLIC	_glm_vec4_one
PUBLIC	_glm_vec4_dot
PUBLIC	_glm_vec4_norm2
PUBLIC	_glm_vec4_norm
PUBLIC	_glm_vec4_norm_one
PUBLIC	_glm_vec4_norm_inf
PUBLIC	_glm_vec4_add
PUBLIC	_glm_vec4_adds
PUBLIC	_glm_vec4_sub
PUBLIC	_glm_vec4_subs
PUBLIC	_glm_vec4_mul
PUBLIC	_glm_vec4_scale
PUBLIC	_glm_vec4_scale_as
PUBLIC	_glm_vec4_div
PUBLIC	_glm_vec4_divs
PUBLIC	_glm_vec4_addadd
PUBLIC	_glm_vec4_subadd
PUBLIC	_glm_vec4_muladd
PUBLIC	_glm_vec4_muladds
PUBLIC	_glm_vec4_maxadd
PUBLIC	_glm_vec4_minadd
PUBLIC	_glm_vec4_negate_to
PUBLIC	_glm_vec4_negate
PUBLIC	_glm_vec4_normalize_to
PUBLIC	_glm_vec4_normalize
PUBLIC	_glm_vec4_distance
PUBLIC	_glm_vec4_distance2
PUBLIC	_glm_vec4_maxv
PUBLIC	_glm_vec4_minv
PUBLIC	_glm_vec4_clamp
PUBLIC	_glm_vec4_lerp
PUBLIC	_glm_vec4_lerpc
PUBLIC	_glm_vec4_step_uni
PUBLIC	_glm_vec4_step
PUBLIC	_glm_vec4_smoothstep_uni
PUBLIC	_glm_vec4_smoothstep
PUBLIC	_glm_vec4_smoothinterp
PUBLIC	_glm_vec4_smoothinterpc
PUBLIC	_glm_vec4_cubic
PUBLIC	_glmc_vec4
PUBLIC	_glmc_vec4_zero
PUBLIC	_glmc_vec4_one
PUBLIC	_glmc_vec4_copy3
PUBLIC	_glmc_vec4_copy
PUBLIC	_glmc_vec4_ucopy
PUBLIC	_glmc_vec4_dot
PUBLIC	_glmc_vec4_norm
PUBLIC	_glmc_vec4_norm2
PUBLIC	_glmc_vec4_norm_one
PUBLIC	_glmc_vec4_norm_inf
PUBLIC	_glmc_vec4_normalize_to
PUBLIC	_glmc_vec4_normalize
PUBLIC	_glmc_vec4_add
PUBLIC	_glmc_vec4_adds
PUBLIC	_glmc_vec4_sub
PUBLIC	_glmc_vec4_subs
PUBLIC	_glmc_vec4_mul
PUBLIC	_glmc_vec4_scale
PUBLIC	_glmc_vec4_scale_as
PUBLIC	_glmc_vec4_div
PUBLIC	_glmc_vec4_divs
PUBLIC	_glmc_vec4_addadd
PUBLIC	_glmc_vec4_subadd
PUBLIC	_glmc_vec4_muladd
PUBLIC	_glmc_vec4_muladds
PUBLIC	_glmc_vec4_maxadd
PUBLIC	_glmc_vec4_minadd
PUBLIC	_glmc_vec4_negate
PUBLIC	_glmc_vec4_negate_to
PUBLIC	_glmc_vec4_distance
PUBLIC	_glmc_vec4_distance2
PUBLIC	_glmc_vec4_maxv
PUBLIC	_glmc_vec4_minv
PUBLIC	_glmc_vec4_clamp
PUBLIC	_glmc_vec4_lerp
PUBLIC	_glmc_vec4_lerpc
PUBLIC	_glmc_vec4_step_uni
PUBLIC	_glmc_vec4_step
PUBLIC	_glmc_vec4_smoothstep_uni
PUBLIC	_glmc_vec4_smoothstep
PUBLIC	_glmc_vec4_smoothinterp
PUBLIC	_glmc_vec4_smoothinterpc
PUBLIC	_glmc_vec4_cubic
PUBLIC	_glmc_vec4_mulv
PUBLIC	_glmc_vec4_broadcast
PUBLIC	_glmc_vec4_fill
PUBLIC	_glmc_vec4_eq
PUBLIC	_glmc_vec4_eq_eps
PUBLIC	_glmc_vec4_eq_all
PUBLIC	_glmc_vec4_eqv
PUBLIC	_glmc_vec4_eqv_eps
PUBLIC	_glmc_vec4_max
PUBLIC	_glmc_vec4_min
PUBLIC	_glmc_vec4_isnan
PUBLIC	_glmc_vec4_isinf
PUBLIC	_glmc_vec4_isvalid
PUBLIC	_glmc_vec4_sign
PUBLIC	_glmc_vec4_abs
PUBLIC	_glmc_vec4_fract
PUBLIC	_glmc_vec4_hadd
PUBLIC	_glmc_vec4_sqrt
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@3eb0c6f7a0b5ed8d
PUBLIC	__real@3f7fffff
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__xmm@00000000000000003f800000bf800000
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp___fdclass:PROC
EXTRN	_fabs:PROC
EXTRN	__imp__floor:PROC
EXTRN	__imp__fminf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@00000000000000003f800000bf800000
CONST	SEGMENT
__xmm@00000000000000003f800000bf800000 DB 00H, 00H, 080H, 0bfH, 00H, 00H, 080H
	DB	'?', 00H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fffff
CONST	SEGMENT
__real@3f7fffff DD 03f7fffffr			; 1
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0b5ed8d
CONST	SEGMENT
__real@3eb0c6f7a0b5ed8d DQ 03eb0c6f7a0b5ed8dr	; 1e-06
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_sqrt
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_sqrt PROC					; COMDAT

; 381  : glmc_vec4_sqrt(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 382  :   glm_vec4_sqrt(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_sqrt
  00035	83 c4 08	 add	 esp, 8

; 383  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_sqrt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_hadd
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_hadd PROC					; COMDAT

; 375  : glmc_vec4_hadd(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 376  :   return glm_vec4_hadd(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_hadd
  00031	83 c4 04	 add	 esp, 4

; 377  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_hadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_fract
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_fract PROC					; COMDAT

; 369  : glmc_vec4_fract(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 370  :   glm_vec4_fract(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_fract
  00035	83 c4 08	 add	 esp, 8

; 371  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_fract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_abs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_abs PROC					; COMDAT

; 363  : glmc_vec4_abs(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 364  :   glm_vec4_abs(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_abs
  00035	83 c4 08	 add	 esp, 8

; 365  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_abs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_sign
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_sign PROC					; COMDAT

; 357  : glmc_vec4_sign(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 358  :   glm_vec4_sign(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_sign
  00035	83 c4 08	 add	 esp, 8

; 359  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_isvalid
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_isvalid PROC					; COMDAT

; 351  : glmc_vec4_isvalid(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 352  :   return glm_vec4_isvalid(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_isvalid
  00031	83 c4 04	 add	 esp, 4

; 353  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_isvalid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_isinf
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_isinf PROC					; COMDAT

; 345  : glmc_vec4_isinf(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 346  :   return glm_vec4_isinf(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_isinf
  00031	83 c4 04	 add	 esp, 4

; 347  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_isinf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_isnan
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_isnan PROC					; COMDAT

; 339  : glmc_vec4_isnan(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 340  :   return glm_vec4_isnan(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_isnan
  00031	83 c4 04	 add	 esp, 4

; 341  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_isnan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_min
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_min PROC					; COMDAT

; 333  : glmc_vec4_min(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 334  :   return glm_vec4_min(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_min
  00031	83 c4 04	 add	 esp, 4

; 335  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_max
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_max PROC					; COMDAT

; 327  : glmc_vec4_max(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 328  :   return glm_vec4_max(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_max
  00031	83 c4 04	 add	 esp, 4

; 329  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_eqv_eps
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec4_eqv_eps PROC					; COMDAT

; 321  : glmc_vec4_eqv_eps(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 322  :   return glm_vec4_eqv_eps(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_eqv_eps
  00035	83 c4 08	 add	 esp, 8

; 323  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_eqv_eps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_eqv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec4_eqv PROC					; COMDAT

; 315  : glmc_vec4_eqv(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 316  :   return glm_vec4_eqv(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_eqv
  00035	83 c4 08	 add	 esp, 8

; 317  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_eqv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_eq_all
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_eq_all PROC					; COMDAT

; 309  : glmc_vec4_eq_all(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 310  :   return glm_vec4_eq_all(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_eq_all
  00031	83 c4 04	 add	 esp, 4

; 311  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_eq_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_eq_eps
_TEXT	SEGMENT
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glmc_vec4_eq_eps PROC					; COMDAT

; 303  : glmc_vec4_eq_eps(vec4 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 304  :   return glm_vec4_eq_eps(v, val);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_vec4_eq_eps
  0003c	83 c4 08	 add	 esp, 8

; 305  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec4_eq_eps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_eq
_TEXT	SEGMENT
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glmc_vec4_eq PROC					; COMDAT

; 297  : glmc_vec4_eq(vec4 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 298  :   return glm_vec4_eq(v, val);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_vec4_eq
  0003c	83 c4 08	 add	 esp, 8

; 299  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec4_eq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_fill
_TEXT	SEGMENT
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glmc_vec4_fill PROC					; COMDAT

; 291  : glmc_vec4_fill(vec4 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 292  :   glm_vec4_fill(v, val);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_vec4_fill
  0003c	83 c4 08	 add	 esp, 8

; 293  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec4_fill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_broadcast
_TEXT	SEGMENT
_val$ = 8						; size = 4
_d$ = 12						; size = 4
_glmc_vec4_broadcast PROC				; COMDAT

; 285  : glmc_vec4_broadcast(float val, vec4 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 286  :   glm_vec4_broadcast(val, d);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_vec4_broadcast
  0003c	83 c4 08	 add	 esp, 8

; 287  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec4_broadcast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_mulv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_d$ = 16						; size = 4
_glmc_vec4_mulv PROC					; COMDAT

; 279  : glmc_vec4_mulv(vec4 a, vec4 b, vec4 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 280  :   glm_vec4_mulv(a, b, d);

  00028	8b 45 10	 mov	 eax, DWORD PTR _d$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_mul
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 281  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_cubic
_TEXT	SEGMENT
_s$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_cubic PROC					; COMDAT

; 271  : glmc_vec4_cubic(float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 272  :   glm_vec4_cubic(s, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_vec4_cubic
  0003c	83 c4 08	 add	 esp, 8

; 273  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_vec4_cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_smoothinterpc
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec4_smoothinterpc PROC				; COMDAT

; 265  : glmc_vec4_smoothinterpc(vec4 from, vec4 to, float t, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 266  :   glm_vec4_smoothinterpc(from, to, t, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec4_smoothinterpc
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 267  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_vec4_smoothinterpc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_smoothinterp
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec4_smoothinterp PROC				; COMDAT

; 259  : glmc_vec4_smoothinterp(vec4 from, vec4 to, float t, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 260  :   glm_vec4_smoothinterp(from, to, t, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec4_smoothinterp
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 261  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_vec4_smoothinterp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_smoothstep
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec4_smoothstep PROC				; COMDAT

; 253  : glmc_vec4_smoothstep(vec4 edge0, vec4 edge1, vec4 x, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 254  :   glm_vec4_smoothstep(edge0, edge1, x, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _edge1$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _edge0$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _glm_vec4_smoothstep
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 255  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glmc_vec4_smoothstep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_smoothstep_uni
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec4_smoothstep_uni PROC				; COMDAT

; 247  : glmc_vec4_smoothstep_uni(float edge0, float edge1, vec4 x, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 248  :   glm_vec4_smoothstep_uni(edge0, edge1, x, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  0002f	51		 push	 ecx
  00030	51		 push	 ecx
  00031	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	51		 push	 ecx
  0003c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 _glm_vec4_smoothstep_uni
  0004b	83 c4 10	 add	 esp, 16			; 00000010H

; 249  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
_glmc_vec4_smoothstep_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_step
_TEXT	SEGMENT
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_step PROC					; COMDAT

; 241  : glmc_vec4_step(vec4 edge, vec4 x, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 242  :   glm_vec4_step(edge, x, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_step
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 243  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_step ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_step_uni
_TEXT	SEGMENT
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_step_uni PROC				; COMDAT

; 235  : glmc_vec4_step_uni(float edge, vec4 x, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 236  :   glm_vec4_step_uni(edge, x, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002f	51		 push	 ecx
  00030	51		 push	 ecx
  00031	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 _glm_vec4_step_uni
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 237  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec4_step_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_lerpc
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec4_lerpc PROC					; COMDAT

; 229  : glmc_vec4_lerpc(vec4 from, vec4 to, float t, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 230  :   glm_vec4_lerpc(from, to, t, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec4_lerpc
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 231  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_vec4_lerpc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_lerp
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_vec4_lerp PROC					; COMDAT

; 223  : glmc_vec4_lerp(vec4 from, vec4 to, float t, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 224  :   glm_vec4_lerp(from, to, t, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec4_lerp
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 225  : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_vec4_lerp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_clamp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_minVal$ = 12						; size = 4
_maxVal$ = 16						; size = 4
_glmc_vec4_clamp PROC					; COMDAT

; 217  : glmc_vec4_clamp(vec4 v, float minVal, float maxVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 218  :   glm_vec4_clamp(v, minVal, maxVal);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _minVal$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _glm_vec4_clamp
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 219  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_glmc_vec4_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_minv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_minv PROC					; COMDAT

; 211  : glmc_vec4_minv(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 212  :   glm_vec4_minv(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_minv
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 213  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_minv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_maxv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_maxv PROC					; COMDAT

; 205  : glmc_vec4_maxv(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 206  :   glm_vec4_maxv(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_maxv
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_maxv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_distance2
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec4_distance2 PROC				; COMDAT

; 199  : glmc_vec4_distance2(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 200  :   return glm_vec4_distance2(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_distance2
  00035	83 c4 08	 add	 esp, 8

; 201  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_distance2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_distance
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec4_distance PROC				; COMDAT

; 193  : glmc_vec4_distance(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 194  :   return glm_vec4_distance(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_distance
  00035	83 c4 08	 add	 esp, 8

; 195  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_distance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_negate_to
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_negate_to PROC				; COMDAT

; 187  : glmc_vec4_negate_to(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 188  :   glm_vec4_negate_to(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_negate_to
  00035	83 c4 08	 add	 esp, 8

; 189  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_negate_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_negate
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_negate PROC					; COMDAT

; 181  : glmc_vec4_negate(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 182  :   glm_vec4_negate(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_negate
  00031	83 c4 04	 add	 esp, 4

; 183  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_negate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_minadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_minadd PROC					; COMDAT

; 175  : glmc_vec4_minadd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 176  :   glm_vec4_minadd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_minadd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 177  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_minadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_maxadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_maxadd PROC					; COMDAT

; 169  : glmc_vec4_maxadd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 170  :   glm_vec4_maxadd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_maxadd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_maxadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_muladds
_TEXT	SEGMENT
_a$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_muladds PROC					; COMDAT

; 163  : glmc_vec4_muladds(vec4 a, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 164  :   glm_vec4_muladds(a, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec4_muladds
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 165  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec4_muladds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_muladd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_muladd PROC					; COMDAT

; 157  : glmc_vec4_muladd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 158  :   glm_vec4_muladd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_muladd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 159  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_muladd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_subadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_subadd PROC					; COMDAT

; 151  : glmc_vec4_subadd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 152  :   glm_vec4_subadd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_subadd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 153  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_subadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_addadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_addadd PROC					; COMDAT

; 145  : glmc_vec4_addadd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :   glm_vec4_addadd(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_addadd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 147  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_addadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_divs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_divs PROC					; COMDAT

; 139  : glmc_vec4_divs(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  :   glm_vec4_divs(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec4_divs
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 141  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec4_divs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_div
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_div PROC					; COMDAT

; 133  : glmc_vec4_div(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 134  :   glm_vec4_div(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_div
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 135  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_div ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_scale_as
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_scale_as PROC				; COMDAT

; 127  : glmc_vec4_scale_as(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 128  :   glm_vec4_scale_as(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec4_scale_as
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 129  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec4_scale_as ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_scale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_scale PROC					; COMDAT

; 121  : glmc_vec4_scale(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 122  :   glm_vec4_scale(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec4_scale
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 123  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec4_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_mul
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_d$ = 16						; size = 4
_glmc_vec4_mul PROC					; COMDAT

; 115  : glmc_vec4_mul(vec4 a, vec4 b, vec4 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 116  :   glm_vec4_mul(a, b, d);

  00028	8b 45 10	 mov	 eax, DWORD PTR _d$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_mul
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_subs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_subs PROC					; COMDAT

; 109  : glmc_vec4_subs(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  :   glm_vec4_subs(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec4_subs
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec4_subs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_sub
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_sub PROC					; COMDAT

; 103  : glmc_vec4_sub(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 104  :   glm_vec4_sub(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_sub
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 105  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_adds
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_adds PROC					; COMDAT

; 97   : glmc_vec4_adds(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 98   :   glm_vec4_adds(v, s, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec4_adds
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 99   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec4_adds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_add
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4_add PROC					; COMDAT

; 91   : glmc_vec4_add(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 92   :   glm_vec4_add(a, b, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_vec4_add
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 93   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_vec4_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_normalize
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_normalize PROC				; COMDAT

; 67   : glmc_vec4_normalize(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   :   glm_vec4_normalize(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_normalize
  00031	83 c4 04	 add	 esp, 4

; 69   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_normalize_to
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_normalize_to PROC				; COMDAT

; 61   : glmc_vec4_normalize_to(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   glm_vec4_normalize_to(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_normalize_to
  00035	83 c4 08	 add	 esp, 8

; 63   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_normalize_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_norm_inf
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_norm_inf PROC				; COMDAT

; 85   : glmc_vec4_norm_inf(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 86   :   return glm_vec4_norm_inf(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_norm_inf
  00031	83 c4 04	 add	 esp, 4

; 87   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_norm_inf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_norm_one
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_norm_one PROC				; COMDAT

; 79   : glmc_vec4_norm_one(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :   return glm_vec4_norm_one(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_norm_one
  00031	83 c4 04	 add	 esp, 4

; 81   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_norm_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_norm2
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_norm2 PROC					; COMDAT

; 73   : glmc_vec4_norm2(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   return glm_vec4_norm2(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_norm2
  00031	83 c4 04	 add	 esp, 4

; 75   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_norm2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_norm
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_norm PROC					; COMDAT

; 55   : glmc_vec4_norm(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   return glm_vec4_norm(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_norm
  00031	83 c4 04	 add	 esp, 4

; 57   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_norm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_dot
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glmc_vec4_dot PROC					; COMDAT

; 49   : glmc_vec4_dot(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   return glm_vec4_dot(a, b);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_dot
  00035	83 c4 08	 add	 esp, 8

; 51   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_ucopy
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_ucopy PROC					; COMDAT

; 43   : glmc_vec4_ucopy(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 44   :   glm_vec4_ucopy(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_ucopy
  00035	83 c4 08	 add	 esp, 8

; 45   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_ucopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_copy
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_copy PROC					; COMDAT

; 37   : glmc_vec4_copy(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   glm_vec4_copy(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_copy
  00035	83 c4 08	 add	 esp, 8

; 39   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_copy3
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_vec4_copy3 PROC					; COMDAT

; 31   : glmc_vec4_copy3(vec4 v, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   glm_vec4_copy3(v, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_copy3
  00035	83 c4 08	 add	 esp, 8

; 33   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_vec4_copy3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_one
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_one PROC					; COMDAT

; 25   : glmc_vec4_one(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_vec4_one(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_one
  00031	83 c4 04	 add	 esp, 4

; 27   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4_zero
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glmc_vec4_zero PROC					; COMDAT

; 19   : glmc_vec4_zero(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_vec4_zero(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_zero
  00031	83 c4 04	 add	 esp, 4

; 21   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_vec4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\vec4.c
;	COMDAT _glmc_vec4
_TEXT	SEGMENT
_v3$ = 8						; size = 4
_last$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_vec4 PROC						; COMDAT

; 13   : glmc_vec4(vec3 v3, float last, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __BAD1A4A4_vec4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_vec4(v3, last, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _last$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _v3$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_vec4
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 15   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_cubic
_TEXT	SEGMENT
_ss$ = -8						; size = 4
_s$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_cubic PROC					; COMDAT

; 1045 : glm_vec4_cubic(float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1046 :   float ss;
; 1047 : 
; 1048 :   ss = s * s;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00032	f3 0f 11 45 f8	 movss	 DWORD PTR _ss$[ebp], xmm0

; 1049 : 
; 1050 :   dest[0] = ss * s;

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ss$[ebp]
  0003c	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00041	b8 04 00 00 00	 mov	 eax, 4
  00046	6b c8 00	 imul	 ecx, eax, 0
  00049	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0004c	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 1051 :   dest[1] = ss;

  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	c1 e0 00	 shl	 eax, 0
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  0005c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _ss$[ebp]
  00061	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 1052 :   dest[2] = s;

  00066	b8 04 00 00 00	 mov	 eax, 4
  0006b	d1 e0		 shl	 eax, 1
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00070	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _s$[ebp]
  00075	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 1053 :   dest[3] = 1.0f;

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008d	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 1054 : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
_glm_vec4_cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_smoothinterpc
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec4_smoothinterpc PROC				; COMDAT

; 1033 : glm_vec4_smoothinterpc(vec4 from, vec4 to, float t, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1034 :   glm_vec4_smoothinterp(from, to, glm_clamp_zo(t), dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_clamp_zo
  0003c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 _glm_vec4_smoothinterp
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 1035 : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_glm_vec4_smoothinterpc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_smoothinterp
_TEXT	SEGMENT
_v$ = -64						; size = 16
_s$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec4_smoothinterp PROC				; COMDAT

; 1011 : glm_vec4_smoothinterp(vec4 from, vec4 to, float t, vec4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1012 :   vec4 s, v;
; 1013 :     
; 1014 :   /* from + smoothstep * (to - from) */
; 1015 :   glm_vec4_broadcast(glm_smooth(t), s);

  00044	8d 45 e0	 lea	 eax, DWORD PTR _s$[ebp]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _t$[ebx]
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	e8 00 00 00 00	 call	 _glm_smooth
  00058	d9 1c 24	 fstp	 DWORD PTR [esp]
  0005b	e8 00 00 00 00	 call	 _glm_vec4_broadcast
  00060	83 c4 08	 add	 esp, 8

; 1016 :   glm_vec4_sub(to, from, v);

  00063	8d 45 c0	 lea	 eax, DWORD PTR _v$[ebp]
  00066	50		 push	 eax
  00067	8b 4b 08	 mov	 ecx, DWORD PTR _from$[ebx]
  0006a	51		 push	 ecx
  0006b	8b 53 0c	 mov	 edx, DWORD PTR _to$[ebx]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 _glm_vec4_sub
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1017 :   glm_vec4_mul(s, v, v);

  00077	8d 45 c0	 lea	 eax, DWORD PTR _v$[ebp]
  0007a	50		 push	 eax
  0007b	8d 4d c0	 lea	 ecx, DWORD PTR _v$[ebp]
  0007e	51		 push	 ecx
  0007f	8d 55 e0	 lea	 edx, DWORD PTR _s$[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 _glm_vec4_mul
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1018 :   glm_vec4_add(from, v, dest);

  0008b	8b 43 14	 mov	 eax, DWORD PTR _dest$[ebx]
  0008e	50		 push	 eax
  0008f	8d 4d c0	 lea	 ecx, DWORD PTR _v$[ebp]
  00092	51		 push	 ecx
  00093	8b 53 08	 mov	 edx, DWORD PTR _from$[ebx]
  00096	52		 push	 edx
  00097	e8 00 00 00 00	 call	 _glm_vec4_add
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1019 : }

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@glm_vec4_s
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	8b e3		 mov	 esp, ebx
  000c1	5b		 pop	 ebx
  000c2	c3		 ret	 0
  000c3	90		 npad	 1
$LN6@glm_vec4_s:
  000c4	02 00 00 00	 DD	 2
  000c8	00 00 00 00	 DD	 $LN5@glm_vec4_s
$LN5@glm_vec4_s:
  000cc	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000d0	10 00 00 00	 DD	 16			; 00000010H
  000d4	00 00 00 00	 DD	 $LN3@glm_vec4_s
  000d8	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000dc	10 00 00 00	 DD	 16			; 00000010H
  000e0	00 00 00 00	 DD	 $LN4@glm_vec4_s
$LN4@glm_vec4_s:
  000e4	76		 DB	 118			; 00000076H
  000e5	00		 DB	 0
$LN3@glm_vec4_s:
  000e6	73		 DB	 115			; 00000073H
  000e7	00		 DB	 0
_glm_vec4_smoothinterp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_smoothstep
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec4_smoothstep PROC				; COMDAT

; 992  : glm_vec4_smoothstep(vec4 edge0, vec4 edge1, vec4 x, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 993  :   dest[0] = glm_smoothstep(edge0[0], edge1[0], x[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 00	 imul	 ecx, eax, 0
  00046	8b 55 0c	 mov	 edx, DWORD PTR _edge1$[ebp]
  00049	51		 push	 ecx
  0004a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	8b 55 08	 mov	 edx, DWORD PTR _edge0$[ebp]
  0005f	51		 push	 ecx
  00060	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	e8 00 00 00 00	 call	 _glm_smoothstep
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	6b c8 00	 imul	 ecx, eax, 0
  0007a	8b 55 14	 mov	 edx, DWORD PTR _dest$[ebp]
  0007d	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 994  :   dest[1] = glm_smoothstep(edge0[1], edge1[1], x[1]);

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	c1 e0 00	 shl	 eax, 0
  00088	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	ba 04 00 00 00	 mov	 edx, 4
  0009b	c1 e2 00	 shl	 edx, 0
  0009e	8b 45 0c	 mov	 eax, DWORD PTR _edge1$[ebp]
  000a1	51		 push	 ecx
  000a2	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	b9 04 00 00 00	 mov	 ecx, 4
  000b1	c1 e1 00	 shl	 ecx, 0
  000b4	8b 55 08	 mov	 edx, DWORD PTR _edge0$[ebp]
  000b7	51		 push	 ecx
  000b8	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	e8 00 00 00 00	 call	 _glm_smoothstep
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	b8 04 00 00 00	 mov	 eax, 4
  000cf	c1 e0 00	 shl	 eax, 0
  000d2	8b 4d 14	 mov	 ecx, DWORD PTR _dest$[ebp]
  000d5	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 995  :   dest[2] = glm_smoothstep(edge0[2], edge1[2], x[2]);

  000d8	b8 04 00 00 00	 mov	 eax, 4
  000dd	d1 e0		 shl	 eax, 1
  000df	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  000e2	51		 push	 ecx
  000e3	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ed	ba 04 00 00 00	 mov	 edx, 4
  000f2	d1 e2		 shl	 edx, 1
  000f4	8b 45 0c	 mov	 eax, DWORD PTR _edge1$[ebp]
  000f7	51		 push	 ecx
  000f8	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	b9 04 00 00 00	 mov	 ecx, 4
  00107	d1 e1		 shl	 ecx, 1
  00109	8b 55 08	 mov	 edx, DWORD PTR _edge0$[ebp]
  0010c	51		 push	 ecx
  0010d	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	e8 00 00 00 00	 call	 _glm_smoothstep
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	b8 04 00 00 00	 mov	 eax, 4
  00124	d1 e0		 shl	 eax, 1
  00126	8b 4d 14	 mov	 ecx, DWORD PTR _dest$[ebp]
  00129	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 996  :   dest[3] = glm_smoothstep(edge0[3], edge1[3], x[3]);

  0012c	b8 04 00 00 00	 mov	 eax, 4
  00131	6b c8 03	 imul	 ecx, eax, 3
  00134	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00137	51		 push	 ecx
  00138	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0013d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00142	b8 04 00 00 00	 mov	 eax, 4
  00147	6b c8 03	 imul	 ecx, eax, 3
  0014a	8b 55 0c	 mov	 edx, DWORD PTR _edge1$[ebp]
  0014d	51		 push	 ecx
  0014e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	b8 04 00 00 00	 mov	 eax, 4
  0015d	6b c8 03	 imul	 ecx, eax, 3
  00160	8b 55 08	 mov	 edx, DWORD PTR _edge0$[ebp]
  00163	51		 push	 ecx
  00164	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00169	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016e	e8 00 00 00 00	 call	 _glm_smoothstep
  00173	83 c4 0c	 add	 esp, 12			; 0000000cH
  00176	b8 04 00 00 00	 mov	 eax, 4
  0017b	6b c8 03	 imul	 ecx, eax, 3
  0017e	8b 55 14	 mov	 edx, DWORD PTR _dest$[ebp]
  00181	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 997  : }

  00184	5f		 pop	 edi
  00185	5e		 pop	 esi
  00186	5b		 pop	 ebx
  00187	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0018d	3b ec		 cmp	 ebp, esp
  0018f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00194	8b e5		 mov	 esp, ebp
  00196	5d		 pop	 ebp
  00197	c3		 ret	 0
_glm_vec4_smoothstep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_smoothstep_uni
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec4_smoothstep_uni PROC				; COMDAT

; 975  : glm_vec4_smoothstep_uni(float edge0, float edge1, vec4 x, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 976  :   dest[0] = glm_smoothstep(edge0, edge1, x[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	e8 00 00 00 00	 call	 _glm_smoothstep
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8b 55 14	 mov	 edx, DWORD PTR _dest$[ebp]
  00067	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 977  :   dest[1] = glm_smoothstep(edge0, edge1, x[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	51		 push	 ecx
  00081	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  00086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008b	51		 push	 ecx
  0008c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 _glm_smoothstep
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009e	ba 04 00 00 00	 mov	 edx, 4
  000a3	c1 e2 00	 shl	 edx, 0
  000a6	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  000a9	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 978  :   dest[2] = glm_smoothstep(edge0, edge1, x[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 10	 mov	 ecx, DWORD PTR _x$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	51		 push	 ecx
  000c2	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	51		 push	 ecx
  000cd	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	e8 00 00 00 00	 call	 _glm_smoothstep
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000df	ba 04 00 00 00	 mov	 edx, 4
  000e4	d1 e2		 shl	 edx, 1
  000e6	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  000e9	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 979  :   dest[3] = glm_smoothstep(edge0, edge1, x[3]);

  000ec	b8 04 00 00 00	 mov	 eax, 4
  000f1	6b c8 03	 imul	 ecx, eax, 3
  000f4	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
  000f7	51		 push	 ecx
  000f8	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00102	51		 push	 ecx
  00103	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _edge1$[ebp]
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge0$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	e8 00 00 00 00	 call	 _glm_smoothstep
  0011d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00120	b8 04 00 00 00	 mov	 eax, 4
  00125	6b c8 03	 imul	 ecx, eax, 3
  00128	8b 55 14	 mov	 edx, DWORD PTR _dest$[ebp]
  0012b	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 980  : }

  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5b		 pop	 ebx
  00131	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00137	3b ec		 cmp	 ebp, esp
  00139	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
_glm_vec4_smoothstep_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_step
_TEXT	SEGMENT
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_step PROC					; COMDAT

; 958  : glm_vec4_step(vec4 edge, vec4 x, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 959  :   dest[0] = glm_step(edge[0], x[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	b8 04 00 00 00	 mov	 eax, 4
  00043	6b c8 00	 imul	 ecx, eax, 0
  00046	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  00049	51		 push	 ecx
  0004a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	e8 00 00 00 00	 call	 _glm_step
  00059	83 c4 08	 add	 esp, 8
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00067	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 960  :   dest[1] = glm_step(edge[1], x[1]);

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	c1 e0 00	 shl	 eax, 0
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00075	51		 push	 ecx
  00076	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	ba 04 00 00 00	 mov	 edx, 4
  00085	c1 e2 00	 shl	 edx, 0
  00088	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	e8 00 00 00 00	 call	 _glm_step
  0009b	83 c4 08	 add	 esp, 8
  0009e	b9 04 00 00 00	 mov	 ecx, 4
  000a3	c1 e1 00	 shl	 ecx, 0
  000a6	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000a9	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 961  :   dest[2] = glm_step(edge[2], x[2]);

  000ac	b8 04 00 00 00	 mov	 eax, 4
  000b1	d1 e0		 shl	 eax, 1
  000b3	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	ba 04 00 00 00	 mov	 edx, 4
  000c6	d1 e2		 shl	 edx, 1
  000c8	8b 45 08	 mov	 eax, DWORD PTR _edge$[ebp]
  000cb	51		 push	 ecx
  000cc	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	e8 00 00 00 00	 call	 _glm_step
  000db	83 c4 08	 add	 esp, 8
  000de	b9 04 00 00 00	 mov	 ecx, 4
  000e3	d1 e1		 shl	 ecx, 1
  000e5	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000e8	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 962  :   dest[3] = glm_step(edge[3], x[3]);

  000eb	b8 04 00 00 00	 mov	 eax, 4
  000f0	6b c8 03	 imul	 ecx, eax, 3
  000f3	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  000f6	51		 push	 ecx
  000f7	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	b8 04 00 00 00	 mov	 eax, 4
  00106	6b c8 03	 imul	 ecx, eax, 3
  00109	8b 55 08	 mov	 edx, DWORD PTR _edge$[ebp]
  0010c	51		 push	 ecx
  0010d	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	e8 00 00 00 00	 call	 _glm_step
  0011c	83 c4 08	 add	 esp, 8
  0011f	b8 04 00 00 00	 mov	 eax, 4
  00124	6b c8 03	 imul	 ecx, eax, 3
  00127	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0012a	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 963  : }

  0012d	5f		 pop	 edi
  0012e	5e		 pop	 esi
  0012f	5b		 pop	 ebx
  00130	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00136	3b ec		 cmp	 ebp, esp
  00138	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
_glm_vec4_step ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_step_uni
_TEXT	SEGMENT
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_step_uni PROC					; COMDAT

; 942  : glm_vec4_step_uni(float edge, vec4 x, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 943  :   dest[0] = glm_step(edge, x[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 _glm_step
  0004e	83 c4 08	 add	 esp, 8
  00051	b8 04 00 00 00	 mov	 eax, 4
  00056	6b c8 00	 imul	 ecx, eax, 0
  00059	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0005c	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 944  :   dest[1] = glm_step(edge, x[1]);

  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	c1 e0 00	 shl	 eax, 0
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0006a	51		 push	 ecx
  0006b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00070	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00075	51		 push	 ecx
  00076	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	e8 00 00 00 00	 call	 _glm_step
  00085	83 c4 08	 add	 esp, 8
  00088	ba 04 00 00 00	 mov	 edx, 4
  0008d	c1 e2 00	 shl	 edx, 0
  00090	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00093	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 945  :   dest[2] = glm_step(edge, x[2]);

  00096	b8 04 00 00 00	 mov	 eax, 4
  0009b	d1 e0		 shl	 eax, 1
  0009d	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  000a0	51		 push	 ecx
  000a1	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ab	51		 push	 ecx
  000ac	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 _glm_step
  000bb	83 c4 08	 add	 esp, 8
  000be	ba 04 00 00 00	 mov	 edx, 4
  000c3	d1 e2		 shl	 edx, 1
  000c5	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  000c8	d9 1c 10	 fstp	 DWORD PTR [eax+edx]

; 946  :   dest[3] = glm_step(edge, x[3]);

  000cb	b8 04 00 00 00	 mov	 eax, 4
  000d0	6b c8 03	 imul	 ecx, eax, 3
  000d3	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	51		 push	 ecx
  000e2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	e8 00 00 00 00	 call	 _glm_step
  000f1	83 c4 08	 add	 esp, 8
  000f4	b8 04 00 00 00	 mov	 eax, 4
  000f9	6b c8 03	 imul	 ecx, eax, 3
  000fc	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000ff	d9 1c 0a	 fstp	 DWORD PTR [edx+ecx]

; 947  : }

  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx
  00105	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0010b	3b ec		 cmp	 ebp, esp
  0010d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c3		 ret	 0
_glm_vec4_step_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_lerpc
_TEXT	SEGMENT
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec4_lerpc PROC					; COMDAT

; 897  : glm_vec4_lerpc(vec4 from, vec4 to, float t, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 898  :   glm_vec4_lerp(from, to, glm_clamp_zo(t), dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	e8 00 00 00 00	 call	 _glm_clamp_zo
  0003c	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _to$[ebp]
  00042	51		 push	 ecx
  00043	8b 55 08	 mov	 edx, DWORD PTR _from$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 _glm_vec4_lerp
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 899  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_glm_vec4_lerpc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_lerp
_TEXT	SEGMENT
_v$ = -64						; size = 16
_s$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_t$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_vec4_lerp PROC					; COMDAT

; 875  : glm_vec4_lerp(vec4 from, vec4 to, float t, vec4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 876  :   vec4 s, v;
; 877  : 
; 878  :   /* from + s * (to - from) */
; 879  :   glm_vec4_broadcast(t, s);

  00044	8d 45 e0	 lea	 eax, DWORD PTR _s$[ebp]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _t$[ebx]
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	e8 00 00 00 00	 call	 _glm_vec4_broadcast
  00058	83 c4 08	 add	 esp, 8

; 880  :   glm_vec4_sub(to, from, v);

  0005b	8d 45 c0	 lea	 eax, DWORD PTR _v$[ebp]
  0005e	50		 push	 eax
  0005f	8b 4b 08	 mov	 ecx, DWORD PTR _from$[ebx]
  00062	51		 push	 ecx
  00063	8b 53 0c	 mov	 edx, DWORD PTR _to$[ebx]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _glm_vec4_sub
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 881  :   glm_vec4_mul(s, v, v);

  0006f	8d 45 c0	 lea	 eax, DWORD PTR _v$[ebp]
  00072	50		 push	 eax
  00073	8d 4d c0	 lea	 ecx, DWORD PTR _v$[ebp]
  00076	51		 push	 ecx
  00077	8d 55 e0	 lea	 edx, DWORD PTR _s$[ebp]
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 _glm_vec4_mul
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH

; 882  :   glm_vec4_add(from, v, dest);

  00083	8b 43 14	 mov	 eax, DWORD PTR _dest$[ebx]
  00086	50		 push	 eax
  00087	8d 4d c0	 lea	 ecx, DWORD PTR _v$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 53 08	 mov	 edx, DWORD PTR _from$[ebx]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 _glm_vec4_add
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH

; 883  : }

  00097	52		 push	 edx
  00098	8b cd		 mov	 ecx, ebp
  0009a	50		 push	 eax
  0009b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@glm_vec4_l
  000a1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a6	58		 pop	 eax
  000a7	5a		 pop	 edx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	33 cd		 xor	 ecx, ebp
  000af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	8b e3		 mov	 esp, ebx
  000b9	5b		 pop	 ebx
  000ba	c3		 ret	 0
  000bb	90		 npad	 1
$LN6@glm_vec4_l:
  000bc	02 00 00 00	 DD	 2
  000c0	00 00 00 00	 DD	 $LN5@glm_vec4_l
$LN5@glm_vec4_l:
  000c4	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000c8	10 00 00 00	 DD	 16			; 00000010H
  000cc	00 00 00 00	 DD	 $LN3@glm_vec4_l
  000d0	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000d4	10 00 00 00	 DD	 16			; 00000010H
  000d8	00 00 00 00	 DD	 $LN4@glm_vec4_l
$LN4@glm_vec4_l:
  000dc	76		 DB	 118			; 00000076H
  000dd	00		 DB	 0
$LN3@glm_vec4_l:
  000de	73		 DB	 115			; 00000073H
  000df	00		 DB	 0
_glm_vec4_lerp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_clamp
_TEXT	SEGMENT
_v$ = 8							; size = 4
_minVal$ = 12						; size = 4
_maxVal$ = 16						; size = 4
_glm_vec4_clamp PROC					; COMDAT

; 848  : glm_vec4_clamp(vec4 v, float minVal, float maxVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 849  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 850  :   glmm_store(v, _mm_min_ps(_mm_max_ps(glmm_load(v), _mm_set1_ps(minVal)),

  00028	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _minVal$[ebp]
  00036	0f c6 c9 00	 shufps	 xmm1, xmm1, 0
  0003a	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0003d	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  00040	0f 5f d1	 maxps	 xmm2, xmm1
  00043	0f 5d d0	 minps	 xmm2, xmm0
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00049	0f 11 11	 movups	 XMMWORD PTR [ecx], xmm2

; 851  :                            _mm_set1_ps(maxVal)));
; 852  : #elif defined(CGLM_NEON_FP)
; 853  :   vst1q_f32(v, vminq_f32(vmaxq_f32(vld1q_f32(v), vdupq_n_f32(minVal)),
; 854  :                          vdupq_n_f32(maxVal)));
; 855  : #else
; 856  :   v[0] = glm_clamp(v[0], minVal, maxVal);
; 857  :   v[1] = glm_clamp(v[1], minVal, maxVal);
; 858  :   v[2] = glm_clamp(v[2], minVal, maxVal);
; 859  :   v[3] = glm_clamp(v[3], minVal, maxVal);
; 860  : #endif
; 861  : }

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_glm_vec4_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_minv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_minv PROC					; COMDAT

; 826  : glm_vec4_minv(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 827  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 828  :   glmm_store(dest, _mm_min_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5d 00	 minps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 829  : #elif defined(CGLM_NEON_FP)
; 830  :   vst1q_f32(dest, vminq_f32(vld1q_f32(a), vld1q_f32(b)));
; 831  : #else
; 832  :   dest[0] = glm_min(a[0], b[0]);
; 833  :   dest[1] = glm_min(a[1], b[1]);
; 834  :   dest[2] = glm_min(a[2], b[2]);
; 835  :   dest[3] = glm_min(a[3], b[3]);
; 836  : #endif
; 837  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_glm_vec4_minv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_maxv
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_maxv PROC					; COMDAT

; 804  : glm_vec4_maxv(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 805  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 806  :   glmm_store(dest, _mm_max_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5f 00	 maxps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 807  : #elif defined(CGLM_NEON_FP)
; 808  :   vst1q_f32(dest, vmaxq_f32(vld1q_f32(a), vld1q_f32(b)));
; 809  : #else
; 810  :   dest[0] = glm_max(a[0], b[0]);
; 811  :   dest[1] = glm_max(a[1], b[1]);
; 812  :   dest[2] = glm_max(a[2], b[2]);
; 813  :   dest[3] = glm_max(a[3], b[3]);
; 814  : #endif
; 815  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_glm_vec4_maxv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_distance2
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec4_distance2 PROC				; COMDAT

; 782  : glm_vec4_distance2(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 783  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 784  :   return glmm_norm2(_mm_sub_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5c 00	 subps	 xmm0, XMMWORD PTR [eax]
  00034	e8 00 00 00 00	 call	 _glmm_norm2

; 785  : #elif defined(CGLM_NEON_FP)
; 786  :   return glmm_norm2(vsubq_f32(glmm_load(a), glmm_load(b)));
; 787  : #else
; 788  :   return glm_pow2(a[0] - b[0])
; 789  :        + glm_pow2(a[1] - b[1])
; 790  :        + glm_pow2(a[2] - b[2])
; 791  :        + glm_pow2(a[3] - b[3]);
; 792  : #endif
; 793  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_glm_vec4_distance2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_distance
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec4_distance PROC					; COMDAT

; 760  : glm_vec4_distance(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 761  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 762  :   return glmm_norm(_mm_sub_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5c 00	 subps	 xmm0, XMMWORD PTR [eax]
  00034	e8 00 00 00 00	 call	 _glmm_norm

; 763  : #elif defined(CGLM_NEON_FP)
; 764  :   return glmm_norm(vsubq_f32(glmm_load(a), glmm_load(b)));
; 765  : #else
; 766  :   return sqrtf(glm_pow2(a[0] - b[0])
; 767  :              + glm_pow2(a[1] - b[1])
; 768  :              + glm_pow2(a[2] - b[2])
; 769  :              + glm_pow2(a[3] - b[3]));
; 770  : #endif
; 771  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_glm_vec4_distance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_normalize
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_normalize PROC				; COMDAT

; 747  : glm_vec4_normalize(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 748  :   glm_vec4_normalize_to(v, v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_normalize_to
  00035	83 c4 08	 add	 esp, 8

; 749  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_vec4_normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_normalize_to
_TEXT	SEGMENT
tv72 = -276						; size = 4
_dot$ = -76						; size = 4
_x0$ = -64						; size = 16
_xdot$ = -32						; size = 16
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_normalize_to PROC				; COMDAT

; 711  : glm_vec4_normalize_to(vec4 v, vec4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 712  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 713  :   __m128 xdot, x0;
; 714  :   float  dot;
; 715  : 
; 716  :   x0   = glmm_load(v);

  0003a	8b 43 08	 mov	 eax, DWORD PTR _v$[ebx]
  0003d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00040	0f 29 45 c0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 717  :   xdot = glmm_vdot(x0, x0);

  00044	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00048	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0004c	e8 00 00 00 00	 call	 _glmm_vdot
  00051	0f 29 45 e0	 movaps	 XMMWORD PTR _xdot$[ebp], xmm0

; 718  :   dot  = _mm_cvtss_f32(xdot);

  00055	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xdot$[ebp]
  00059	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR tv72[ebp], xmm0
  00061	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR tv72[ebp]
  00069	f3 0f 11 45 b4	 movss	 DWORD PTR _dot$[ebp], xmm0

; 719  : 
; 720  :   if (dot == 0.0f) {

  0006e	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _dot$[ebp]
  00073	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0007a	9f		 lahf
  0007b	f6 c4 44	 test	 ah, 68			; 00000044H
  0007e	7a 0b		 jp	 SHORT $LN2@glm_vec4_n

; 721  :     glmm_store(dest, _mm_setzero_ps());

  00080	0f 57 c0	 xorps	 xmm0, xmm0
  00083	8b 43 0c	 mov	 eax, DWORD PTR _dest$[ebx]
  00086	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 722  :     return;

  00089	eb 11		 jmp	 SHORT $LN1@glm_vec4_n
$LN2@glm_vec4_n:

; 723  :   }
; 724  : 
; 725  :   glmm_store(dest, _mm_div_ps(x0, _mm_sqrt_ps(xdot)));

  0008b	0f 51 45 e0	 sqrtps	 xmm0, XMMWORD PTR _xdot$[ebp]
  0008f	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00093	0f 5e c8	 divps	 xmm1, xmm0
  00096	8b 43 0c	 mov	 eax, DWORD PTR _dest$[ebx]
  00099	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1
$LN1@glm_vec4_n:

; 726  : #else
; 727  :   float norm;
; 728  : 
; 729  :   norm = glm_vec4_norm(v);
; 730  : 
; 731  :   if (norm == 0.0f) {
; 732  :     glm_vec4_zero(dest);
; 733  :     return;
; 734  :   }
; 735  : 
; 736  :   glm_vec4_scale(v, 1.0f / norm, dest);
; 737  : #endif
; 738  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	8b e3		 mov	 esp, ebx
  000a3	5b		 pop	 ebx
  000a4	c3		 ret	 0
_glm_vec4_normalize_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_negate
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_negate PROC					; COMDAT

; 699  : glm_vec4_negate(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 700  :   glm_vec4_negate_to(v, v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_negate_to
  00035	83 c4 08	 add	 esp, 8

; 701  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_vec4_negate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_negate_to
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_negate_to PROC				; COMDAT

; 679  : glm_vec4_negate_to(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 680  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 681  :   glmm_store(dest, _mm_xor_ps(glmm_load(v), _mm_set1_ps(-0.0f)));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@80000000800000008000000080000000
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00038	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 682  : #elif defined(CGLM_NEON_FP)
; 683  :   vst1q_f32(dest, vnegq_f32(vld1q_f32(v)));
; 684  : #else
; 685  :   dest[0] = -v[0];
; 686  :   dest[1] = -v[1];
; 687  :   dest[2] = -v[2];
; 688  :   dest[3] = -v[3];
; 689  : #endif
; 690  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_vec4_negate_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_minadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_minadd PROC					; COMDAT

; 654  : glm_vec4_minadd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 655  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 656  :   glmm_store(dest, _mm_add_ps(glmm_load(dest),

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5d 00	 minps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  0003a	0f 58 c8	 addps	 xmm1, xmm0
  0003d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00040	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1

; 657  :                               _mm_min_ps(glmm_load(a),
; 658  :                                          glmm_load(b))));
; 659  : #elif defined(CGLM_NEON_FP)
; 660  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(dest),
; 661  :                             vminq_f32(vld1q_f32(a),
; 662  :                                       vld1q_f32(b))));
; 663  : #else
; 664  :   dest[0] += glm_min(a[0], b[0]);
; 665  :   dest[1] += glm_min(a[1], b[1]);
; 666  :   dest[2] += glm_min(a[2], b[2]);
; 667  :   dest[3] += glm_min(a[3], b[3]);
; 668  : #endif
; 669  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glm_vec4_minadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_maxadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_maxadd PROC					; COMDAT

; 626  : glm_vec4_maxadd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 627  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 628  :   glmm_store(dest, _mm_add_ps(glmm_load(dest),

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5f 00	 maxps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  0003a	0f 58 c8	 addps	 xmm1, xmm0
  0003d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00040	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1

; 629  :                               _mm_max_ps(glmm_load(a),
; 630  :                                          glmm_load(b))));
; 631  : #elif defined(CGLM_NEON_FP)
; 632  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(dest),
; 633  :                             vmaxq_f32(vld1q_f32(a),
; 634  :                                       vld1q_f32(b))));
; 635  : #else
; 636  :   dest[0] += glm_max(a[0], b[0]);
; 637  :   dest[1] += glm_max(a[1], b[1]);
; 638  :   dest[2] += glm_max(a[2], b[2]);
; 639  :   dest[3] += glm_max(a[3], b[3]);
; 640  : #endif
; 641  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glm_vec4_maxadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_muladds
_TEXT	SEGMENT
_a$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_muladds PROC					; COMDAT

; 598  : glm_vec4_muladds(vec4 a, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 599  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 600  :   glmm_store(dest, _mm_add_ps(glmm_load(dest),

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00034	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00037	0f 59 c8	 mulps	 xmm1, xmm0
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003d	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00040	0f 58 c1	 addps	 xmm0, xmm1
  00043	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00046	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 601  :                               _mm_mul_ps(glmm_load(a),
; 602  :                                          _mm_set1_ps(s))));
; 603  : #elif defined(CGLM_NEON_FP)
; 604  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(dest),
; 605  :                             vmulq_f32(vld1q_f32(a),
; 606  :                                       vdupq_n_f32(s))));
; 607  : #else
; 608  :   dest[0] += a[0] * s;
; 609  :   dest[1] += a[1] * s;
; 610  :   dest[2] += a[2] * s;
; 611  :   dest[3] += a[3] * s;
; 612  : #endif
; 613  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_glm_vec4_muladds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_muladd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_muladd PROC					; COMDAT

; 570  : glm_vec4_muladd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 571  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 572  :   glmm_store(dest, _mm_add_ps(glmm_load(dest),

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  0003a	0f 58 c8	 addps	 xmm1, xmm0
  0003d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00040	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1

; 573  :                               _mm_mul_ps(glmm_load(a),
; 574  :                                          glmm_load(b))));
; 575  : #elif defined(CGLM_NEON_FP)
; 576  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(dest),
; 577  :                             vmulq_f32(vld1q_f32(a),
; 578  :                                       vld1q_f32(b))));
; 579  : #else
; 580  :   dest[0] += a[0] * b[0];
; 581  :   dest[1] += a[1] * b[1];
; 582  :   dest[2] += a[2] * b[2];
; 583  :   dest[3] += a[3] * b[3];
; 584  : #endif
; 585  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glm_vec4_muladd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_subadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_subadd PROC					; COMDAT

; 542  : glm_vec4_subadd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 543  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 544  :   glmm_store(dest, _mm_add_ps(glmm_load(dest),

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5c 00	 subps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  0003a	0f 58 c8	 addps	 xmm1, xmm0
  0003d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00040	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1

; 545  :                               _mm_sub_ps(glmm_load(a),
; 546  :                                          glmm_load(b))));
; 547  : #elif defined(CGLM_NEON_FP)
; 548  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(dest),
; 549  :                             vsubq_f32(vld1q_f32(a),
; 550  :                                       vld1q_f32(b))));
; 551  : #else
; 552  :   dest[0] += a[0] - b[0];
; 553  :   dest[1] += a[1] - b[1];
; 554  :   dest[2] += a[2] - b[2];
; 555  :   dest[3] += a[3] - b[3];
; 556  : #endif
; 557  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glm_vec4_subadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_addadd
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_addadd PROC					; COMDAT

; 514  : glm_vec4_addadd(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 515  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 516  :   glmm_store(dest, _mm_add_ps(glmm_load(dest),

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 58 00	 addps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 10 0a	 movups	 xmm1, XMMWORD PTR [edx]
  0003a	0f 58 c8	 addps	 xmm1, xmm0
  0003d	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  00040	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1

; 517  :                               _mm_add_ps(glmm_load(a),
; 518  :                                          glmm_load(b))));
; 519  : #elif defined(CGLM_NEON_FP)
; 520  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(dest),
; 521  :                             vaddq_f32(vld1q_f32(a),
; 522  :                                       vld1q_f32(b))));
; 523  : #else
; 524  :   dest[0] += a[0] + b[0];
; 525  :   dest[1] += a[1] + b[1];
; 526  :   dest[2] += a[2] + b[2];
; 527  :   dest[3] += a[3] + b[3];
; 528  : #endif
; 529  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glm_vec4_addadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_divs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_divs PROC					; COMDAT

; 495  : glm_vec4_divs(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 496  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 497  :   glmm_store(dest, _mm_div_ps(glmm_load(v), _mm_set1_ps(s)));

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00034	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00037	0f 5e c8	 divps	 xmm1, xmm0
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003d	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1

; 498  : #else
; 499  :   glm_vec4_scale(v, 1.0f / s, dest);
; 500  : #endif
; 501  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_vec4_divs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_div
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_div PROC					; COMDAT

; 475  : glm_vec4_div(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 476  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 477  :   glmm_store(dest, _mm_div_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5e 00	 divps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 478  : #else
; 479  :   dest[0] = a[0] / b[0];
; 480  :   dest[1] = a[1] / b[1];
; 481  :   dest[2] = a[2] / b[2];
; 482  :   dest[3] = a[3] / b[3];
; 483  : #endif
; 484  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_glm_vec4_div ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_scale_as
_TEXT	SEGMENT
_norm$ = -8						; size = 4
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_scale_as PROC					; COMDAT

; 454  : glm_vec4_scale_as(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 455  :   float norm;
; 456  :   norm = glm_vec4_norm(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_norm
  00031	83 c4 04	 add	 esp, 4
  00034	d9 5d f8	 fstp	 DWORD PTR _norm$[ebp]

; 457  : 
; 458  :   if (norm == 0.0f) {

  00037	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _norm$[ebp]
  0003c	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00043	9f		 lahf
  00044	f6 c4 44	 test	 ah, 68			; 00000044H
  00047	7a 0e		 jp	 SHORT $LN2@glm_vec4_s

; 459  :     glm_vec4_zero(dest);

  00049	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _glm_vec4_zero
  00052	83 c4 04	 add	 esp, 4

; 460  :     return;

  00055	eb 20		 jmp	 SHORT $LN1@glm_vec4_s
$LN2@glm_vec4_s:

; 461  :   }
; 462  : 
; 463  :   glm_vec4_scale(v, s / norm, dest);

  00057	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0005a	50		 push	 eax
  0005b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00060	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _norm$[ebp]
  00065	51		 push	 ecx
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 _glm_vec4_scale
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@glm_vec4_s:

; 464  : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
_glm_vec4_scale_as ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_scale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_scale PROC					; COMDAT

; 432  : glm_vec4_scale(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 433  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 434  :   glmm_store(dest, _mm_mul_ps(glmm_load(v), _mm_set1_ps(s)));

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00034	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00037	0f 59 c8	 mulps	 xmm1, xmm0
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003d	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1

; 435  : #elif defined(CGLM_NEON_FP)
; 436  :   vst1q_f32(dest, vmulq_f32(vld1q_f32(v), vdupq_n_f32(s)));
; 437  : #else
; 438  :   dest[0] = v[0] * s;
; 439  :   dest[1] = v[1] * s;
; 440  :   dest[2] = v[2] * s;
; 441  :   dest[3] = v[3] * s;
; 442  : #endif
; 443  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_vec4_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_mul
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_mul PROC					; COMDAT

; 410  : glm_vec4_mul(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 411  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 412  :   glmm_store(dest, _mm_mul_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 413  : #elif defined(CGLM_NEON_FP)
; 414  :   vst1q_f32(dest, vmulq_f32(vld1q_f32(a), vld1q_f32(b)));
; 415  : #else
; 416  :   dest[0] = a[0] * b[0];
; 417  :   dest[1] = a[1] * b[1];
; 418  :   dest[2] = a[2] * b[2];
; 419  :   dest[3] = a[3] * b[3];
; 420  : #endif
; 421  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_glm_vec4_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_subs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_subs PROC					; COMDAT

; 388  : glm_vec4_subs(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 389  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 390  :   glmm_store(dest, _mm_sub_ps(glmm_load(v), _mm_set1_ps(s)));

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00034	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00037	0f 5c c8	 subps	 xmm1, xmm0
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003d	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1

; 391  : #elif defined(CGLM_NEON_FP)
; 392  :   vst1q_f32(dest, vsubq_f32(vld1q_f32(v), vdupq_n_f32(s)));
; 393  : #else
; 394  :   dest[0] = v[0] - s;
; 395  :   dest[1] = v[1] - s;
; 396  :   dest[2] = v[2] - s;
; 397  :   dest[3] = v[3] - s;
; 398  : #endif
; 399  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_vec4_subs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_sub
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_sub PROC					; COMDAT

; 366  : glm_vec4_sub(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 367  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 368  :   glmm_store(dest, _mm_sub_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 5c 00	 subps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 369  : #elif defined(CGLM_NEON_FP)
; 370  :   vst1q_f32(dest, vsubq_f32(vld1q_f32(a), vld1q_f32(b)));
; 371  : #else
; 372  :   dest[0] = a[0] - b[0];
; 373  :   dest[1] = a[1] - b[1];
; 374  :   dest[2] = a[2] - b[2];
; 375  :   dest[3] = a[3] - b[3];
; 376  : #endif
; 377  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_glm_vec4_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_adds
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_adds PROC					; COMDAT

; 344  : glm_vec4_adds(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 345  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 346  :   glmm_store(dest, _mm_add_ps(glmm_load(v), _mm_set1_ps(s)));

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00034	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00037	0f 58 c8	 addps	 xmm1, xmm0
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003d	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1

; 347  : #elif defined(CGLM_NEON_FP)
; 348  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(v), vdupq_n_f32(s)));
; 349  : #else
; 350  :   dest[0] = v[0] + s;
; 351  :   dest[1] = v[1] + s;
; 352  :   dest[2] = v[2] + s;
; 353  :   dest[3] = v[3] + s;
; 354  : #endif
; 355  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_vec4_adds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_add
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_add PROC					; COMDAT

; 322  : glm_vec4_add(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 323  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 324  :   glmm_store(dest, _mm_add_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 58 00	 addps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 325  : #elif defined(CGLM_NEON_FP)
; 326  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(a), vld1q_f32(b)));
; 327  : #else
; 328  :   dest[0] = a[0] + b[0];
; 329  :   dest[1] = a[1] + b[1];
; 330  :   dest[2] = a[2] + b[2];
; 331  :   dest[3] = a[3] + b[3];
; 332  : #endif
; 333  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_glm_vec4_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_norm_inf
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_norm_inf PROC					; COMDAT

; 303  : glm_vec4_norm_inf(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 304  : #if defined(CGLM_SIMD)
; 305  :   return glmm_norm_inf(glmm_load(v));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	e8 00 00 00 00	 call	 _glmm_norm_inf

; 306  : #else
; 307  :   vec4 t;
; 308  :   glm_vec4_abs(v, t);
; 309  :   return glm_vec4_max(t);
; 310  : #endif
; 311  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_glm_vec4_norm_inf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_norm_one
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_norm_one PROC					; COMDAT

; 278  : glm_vec4_norm_one(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 279  : #if defined(CGLM_SIMD)
; 280  :   return glmm_norm_one(glmm_load(v));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	e8 00 00 00 00	 call	 _glmm_norm_one

; 281  : #else
; 282  :   vec4 t;
; 283  :   glm_vec4_abs(v, t);
; 284  :   return glm_vec4_hadd(t);
; 285  : #endif
; 286  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_glm_vec4_norm_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_norm
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_norm PROC					; COMDAT

; 254  : glm_vec4_norm(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 255  : #if defined(CGLM_SIMD)
; 256  :   return glmm_norm(glmm_load(v));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	e8 00 00 00 00	 call	 _glmm_norm

; 257  : #else
; 258  :   return sqrtf(glm_vec4_dot(v, v));
; 259  : #endif
; 260  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_glm_vec4_norm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_norm2
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_norm2 PROC					; COMDAT

; 240  : glm_vec4_norm2(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 241  :   return glm_vec4_dot(v, v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_vec4_dot
  00035	83 c4 08	 add	 esp, 8

; 242  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_vec4_norm2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_dot
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec4_dot PROC					; COMDAT

; 219  : glm_vec4_dot(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 220  : #if defined(CGLM_SIMD)
; 221  :   return glmm_dot(glmm_load(a), glmm_load(b));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00031	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00034	e8 00 00 00 00	 call	 _glmm_dot

; 222  : #else
; 223  :   return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
; 224  : #endif
; 225  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_glm_vec4_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_one
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_one PROC					; COMDAT

; 196  : glm_vec4_one(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 197  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 198  :   glmm_store(v, _mm_set1_ps(1.0f));

  00028	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  0002f	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00032	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 199  : #elif defined(CGLM_NEON_FP)
; 200  :   vst1q_f32(v, vdupq_n_f32(1.0f));
; 201  : #else
; 202  :   v[0] = 1.0f;
; 203  :   v[1] = 1.0f;
; 204  :   v[2] = 1.0f;
; 205  :   v[3] = 1.0f;
; 206  : #endif
; 207  : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_glm_vec4_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_zero
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_zero PROC					; COMDAT

; 176  : glm_vec4_zero(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 178  :   glmm_store(v, _mm_setzero_ps());

  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002e	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 179  : #elif defined(CGLM_NEON_FP)
; 180  :   vst1q_f32(v, vdupq_n_f32(0.0f));
; 181  : #else
; 182  :   v[0] = 0.0f;
; 183  :   v[1] = 0.0f;
; 184  :   v[2] = 0.0f;
; 185  :   v[3] = 0.0f;
; 186  : #endif
; 187  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_glm_vec4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_ucopy
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_ucopy PROC					; COMDAT

; 162  : glm_vec4_ucopy(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 163  :   dest[0] = v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 164  :   dest[1] = v[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 165  :   dest[2] = v[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 166  :   dest[3] = v[3];

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	ba 04 00 00 00	 mov	 edx, 4
  00087	6b c2 03	 imul	 eax, edx, 3
  0008a	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0008d	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00090	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00093	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 167  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_vec4_ucopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_copy
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_copy PROC					; COMDAT

; 139  : glm_vec4_copy(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 141  :   glmm_store(dest, glmm_load(v));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00031	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 142  : #elif defined(CGLM_NEON_FP)
; 143  :   vst1q_f32(dest, vld1q_f32(v));
; 144  : #else
; 145  :   dest[0] = v[0];
; 146  :   dest[1] = v[1];
; 147  :   dest[2] = v[2];
; 148  :   dest[3] = v[3];
; 149  : #endif
; 150  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glm_vec4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_copy3
_TEXT	SEGMENT
_a$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_copy3 PROC					; COMDAT

; 125  : glm_vec4_copy3(vec4 a, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 126  :   dest[0] = a[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 127  :   dest[1] = a[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 128  :   dest[2] = a[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _a$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 129  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec4_copy3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4
_TEXT	SEGMENT
_v3$ = 8						; size = 4
_last$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4 PROC						; COMDAT

; 110  : glm_vec4(vec3 v3, float last, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  :   dest[0] = v3[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 112  :   dest[1] = v3[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 113  :   dest[2] = v3[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 114  :   dest[3] = last;

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00085	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _last$[ebp]
  0008a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 115  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_glm_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_sqrt
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_sqrt PROC					; COMDAT

; 302  : glm_vec4_sqrt(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 303  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 304  :   glmm_store(dest, _mm_sqrt_ps(glmm_load(v)));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 51 00	 sqrtps	 xmm0, XMMWORD PTR [eax]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00031	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 305  : #else
; 306  :   dest[0] = sqrtf(v[0]);
; 307  :   dest[1] = sqrtf(v[1]);
; 308  :   dest[2] = sqrtf(v[2]);
; 309  :   dest[3] = sqrtf(v[3]);
; 310  : #endif
; 311  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glm_vec4_sqrt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_hadd
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_hadd PROC					; COMDAT

; 286  : glm_vec4_hadd(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 287  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 288  :   return glmm_hadd(glmm_load(v));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	e8 00 00 00 00	 call	 _glmm_hadd

; 289  : #else
; 290  :   return v[0] + v[1] + v[2] + v[3];
; 291  : #endif
; 292  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_glm_vec4_hadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_fract
_TEXT	SEGMENT
tv216 = -196						; size = 4
tv196 = -196						; size = 4
tv176 = -196						; size = 4
tv156 = -196						; size = 4
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_fract PROC					; COMDAT

; 270  : glm_vec4_fract(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 271  :   dest[0] = fminf(v[0] - floorf(v[0]), 0x1.fffffep-1f);

  00028	8b f4		 mov	 esi, esp
  0002a	51		 push	 ecx
  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fffff
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	b8 04 00 00 00	 mov	 eax, 4
  0003d	6b f8 00	 imul	 edi, eax, 0
  00040	b9 04 00 00 00	 mov	 ecx, 4
  00045	6b d1 00	 imul	 edx, ecx, 0
  00048	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0004b	51		 push	 ecx
  0004c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00051	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00056	e8 00 00 00 00	 call	 _floorf
  0005b	83 c4 04	 add	 esp, 4
  0005e	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv156[ebp]
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00067	f3 0f 10 04 39	 movss	 xmm0, DWORD PTR [ecx+edi]
  0006c	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv156[ebp]
  00074	51		 push	 ecx
  00075	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fminf
  00080	83 c4 08	 add	 esp, 8
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	ba 04 00 00 00	 mov	 edx, 4
  0008f	6b c2 00	 imul	 eax, edx, 0
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00095	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 272  :   dest[1] = fminf(v[1] - floorf(v[1]), 0x1.fffffep-1f);

  00098	8b f4		 mov	 esi, esp
  0009a	51		 push	 ecx
  0009b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fffff
  000a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a8	bf 04 00 00 00	 mov	 edi, 4
  000ad	c1 e7 00	 shl	 edi, 0
  000b0	b8 04 00 00 00	 mov	 eax, 4
  000b5	c1 e0 00	 shl	 eax, 0
  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  000bb	51		 push	 ecx
  000bc	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	e8 00 00 00 00	 call	 _floorf
  000cb	83 c4 04	 add	 esp, 4
  000ce	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv176[ebp]
  000d4	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  000d7	f3 0f 10 04 3a	 movss	 xmm0, DWORD PTR [edx+edi]
  000dc	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv176[ebp]
  000e4	51		 push	 ecx
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fminf
  000f0	83 c4 08	 add	 esp, 8
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	b8 04 00 00 00	 mov	 eax, 4
  000ff	c1 e0 00	 shl	 eax, 0
  00102	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00105	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 273  :   dest[2] = fminf(v[2] - floorf(v[2]), 0x1.fffffep-1f);

  00108	8b f4		 mov	 esi, esp
  0010a	51		 push	 ecx
  0010b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fffff
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	bf 04 00 00 00	 mov	 edi, 4
  0011d	d1 e7		 shl	 edi, 1
  0011f	b8 04 00 00 00	 mov	 eax, 4
  00124	d1 e0		 shl	 eax, 1
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00129	51		 push	 ecx
  0012a	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	e8 00 00 00 00	 call	 _floorf
  00139	83 c4 04	 add	 esp, 4
  0013c	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv196[ebp]
  00142	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00145	f3 0f 10 04 3a	 movss	 xmm0, DWORD PTR [edx+edi]
  0014a	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv196[ebp]
  00152	51		 push	 ecx
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fminf
  0015e	83 c4 08	 add	 esp, 8
  00161	3b f4		 cmp	 esi, esp
  00163	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00168	b8 04 00 00 00	 mov	 eax, 4
  0016d	d1 e0		 shl	 eax, 1
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00172	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 274  :   dest[3] = fminf(v[3] - floorf(v[3]), 0x1.fffffep-1f);

  00175	8b f4		 mov	 esi, esp
  00177	51		 push	 ecx
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f7fffff
  00180	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00185	b8 04 00 00 00	 mov	 eax, 4
  0018a	6b f8 03	 imul	 edi, eax, 3
  0018d	b9 04 00 00 00	 mov	 ecx, 4
  00192	6b d1 03	 imul	 edx, ecx, 3
  00195	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00198	51		 push	 ecx
  00199	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	e8 00 00 00 00	 call	 _floorf
  001a8	83 c4 04	 add	 esp, 4
  001ab	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv216[ebp]
  001b1	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  001b4	f3 0f 10 04 39	 movss	 xmm0, DWORD PTR [ecx+edi]
  001b9	f3 0f 5c 85 3c
	ff ff ff	 subss	 xmm0, DWORD PTR tv216[ebp]
  001c1	51		 push	 ecx
  001c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fminf
  001cd	83 c4 08	 add	 esp, 8
  001d0	3b f4		 cmp	 esi, esp
  001d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d7	ba 04 00 00 00	 mov	 edx, 4
  001dc	6b c2 03	 imul	 eax, edx, 3
  001df	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  001e2	d9 1c 01	 fstp	 DWORD PTR [ecx+eax]

; 275  : }

  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	5b		 pop	 ebx
  001e8	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  001ee	3b ec		 cmp	 ebp, esp
  001f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f5	8b e5		 mov	 esp, ebp
  001f7	5d		 pop	 ebp
  001f8	c3		 ret	 0
_glm_vec4_fract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_abs
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_abs PROC					; COMDAT

; 249  : glm_vec4_abs(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 250  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 251  :   glmm_store(dest, glmm_abs(glmm_load(v)));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	e8 00 00 00 00	 call	 _glmm_abs
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00036	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 252  : #elif defined(CGLM_NEON_FP)
; 253  :   vst1q_f32(dest, vabsq_f32(vld1q_f32(v)));
; 254  : #else
; 255  :   dest[0] = fabsf(v[0]);
; 256  :   dest[1] = fabsf(v[1]);
; 257  :   dest[2] = fabsf(v[2]);
; 258  :   dest[3] = fabsf(v[3]);
; 259  : #endif
; 260  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_glm_vec4_abs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_sign
_TEXT	SEGMENT
_x4$ = -160						; size = 16
_x3$ = -128						; size = 16
_x2$ = -96						; size = 16
_x1$ = -64						; size = 16
_x0$ = -32						; size = 16
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_sign PROC					; COMDAT

; 221  : glm_vec4_sign(vec4 v, vec4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 98 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-360]
  00024	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 222  : #if defined( __SSE2__ ) || defined( __SSE2__ )
; 223  :   __m128 x0, x1, x2, x3, x4;
; 224  : 
; 225  :   x0 = glmm_load(v);

  0003a	8b 43 08	 mov	 eax, DWORD PTR _v$[ebx]
  0003d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00040	0f 29 45 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 226  :   x1 = _mm_set_ps(0.0f, 0.0f, 1.0f, -1.0f);

  00044	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000000000000003f800000bf800000
  0004b	0f 29 45 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 227  :   x2 = glmm_shuff1x(x1, 2);

  0004f	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00053	0f c6 45 c0 aa	 shufps	 xmm0, XMMWORD PTR _x1$[ebp], 170 ; 000000aaH
  00058	0f 29 45 a0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 228  : 
; 229  :   x3 = _mm_and_ps(_mm_cmpgt_ps(x0, x2), glmm_shuff1x(x1, 1));

  0005c	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00060	0f c6 45 c0 55	 shufps	 xmm0, XMMWORD PTR _x1$[ebp], 85 ; 00000055H
  00065	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _x2$[ebp]
  00069	0f c2 4d e0 01	 cmpltps xmm1, XMMWORD PTR _x0$[ebp]
  0006e	0f 54 c8	 andps	 xmm1, xmm0
  00071	0f 29 4d 80	 movaps	 XMMWORD PTR _x3$[ebp], xmm1

; 230  :   x4 = _mm_and_ps(_mm_cmplt_ps(x0, x2), glmm_shuff1x(x1, 0));

  00075	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00079	0f c6 45 c0 00	 shufps	 xmm0, XMMWORD PTR _x1$[ebp], 0
  0007e	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00082	0f c2 4d a0 01	 cmpltps xmm1, XMMWORD PTR _x2$[ebp]
  00087	0f 54 c8	 andps	 xmm1, xmm0
  0008a	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR _x4$[ebp], xmm1

; 231  : 
; 232  :   glmm_store(dest, _mm_or_ps(x3, x4));

  00091	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00095	0f 56 85 60 ff
	ff ff		 orps	 xmm0, XMMWORD PTR _x4$[ebp]
  0009c	8b 43 0c	 mov	 eax, DWORD PTR _dest$[ebx]
  0009f	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 233  : #else
; 234  :   dest[0] = glm_signf(v[0]);
; 235  :   dest[1] = glm_signf(v[1]);
; 236  :   dest[2] = glm_signf(v[2]);
; 237  :   dest[3] = glm_signf(v[3]);
; 238  : #endif
; 239  : }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	8b e3		 mov	 esp, ebx
  000a9	5b		 pop	 ebx
  000aa	c3		 ret	 0
_glm_vec4_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_isvalid
_TEXT	SEGMENT
tv74 = -200						; size = 4
tv72 = -196						; size = 4
_v$ = 8							; size = 4
_glm_vec4_isvalid PROC					; COMDAT

; 208  : glm_vec4_isvalid(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 209  :   return !glm_vec4_isnan(v) && !glm_vec4_isinf(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec4_isnan
  00031	83 c4 04	 add	 esp, 4
  00034	0f b6 c8	 movzx	 ecx, al
  00037	85 c9		 test	 ecx, ecx
  00039	75 1f		 jne	 SHORT $LN3@glm_vec4_i
  0003b	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_vec4_isinf
  00044	83 c4 04	 add	 esp, 4
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	75 0c		 jne	 SHORT $LN3@glm_vec4_i
  0004e	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv72[ebp], 1
  00058	eb 0a		 jmp	 SHORT $LN4@glm_vec4_i
$LN3@glm_vec4_i:
  0005a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv72[ebp], 0
$LN4@glm_vec4_i:
  00064	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv72[ebp], 0
  0006b	75 0c		 jne	 SHORT $LN5@glm_vec4_i
  0006d	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv74[ebp], 0
  00077	eb 0a		 jmp	 SHORT $LN6@glm_vec4_i
$LN5@glm_vec4_i:
  00079	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv74[ebp], 1
$LN6@glm_vec4_i:
  00083	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv74[ebp]

; 210  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
_glm_vec4_isvalid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_isinf
_TEXT	SEGMENT
tv94 = -200						; size = 4
tv92 = -196						; size = 4
_v$ = 8							; size = 4
_glm_vec4_isinf PROC					; COMDAT

; 196  : glm_vec4_isinf(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 197  :   return isinf(v[0]) || isinf(v[1]) || isinf(v[2]) || isinf(v[3]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	8b f4		 mov	 esi, esp
  0003a	51		 push	 ecx
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  00046	83 c4 04	 add	 esp, 4
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	98		 cwde
  00051	83 f8 01	 cmp	 eax, 1
  00054	0f 84 97 00 00
	00		 je	 $LN3@glm_vec4_i
  0005a	b9 04 00 00 00	 mov	 ecx, 4
  0005f	c1 e1 00	 shl	 ecx, 0
  00062	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00065	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0006a	8b f4		 mov	 esi, esp
  0006c	51		 push	 ecx
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  00078	83 c4 04	 add	 esp, 4
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	98		 cwde
  00083	83 f8 01	 cmp	 eax, 1
  00086	74 69		 je	 SHORT $LN3@glm_vec4_i
  00088	b9 04 00 00 00	 mov	 ecx, 4
  0008d	d1 e1		 shl	 ecx, 1
  0008f	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00092	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00097	8b f4		 mov	 esi, esp
  00099	51		 push	 ecx
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	98		 cwde
  000b0	83 f8 01	 cmp	 eax, 1
  000b3	74 3c		 je	 SHORT $LN3@glm_vec4_i
  000b5	b9 04 00 00 00	 mov	 ecx, 4
  000ba	6b d1 03	 imul	 edx, ecx, 3
  000bd	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000c0	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000c5	8b f4		 mov	 esi, esp
  000c7	51		 push	 ecx
  000c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  000d3	83 c4 04	 add	 esp, 4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	0f bf c8	 movsx	 ecx, ax
  000e0	83 f9 01	 cmp	 ecx, 1
  000e3	74 0c		 je	 SHORT $LN3@glm_vec4_i
  000e5	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
  000ef	eb 0a		 jmp	 SHORT $LN4@glm_vec4_i
$LN3@glm_vec4_i:
  000f1	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv92[ebp], 1
$LN4@glm_vec4_i:
  000fb	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv92[ebp], 0
  00102	75 0c		 jne	 SHORT $LN5@glm_vec4_i
  00104	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv94[ebp], 0
  0010e	eb 0a		 jmp	 SHORT $LN6@glm_vec4_i
$LN5@glm_vec4_i:
  00110	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv94[ebp], 1
$LN6@glm_vec4_i:
  0011a	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv94[ebp]

; 198  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00129	3b ec		 cmp	 ebp, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
_glm_vec4_isinf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_isnan
_TEXT	SEGMENT
tv94 = -200						; size = 4
tv92 = -196						; size = 4
_v$ = 8							; size = 4
_glm_vec4_isnan PROC					; COMDAT

; 184  : glm_vec4_isnan(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 185  :   return isnan(v[0]) || isnan(v[1]) || isnan(v[2]) || isnan(v[3]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	8b f4		 mov	 esi, esp
  0003a	51		 push	 ecx
  0003b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  00046	83 c4 04	 add	 esp, 4
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	98		 cwde
  00051	83 f8 02	 cmp	 eax, 2
  00054	0f 84 97 00 00
	00		 je	 $LN3@glm_vec4_i
  0005a	b9 04 00 00 00	 mov	 ecx, 4
  0005f	c1 e1 00	 shl	 ecx, 0
  00062	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00065	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0006a	8b f4		 mov	 esi, esp
  0006c	51		 push	 ecx
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  00078	83 c4 04	 add	 esp, 4
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	98		 cwde
  00083	83 f8 02	 cmp	 eax, 2
  00086	74 69		 je	 SHORT $LN3@glm_vec4_i
  00088	b9 04 00 00 00	 mov	 ecx, 4
  0008d	d1 e1		 shl	 ecx, 1
  0008f	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00092	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00097	8b f4		 mov	 esi, esp
  00099	51		 push	 ecx
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  000a5	83 c4 04	 add	 esp, 4
  000a8	3b f4		 cmp	 esi, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	98		 cwde
  000b0	83 f8 02	 cmp	 eax, 2
  000b3	74 3c		 je	 SHORT $LN3@glm_vec4_i
  000b5	b9 04 00 00 00	 mov	 ecx, 4
  000ba	6b d1 03	 imul	 edx, ecx, 3
  000bd	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000c0	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000c5	8b f4		 mov	 esi, esp
  000c7	51		 push	 ecx
  000c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fdclass
  000d3	83 c4 04	 add	 esp, 4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	0f bf c8	 movsx	 ecx, ax
  000e0	83 f9 02	 cmp	 ecx, 2
  000e3	74 0c		 je	 SHORT $LN3@glm_vec4_i
  000e5	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
  000ef	eb 0a		 jmp	 SHORT $LN4@glm_vec4_i
$LN3@glm_vec4_i:
  000f1	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv92[ebp], 1
$LN4@glm_vec4_i:
  000fb	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv92[ebp], 0
  00102	75 0c		 jne	 SHORT $LN5@glm_vec4_i
  00104	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv94[ebp], 0
  0010e	eb 0a		 jmp	 SHORT $LN6@glm_vec4_i
$LN5@glm_vec4_i:
  00110	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv94[ebp], 1
$LN6@glm_vec4_i:
  0011a	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv94[ebp]

; 186  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  00129	3b ec		 cmp	 ebp, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
_glm_vec4_isnan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_min
_TEXT	SEGMENT
_min$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec4_min PROC					; COMDAT

; 166  : glm_vec4_min(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 167  :   float min;
; 168  : 
; 169  :   min = glm_vec3_min(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_min
  00031	83 c4 04	 add	 esp, 4
  00034	d9 5d f8	 fstp	 DWORD PTR _min$[ebp]

; 170  :   if (v[3] < min)

  00037	b8 04 00 00 00	 mov	 eax, 4
  0003c	6b c8 03	 imul	 ecx, eax, 3
  0003f	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00042	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _min$[ebp]
  00047	0f 2f 04 0a	 comiss	 xmm0, DWORD PTR [edx+ecx]
  0004b	76 15		 jbe	 SHORT $LN2@glm_vec4_m

; 171  :     min = v[3];

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	6b c8 03	 imul	 ecx, eax, 3
  00055	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005d	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0
$LN2@glm_vec4_m:

; 172  : 
; 173  :   return min;

  00062	d9 45 f8	 fld	 DWORD PTR _min$[ebp]

; 174  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_glm_vec4_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_max
_TEXT	SEGMENT
_max$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec4_max PROC					; COMDAT

; 149  : glm_vec4_max(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 150  :   float max;
; 151  : 
; 152  :   max = glm_vec3_max(v);

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_vec3_max
  00031	83 c4 04	 add	 esp, 4
  00034	d9 5d f8	 fstp	 DWORD PTR _max$[ebp]

; 153  :   if (v[3] > max)

  00037	b8 04 00 00 00	 mov	 eax, 4
  0003c	6b c8 03	 imul	 ecx, eax, 3
  0003f	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00042	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00047	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _max$[ebp]
  0004b	76 15		 jbe	 SHORT $LN2@glm_vec4_m

; 154  :     max = v[3];

  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	6b c8 03	 imul	 ecx, eax, 3
  00055	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005d	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0
$LN2@glm_vec4_m:

; 155  : 
; 156  :   return max;

  00062	d9 45 f8	 fld	 DWORD PTR _max$[ebp]

; 157  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_glm_vec4_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_eqv_eps
_TEXT	SEGMENT
tv134 = -232						; size = 4
tv132 = -228						; size = 4
tv186 = -224						; size = 8
tv174 = -216						; size = 8
tv162 = -208						; size = 8
tv150 = -200						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec4_eqv_eps PROC					; COMDAT

; 135  : glm_vec4_eqv_eps(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 136  :   return fabsf(a[0] - b[0]) <= GLM_FLT_EPSILON

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00048	51		 push	 ecx
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	e8 00 00 00 00	 call	 _fabsf
  00053	83 c4 04	 add	 esp, 4
  00056	dd 9d 38 ff ff
	ff		 fstp	 QWORD PTR tv150[ebp]
  0005c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00064	66 0f 2f 85 38
	ff ff ff	 comisd	 xmm0, QWORD PTR tv150[ebp]
  0006c	0f 82 e0 00 00
	00		 jb	 $LN3@glm_vec4_e
  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	c1 e0 00	 shl	 eax, 0
  0007a	b9 04 00 00 00	 mov	 ecx, 4
  0007f	c1 e1 00	 shl	 ecx, 0
  00082	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00085	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00088	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0008d	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  00092	51		 push	 ecx
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	e8 00 00 00 00	 call	 _fabsf
  0009d	83 c4 04	 add	 esp, 4
  000a0	dd 9d 30 ff ff
	ff		 fstp	 QWORD PTR tv162[ebp]
  000a6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  000ae	66 0f 2f 85 30
	ff ff ff	 comisd	 xmm0, QWORD PTR tv162[ebp]
  000b6	0f 82 96 00 00
	00		 jb	 $LN3@glm_vec4_e
  000bc	b8 04 00 00 00	 mov	 eax, 4
  000c1	d1 e0		 shl	 eax, 1
  000c3	b9 04 00 00 00	 mov	 ecx, 4
  000c8	d1 e1		 shl	 ecx, 1
  000ca	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000cd	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000d0	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000d5	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  000da	51		 push	 ecx
  000db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e0	e8 00 00 00 00	 call	 _fabsf
  000e5	83 c4 04	 add	 esp, 4
  000e8	dd 9d 28 ff ff
	ff		 fstp	 QWORD PTR tv174[ebp]
  000ee	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  000f6	66 0f 2f 85 28
	ff ff ff	 comisd	 xmm0, QWORD PTR tv174[ebp]
  000fe	72 52		 jb	 SHORT $LN3@glm_vec4_e
  00100	b8 04 00 00 00	 mov	 eax, 4
  00105	6b c8 03	 imul	 ecx, eax, 3
  00108	ba 04 00 00 00	 mov	 edx, 4
  0010d	6b c2 03	 imul	 eax, edx, 3
  00110	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00113	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00116	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0011b	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00120	51		 push	 ecx
  00121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00126	e8 00 00 00 00	 call	 _fabsf
  0012b	83 c4 04	 add	 esp, 4
  0012e	dd 9d 20 ff ff
	ff		 fstp	 QWORD PTR tv186[ebp]
  00134	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  0013c	66 0f 2f 85 20
	ff ff ff	 comisd	 xmm0, QWORD PTR tv186[ebp]
  00144	72 0c		 jb	 SHORT $LN3@glm_vec4_e
  00146	c7 85 1c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv132[ebp], 1
  00150	eb 0a		 jmp	 SHORT $LN4@glm_vec4_e
$LN3@glm_vec4_e:
  00152	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN4@glm_vec4_e:
  0015c	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR tv132[ebp], 0
  00163	75 0c		 jne	 SHORT $LN5@glm_vec4_e
  00165	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv134[ebp], 0
  0016f	eb 0a		 jmp	 SHORT $LN6@glm_vec4_e
$LN5@glm_vec4_e:
  00171	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv134[ebp], 1
$LN6@glm_vec4_e:
  0017b	8a 85 18 ff ff
	ff		 mov	 al, BYTE PTR tv134[ebp]

; 137  :          && fabsf(a[1] - b[1]) <= GLM_FLT_EPSILON
; 138  :          && fabsf(a[2] - b[2]) <= GLM_FLT_EPSILON
; 139  :          && fabsf(a[3] - b[3]) <= GLM_FLT_EPSILON;
; 140  : }

  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	5b		 pop	 ebx
  00184	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  0018a	3b ec		 cmp	 ebp, esp
  0018c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c3		 ret	 0
_glm_vec4_eqv_eps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_eqv
_TEXT	SEGMENT
tv86 = -200						; size = 4
tv84 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec4_eqv PROC					; COMDAT

; 120  : glm_vec4_eqv(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 121  :   return a[0] == b[0]

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	0f 2e 04 06	 ucomiss xmm0, DWORD PTR [esi+eax]
  00047	9f		 lahf
  00048	f6 c4 44	 test	 ah, 68			; 00000044H
  0004b	7a 79		 jp	 SHORT $LN3@glm_vec4_e
  0004d	b8 04 00 00 00	 mov	 eax, 4
  00052	c1 e0 00	 shl	 eax, 0
  00055	b9 04 00 00 00	 mov	 ecx, 4
  0005a	c1 e1 00	 shl	 ecx, 0
  0005d	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00060	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00063	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00068	0f 2e 04 0e	 ucomiss xmm0, DWORD PTR [esi+ecx]
  0006c	9f		 lahf
  0006d	f6 c4 44	 test	 ah, 68			; 00000044H
  00070	7a 54		 jp	 SHORT $LN3@glm_vec4_e
  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	d1 e0		 shl	 eax, 1
  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	d1 e1		 shl	 ecx, 1
  00080	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00083	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  00086	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  0008b	0f 2e 04 0e	 ucomiss xmm0, DWORD PTR [esi+ecx]
  0008f	9f		 lahf
  00090	f6 c4 44	 test	 ah, 68			; 00000044H
  00093	7a 31		 jp	 SHORT $LN3@glm_vec4_e
  00095	b8 04 00 00 00	 mov	 eax, 4
  0009a	6b c8 03	 imul	 ecx, eax, 3
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	6b c2 03	 imul	 eax, edx, 3
  000a5	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  000a8	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  000ab	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  000b0	0f 2e 04 06	 ucomiss xmm0, DWORD PTR [esi+eax]
  000b4	9f		 lahf
  000b5	f6 c4 44	 test	 ah, 68			; 00000044H
  000b8	7a 0c		 jp	 SHORT $LN3@glm_vec4_e
  000ba	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv84[ebp], 1
  000c4	eb 0a		 jmp	 SHORT $LN4@glm_vec4_e
$LN3@glm_vec4_e:
  000c6	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN4@glm_vec4_e:
  000d0	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv84[ebp], 0
  000d7	75 0c		 jne	 SHORT $LN5@glm_vec4_e
  000d9	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
  000e3	eb 0a		 jmp	 SHORT $LN6@glm_vec4_e
$LN5@glm_vec4_e:
  000e5	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv86[ebp], 1
$LN6@glm_vec4_e:
  000ef	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv86[ebp]

; 122  :          && a[1] == b[1]
; 123  :          && a[2] == b[2]
; 124  :          && a[3] == b[3];
; 125  : }

  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  000fe	3b ec		 cmp	 ebp, esp
  00100	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c3		 ret	 0
_glm_vec4_eqv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_eq_all
_TEXT	SEGMENT
_v$ = 8							; size = 4
_glm_vec4_eq_all PROC					; COMDAT

; 108  : glm_vec4_eq_all(vec4 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 109  :   return glm_vec4_eq_eps(v, v[0]);

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	51		 push	 ecx
  00034	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _glm_vec4_eq_eps
  00047	83 c4 08	 add	 esp, 8

; 110  : }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
_glm_vec4_eq_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_eq_eps
_TEXT	SEGMENT
tv94 = -232						; size = 4
tv92 = -228						; size = 4
tv170 = -224						; size = 8
tv160 = -216						; size = 8
tv150 = -208						; size = 8
tv140 = -200						; size = 8
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glm_vec4_eq_eps PROC					; COMDAT

; 94   : glm_vec4_eq_eps(vec4 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 95   :   return fabsf(v[0] - val) <= GLM_FLT_EPSILON

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _val$[ebp]
  0003d	51		 push	 ecx
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	e8 00 00 00 00	 call	 _fabsf
  00048	83 c4 04	 add	 esp, 4
  0004b	dd 9d 38 ff ff
	ff		 fstp	 QWORD PTR tv140[ebp]
  00051	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00059	66 0f 2f 85 38
	ff ff ff	 comisd	 xmm0, QWORD PTR tv140[ebp]
  00061	0f 82 c0 00 00
	00		 jb	 $LN3@glm_vec4_e
  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	c1 e0 00	 shl	 eax, 0
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00072	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00077	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _val$[ebp]
  0007c	51		 push	 ecx
  0007d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00082	e8 00 00 00 00	 call	 _fabsf
  00087	83 c4 04	 add	 esp, 4
  0008a	dd 9d 30 ff ff
	ff		 fstp	 QWORD PTR tv150[ebp]
  00090	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00098	66 0f 2f 85 30
	ff ff ff	 comisd	 xmm0, QWORD PTR tv150[ebp]
  000a0	0f 82 81 00 00
	00		 jb	 $LN3@glm_vec4_e
  000a6	ba 04 00 00 00	 mov	 edx, 4
  000ab	d1 e2		 shl	 edx, 1
  000ad	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000b0	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000b5	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _val$[ebp]
  000ba	51		 push	 ecx
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	e8 00 00 00 00	 call	 _fabsf
  000c5	83 c4 04	 add	 esp, 4
  000c8	dd 9d 28 ff ff
	ff		 fstp	 QWORD PTR tv160[ebp]
  000ce	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  000d6	66 0f 2f 85 28
	ff ff ff	 comisd	 xmm0, QWORD PTR tv160[ebp]
  000de	72 47		 jb	 SHORT $LN3@glm_vec4_e
  000e0	b9 04 00 00 00	 mov	 ecx, 4
  000e5	6b d1 03	 imul	 edx, ecx, 3
  000e8	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000eb	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000f0	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _val$[ebp]
  000f5	51		 push	 ecx
  000f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fb	e8 00 00 00 00	 call	 _fabsf
  00100	83 c4 04	 add	 esp, 4
  00103	dd 9d 20 ff ff
	ff		 fstp	 QWORD PTR tv170[ebp]
  00109	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3eb0c6f7a0b5ed8d
  00111	66 0f 2f 85 20
	ff ff ff	 comisd	 xmm0, QWORD PTR tv170[ebp]
  00119	72 0c		 jb	 SHORT $LN3@glm_vec4_e
  0011b	c7 85 1c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv92[ebp], 1
  00125	eb 0a		 jmp	 SHORT $LN4@glm_vec4_e
$LN3@glm_vec4_e:
  00127	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv92[ebp], 0
$LN4@glm_vec4_e:
  00131	83 bd 1c ff ff
	ff 00		 cmp	 DWORD PTR tv92[ebp], 0
  00138	75 0c		 jne	 SHORT $LN5@glm_vec4_e
  0013a	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv94[ebp], 0
  00144	eb 0a		 jmp	 SHORT $LN6@glm_vec4_e
$LN5@glm_vec4_e:
  00146	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv94[ebp], 1
$LN6@glm_vec4_e:
  00150	8a 85 18 ff ff
	ff		 mov	 al, BYTE PTR tv94[ebp]

; 96   :          && fabsf(v[1] - val) <= GLM_FLT_EPSILON
; 97   :          && fabsf(v[2] - val) <= GLM_FLT_EPSILON
; 98   :          && fabsf(v[3] - val) <= GLM_FLT_EPSILON;
; 99   : }

  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx
  00159	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  0015f	3b ec		 cmp	 ebp, esp
  00161	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c3		 ret	 0
_glm_vec4_eq_eps ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_eq
_TEXT	SEGMENT
tv84 = -200						; size = 4
tv82 = -196						; size = 4
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glm_vec4_eq PROC					; COMDAT

; 79   : glm_vec4_eq(vec4 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00012	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :   return v[0] == val

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	0f 2e 45 0c	 ucomiss xmm0, DWORD PTR _val$[ebp]
  0003c	9f		 lahf
  0003d	f6 c4 44	 test	 ah, 68			; 00000044H
  00040	7a 7a		 jp	 SHORT $LN3@glm_vec4_e
  00042	b8 04 00 00 00	 mov	 eax, 4
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	ba 04 00 00 00	 mov	 edx, 4
  0004f	c1 e2 00	 shl	 edx, 0
  00052	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00055	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00058	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0005d	0f 2e 04 16	 ucomiss xmm0, DWORD PTR [esi+edx]
  00061	9f		 lahf
  00062	f6 c4 44	 test	 ah, 68			; 00000044H
  00065	7a 55		 jp	 SHORT $LN3@glm_vec4_e
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	6b d1 00	 imul	 edx, ecx, 0
  0006f	b8 04 00 00 00	 mov	 eax, 4
  00074	d1 e0		 shl	 eax, 1
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00079	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0007c	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00081	0f 2e 04 06	 ucomiss xmm0, DWORD PTR [esi+eax]
  00085	9f		 lahf
  00086	f6 c4 44	 test	 ah, 68			; 00000044H
  00089	7a 31		 jp	 SHORT $LN3@glm_vec4_e
  0008b	ba 04 00 00 00	 mov	 edx, 4
  00090	6b c2 00	 imul	 eax, edx, 0
  00093	b9 04 00 00 00	 mov	 ecx, 4
  00098	6b d1 03	 imul	 edx, ecx, 3
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0009e	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  000a1	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000a6	0f 2e 04 16	 ucomiss xmm0, DWORD PTR [esi+edx]
  000aa	9f		 lahf
  000ab	f6 c4 44	 test	 ah, 68			; 00000044H
  000ae	7a 0c		 jp	 SHORT $LN3@glm_vec4_e
  000b0	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv82[ebp], 1
  000ba	eb 0a		 jmp	 SHORT $LN4@glm_vec4_e
$LN3@glm_vec4_e:
  000bc	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv82[ebp], 0
$LN4@glm_vec4_e:
  000c6	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv82[ebp], 0
  000cd	75 0c		 jne	 SHORT $LN5@glm_vec4_e
  000cf	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
  000d9	eb 0a		 jmp	 SHORT $LN6@glm_vec4_e
$LN5@glm_vec4_e:
  000db	c7 85 38 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv84[ebp], 1
$LN6@glm_vec4_e:
  000e5	8a 85 38 ff ff
	ff		 mov	 al, BYTE PTR tv84[ebp]

; 81   :          && v[0] == v[1]
; 82   :          && v[0] == v[2]
; 83   :          && v[0] == v[3];
; 84   : }

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	81 c4 c8 00 00
	00		 add	 esp, 200		; 000000c8H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_glm_vec4_eq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_fill
_TEXT	SEGMENT
_v$ = 8							; size = 4
_val$ = 12						; size = 4
_glm_vec4_fill PROC					; COMDAT

; 63   : glm_vec4_fill(vec4 v, float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : #if defined( __SSE__ ) || defined( __SSE2__ )
; 65   :   glmm_store(v, _mm_set1_ps(val));

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00034	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 66   : #else
; 67   :   v[0] = v[1] = v[2] = v[3] = val;
; 68   : #endif
; 69   : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_glm_vec4_fill ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4-ext.h
;	COMDAT _glm_vec4_broadcast
_TEXT	SEGMENT
_val$ = 8						; size = 4
_d$ = 12						; size = 4
_glm_vec4_broadcast PROC				; COMDAT

; 47   : glm_vec4_broadcast(float val, vec4 d) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __878A4D53_vec4-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 48   : #if defined( __SSE__ ) || defined( __SSE2__ )
; 49   :   glmm_store(d, _mm_set1_ps(val));

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  00034	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 50   : #else
; 51   :   d[0] = d[1] = d[2] = d[3] = val;
; 52   : #endif
; 53   : }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_glm_vec4_broadcast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_min
_TEXT	SEGMENT
_min$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec3_min PROC					; COMDAT

; 154  : glm_vec3_min(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 155  :   float min;
; 156  : 
; 157  :   min = v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0

; 158  :   if (v[1] < min)

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	c1 e0 00	 shl	 eax, 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00048	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _min$[ebp]
  0004d	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  00051	76 15		 jbe	 SHORT $LN2@glm_vec3_m

; 159  :     min = v[1];

  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00063	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0
$LN2@glm_vec3_m:

; 160  :   if (v[2] < min)

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	d1 e0		 shl	 eax, 1
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00072	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _min$[ebp]
  00077	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  0007b	76 14		 jbe	 SHORT $LN3@glm_vec3_m

; 161  :     min = v[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	d1 e0		 shl	 eax, 1
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00087	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0008c	f3 0f 11 45 f8	 movss	 DWORD PTR _min$[ebp], xmm0
$LN3@glm_vec3_m:

; 162  : 
; 163  :   return min;

  00091	d9 45 f8	 fld	 DWORD PTR _min$[ebp]

; 164  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_glm_vec3_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3-ext.h
;	COMDAT _glm_vec3_max
_TEXT	SEGMENT
_max$ = -8						; size = 4
_v$ = 8							; size = 4
_glm_vec3_max PROC					; COMDAT

; 135  : glm_vec3_max(vec3 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __422D73DD_vec3-ext@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 136  :   float max;
; 137  : 
; 138  :   max = v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00033	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00038	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0

; 139  :   if (v[1] > max)

  0003d	b8 04 00 00 00	 mov	 eax, 4
  00042	c1 e0 00	 shl	 eax, 0
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00048	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0004d	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _max$[ebp]
  00051	76 15		 jbe	 SHORT $LN2@glm_vec3_m

; 140  :     max = v[1];

  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0005e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00063	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0
$LN2@glm_vec3_m:

; 141  :   if (v[2] > max)

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	d1 e0		 shl	 eax, 1
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00072	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00077	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _max$[ebp]
  0007b	76 14		 jbe	 SHORT $LN3@glm_vec3_m

; 142  :     max = v[2];

  0007d	b8 04 00 00 00	 mov	 eax, 4
  00082	d1 e0		 shl	 eax, 1
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00087	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0008c	f3 0f 11 45 f8	 movss	 DWORD PTR _max$[ebp], xmm0
$LN3@glm_vec3_m:

; 143  : 
; 144  :   return max;

  00091	d9 45 f8	 fld	 DWORD PTR _max$[ebp]

; 145  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_glm_vec3_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_smoothstep
_TEXT	SEGMENT
_t$ = -8						; size = 4
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_glm_smoothstep PROC					; COMDAT

; 247  : glm_smoothstep(float edge0, float edge1, float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 248  :   float t;
; 249  :   t = glm_clamp_zo((x - edge0) / (edge1 - edge0));

  00028	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _x$[ebp]
  0002d	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _edge0$[ebp]
  00032	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _edge1$[ebp]
  00037	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _edge0$[ebp]
  0003c	f3 0f 5e c1	 divss	 xmm0, xmm1
  00040	51		 push	 ecx
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 _glm_clamp_zo
  0004b	83 c4 04	 add	 esp, 4
  0004e	d9 5d f8	 fstp	 DWORD PTR _t$[ebp]

; 250  :   return glm_smooth(t);

  00051	51		 push	 ecx
  00052	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _t$[ebp]
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	e8 00 00 00 00	 call	 _glm_smooth
  00061	83 c4 04	 add	 esp, 4

; 251  : }

  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_glm_smoothstep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_smooth
_TEXT	SEGMENT
tv74 = -196						; size = 4
_t$ = 8							; size = 4
_glm_smooth PROC					; COMDAT

; 232  : glm_smooth(float t) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 233  :   return t * t * (3.0f - 2.0f * t);

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002d	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _t$[ebp]
  00032	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  0003a	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _t$[ebp]
  0003f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40400000
  00047	f3 0f 5c d1	 subss	 xmm2, xmm1
  0004b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0004f	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv74[ebp], xmm0
  00057	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv74[ebp]

; 234  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx
  00060	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_glm_smooth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_step
_TEXT	SEGMENT
tv65 = -196						; size = 4
_edge$ = 8						; size = 4
_x$ = 12						; size = 4
_glm_step PROC						; COMDAT

; 213  : glm_step(float edge, float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 214  :   /* branching - no type conversion */
; 215  :   return (x < edge) ? 0.0f : 1.0f;

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _edge$[ebp]
  0002d	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _x$[ebp]
  00031	76 0d		 jbe	 SHORT $LN3@glm_step
  00033	0f 57 c0	 xorps	 xmm0, xmm0
  00036	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv65[ebp], xmm0
  0003e	eb 10		 jmp	 SHORT $LN4@glm_step
$LN3@glm_step:
  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00048	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv65[ebp], xmm0
$LN4@glm_step:
  00050	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv65[ebp]

; 216  :   /*
; 217  :    * An alternative implementation without branching
; 218  :    * but with type conversion could be:
; 219  :    * return !(x < edge);
; 220  :    */
; 221  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_glm_step ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_clamp_zo
_TEXT	SEGMENT
_val$ = 8						; size = 4
_glm_clamp_zo PROC					; COMDAT

; 170  : glm_clamp_zo(float val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 171  :   return glm_clamp(val, 0.0f, 1.0f);

  00028	51		 push	 ecx
  00029	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00036	51		 push	 ecx
  00037	0f 57 c0	 xorps	 xmm0, xmm0
  0003a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003f	51		 push	 ecx
  00040	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00045	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004a	e8 00 00 00 00	 call	 _glm_clamp
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_glm_clamp_zo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_clamp
_TEXT	SEGMENT
_val$ = 8						; size = 4
_minVal$ = 12						; size = 4
_maxVal$ = 16						; size = 4
_glm_clamp PROC						; COMDAT

; 159  : glm_clamp(float val, float minVal, float maxVal) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 160  :   return glm_min(glm_max(val, minVal), maxVal);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _maxVal$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	51		 push	 ecx
  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _minVal$[ebp]
  00039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _val$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 _glm_max
  0004e	83 c4 04	 add	 esp, 4
  00051	d9 1c 24	 fstp	 DWORD PTR [esp]
  00054	e8 00 00 00 00	 call	 _glm_min
  00059	83 c4 08	 add	 esp, 8

; 161  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_glm_clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_max
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_max PROC						; COMDAT

; 144  : glm_max(float a, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  :   if (a > b)

  00028	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a$[ebp]
  0002d	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _b$[ebp]
  00031	76 05		 jbe	 SHORT $LN2@glm_max

; 146  :     return a;

  00033	d9 45 08	 fld	 DWORD PTR _a$[ebp]
  00036	eb 03		 jmp	 SHORT $LN1@glm_max
$LN2@glm_max:

; 147  :   return b;

  00038	d9 45 0c	 fld	 DWORD PTR _b$[ebp]
$LN1@glm_max:

; 148  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\util.h
;	COMDAT _glm_min
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_min PROC						; COMDAT

; 130  : glm_min(float a, float b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __8B2C0229_util@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  :   if (a < b)

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _b$[ebp]
  0002d	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _a$[ebp]
  00031	76 05		 jbe	 SHORT $LN2@glm_min

; 132  :     return a;

  00033	d9 45 08	 fld	 DWORD PTR _a$[ebp]
  00036	eb 03		 jmp	 SHORT $LN1@glm_min
$LN2@glm_min:

; 133  :   return b;

  00038	d9 45 0c	 fld	 DWORD PTR _b$[ebp]
$LN1@glm_min:

; 134  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_glm_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_norm_inf
_TEXT	SEGMENT
tv70 = -232						; size = 4
_a$ = -32						; size = 16
_glmm_norm_inf PROC					; COMDAT
; _a$ = xmm0

; 168  : glmm_norm_inf(__m128 a) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 169  :   return _mm_cvtss_f32(glmm_vhmax(glmm_abs(a)));

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00042	e8 00 00 00 00	 call	 _glmm_abs
  00047	e8 00 00 00 00	 call	 _glmm_vhmax
  0004c	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR tv70[ebp], xmm0
  00054	d9 85 18 ff ff
	ff		 fld	 DWORD PTR tv70[ebp]

; 170  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	8b e3		 mov	 esp, ebx
  00061	5b		 pop	 ebx
  00062	c3		 ret	 0
_glmm_norm_inf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_norm_one
_TEXT	SEGMENT
tv70 = -232						; size = 4
_a$ = -32						; size = 16
_glmm_norm_one PROC					; COMDAT
; _a$ = xmm0

; 162  : glmm_norm_one(__m128 a) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 163  :   return _mm_cvtss_f32(glmm_vhadds(glmm_abs(a)));

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00042	e8 00 00 00 00	 call	 _glmm_abs
  00047	e8 00 00 00 00	 call	 _glmm_vhadds
  0004c	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR tv70[ebp], xmm0
  00054	d9 85 18 ff ff
	ff		 fld	 DWORD PTR tv70[ebp]

; 164  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	8b e3		 mov	 esp, ebx
  00061	5b		 pop	 ebx
  00062	c3		 ret	 0
_glmm_norm_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_norm2
_TEXT	SEGMENT
tv71 = -232						; size = 4
_a$ = -32						; size = 16
_glmm_norm2 PROC					; COMDAT
; _a$ = xmm0

; 156  : glmm_norm2(__m128 a) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 157  :   return _mm_cvtss_f32(glmm_vhadds(_mm_mul_ps(a, a)));

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00042	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _a$[ebp]
  00046	e8 00 00 00 00	 call	 _glmm_vhadds
  0004b	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR tv71[ebp], xmm0
  00053	d9 85 18 ff ff
	ff		 fld	 DWORD PTR tv71[ebp]

; 158  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	8b e3		 mov	 esp, ebx
  00060	5b		 pop	 ebx
  00061	c3		 ret	 0
_glmm_norm2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_norm
_TEXT	SEGMENT
tv73 = -232						; size = 4
_a$ = -32						; size = 16
_glmm_norm PROC						; COMDAT
; _a$ = xmm0

; 150  : glmm_norm(__m128 a) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 151  :   return _mm_cvtss_f32(_mm_sqrt_ss(glmm_vhadds(_mm_mul_ps(a, a))));

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00042	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _a$[ebp]
  00046	e8 00 00 00 00	 call	 _glmm_vhadds
  0004b	f3 0f 51 c0	 sqrtss	 xmm0, xmm0
  0004f	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR tv73[ebp], xmm0
  00057	d9 85 18 ff ff
	ff		 fld	 DWORD PTR tv73[ebp]

; 152  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	8b e3		 mov	 esp, ebx
  00064	5b		 pop	 ebx
  00065	c3		 ret	 0
_glmm_norm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_dot
_TEXT	SEGMENT
tv69 = -264						; size = 4
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_glmm_dot PROC						; COMDAT
; _a$ = xmm0
; _b$ = xmm1

; 144  : glmm_dot(__m128 a, __m128 b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 4d c0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  :   return _mm_cvtss_f32(glmm_vdots(a, b));

  00042	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _b$[ebp]
  00046	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  0004a	e8 00 00 00 00	 call	 _glmm_vdots
  0004f	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR tv69[ebp], xmm0
  00057	d9 85 f8 fe ff
	ff		 fld	 DWORD PTR tv69[ebp]

; 146  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	8b e3		 mov	 esp, ebx
  00064	5b		 pop	 ebx
  00065	c3		 ret	 0
_glmm_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vdot
_TEXT	SEGMENT
_x0$ = -96						; size = 16
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_glmm_vdot PROC						; COMDAT
; _a$ = xmm0
; _b$ = xmm1

; 126  : glmm_vdot(__m128 a, __m128 b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 4d c0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 127  : #if (defined(__SSE4_1__) || defined(__SSE4_2__)) && defined(CGLM_SSE4_DOT)
; 128  :   return _mm_dp_ps(a, b, 0xFF);
; 129  : #elif defined(__SSE3__) && defined(CGLM_SSE3_DOT)
; 130  :   __m128 x0, x1;
; 131  :   x0 = _mm_mul_ps(a, b);
; 132  :   x1 = _mm_hadd_ps(x0, x0);
; 133  :   return _mm_hadd_ps(x1, x1);
; 134  : #else
; 135  :   __m128 x0;
; 136  :   x0 = _mm_mul_ps(a, b);

  00042	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00046	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _b$[ebp]
  0004a	0f 29 45 a0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 137  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 1, 0, 3, 2));

  0004e	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00052	0f c6 45 a0 4e	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 78 ; 0000004eH
  00057	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  0005b	0f 58 c8	 addps	 xmm1, xmm0
  0005e	0f 29 4d a0	 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 138  :   return _mm_add_ps(x0, glmm_shuff1(x0, 0, 1, 0, 1));

  00062	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00066	0f c6 45 a0 11	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 17 ; 00000011H
  0006b	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  0006f	0f 58 c8	 addps	 xmm1, xmm0
  00072	0f 28 c1	 movaps	 xmm0, xmm1

; 139  : #endif
; 140  : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	8b e3		 mov	 esp, ebx
  0007c	5b		 pop	 ebx
  0007d	c3		 ret	 0
_glmm_vdot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vdots
_TEXT	SEGMENT
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_glmm_vdots PROC					; COMDAT
; _a$ = xmm0
; _b$ = xmm1

; 111  : glmm_vdots(__m128 a, __m128 b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 4d c0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 112  : #if (defined(__SSE4_1__) || defined(__SSE4_2__)) && defined(CGLM_SSE4_DOT)
; 113  :   return _mm_dp_ps(a, b, 0xFF);
; 114  : #elif defined(__SSE3__) && defined(CGLM_SSE3_DOT)
; 115  :   __m128 x0, x1;
; 116  :   x0 = _mm_mul_ps(a, b);
; 117  :   x1 = _mm_hadd_ps(x0, x0);
; 118  :   return _mm_hadd_ps(x1, x1);
; 119  : #else
; 120  :   return glmm_vhadds(_mm_mul_ps(a, b));

  00042	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00046	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _b$[ebp]
  0004a	e8 00 00 00 00	 call	 _glmm_vhadds

; 121  : #endif
; 122  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	8b e3		 mov	 esp, ebx
  00056	5b		 pop	 ebx
  00057	c3		 ret	 0
_glmm_vdots ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vhmax
_TEXT	SEGMENT
_x2$ = -128						; size = 16
_x1$ = -96						; size = 16
_x0$ = -64						; size = 16
_v$ = -32						; size = 16
_glmm_vhmax PROC					; COMDAT
; _v$ = xmm0

; 95   : glmm_vhmax(__m128 v) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd b8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-328]
  00024	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _v$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 96   :   __m128 x0, x1, x2;
; 97   :   x0 = _mm_movehl_ps(v, v);     /* [2, 3, 2, 3] */

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  00042	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _v$[ebp]
  00046	0f 12 c8	 movhlps xmm1, xmm0
  00049	0f 29 4d c0	 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 98   :   x1 = _mm_max_ps(x0, v);       /* [0|2, 1|3, 2|2, 3|3] */

  0004d	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00051	0f 5f 45 e0	 maxps	 xmm0, XMMWORD PTR _v$[ebp]
  00055	0f 29 45 a0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 99   :   x2 = glmm_shuff1x(x1, 1);     /* [1|3, 1|3, 1|3, 1|3] */

  00059	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0005d	0f c6 45 a0 55	 shufps	 xmm0, XMMWORD PTR _x1$[ebp], 85 ; 00000055H
  00062	0f 29 45 80	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 100  :   return _mm_max_ss(x1, x2);

  00066	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0006a	f3 0f 5f 45 80	 maxss	 xmm0, XMMWORD PTR _x2$[ebp]

; 101  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	8b e3		 mov	 esp, ebx
  00076	5b		 pop	 ebx
  00077	c3		 ret	 0
_glmm_vhmax ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_hadd
_TEXT	SEGMENT
tv68 = -232						; size = 4
_v$ = -32						; size = 16
_glmm_hadd PROC						; COMDAT
; _v$ = xmm0

; 73   : glmm_hadd(__m128 v) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _v$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   return _mm_cvtss_f32(glmm_vhadds(v));

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  00042	e8 00 00 00 00	 call	 _glmm_vhadds
  00047	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR tv68[ebp], xmm0
  0004f	d9 85 18 ff ff
	ff		 fld	 DWORD PTR tv68[ebp]

; 75   : }

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	8b e3		 mov	 esp, ebx
  0005c	5b		 pop	 ebx
  0005d	c3		 ret	 0
_glmm_hadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vhadds
_TEXT	SEGMENT
_sums$ = -96						; size = 16
_shuf$ = -64						; size = 16
_v$ = -32						; size = 16
_glmm_vhadds PROC					; COMDAT
; _v$ = xmm0

; 53   : glmm_vhadds(__m128 v) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _v$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 54   : #if defined(__SSE3__)
; 55   :   __m128 shuf, sums;
; 56   :   shuf = _mm_movehdup_ps(v);
; 57   :   sums = _mm_add_ps(v, shuf);
; 58   :   shuf = _mm_movehl_ps(shuf, sums);
; 59   :   sums = _mm_add_ss(sums, shuf);
; 60   :   return sums;
; 61   : #else
; 62   :   __m128 shuf, sums;
; 63   :   shuf = glmm_shuff1(v, 2, 3, 0, 1);

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  00042	0f c6 45 e0 b1	 shufps	 xmm0, XMMWORD PTR _v$[ebp], 177 ; 000000b1H
  00047	0f 29 45 c0	 movaps	 XMMWORD PTR _shuf$[ebp], xmm0

; 64   :   sums = _mm_add_ps(v, shuf);

  0004b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  0004f	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _shuf$[ebp]
  00053	0f 29 45 a0	 movaps	 XMMWORD PTR _sums$[ebp], xmm0

; 65   :   shuf = _mm_movehl_ps(shuf, sums);

  00057	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]
  0005b	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _shuf$[ebp]
  0005f	0f 12 c8	 movhlps xmm1, xmm0
  00062	0f 29 4d c0	 movaps	 XMMWORD PTR _shuf$[ebp], xmm1

; 66   :   sums = _mm_add_ss(sums, shuf);

  00066	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]
  0006a	f3 0f 58 45 c0	 addss	 xmm0, XMMWORD PTR _shuf$[ebp]
  0006f	0f 29 45 a0	 movaps	 XMMWORD PTR _sums$[ebp], xmm0

; 67   :   return sums;

  00073	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]

; 68   : #endif
; 69   : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	8b e3		 mov	 esp, ebx
  0007e	5b		 pop	 ebx
  0007f	c3		 ret	 0
_glmm_vhadds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_abs
_TEXT	SEGMENT
_x$ = -32						; size = 16
_glmm_abs PROC						; COMDAT
; _x$ = xmm0

; 47   : glmm_abs(__m128 x) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 48   :   return _mm_andnot_ps(_mm_set1_ps(-0.0f), x);

  0003e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@80000000800000008000000080000000
  00045	0f 55 45 e0	 andnps	 xmm0, XMMWORD PTR _x$[ebp]

; 49   : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	8b e3		 mov	 esp, ebx
  00050	5b		 pop	 ebx
  00051	c3		 ret	 0
_glmm_abs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv74 = -196						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 685  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 686  :             return (float)floor(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	8b f4		 mov	 esi, esp
  0002f	83 ec 08	 sub	 esp, 8
  00032	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  0003d	83 c4 08	 add	 esp, 8
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv74[ebp]
  0004d	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv74[ebp]

; 687  :         }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 671  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 672  :             return (float)fabs(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _fabs
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 673  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
END
