; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__D164993B_x86@h DB 01H
__51BD2C42_util@h DB 01H
__34F2E310_vec2-ext@h DB 01H
__83360300_vec2@h DB 01H
__9285E8A4_vec3-ext@h DB 01H
__5722D62A_vec4-ext@h DB 01H
__87BB7FB2_vec4@h DB 01H
__82F46937_vec3@h DB 01H
__6C51F661_mat4@h DB 01H
__D6E4440C_mat4@h DB 01H
__691EE0E4_mat3@h DB 01H
__D3AB5289_mat3@h DB 01H
__68DC8AD3_mat2@h DB 01H
__D26938BE_mat2@h DB 01H
__EF0FC99D_affine@h DB 01H
__8C09B87C_affine-mat@h DB 01H
__1A33B462_affine@h DB 01H
__26C2D243_plane@h DB 01H
__B1B2DC28_cam@h DB 01H
__26922CBA_frustum@h DB 01H
__9A782FAE_quat@h DB 01H
__20CD9DC3_quat@h DB 01H
__0105C43C_euler@h DB 01H
__76E0E330_box@h DB 01H
__AF25309F_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__98FD395E_io@h DB 01H
__253AA91C_project@h DB 01H
__C5964F96_sphere@h DB 01H
__CA1EBA5F_ease@h DB 01H
__E6C09561_curve@h DB 01H
__1F285908_bezier@h DB 01H
__F71D69B6_ray@h DB 01H
__C07C9586_affine2d@h DB 01H
__3F8BA224_vec3@h DB 01H
__3AC4B4A1_vec4@h DB 01H
__04B25E81_mat2@c DB 01H
msvcjmc	ENDS
PUBLIC	_glm_vec2_dot
PUBLIC	_glm_vec4_ucopy
PUBLIC	_glm_mat2_mul_sse2
PUBLIC	_glm_mat2_transp_sse2
PUBLIC	_glm_mat2_copy
PUBLIC	_glm_mat2_identity
PUBLIC	_glm_mat2_identity_array
PUBLIC	_glm_mat2_zero
PUBLIC	_glm_mat2_mul
PUBLIC	_glm_mat2_transpose_to
PUBLIC	_glm_mat2_transpose
PUBLIC	_glm_mat2_mulv
PUBLIC	_glm_mat2_trace
PUBLIC	_glm_mat2_scale
PUBLIC	_glm_mat2_det
PUBLIC	_glm_mat2_inv
PUBLIC	_glm_mat2_swap_col
PUBLIC	_glm_mat2_swap_row
PUBLIC	_glm_mat2_rmc
PUBLIC	_glmc_mat2_copy
PUBLIC	_glmc_mat2_identity
PUBLIC	_glmc_mat2_identity_array
PUBLIC	_glmc_mat2_zero
PUBLIC	_glmc_mat2_mul
PUBLIC	_glmc_mat2_transpose_to
PUBLIC	_glmc_mat2_transpose
PUBLIC	_glmc_mat2_mulv
PUBLIC	_glmc_mat2_trace
PUBLIC	_glmc_mat2_scale
PUBLIC	_glmc_mat2_det
PUBLIC	_glmc_mat2_inv
PUBLIC	_glmc_mat2_swap_col
PUBLIC	_glmc_mat2_swap_row
PUBLIC	_glmc_mat2_rmc
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_rmc
_TEXT	SEGMENT
_r$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glmc_mat2_rmc PROC					; COMDAT

; 97   : glmc_mat2_rmc(vec2 r, mat2 m, vec2 c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 98   :   return glm_mat2_rmc(r, m, c);

  00028	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat2_rmc
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 99   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat2_rmc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_swap_row
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_row1$ = 12						; size = 4
_row2$ = 16						; size = 4
_glmc_mat2_swap_row PROC				; COMDAT

; 91   : glmc_mat2_swap_row(mat2 mat, int row1, int row2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 92   :   glm_mat2_swap_row(mat, row1, row2);

  00028	8b 45 10	 mov	 eax, DWORD PTR _row2$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _row1$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _mat$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat2_swap_row
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 93   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat2_swap_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_swap_col
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_col1$ = 12						; size = 4
_col2$ = 16						; size = 4
_glmc_mat2_swap_col PROC				; COMDAT

; 85   : glmc_mat2_swap_col(mat2 mat, int col1, int col2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 86   :   glm_mat2_swap_col(mat, col1, col2);

  00028	8b 45 10	 mov	 eax, DWORD PTR _col2$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _col1$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _mat$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat2_swap_col
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 87   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat2_swap_col ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_inv
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat2_inv PROC					; COMDAT

; 79   : glmc_mat2_inv(mat2 mat, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :   glm_mat2_inv(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat2_inv
  00035	83 c4 08	 add	 esp, 8

; 81   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat2_inv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_det
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat2_det PROC					; COMDAT

; 73   : glmc_mat2_det(mat2 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   return glm_mat2_det(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat2_det
  00031	83 c4 04	 add	 esp, 4

; 75   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat2_det ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_scale
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glmc_mat2_scale PROC					; COMDAT

; 67   : glmc_mat2_scale(mat2 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   :   glm_mat2_scale(m, s);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_mat2_scale
  0003c	83 c4 08	 add	 esp, 8

; 69   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_mat2_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_trace
_TEXT	SEGMENT
_m$ = 8							; size = 4
_glmc_mat2_trace PROC					; COMDAT

; 61   : glmc_mat2_trace(mat2 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   return glm_mat2_trace(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat2_trace
  00031	83 c4 04	 add	 esp, 4

; 63   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat2_trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_mulv
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_mat2_mulv PROC					; COMDAT

; 55   : glmc_mat2_mulv(mat2 m, vec2 v, vec2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   glm_mat2_mulv(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat2_mulv
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 57   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat2_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_transpose
_TEXT	SEGMENT
_m$ = 8							; size = 4
_glmc_mat2_transpose PROC				; COMDAT

; 49   : glmc_mat2_transpose(mat2 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   glm_mat2_transpose(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat2_transpose
  00031	83 c4 04	 add	 esp, 4

; 51   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat2_transpose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_transpose_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_mat2_transpose_to PROC				; COMDAT

; 43   : glmc_mat2_transpose_to(mat2 m, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 44   :   glm_mat2_transpose_to(m, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat2_transpose_to
  00035	83 c4 08	 add	 esp, 8

; 45   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat2_transpose_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_mul
_TEXT	SEGMENT
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_mat2_mul PROC					; COMDAT

; 37   : glmc_mat2_mul(mat2 m1, mat2 m2, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   glm_mat2_mul(m1, m2, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m2$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m1$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat2_mul
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 39   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat2_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_zero
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat2_zero PROC					; COMDAT

; 31   : glmc_mat2_zero(mat2 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   glm_mat2_zero(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat2_zero
  00031	83 c4 04	 add	 esp, 4

; 33   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat2_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_identity_array
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_count$ = 12						; size = 4
_glmc_mat2_identity_array PROC				; COMDAT

; 25   : glmc_mat2_identity_array(mat2 * __restrict mat, size_t count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_mat2_identity_array(mat, count);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _count$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat2_identity_array
  00035	83 c4 08	 add	 esp, 8

; 27   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat2_identity_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_identity
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat2_identity PROC				; COMDAT

; 19   : glmc_mat2_identity(mat2 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_mat2_identity(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat2_identity
  00031	83 c4 04	 add	 esp, 4

; 21   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat2_identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\mat2.c
;	COMDAT _glmc_mat2_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat2_copy PROC					; COMDAT

; 13   : glmc_mat2_copy(mat2 mat, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __04B25E81_mat2@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_mat2_copy(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat2_copy
  00035	83 c4 08	 add	 esp, 8

; 15   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat2_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_rmc
_TEXT	SEGMENT
_tmp$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glm_mat2_rmc PROC					; COMDAT

; 325  : glm_mat2_rmc(vec2 r, mat2 m, vec2 c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00012	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 326  :   vec2 tmp;
; 327  :   glm_mat2_mulv(m, c, tmp);

  00032	8d 45 f0	 lea	 eax, DWORD PTR _tmp$[ebp]
  00035	50		 push	 eax
  00036	8b 4d 10	 mov	 ecx, DWORD PTR _c$[ebp]
  00039	51		 push	 ecx
  0003a	8b 55 0c	 mov	 edx, DWORD PTR _m$[ebp]
  0003d	52		 push	 edx
  0003e	e8 00 00 00 00	 call	 _glm_mat2_mulv
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 328  :   return glm_vec2_dot(r, tmp);

  00046	8d 45 f0	 lea	 eax, DWORD PTR _tmp$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _glm_vec2_dot
  00053	83 c4 08	 add	 esp, 8

; 329  : }

  00056	52		 push	 edx
  00057	8b cd		 mov	 ecx, ebp
  00059	50		 push	 eax
  0005a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat2_r
  00060	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00065	58		 pop	 eax
  00066	5a		 pop	 edx
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	33 cd		 xor	 ecx, ebp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
  00085	0f 1f 00	 npad	 3
$LN5@glm_mat2_r:
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN4@glm_mat2_r
$LN4@glm_mat2_r:
  00090	f0 ff ff ff	 DD	 -16			; fffffff0H
  00094	08 00 00 00	 DD	 8
  00098	00 00 00 00	 DD	 $LN3@glm_mat2_r
$LN3@glm_mat2_r:
  0009c	74		 DB	 116			; 00000074H
  0009d	6d		 DB	 109			; 0000006dH
  0009e	70		 DB	 112			; 00000070H
  0009f	00		 DB	 0
_glm_mat2_rmc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_swap_row
_TEXT	SEGMENT
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_mat$ = 8						; size = 4
_row1$ = 12						; size = 4
_row2$ = 16						; size = 4
_glm_mat2_swap_row PROC					; COMDAT

; 296  : glm_mat2_swap_row(mat2 mat, int row1, int row2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 297  :   float a, b;
; 298  : 
; 299  :   a = mat[0][row1];

  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  00036	f3 0f 10 04 91	 movss	 xmm0, DWORD PTR [ecx+edx*4]
  0003b	f3 0f 11 45 f8	 movss	 DWORD PTR _a$[ebp], xmm0

; 300  :   b = mat[1][row1];

  00040	b8 08 00 00 00	 mov	 eax, 8
  00045	c1 e0 00	 shl	 eax, 0
  00048	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _row1$[ebp]
  0004e	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  00053	f3 0f 11 45 ec	 movss	 DWORD PTR _b$[ebp], xmm0

; 301  : 
; 302  :   mat[0][row1] = mat[0][row2];

  00058	b8 08 00 00 00	 mov	 eax, 8
  0005d	6b c8 00	 imul	 ecx, eax, 0
  00060	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	6b c2 00	 imul	 eax, edx, 0
  0006b	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  00071	8b 75 10	 mov	 esi, DWORD PTR _row2$[ebp]
  00074	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  00077	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 303  :   mat[1][row1] = mat[1][row2];

  0007a	b8 08 00 00 00	 mov	 eax, 8
  0007f	c1 e0 00	 shl	 eax, 0
  00082	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00085	b9 08 00 00 00	 mov	 ecx, 8
  0008a	c1 e1 00	 shl	 ecx, 0
  0008d	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00090	8b 55 0c	 mov	 edx, DWORD PTR _row1$[ebp]
  00093	8b 75 10	 mov	 esi, DWORD PTR _row2$[ebp]
  00096	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00099	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 304  : 
; 305  :   mat[0][row2] = a;

  0009c	b8 08 00 00 00	 mov	 eax, 8
  000a1	6b c8 00	 imul	 ecx, eax, 0
  000a4	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  000a7	8b 55 10	 mov	 edx, DWORD PTR _row2$[ebp]
  000aa	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _a$[ebp]
  000af	f3 0f 11 04 91	 movss	 DWORD PTR [ecx+edx*4], xmm0

; 306  :   mat[1][row2] = b;

  000b4	b8 08 00 00 00	 mov	 eax, 8
  000b9	c1 e0 00	 shl	 eax, 0
  000bc	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000bf	8b 4d 10	 mov	 ecx, DWORD PTR _row2$[ebp]
  000c2	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _b$[ebp]
  000c7	f3 0f 11 04 88	 movss	 DWORD PTR [eax+ecx*4], xmm0

; 307  : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000d5	3b ec		 cmp	 ebp, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
_glm_mat2_swap_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_swap_col
_TEXT	SEGMENT
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_mat$ = 8						; size = 4
_col1$ = 12						; size = 4
_col2$ = 16						; size = 4
_glm_mat2_swap_col PROC					; COMDAT

; 274  : glm_mat2_swap_col(mat2 mat, int col1, int col2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 275  :   float a, b;
; 276  : 
; 277  :   a = mat[col1][0];

  00028	8b 45 0c	 mov	 eax, DWORD PTR _col1$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002e	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00031	b8 04 00 00 00	 mov	 eax, 4
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0003e	f3 0f 11 45 f8	 movss	 DWORD PTR _a$[ebp], xmm0

; 278  :   b = mat[col1][1];

  00043	8b 45 0c	 mov	 eax, DWORD PTR _col1$[ebp]
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  00049	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  0004c	b8 04 00 00 00	 mov	 eax, 4
  00051	c1 e0 00	 shl	 eax, 0
  00054	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00059	f3 0f 11 45 ec	 movss	 DWORD PTR _b$[ebp], xmm0

; 279  : 
; 280  :   mat[col1][0] = mat[col2][0];

  0005e	8b 45 10	 mov	 eax, DWORD PTR _col2$[ebp]
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  00064	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	6b c8 00	 imul	 ecx, eax, 0
  0006f	8b 45 0c	 mov	 eax, DWORD PTR _col1$[ebp]
  00072	8b 75 08	 mov	 esi, DWORD PTR _mat$[ebp]
  00075	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  00078	be 04 00 00 00	 mov	 esi, 4
  0007d	6b f6 00	 imul	 esi, esi, 0
  00080	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00083	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 281  :   mat[col1][1] = mat[col2][1];

  00086	8b 45 10	 mov	 eax, DWORD PTR _col2$[ebp]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0008c	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  0008f	b8 04 00 00 00	 mov	 eax, 4
  00094	c1 e0 00	 shl	 eax, 0
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _col1$[ebp]
  0009a	8b 75 08	 mov	 esi, DWORD PTR _mat$[ebp]
  0009d	8d 0c ce	 lea	 ecx, DWORD PTR [esi+ecx*8]
  000a0	be 04 00 00 00	 mov	 esi, 4
  000a5	c1 e6 00	 shl	 esi, 0
  000a8	8b 14 02	 mov	 edx, DWORD PTR [edx+eax]
  000ab	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 282  : 
; 283  :   mat[col2][0] = a;

  000ae	8b 45 10	 mov	 eax, DWORD PTR _col2$[ebp]
  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  000b4	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  000b7	b8 04 00 00 00	 mov	 eax, 4
  000bc	6b c8 00	 imul	 ecx, eax, 0
  000bf	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _a$[ebp]
  000c4	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 284  :   mat[col2][1] = b;

  000c9	8b 45 10	 mov	 eax, DWORD PTR _col2$[ebp]
  000cc	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  000cf	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  000d2	b8 04 00 00 00	 mov	 eax, 4
  000d7	c1 e0 00	 shl	 eax, 0
  000da	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _b$[ebp]
  000df	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 285  : }

  000e4	5f		 pop	 edi
  000e5	5e		 pop	 esi
  000e6	5b		 pop	 ebx
  000e7	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
_glm_mat2_swap_col ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_inv
_TEXT	SEGMENT
_d$ = -56						; size = 4
_c$ = -44						; size = 4
_b$ = -32						; size = 4
_a$ = -20						; size = 4
_det$ = -8						; size = 4
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat2_inv PROC					; COMDAT

; 252  : glm_mat2_inv(mat2 mat, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 253  :   float det;
; 254  :   float a = mat[0][0], b = mat[0][1],

  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 11 45 ec	 movss	 DWORD PTR _a$[ebp], xmm0
  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	6b c8 00	 imul	 ecx, eax, 0
  0004d	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00050	ba 04 00 00 00	 mov	 edx, 4
  00055	c1 e2 00	 shl	 edx, 0
  00058	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0005d	f3 0f 11 45 e0	 movss	 DWORD PTR _b$[ebp], xmm0

; 255  :         c = mat[1][0], d = mat[1][1];

  00062	b8 08 00 00 00	 mov	 eax, 8
  00067	c1 e0 00	 shl	 eax, 0
  0006a	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006d	b9 04 00 00 00	 mov	 ecx, 4
  00072	6b d1 00	 imul	 edx, ecx, 0
  00075	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0007a	f3 0f 11 45 d4	 movss	 DWORD PTR _c$[ebp], xmm0
  0007f	b8 08 00 00 00	 mov	 eax, 8
  00084	c1 e0 00	 shl	 eax, 0
  00087	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0008a	b9 04 00 00 00	 mov	 ecx, 4
  0008f	c1 e1 00	 shl	 ecx, 0
  00092	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00097	f3 0f 11 45 c8	 movss	 DWORD PTR _d$[ebp], xmm0

; 256  : 
; 257  :   det = 1.0f / (a * d - b * c);

  0009c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _a$[ebp]
  000a1	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _d$[ebp]
  000a6	f3 0f 10 4d e0	 movss	 xmm1, DWORD PTR _b$[ebp]
  000ab	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _c$[ebp]
  000b0	f3 0f 5c c1	 subss	 xmm0, xmm1
  000b4	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  000bc	f3 0f 5e c8	 divss	 xmm1, xmm0
  000c0	f3 0f 11 4d f8	 movss	 DWORD PTR _det$[ebp], xmm1

; 258  : 
; 259  :   dest[0][0] =  d * det;

  000c5	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _d$[ebp]
  000ca	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _det$[ebp]
  000cf	b8 08 00 00 00	 mov	 eax, 8
  000d4	6b c8 00	 imul	 ecx, eax, 0
  000d7	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  000da	ba 04 00 00 00	 mov	 edx, 4
  000df	6b c2 00	 imul	 eax, edx, 0
  000e2	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 260  :   dest[0][1] = -b * det;

  000e7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _b$[ebp]
  000ec	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000f3	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _det$[ebp]
  000f8	b8 08 00 00 00	 mov	 eax, 8
  000fd	6b c8 00	 imul	 ecx, eax, 0
  00100	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00103	ba 04 00 00 00	 mov	 edx, 4
  00108	c1 e2 00	 shl	 edx, 0
  0010b	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 261  :   dest[1][0] = -c * det;

  00110	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _c$[ebp]
  00115	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0011c	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _det$[ebp]
  00121	b8 08 00 00 00	 mov	 eax, 8
  00126	c1 e0 00	 shl	 eax, 0
  00129	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 00	 imul	 edx, ecx, 0
  00134	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 262  :   dest[1][1] =  a * det;

  00139	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _a$[ebp]
  0013e	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _det$[ebp]
  00143	b8 08 00 00 00	 mov	 eax, 8
  00148	c1 e0 00	 shl	 eax, 0
  0014b	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0014e	b9 04 00 00 00	 mov	 ecx, 4
  00153	c1 e1 00	 shl	 ecx, 0
  00156	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 263  : }

  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx
  0015e	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00164	3b ec		 cmp	 ebp, esp
  00166	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016b	8b e5		 mov	 esp, ebp
  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
_glm_mat2_inv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_det
_TEXT	SEGMENT
tv95 = -196						; size = 4
_mat$ = 8						; size = 4
_glm_mat2_det PROC					; COMDAT

; 240  : glm_mat2_det(mat2 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 241  :   return mat[0][0] * mat[1][1] - mat[1][0] * mat[0][1];

  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 08 00 00 00	 mov	 edx, 8
  00040	c1 e2 00	 shl	 edx, 0
  00043	03 55 08	 add	 edx, DWORD PTR _mat$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	c1 e6 00	 shl	 esi, 0
  0004e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00053	f3 0f 59 04 32	 mulss	 xmm0, DWORD PTR [edx+esi]
  00058	b8 08 00 00 00	 mov	 eax, 8
  0005d	c1 e0 00	 shl	 eax, 0
  00060	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00063	b9 04 00 00 00	 mov	 ecx, 4
  00068	6b d1 00	 imul	 edx, ecx, 0
  0006b	b9 08 00 00 00	 mov	 ecx, 8
  00070	6b c9 00	 imul	 ecx, ecx, 0
  00073	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00076	be 04 00 00 00	 mov	 esi, 4
  0007b	c1 e6 00	 shl	 esi, 0
  0007e	f3 0f 10 0c 10	 movss	 xmm1, DWORD PTR [eax+edx]
  00083	f3 0f 59 0c 31	 mulss	 xmm1, DWORD PTR [ecx+esi]
  00088	f3 0f 5c c1	 subss	 xmm0, xmm1
  0008c	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv95[ebp], xmm0
  00094	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv95[ebp]

; 242  : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_glm_mat2_det ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_scale
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glm_mat2_scale PROC					; COMDAT

; 218  : glm_mat2_scale(mat2 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 219  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 220  :   glmm_store(m[0], _mm_mul_ps(_mm_loadu_ps(m[0]), _mm_set1_ps(s)));

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	b8 08 00 00 00	 mov	 eax, 8
  00036	6b c8 00	 imul	 ecx, eax, 0
  00039	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0003c	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  0003f	0f 59 c8	 mulps	 xmm1, xmm0
  00042	ba 08 00 00 00	 mov	 edx, 8
  00047	6b c2 00	 imul	 eax, edx, 0
  0004a	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0004d	0f 11 08	 movups	 XMMWORD PTR [eax], xmm1

; 221  : #elif defined(CGLM_NEON_FP)
; 222  :   vst1q_f32(m[0], vmulq_f32(vld1q_f32(m[0]), vdupq_n_f32(s)));
; 223  : #else
; 224  :   m[0][0] = m[0][0] * s;
; 225  :   m[0][1] = m[0][1] * s;
; 226  :   m[1][0] = m[1][0] * s;
; 227  :   m[1][1] = m[1][1] * s;
; 228  : #endif
; 229  : }

  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_glm_mat2_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_trace
_TEXT	SEGMENT
tv80 = -196						; size = 4
_m$ = 8							; size = 4
_glm_mat2_trace PROC					; COMDAT

; 204  : glm_mat2_trace(mat2 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 205  :   return m[0][0] + m[1][1];

  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 08 00 00 00	 mov	 edx, 8
  00040	c1 e2 00	 shl	 edx, 0
  00043	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	c1 e6 00	 shl	 esi, 0
  0004e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00053	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  00058	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv80[ebp], xmm0
  00060	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv80[ebp]

; 206  : }

  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_glm_mat2_trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_mulv
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat2_mulv PROC					; COMDAT

; 190  : glm_mat2_mulv(mat2 m, vec2 v, vec2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 191  :   dest[0] = m[0][0] * v[0] + m[1][0] * v[1];

  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 04 00 00 00	 mov	 edx, 4
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00046	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0004b	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	c1 e0 00	 shl	 eax, 0
  00058	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	6b d1 00	 imul	 edx, ecx, 0
  00063	b9 04 00 00 00	 mov	 ecx, 4
  00068	c1 e1 00	 shl	 ecx, 0
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0006e	f3 0f 10 0c 10	 movss	 xmm1, DWORD PTR [eax+edx]
  00073	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00078	f3 0f 58 c1	 addss	 xmm0, xmm1
  0007c	ba 04 00 00 00	 mov	 edx, 4
  00081	6b c2 00	 imul	 eax, edx, 0
  00084	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  00087	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 192  :   dest[1] = m[0][1] * v[0] + m[1][1] * v[1];

  0008c	b8 08 00 00 00	 mov	 eax, 8
  00091	6b c8 00	 imul	 ecx, eax, 0
  00094	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00097	ba 04 00 00 00	 mov	 edx, 4
  0009c	c1 e2 00	 shl	 edx, 0
  0009f	b8 04 00 00 00	 mov	 eax, 4
  000a4	6b c0 00	 imul	 eax, eax, 0
  000a7	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000aa	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000af	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  000b4	b9 08 00 00 00	 mov	 ecx, 8
  000b9	c1 e1 00	 shl	 ecx, 0
  000bc	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000bf	ba 04 00 00 00	 mov	 edx, 4
  000c4	c1 e2 00	 shl	 edx, 0
  000c7	b8 04 00 00 00	 mov	 eax, 4
  000cc	c1 e0 00	 shl	 eax, 0
  000cf	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000d2	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  000d7	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  000dc	f3 0f 58 c1	 addss	 xmm0, xmm1
  000e0	b9 04 00 00 00	 mov	 ecx, 4
  000e5	c1 e1 00	 shl	 ecx, 0
  000e8	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  000eb	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 193  : }

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000f9	3b ec		 cmp	 ebp, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
_glm_mat2_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_transpose
_TEXT	SEGMENT
_tmp$ = -8						; size = 4
_m$ = 8							; size = 4
_glm_mat2_transpose PROC				; COMDAT

; 174  : glm_mat2_transpose(mat2 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 175  :   float tmp;
; 176  :   tmp     = m[0][1];

  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	c1 e2 00	 shl	 edx, 0
  0003b	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _tmp$[ebp], xmm0

; 177  :   m[0][1] = m[1][0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	6b d1 00	 imul	 edx, ecx, 0
  00058	b9 08 00 00 00	 mov	 ecx, 8
  0005d	6b c9 00	 imul	 ecx, ecx, 0
  00060	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00063	be 04 00 00 00	 mov	 esi, 4
  00068	c1 e6 00	 shl	 esi, 0
  0006b	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0006e	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 178  :   m[1][0] = tmp;

  00071	b8 08 00 00 00	 mov	 eax, 8
  00076	c1 e0 00	 shl	 eax, 0
  00079	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0007c	b9 04 00 00 00	 mov	 ecx, 4
  00081	6b d1 00	 imul	 edx, ecx, 0
  00084	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _tmp$[ebp]
  00089	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 179  : }

  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
_glm_mat2_transpose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_transpose_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_mat2_transpose_to PROC				; COMDAT

; 156  : glm_mat2_transpose_to(mat2 m, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 157  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 158  :   glm_mat2_transp_sse2(m, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat2_transp_sse2
  00035	83 c4 08	 add	 esp, 8

; 159  : #else
; 160  :   dest[0][0] = m[0][0];
; 161  :   dest[0][1] = m[1][0];
; 162  :   dest[1][0] = m[0][1];
; 163  :   dest[1][1] = m[1][1];
; 164  : #endif
; 165  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_mat2_transpose_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_mul
_TEXT	SEGMENT
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat2_mul PROC					; COMDAT

; 130  : glm_mat2_mul(mat2 m1, mat2 m2, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 132  :   glm_mat2_mul_sse2(m1, m2, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m2$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m1$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat2_mul_sse2
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 133  : #else
; 134  :   float a00 = m1[0][0], a01 = m1[0][1],
; 135  :         a10 = m1[1][0], a11 = m1[1][1],
; 136  :         b00 = m2[0][0], b01 = m2[0][1],
; 137  :         b10 = m2[1][0], b11 = m2[1][1];
; 138  : 
; 139  :   dest[0][0] = a00 * b00 + a10 * b01;
; 140  :   dest[0][1] = a01 * b00 + a11 * b01;
; 141  :   dest[1][0] = a00 * b10 + a10 * b11;
; 142  :   dest[1][1] = a01 * b10 + a11 * b11;
; 143  : #endif
; 144  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glm_mat2_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_zero
_TEXT	SEGMENT
_t$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat2_zero PROC					; COMDAT

; 109  : glm_mat2_zero(mat2 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  :   CGLM_ALIGN_MAT mat2 t = GLM_MAT2_ZERO_INIT;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp], xmm0
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+12], xmm0

; 111  :   glm_mat2_copy(t, mat);

  00064	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  00067	50		 push	 eax
  00068	8d 4d e0	 lea	 ecx, DWORD PTR _t$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _glm_mat2_copy
  00071	83 c4 08	 add	 esp, 8

; 112  : }

  00074	52		 push	 edx
  00075	8b cd		 mov	 ecx, ebp
  00077	50		 push	 eax
  00078	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat2_z
  0007e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00083	58		 pop	 eax
  00084	5a		 pop	 edx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008a	33 cd		 xor	 ecx, ebp
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	8b e3		 mov	 esp, ebx
  00096	5b		 pop	 ebx
  00097	c3		 ret	 0
$LN5@glm_mat2_z:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN4@glm_mat2_z
$LN4@glm_mat2_z:
  000a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000a4	10 00 00 00	 DD	 16			; 00000010H
  000a8	00 00 00 00	 DD	 $LN3@glm_mat2_z
$LN3@glm_mat2_z:
  000ac	74		 DB	 116			; 00000074H
  000ad	00		 DB	 0
_glm_mat2_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_identity_array
_TEXT	SEGMENT
_i$ = -44						; size = 4
_t$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_count$ = 12						; size = 4
_glm_mat2_identity_array PROC				; COMDAT

; 93   : glm_mat2_identity_array(mat2 * __restrict mat, size_t count) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00024	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 94   :   CGLM_ALIGN_MAT mat2 t = GLM_MAT2_IDENTITY_INIT;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp], xmm0
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00069	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+12], xmm0

; 95   :   size_t i;
; 96   : 
; 97   :   for (i = 0; i < count; i++) {

  0006e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00075	eb 09		 jmp	 SHORT $LN4@glm_mat2_i
$LN2@glm_mat2_i:
  00077	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  0007a	83 c0 01	 add	 eax, 1
  0007d	89 45 d4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_mat2_i:
  00080	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  00083	3b 43 0c	 cmp	 eax, DWORD PTR _count$[ebx]
  00086	73 18		 jae	 SHORT $LN3@glm_mat2_i

; 98   :     glm_mat2_copy(t, mat[i]);

  00088	8b 45 d4	 mov	 eax, DWORD PTR _i$[ebp]
  0008b	c1 e0 04	 shl	 eax, 4
  0008e	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00091	50		 push	 eax
  00092	8d 4d e0	 lea	 ecx, DWORD PTR _t$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 _glm_mat2_copy
  0009b	83 c4 08	 add	 esp, 8

; 99   :   }

  0009e	eb d7		 jmp	 SHORT $LN2@glm_mat2_i
$LN3@glm_mat2_i:

; 100  : }

  000a0	52		 push	 edx
  000a1	8b cd		 mov	 ecx, ebp
  000a3	50		 push	 eax
  000a4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@glm_mat2_i
  000aa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000af	58		 pop	 eax
  000b0	5a		 pop	 edx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	8b e3		 mov	 esp, ebx
  000c2	5b		 pop	 ebx
  000c3	c3		 ret	 0
$LN8@glm_mat2_i:
  000c4	01 00 00 00	 DD	 1
  000c8	00 00 00 00	 DD	 $LN7@glm_mat2_i
$LN7@glm_mat2_i:
  000cc	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000d0	10 00 00 00	 DD	 16			; 00000010H
  000d4	00 00 00 00	 DD	 $LN6@glm_mat2_i
$LN6@glm_mat2_i:
  000d8	74		 DB	 116			; 00000074H
  000d9	00		 DB	 0
_glm_mat2_identity_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_identity
_TEXT	SEGMENT
_t$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat2_identity PROC					; COMDAT

; 78   : glm_mat2_identity(mat2 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :   CGLM_ALIGN_MAT mat2 t = GLM_MAT2_IDENTITY_INIT;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp], xmm0
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00069	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+12], xmm0

; 80   :   glm_mat2_copy(t, mat);

  0006e	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  00071	50		 push	 eax
  00072	8d 4d e0	 lea	 ecx, DWORD PTR _t$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 _glm_mat2_copy
  0007b	83 c4 08	 add	 esp, 8

; 81   : }

  0007e	52		 push	 edx
  0007f	8b cd		 mov	 ecx, ebp
  00081	50		 push	 eax
  00082	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat2_i
  00088	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008d	58		 pop	 eax
  0008e	5a		 pop	 edx
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	8b e3		 mov	 esp, ebx
  000a0	5b		 pop	 ebx
  000a1	c3		 ret	 0
  000a2	66 90		 npad	 2
$LN5@glm_mat2_i:
  000a4	01 00 00 00	 DD	 1
  000a8	00 00 00 00	 DD	 $LN4@glm_mat2_i
$LN4@glm_mat2_i:
  000ac	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000b0	10 00 00 00	 DD	 16			; 00000010H
  000b4	00 00 00 00	 DD	 $LN3@glm_mat2_i
$LN3@glm_mat2_i:
  000b8	74		 DB	 116			; 00000074H
  000b9	00		 DB	 0
_glm_mat2_identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat2.h
;	COMDAT _glm_mat2_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat2_copy PROC					; COMDAT

; 58   : glm_mat2_copy(mat2 mat, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D26938BE_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 59   :   glm_vec4_ucopy(mat[0], dest[0]);

  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00033	51		 push	 ecx
  00034	ba 08 00 00 00	 mov	 edx, 8
  00039	6b c2 00	 imul	 eax, edx, 0
  0003c	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 _glm_vec4_ucopy
  00045	83 c4 08	 add	 esp, 8

; 60   : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_glm_mat2_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\simd\sse2\mat2.h
;	COMDAT _glm_mat2_transp_sse2
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_mat2_transp_sse2 PROC				; COMDAT

; 38   : glm_mat2_transp_sse2(mat2 m, mat2 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __68DC8AD3_mat2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   :   /* d c b a */
; 40   :   /* d b c a */
; 41   :   glmm_store(dest[0], glmm_shuff1(glmm_load(m[0]), 3, 1, 2, 0));

  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 08 00 00 00	 mov	 edx, 8
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0003e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00041	0f c6 01 d8	 shufps	 xmm0, XMMWORD PTR [ecx], 216 ; 000000d8H
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	6b d1 00	 imul	 edx, ecx, 0
  0004d	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00050	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 42   : }

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
_glm_mat2_transp_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\simd\sse2\mat2.h
;	COMDAT _glm_mat2_mul_sse2
_TEXT	SEGMENT
_x2$ = -96						; size = 16
_x1$ = -64						; size = 16
_x0$ = -32						; size = 16
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat2_mul_sse2 PROC					; COMDAT

; 17   : glm_mat2_mul_sse2(mat2 m1, mat2 m2, mat2 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __68DC8AD3_mat2@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 18   :   __m128 x0, x1, x2;
; 19   : 
; 20   :   x1 = glmm_load(m1[0]); /* d c b a */

  0003a	b8 08 00 00 00	 mov	 eax, 8
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _m1$[ebx]
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 21   :   x2 = glmm_load(m2[0]); /* h g f e */

  0004c	b8 08 00 00 00	 mov	 eax, 8
  00051	6b c8 00	 imul	 ecx, eax, 0
  00054	03 4b 0c	 add	 ecx, DWORD PTR _m2$[ebx]
  00057	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0005a	0f 29 45 a0	 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 22   : 
; 23   :   /*
; 24   :    dest[0][0] = a * e + c * f;
; 25   :    dest[0][1] = b * e + d * f;
; 26   :    dest[1][0] = a * g + c * h;
; 27   :    dest[1][1] = b * g + d * h;
; 28   :    */
; 29   :   x0 = _mm_mul_ps(_mm_movelh_ps(x1, x1), glmm_shuff1(x2, 2, 2, 0, 0));

  0005e	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  00062	0f c6 45 a0 a0	 shufps	 xmm0, XMMWORD PTR _x2$[ebp], 160 ; 000000a0H
  00067	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _x1$[ebp]
  0006b	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _x1$[ebp]
  0006f	0f 16 d1	 movlhps xmm2, xmm1
  00072	0f 59 d0	 mulps	 xmm2, xmm0
  00075	0f 29 55 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm2

; 30   :   x1 = _mm_mul_ps(_mm_movehl_ps(x1, x1), glmm_shuff1(x2, 3, 3, 1, 1));

  00079	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0007d	0f c6 45 a0 f5	 shufps	 xmm0, XMMWORD PTR _x2$[ebp], 245 ; 000000f5H
  00082	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _x1$[ebp]
  00086	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _x1$[ebp]
  0008a	0f 12 d1	 movhlps xmm2, xmm1
  0008d	0f 59 d0	 mulps	 xmm2, xmm0
  00090	0f 29 55 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm2

; 31   :   x1 = _mm_add_ps(x0, x1);

  00094	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00098	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _x1$[ebp]
  0009c	0f 29 45 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 32   : 
; 33   :   glmm_store(dest[0], x1);

  000a0	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000a4	b8 08 00 00 00	 mov	 eax, 8
  000a9	6b c8 00	 imul	 ecx, eax, 0
  000ac	03 4b 10	 add	 ecx, DWORD PTR _dest$[ebx]
  000af	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 34   : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	8b e3		 mov	 esp, ebx
  000b9	5b		 pop	 ebx
  000ba	c3		 ret	 0
_glm_mat2_mul_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec4.h
;	COMDAT _glm_vec4_ucopy
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_ucopy PROC					; COMDAT

; 162  : glm_vec4_ucopy(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __87BB7FB2_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 163  :   dest[0] = v[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 164  :   dest[1] = v[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 165  :   dest[2] = v[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 166  :   dest[3] = v[3];

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	ba 04 00 00 00	 mov	 edx, 4
  00087	6b c2 03	 imul	 eax, edx, 3
  0008a	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0008d	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  00090	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00093	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 167  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_vec4_ucopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\vec2.h
;	COMDAT _glm_vec2_dot
_TEXT	SEGMENT
tv87 = -196						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec2_dot PROC					; COMDAT

; 124  : glm_vec2_dot(vec2 a, vec2 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __83360300_vec2@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 125  :   return a[0] * b[0] + a[1] * b[1];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0003e	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  00043	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	c1 e0 00	 shl	 eax, 0
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	c1 e1 00	 shl	 ecx, 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0005b	8b 75 0c	 mov	 esi, DWORD PTR _b$[ebp]
  0005e	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  00063	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00068	f3 0f 58 c1	 addss	 xmm0, xmm1
  0006c	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv87[ebp], xmm0
  00074	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv87[ebp]

; 126  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec2_dot ENDP
_TEXT	ENDS
END
