; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__EB8E9F1A_mat4@c DB 01H
msvcjmc	ENDS
PUBLIC	_sqrtf
PUBLIC	_glm_vec4
PUBLIC	_glm_vec4_copy
PUBLIC	_glm_vec4_dot
PUBLIC	_glm_vec3
PUBLIC	_glm_mat4_scale_sse2
PUBLIC	_glm_mat4_transp_sse2
PUBLIC	_glm_mat4_mul_sse2
PUBLIC	_glm_mat4_mulv_sse2
PUBLIC	_glm_mat4_det_sse2
PUBLIC	_glm_mat4_inv_fast_sse2
PUBLIC	_glm_mat4_inv_sse2
PUBLIC	_glm_mat4_copy
PUBLIC	_glm_mat4_identity
PUBLIC	_glm_mat4_identity_array
PUBLIC	_glm_mat4_zero
PUBLIC	_glm_mat4_pick3
PUBLIC	_glm_mat4_pick3t
PUBLIC	_glm_mat4_ins3
PUBLIC	_glm_mat4_mul
PUBLIC	_glm_mat4_mulN
PUBLIC	_glm_mat4_mulv
PUBLIC	_glm_mat4_trace
PUBLIC	_glm_mat4_trace3
PUBLIC	_glm_mat4_quat
PUBLIC	_glm_mat4_mulv3
PUBLIC	_glm_mat4_transpose_to
PUBLIC	_glm_mat4_transpose
PUBLIC	_glm_mat4_scale_p
PUBLIC	_glm_mat4_scale
PUBLIC	_glm_mat4_det
PUBLIC	_glm_mat4_inv
PUBLIC	_glm_mat4_inv_fast
PUBLIC	_glm_mat4_swap_col
PUBLIC	_glm_mat4_swap_row
PUBLIC	_glm_mat4_rmc
PUBLIC	_glmc_mat4_ucopy
PUBLIC	_glmc_mat4_copy
PUBLIC	_glmc_mat4_identity
PUBLIC	_glmc_mat4_identity_array
PUBLIC	_glmc_mat4_zero
PUBLIC	_glmc_mat4_pick3
PUBLIC	_glmc_mat4_pick3t
PUBLIC	_glmc_mat4_ins3
PUBLIC	_glmc_mat4_mul
PUBLIC	_glmc_mat4_mulN
PUBLIC	_glmc_mat4_mulv
PUBLIC	_glmc_mat4_mulv3
PUBLIC	_glmc_mat4_trace
PUBLIC	_glmc_mat4_trace3
PUBLIC	_glmc_mat4_quat
PUBLIC	_glmc_mat4_transpose_to
PUBLIC	_glmc_mat4_transpose
PUBLIC	_glmc_mat4_scale_p
PUBLIC	_glmc_mat4_scale
PUBLIC	_glmc_mat4_det
PUBLIC	_glmc_mat4_inv
PUBLIC	_glmc_mat4_inv_precise
PUBLIC	_glmc_mat4_inv_fast
PUBLIC	_glmc_mat4_swap_col
PUBLIC	_glmc_mat4_swap_row
PUBLIC	_glmc_mat4_rmc
PUBLIC	__JustMyCode_Default
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@00000000800000000000000080000000
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	_sqrt:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@00000000800000000000000080000000
CONST	SEGMENT
__xmm@00000000800000000000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_rmc
_TEXT	SEGMENT
_r$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glmc_mat4_rmc PROC					; COMDAT

; 163  : glmc_mat4_rmc(vec4 r, mat4 m, vec4 c) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 164  :   return glm_mat4_rmc(r, m, c);

  00028	8b 45 10	 mov	 eax, DWORD PTR _c$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_rmc
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 165  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat4_rmc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_swap_row
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_row1$ = 12						; size = 4
_row2$ = 16						; size = 4
_glmc_mat4_swap_row PROC				; COMDAT

; 157  : glmc_mat4_swap_row(mat4 mat, int row1, int row2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 158  :   glm_mat4_swap_row(mat, row1, row2);

  00028	8b 45 10	 mov	 eax, DWORD PTR _row2$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _row1$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _mat$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_swap_row
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 159  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat4_swap_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_swap_col
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_col1$ = 12						; size = 4
_col2$ = 16						; size = 4
_glmc_mat4_swap_col PROC				; COMDAT

; 151  : glmc_mat4_swap_col(mat4 mat, int col1, int col2) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 152  :   glm_mat4_swap_col(mat, col1, col2);

  00028	8b 45 10	 mov	 eax, DWORD PTR _col2$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _col1$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _mat$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_swap_col
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 153  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat4_swap_col ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_inv_fast
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_inv_fast PROC				; COMDAT

; 145  : glmc_mat4_inv_fast(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :   glm_mat4_inv_fast(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_inv_fast
  00035	83 c4 08	 add	 esp, 8

; 147  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_inv_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_inv_precise
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_inv_precise PROC				; COMDAT

; 139  : glmc_mat4_inv_precise(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  :   glm_mat4_inv_precise(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_inv
  00035	83 c4 08	 add	 esp, 8

; 141  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_inv_precise ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_inv
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_inv PROC					; COMDAT

; 133  : glmc_mat4_inv(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 134  :   glm_mat4_inv(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_inv
  00035	83 c4 08	 add	 esp, 8

; 135  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_inv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_det
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat4_det PROC					; COMDAT

; 127  : glmc_mat4_det(mat4 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 128  :   return glm_mat4_det(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_det
  00031	83 c4 04	 add	 esp, 4

; 129  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat4_det ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_scale
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glmc_mat4_scale PROC					; COMDAT

; 121  : glmc_mat4_scale(mat4 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 122  :   glm_mat4_scale(m, s);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_mat4_scale
  0003c	83 c4 08	 add	 esp, 8

; 123  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_mat4_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_scale_p
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glmc_mat4_scale_p PROC					; COMDAT

; 115  : glmc_mat4_scale_p(mat4 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 116  :   glm_mat4_scale_p(m, s);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_mat4_scale_p
  0003c	83 c4 08	 add	 esp, 8

; 117  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_mat4_scale_p ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_transpose
_TEXT	SEGMENT
_m$ = 8							; size = 4
_glmc_mat4_transpose PROC				; COMDAT

; 109  : glmc_mat4_transpose(mat4 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  :   glm_mat4_transpose(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_transpose
  00031	83 c4 04	 add	 esp, 4

; 111  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat4_transpose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_transpose_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_transpose_to PROC				; COMDAT

; 103  : glmc_mat4_transpose_to(mat4 m, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 104  :   glm_mat4_transpose_to(m, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_transpose_to
  00035	83 c4 08	 add	 esp, 8

; 105  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_transpose_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_quat
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_quat PROC					; COMDAT

; 97   : glmc_mat4_quat(mat4 m, versor dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 98   :   glm_mat4_quat(m, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_quat
  00035	83 c4 08	 add	 esp, 8

; 99   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_quat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_trace3
_TEXT	SEGMENT
_m$ = 8							; size = 4
_glmc_mat4_trace3 PROC					; COMDAT

; 91   : glmc_mat4_trace3(mat4 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 92   :   return glm_mat4_trace3(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_trace3
  00031	83 c4 04	 add	 esp, 4

; 93   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat4_trace3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_trace
_TEXT	SEGMENT
_m$ = 8							; size = 4
_glmc_mat4_trace PROC					; COMDAT

; 85   : glmc_mat4_trace(mat4 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 86   :   return glm_mat4_trace(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_trace
  00031	83 c4 04	 add	 esp, 4

; 87   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat4_trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_mulv3
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_last$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_mat4_mulv3 PROC					; COMDAT

; 79   : glmc_mat4_mulv3(mat4 m, vec3 v, float last, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :   glm_mat4_mulv3(m, v, last, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _last$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _glm_mat4_mulv3
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 81   : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_glmc_mat4_mulv3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_mulv
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_mat4_mulv PROC					; COMDAT

; 73   : glmc_mat4_mulv(mat4 m, vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   glm_mat4_mulv(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_mulv
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 75   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat4_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_mulN
_TEXT	SEGMENT
_matrices$ = 8						; size = 4
_len$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_mat4_mulN PROC					; COMDAT

; 67   : glmc_mat4_mulN(mat4 * __restrict matrices[], uint32_t len, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   :   glm_mat4_mulN(matrices, len, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _matrices$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_mulN
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 69   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat4_mulN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_mul
_TEXT	SEGMENT
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_mat4_mul PROC					; COMDAT

; 61   : glmc_mat4_mul(mat4 m1, mat4 m2, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   glm_mat4_mul(m1, m2, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m2$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m1$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_mul
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_mat4_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_ins3
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_ins3 PROC					; COMDAT

; 55   : glmc_mat4_ins3(mat3 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   glm_mat4_ins3(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_ins3
  00035	83 c4 08	 add	 esp, 8

; 57   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_ins3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_pick3t
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_pick3t PROC					; COMDAT

; 49   : glmc_mat4_pick3t(mat4 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   glm_mat4_pick3t(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_pick3t
  00035	83 c4 08	 add	 esp, 8

; 51   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_pick3t ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_pick3
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_pick3 PROC					; COMDAT

; 43   : glmc_mat4_pick3(mat4 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 44   :   glm_mat4_pick3(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_pick3
  00035	83 c4 08	 add	 esp, 8

; 45   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_pick3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_zero
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat4_zero PROC					; COMDAT

; 37   : glmc_mat4_zero(mat4 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   glm_mat4_zero(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_zero
  00031	83 c4 04	 add	 esp, 4

; 39   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_identity_array
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_count$ = 12						; size = 4
_glmc_mat4_identity_array PROC				; COMDAT

; 31   : glmc_mat4_identity_array(mat4 * __restrict mat, size_t count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   glm_mat4_identity_array(mat, count);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _count$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_identity_array
  00035	83 c4 08	 add	 esp, 8

; 33   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_identity_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_identity
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glmc_mat4_identity PROC				; COMDAT

; 25   : glmc_mat4_identity(mat4 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_mat4_identity(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_identity
  00031	83 c4 04	 add	 esp, 4

; 27   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glmc_mat4_identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_copy PROC					; COMDAT

; 19   : glmc_mat4_copy(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_mat4_copy(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_copy
  00035	83 c4 08	 add	 esp, 8

; 21   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\mat4.c
;	COMDAT _glmc_mat4_ucopy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glmc_mat4_ucopy PROC					; COMDAT

; 13   : glmc_mat4_ucopy(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __EB8E9F1A_mat4@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_mat4_copy(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_copy
  00035	83 c4 08	 add	 esp, 8

; 15   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_mat4_ucopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_rmc
_TEXT	SEGMENT
_tmp$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_r$ = 8							; size = 4
_m$ = 12						; size = 4
_c$ = 16						; size = 4
_glm_mat4_rmc PROC					; COMDAT

; 721  : glm_mat4_rmc(vec4 r, mat4 m, vec4 c) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 722  :   vec4 tmp;
; 723  :   glm_mat4_mulv(m, c, tmp);

  00044	8d 45 e0	 lea	 eax, DWORD PTR _tmp$[ebp]
  00047	50		 push	 eax
  00048	8b 4b 10	 mov	 ecx, DWORD PTR _c$[ebx]
  0004b	51		 push	 ecx
  0004c	8b 53 0c	 mov	 edx, DWORD PTR _m$[ebx]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 _glm_mat4_mulv
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 724  :   return glm_vec4_dot(r, tmp);

  00058	8d 45 e0	 lea	 eax, DWORD PTR _tmp$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4b 08	 mov	 ecx, DWORD PTR _r$[ebx]
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 _glm_vec4_dot
  00065	83 c4 08	 add	 esp, 8

; 725  : }

  00068	52		 push	 edx
  00069	8b cd		 mov	 ecx, ebp
  0006b	50		 push	 eax
  0006c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_r
  00072	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00077	58		 pop	 eax
  00078	5a		 pop	 edx
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007e	33 cd		 xor	 ecx, ebp
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	8b e3		 mov	 esp, ebx
  0008a	5b		 pop	 ebx
  0008b	c3		 ret	 0
$LN5@glm_mat4_r:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN4@glm_mat4_r
$LN4@glm_mat4_r:
  00094	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00098	10 00 00 00	 DD	 16			; 00000010H
  0009c	00 00 00 00	 DD	 $LN3@glm_mat4_r
$LN3@glm_mat4_r:
  000a0	74		 DB	 116			; 00000074H
  000a1	6d		 DB	 109			; 0000006dH
  000a2	70		 DB	 112			; 00000070H
  000a3	00		 DB	 0
_glm_mat4_rmc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_swap_row
_TEXT	SEGMENT
_tmp$ = -32						; size = 16
_mat$ = 8						; size = 4
_row1$ = 12						; size = 4
_row2$ = 16						; size = 4
_glm_mat4_swap_row PROC					; COMDAT

; 687  : glm_mat4_swap_row(mat4 mat, int row1, int row2) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 688  :   CGLM_ALIGN(16) vec4 tmp;
; 689  :   tmp[0] = mat[0][row1];

  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  00045	ba 04 00 00 00	 mov	 edx, 4
  0004a	6b c2 00	 imul	 eax, edx, 0
  0004d	8b 53 0c	 mov	 edx, DWORD PTR _row1$[ebx]
  00050	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00053	89 4c 05 e0	 mov	 DWORD PTR _tmp$[ebp+eax], ecx

; 690  :   tmp[1] = mat[1][row1];

  00057	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0005c	c1 e0 00	 shl	 eax, 0
  0005f	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	c1 e1 00	 shl	 ecx, 0
  0006a	8b 53 0c	 mov	 edx, DWORD PTR _row1$[ebx]
  0006d	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00070	89 44 0d e0	 mov	 DWORD PTR _tmp$[ebp+ecx], eax

; 691  :   tmp[2] = mat[2][row1];

  00074	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00079	d1 e0		 shl	 eax, 1
  0007b	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  0007e	b9 04 00 00 00	 mov	 ecx, 4
  00083	d1 e1		 shl	 ecx, 1
  00085	8b 53 0c	 mov	 edx, DWORD PTR _row1$[ebx]
  00088	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0008b	89 44 0d e0	 mov	 DWORD PTR _tmp$[ebp+ecx], eax

; 692  :   tmp[3] = mat[3][row1];

  0008f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00094	6b c8 03	 imul	 ecx, eax, 3
  00097	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	6b c2 03	 imul	 eax, edx, 3
  000a2	8b 53 0c	 mov	 edx, DWORD PTR _row1$[ebx]
  000a5	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  000a8	89 4c 05 e0	 mov	 DWORD PTR _tmp$[ebp+eax], ecx

; 693  : 
; 694  :   mat[0][row1] = mat[0][row2];

  000ac	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000b1	6b c8 00	 imul	 ecx, eax, 0
  000b4	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  000b7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000bc	6b c2 00	 imul	 eax, edx, 0
  000bf	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  000c2	8b 53 0c	 mov	 edx, DWORD PTR _row1$[ebx]
  000c5	8b 73 10	 mov	 esi, DWORD PTR _row2$[ebx]
  000c8	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  000cb	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 695  :   mat[1][row1] = mat[1][row2];

  000ce	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d3	c1 e0 00	 shl	 eax, 0
  000d6	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  000d9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000de	c1 e1 00	 shl	 ecx, 0
  000e1	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  000e4	8b 53 0c	 mov	 edx, DWORD PTR _row1$[ebx]
  000e7	8b 73 10	 mov	 esi, DWORD PTR _row2$[ebx]
  000ea	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  000ed	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 696  :   mat[2][row1] = mat[2][row2];

  000f0	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000f5	d1 e0		 shl	 eax, 1
  000f7	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  000fa	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ff	d1 e1		 shl	 ecx, 1
  00101	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  00104	8b 53 0c	 mov	 edx, DWORD PTR _row1$[ebx]
  00107	8b 73 10	 mov	 esi, DWORD PTR _row2$[ebx]
  0010a	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  0010d	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 697  :   mat[3][row1] = mat[3][row2];

  00110	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00115	6b c8 03	 imul	 ecx, eax, 3
  00118	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  0011b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00120	6b c2 03	 imul	 eax, edx, 3
  00123	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00126	8b 53 0c	 mov	 edx, DWORD PTR _row1$[ebx]
  00129	8b 73 10	 mov	 esi, DWORD PTR _row2$[ebx]
  0012c	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  0012f	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 698  : 
; 699  :   mat[0][row2] = tmp[0];

  00132	b8 04 00 00 00	 mov	 eax, 4
  00137	6b c8 00	 imul	 ecx, eax, 0
  0013a	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0013f	6b c2 00	 imul	 eax, edx, 0
  00142	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00145	8b 53 10	 mov	 edx, DWORD PTR _row2$[ebx]
  00148	8b 4c 0d e0	 mov	 ecx, DWORD PTR _tmp$[ebp+ecx]
  0014c	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 700  :   mat[1][row2] = tmp[1];

  0014f	b8 04 00 00 00	 mov	 eax, 4
  00154	c1 e0 00	 shl	 eax, 0
  00157	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0015c	c1 e1 00	 shl	 ecx, 0
  0015f	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  00162	8b 53 10	 mov	 edx, DWORD PTR _row2$[ebx]
  00165	8b 44 05 e0	 mov	 eax, DWORD PTR _tmp$[ebp+eax]
  00169	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 701  :   mat[2][row2] = tmp[2];

  0016c	b8 04 00 00 00	 mov	 eax, 4
  00171	d1 e0		 shl	 eax, 1
  00173	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00178	d1 e1		 shl	 ecx, 1
  0017a	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  0017d	8b 53 10	 mov	 edx, DWORD PTR _row2$[ebx]
  00180	8b 44 05 e0	 mov	 eax, DWORD PTR _tmp$[ebp+eax]
  00184	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 702  :   mat[3][row2] = tmp[3];

  00187	b8 04 00 00 00	 mov	 eax, 4
  0018c	6b c8 03	 imul	 ecx, eax, 3
  0018f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00194	6b c2 03	 imul	 eax, edx, 3
  00197	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  0019a	8b 53 10	 mov	 edx, DWORD PTR _row2$[ebx]
  0019d	8b 4c 0d e0	 mov	 ecx, DWORD PTR _tmp$[ebp+ecx]
  001a1	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 703  : }

  001a4	52		 push	 edx
  001a5	8b cd		 mov	 ecx, ebp
  001a7	50		 push	 eax
  001a8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_s
  001ae	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001b3	58		 pop	 eax
  001b4	5a		 pop	 edx
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi
  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	8b e3		 mov	 esp, ebx
  001bc	5b		 pop	 ebx
  001bd	c3		 ret	 0
  001be	66 90		 npad	 2
$LN5@glm_mat4_s:
  001c0	01 00 00 00	 DD	 1
  001c4	00 00 00 00	 DD	 $LN4@glm_mat4_s
$LN4@glm_mat4_s:
  001c8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001cc	10 00 00 00	 DD	 16			; 00000010H
  001d0	00 00 00 00	 DD	 $LN3@glm_mat4_s
$LN3@glm_mat4_s:
  001d4	74		 DB	 116			; 00000074H
  001d5	6d		 DB	 109			; 0000006dH
  001d6	70		 DB	 112			; 00000070H
  001d7	00		 DB	 0
_glm_mat4_swap_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_swap_col
_TEXT	SEGMENT
_tmp$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_col1$ = 12						; size = 4
_col2$ = 16						; size = 4
_glm_mat4_swap_col PROC					; COMDAT

; 671  : glm_mat4_swap_col(mat4 mat, int col1, int col2) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 672  :   CGLM_ALIGN(16) vec4 tmp;
; 673  :   glm_vec4_copy(mat[col1], tmp);

  00044	8d 45 e0	 lea	 eax, DWORD PTR _tmp$[ebp]
  00047	50		 push	 eax
  00048	8b 4b 0c	 mov	 ecx, DWORD PTR _col1$[ebx]
  0004b	c1 e1 04	 shl	 ecx, 4
  0004e	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _glm_vec4_copy
  00057	83 c4 08	 add	 esp, 8

; 674  :   glm_vec4_copy(mat[col2], mat[col1]);

  0005a	8b 43 0c	 mov	 eax, DWORD PTR _col1$[ebx]
  0005d	c1 e0 04	 shl	 eax, 4
  00060	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00063	50		 push	 eax
  00064	8b 4b 10	 mov	 ecx, DWORD PTR _col2$[ebx]
  00067	c1 e1 04	 shl	 ecx, 4
  0006a	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 _glm_vec4_copy
  00073	83 c4 08	 add	 esp, 8

; 675  :   glm_vec4_copy(tmp, mat[col2]);

  00076	8b 43 10	 mov	 eax, DWORD PTR _col2$[ebx]
  00079	c1 e0 04	 shl	 eax, 4
  0007c	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  0007f	50		 push	 eax
  00080	8d 4d e0	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 _glm_vec4_copy
  00089	83 c4 08	 add	 esp, 8

; 676  : }

  0008c	52		 push	 edx
  0008d	8b cd		 mov	 ecx, ebp
  0008f	50		 push	 eax
  00090	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_s
  00096	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009b	58		 pop	 eax
  0009c	5a		 pop	 edx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	8b e3		 mov	 esp, ebx
  000ae	5b		 pop	 ebx
  000af	c3		 ret	 0
$LN5@glm_mat4_s:
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN4@glm_mat4_s
$LN4@glm_mat4_s:
  000b8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000bc	10 00 00 00	 DD	 16			; 00000010H
  000c0	00 00 00 00	 DD	 $LN3@glm_mat4_s
$LN3@glm_mat4_s:
  000c4	74		 DB	 116			; 00000074H
  000c5	6d		 DB	 109			; 0000006dH
  000c6	70		 DB	 112			; 00000070H
  000c7	00		 DB	 0
_glm_mat4_swap_col ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_inv_fast
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_inv_fast PROC					; COMDAT

; 654  : glm_mat4_inv_fast(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 655  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 656  :   glm_mat4_inv_fast_sse2(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_inv_fast_sse2
  00035	83 c4 08	 add	 esp, 8

; 657  : #else
; 658  :   glm_mat4_inv(mat, dest);
; 659  : #endif
; 660  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_mat4_inv_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_inv
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_inv PROC					; COMDAT

; 593  : glm_mat4_inv(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 594  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 595  :   glm_mat4_inv_sse2(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_inv_sse2
  00035	83 c4 08	 add	 esp, 8

; 596  : #else
; 597  :   float t[6];
; 598  :   float det;
; 599  :   float a = mat[0][0], b = mat[0][1], c = mat[0][2], d = mat[0][3],
; 600  :         e = mat[1][0], f = mat[1][1], g = mat[1][2], h = mat[1][3],
; 601  :         i = mat[2][0], j = mat[2][1], k = mat[2][2], l = mat[2][3],
; 602  :         m = mat[3][0], n = mat[3][1], o = mat[3][2], p = mat[3][3];
; 603  : 
; 604  :   t[0] = k * p - o * l; t[1] = j * p - n * l; t[2] = j * o - n * k;
; 605  :   t[3] = i * p - m * l; t[4] = i * o - m * k; t[5] = i * n - m * j;
; 606  : 
; 607  :   dest[0][0] =  f * t[0] - g * t[1] + h * t[2];
; 608  :   dest[1][0] =-(e * t[0] - g * t[3] + h * t[4]);
; 609  :   dest[2][0] =  e * t[1] - f * t[3] + h * t[5];
; 610  :   dest[3][0] =-(e * t[2] - f * t[4] + g * t[5]);
; 611  : 
; 612  :   dest[0][1] =-(b * t[0] - c * t[1] + d * t[2]);
; 613  :   dest[1][1] =  a * t[0] - c * t[3] + d * t[4];
; 614  :   dest[2][1] =-(a * t[1] - b * t[3] + d * t[5]);
; 615  :   dest[3][1] =  a * t[2] - b * t[4] + c * t[5];
; 616  : 
; 617  :   t[0] = g * p - o * h; t[1] = f * p - n * h; t[2] = f * o - n * g;
; 618  :   t[3] = e * p - m * h; t[4] = e * o - m * g; t[5] = e * n - m * f;
; 619  : 
; 620  :   dest[0][2] =  b * t[0] - c * t[1] + d * t[2];
; 621  :   dest[1][2] =-(a * t[0] - c * t[3] + d * t[4]);
; 622  :   dest[2][2] =  a * t[1] - b * t[3] + d * t[5];
; 623  :   dest[3][2] =-(a * t[2] - b * t[4] + c * t[5]);
; 624  : 
; 625  :   t[0] = g * l - k * h; t[1] = f * l - j * h; t[2] = f * k - j * g;
; 626  :   t[3] = e * l - i * h; t[4] = e * k - i * g; t[5] = e * j - i * f;
; 627  : 
; 628  :   dest[0][3] =-(b * t[0] - c * t[1] + d * t[2]);
; 629  :   dest[1][3] =  a * t[0] - c * t[3] + d * t[4];
; 630  :   dest[2][3] =-(a * t[1] - b * t[3] + d * t[5]);
; 631  :   dest[3][3] =  a * t[2] - b * t[4] + c * t[5];
; 632  : 
; 633  :   det = 1.0f / (a * dest[0][0] + b * dest[1][0]
; 634  :               + c * dest[2][0] + d * dest[3][0]);
; 635  : 
; 636  :   glm_mat4_scale_p(dest, det);
; 637  : #endif
; 638  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_mat4_inv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_det
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_glm_mat4_det PROC					; COMDAT

; 560  : glm_mat4_det(mat4 mat) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 561  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 562  :   return glm_mat4_det_sse2(mat);

  00028	8b 45 08	 mov	 eax, DWORD PTR _mat$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat4_det_sse2
  00031	83 c4 04	 add	 esp, 4

; 563  : #else
; 564  :   /* [square] det(A) = det(At) */
; 565  :   float t[6];
; 566  :   float a = mat[0][0], b = mat[0][1], c = mat[0][2], d = mat[0][3],
; 567  :         e = mat[1][0], f = mat[1][1], g = mat[1][2], h = mat[1][3],
; 568  :         i = mat[2][0], j = mat[2][1], k = mat[2][2], l = mat[2][3],
; 569  :         m = mat[3][0], n = mat[3][1], o = mat[3][2], p = mat[3][3];
; 570  : 
; 571  :   t[0] = k * p - o * l;
; 572  :   t[1] = j * p - n * l;
; 573  :   t[2] = j * o - n * k;
; 574  :   t[3] = i * p - m * l;
; 575  :   t[4] = i * o - m * k;
; 576  :   t[5] = i * n - m * j;
; 577  : 
; 578  :   return a * (f * t[0] - g * t[1] + h * t[2])
; 579  :        - b * (e * t[0] - g * t[3] + h * t[4])
; 580  :        + c * (e * t[1] - f * t[3] + h * t[5])
; 581  :        - d * (e * t[2] - f * t[4] + g * t[5]);
; 582  : #endif
; 583  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glm_mat4_det ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_scale
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glm_mat4_scale PROC					; COMDAT

; 541  : glm_mat4_scale(mat4 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 542  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 543  :   glm_mat4_scale_sse2(m, s);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_mat4_scale_sse2
  0003c	83 c4 08	 add	 esp, 8

; 544  : #elif defined(CGLM_NEON_FP)
; 545  :   glm_mat4_scale_neon(m, s);
; 546  : #else
; 547  :   glm_mat4_scale_p(m, s);
; 548  : #endif
; 549  : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glm_mat4_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_scale_p
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glm_mat4_scale_p PROC					; COMDAT

; 524  : glm_mat4_scale_p(mat4 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 525  :   m[0][0] *= s; m[0][1] *= s; m[0][2] *= s; m[0][3] *= s;

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00045	b9 04 00 00 00	 mov	 ecx, 4
  0004a	6b d1 00	 imul	 edx, ecx, 0
  0004d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00052	6b c8 00	 imul	 ecx, eax, 0
  00055	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00058	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0
  0005d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00062	6b c8 00	 imul	 ecx, eax, 0
  00065	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00068	ba 04 00 00 00	 mov	 edx, 4
  0006d	c1 e2 00	 shl	 edx, 0
  00070	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00075	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	c1 e0 00	 shl	 eax, 0
  00082	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00087	6b d1 00	 imul	 edx, ecx, 0
  0008a	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0008d	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0
  00092	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	d1 e2		 shl	 edx, 1
  000a4	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000a9	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  000ae	b8 04 00 00 00	 mov	 eax, 4
  000b3	d1 e0		 shl	 eax, 1
  000b5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ba	6b d1 00	 imul	 edx, ecx, 0
  000bd	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000c0	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0
  000c5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ca	6b c8 00	 imul	 ecx, eax, 0
  000cd	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000d0	ba 04 00 00 00	 mov	 edx, 4
  000d5	6b c2 03	 imul	 eax, edx, 3
  000d8	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  000dd	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  000e2	b9 04 00 00 00	 mov	 ecx, 4
  000e7	6b d1 03	 imul	 edx, ecx, 3
  000ea	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ef	6b c8 00	 imul	 ecx, eax, 0
  000f2	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000f5	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 526  :   m[1][0] *= s; m[1][1] *= s; m[1][2] *= s; m[1][3] *= s;

  000fa	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ff	c1 e0 00	 shl	 eax, 0
  00102	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00105	b9 04 00 00 00	 mov	 ecx, 4
  0010a	6b d1 00	 imul	 edx, ecx, 0
  0010d	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00112	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00117	b8 04 00 00 00	 mov	 eax, 4
  0011c	6b c8 00	 imul	 ecx, eax, 0
  0011f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00124	c1 e2 00	 shl	 edx, 0
  00127	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0012a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0
  0012f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00134	c1 e0 00	 shl	 eax, 0
  00137	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0013a	b9 04 00 00 00	 mov	 ecx, 4
  0013f	c1 e1 00	 shl	 ecx, 0
  00142	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00147	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0014c	ba 04 00 00 00	 mov	 edx, 4
  00151	c1 e2 00	 shl	 edx, 0
  00154	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00159	c1 e0 00	 shl	 eax, 0
  0015c	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0015f	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00164	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00169	c1 e0 00	 shl	 eax, 0
  0016c	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0016f	b9 04 00 00 00	 mov	 ecx, 4
  00174	d1 e1		 shl	 ecx, 1
  00176	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0017b	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00180	ba 04 00 00 00	 mov	 edx, 4
  00185	d1 e2		 shl	 edx, 1
  00187	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0018c	c1 e0 00	 shl	 eax, 0
  0018f	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00192	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00197	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0019c	c1 e0 00	 shl	 eax, 0
  0019f	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001a2	b9 04 00 00 00	 mov	 ecx, 4
  001a7	6b d1 03	 imul	 edx, ecx, 3
  001aa	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  001af	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  001b4	b8 04 00 00 00	 mov	 eax, 4
  001b9	6b c8 03	 imul	 ecx, eax, 3
  001bc	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001c1	c1 e2 00	 shl	 edx, 0
  001c4	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  001c7	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 527  :   m[2][0] *= s; m[2][1] *= s; m[2][2] *= s; m[2][3] *= s;

  001cc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001d1	d1 e0		 shl	 eax, 1
  001d3	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001d6	b9 04 00 00 00	 mov	 ecx, 4
  001db	6b d1 00	 imul	 edx, ecx, 0
  001de	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  001e3	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  001e8	b8 04 00 00 00	 mov	 eax, 4
  001ed	6b c8 00	 imul	 ecx, eax, 0
  001f0	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001f5	d1 e2		 shl	 edx, 1
  001f7	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  001fa	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0
  001ff	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00204	d1 e0		 shl	 eax, 1
  00206	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00209	b9 04 00 00 00	 mov	 ecx, 4
  0020e	c1 e1 00	 shl	 ecx, 0
  00211	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00216	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0021b	ba 04 00 00 00	 mov	 edx, 4
  00220	c1 e2 00	 shl	 edx, 0
  00223	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00228	d1 e0		 shl	 eax, 1
  0022a	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0022d	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00232	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00237	d1 e0		 shl	 eax, 1
  00239	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0023c	b9 04 00 00 00	 mov	 ecx, 4
  00241	d1 e1		 shl	 ecx, 1
  00243	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00248	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0024d	ba 04 00 00 00	 mov	 edx, 4
  00252	d1 e2		 shl	 edx, 1
  00254	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00259	d1 e0		 shl	 eax, 1
  0025b	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0025e	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
  00263	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00268	d1 e0		 shl	 eax, 1
  0026a	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0026d	b9 04 00 00 00	 mov	 ecx, 4
  00272	6b d1 03	 imul	 edx, ecx, 3
  00275	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0027a	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0027f	b8 04 00 00 00	 mov	 eax, 4
  00284	6b c8 03	 imul	 ecx, eax, 3
  00287	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0028c	d1 e2		 shl	 edx, 1
  0028e	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00291	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 528  :   m[3][0] *= s; m[3][1] *= s; m[3][2] *= s; m[3][3] *= s;

  00296	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0029b	6b c8 03	 imul	 ecx, eax, 3
  0029e	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  002a1	ba 04 00 00 00	 mov	 edx, 4
  002a6	6b c2 00	 imul	 eax, edx, 0
  002a9	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  002ae	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  002b3	b9 04 00 00 00	 mov	 ecx, 4
  002b8	6b d1 00	 imul	 edx, ecx, 0
  002bb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002c0	6b c8 03	 imul	 ecx, eax, 3
  002c3	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  002c6	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0
  002cb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002d0	6b c8 03	 imul	 ecx, eax, 3
  002d3	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  002d6	ba 04 00 00 00	 mov	 edx, 4
  002db	c1 e2 00	 shl	 edx, 0
  002de	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  002e3	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  002e8	b8 04 00 00 00	 mov	 eax, 4
  002ed	c1 e0 00	 shl	 eax, 0
  002f0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f5	6b d1 03	 imul	 edx, ecx, 3
  002f8	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  002fb	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0
  00300	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00305	6b c8 03	 imul	 ecx, eax, 3
  00308	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0030b	ba 04 00 00 00	 mov	 edx, 4
  00310	d1 e2		 shl	 edx, 1
  00312	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00317	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0031c	b8 04 00 00 00	 mov	 eax, 4
  00321	d1 e0		 shl	 eax, 1
  00323	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00328	6b d1 03	 imul	 edx, ecx, 3
  0032b	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0032e	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0
  00333	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00338	6b c8 03	 imul	 ecx, eax, 3
  0033b	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0033e	ba 04 00 00 00	 mov	 edx, 4
  00343	6b c2 03	 imul	 eax, edx, 3
  00346	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0034b	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00350	b9 04 00 00 00	 mov	 ecx, 4
  00355	6b d1 03	 imul	 edx, ecx, 3
  00358	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0035d	6b c8 03	 imul	 ecx, eax, 3
  00360	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00363	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 529  : }

  00368	5f		 pop	 edi
  00369	5e		 pop	 esi
  0036a	5b		 pop	 ebx
  0036b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00371	3b ec		 cmp	 ebp, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	8b e5		 mov	 esp, ebp
  0037a	5d		 pop	 ebp
  0037b	c3		 ret	 0
_glm_mat4_scale_p ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_transpose
_TEXT	SEGMENT
_m$ = 8							; size = 4
_glm_mat4_transpose PROC				; COMDAT

; 502  : glm_mat4_transpose(mat4 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 503  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 504  :   glm_mat4_transp_sse2(m, m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_transp_sse2
  00035	83 c4 08	 add	 esp, 8

; 505  : #elif defined(CGLM_NEON_FP)
; 506  :   glm_mat4_transp_neon(m, m);
; 507  : #else
; 508  :   mat4 d;
; 509  :   glm_mat4_transpose_to(m, d);
; 510  :   glm_mat4_ucopy(d, m);
; 511  : #endif
; 512  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_mat4_transpose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_transpose_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_mat4_transpose_to PROC				; COMDAT

; 478  : glm_mat4_transpose_to(mat4 m, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 479  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 480  :   glm_mat4_transp_sse2(m, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_transp_sse2
  00035	83 c4 08	 add	 esp, 8

; 481  : #elif defined(CGLM_NEON_FP)
; 482  :   glm_mat4_transp_neon(m, dest);
; 483  : #else
; 484  :   dest[0][0] = m[0][0]; dest[1][0] = m[0][1];
; 485  :   dest[0][1] = m[1][0]; dest[1][1] = m[1][1];
; 486  :   dest[0][2] = m[2][0]; dest[1][2] = m[2][1];
; 487  :   dest[0][3] = m[3][0]; dest[1][3] = m[3][1];
; 488  :   dest[2][0] = m[0][2]; dest[3][0] = m[0][3];
; 489  :   dest[2][1] = m[1][2]; dest[3][1] = m[1][3];
; 490  :   dest[2][2] = m[2][2]; dest[3][2] = m[2][3];
; 491  :   dest[2][3] = m[3][2]; dest[3][3] = m[3][3];
; 492  : #endif
; 493  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_mat4_transpose_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_mulv3
_TEXT	SEGMENT
_res$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_last$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_mat4_mulv3 PROC					; COMDAT

; 461  : glm_mat4_mulv3(mat4 m, vec3 v, float last, vec3 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 462  :   vec4 res;
; 463  :   glm_vec4(v, last, res);

  00044	8d 45 e0	 lea	 eax, DWORD PTR _res$[ebp]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _last$[ebx]
  0004e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00053	8b 4b 0c	 mov	 ecx, DWORD PTR _v$[ebx]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 _glm_vec4
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 464  :   glm_mat4_mulv(m, res, res);

  0005f	8d 45 e0	 lea	 eax, DWORD PTR _res$[ebp]
  00062	50		 push	 eax
  00063	8d 4d e0	 lea	 ecx, DWORD PTR _res$[ebp]
  00066	51		 push	 ecx
  00067	8b 53 08	 mov	 edx, DWORD PTR _m$[ebx]
  0006a	52		 push	 edx
  0006b	e8 00 00 00 00	 call	 _glm_mat4_mulv
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 465  :   glm_vec3(res, dest);

  00073	8b 43 14	 mov	 eax, DWORD PTR _dest$[ebx]
  00076	50		 push	 eax
  00077	8d 4d e0	 lea	 ecx, DWORD PTR _res$[ebp]
  0007a	51		 push	 ecx
  0007b	e8 00 00 00 00	 call	 _glm_vec3
  00080	83 c4 08	 add	 esp, 8

; 466  : }

  00083	52		 push	 edx
  00084	8b cd		 mov	 ecx, ebp
  00086	50		 push	 eax
  00087	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_m
  0008d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00092	58		 pop	 eax
  00093	5a		 pop	 edx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	8b e3		 mov	 esp, ebx
  000a5	5b		 pop	 ebx
  000a6	c3		 ret	 0
  000a7	90		 npad	 1
$LN5@glm_mat4_m:
  000a8	01 00 00 00	 DD	 1
  000ac	00 00 00 00	 DD	 $LN4@glm_mat4_m
$LN4@glm_mat4_m:
  000b0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000b4	10 00 00 00	 DD	 16			; 00000010H
  000b8	00 00 00 00	 DD	 $LN3@glm_mat4_m
$LN3@glm_mat4_m:
  000bc	72		 DB	 114			; 00000072H
  000bd	65		 DB	 101			; 00000065H
  000be	73		 DB	 115			; 00000073H
  000bf	00		 DB	 0
_glm_mat4_mulv3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_quat
_TEXT	SEGMENT
_rinv$ = -32						; size = 4
_r$ = -20						; size = 4
_trace$ = -8						; size = 4
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_mat4_quat PROC					; COMDAT

; 407  : glm_mat4_quat(mat4 m, versor dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 408  :   float trace, r, rinv;
; 409  : 
; 410  :   /* it seems using like m12 instead of m[1][2] causes extra instructions */
; 411  : 
; 412  :   trace = m[0][0] + m[1][1] + m[2][2];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00040	c1 e2 00	 shl	 edx, 0
  00043	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	c1 e6 00	 shl	 esi, 0
  0004e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00053	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  00058	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0005d	d1 e0		 shl	 eax, 1
  0005f	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	d1 e1		 shl	 ecx, 1
  00069	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0006e	f3 0f 11 45 f8	 movss	 DWORD PTR _trace$[ebp], xmm0

; 413  :   if (trace >= 0.0f) {

  00073	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _trace$[ebp]
  00078	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0007f	0f 82 1c 01 00
	00		 jb	 $LN2@glm_mat4_q

; 414  :     r       = sqrtf(1.0f + trace);

  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008d	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _trace$[ebp]
  00092	51		 push	 ecx
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	e8 00 00 00 00	 call	 _sqrtf
  0009d	83 c4 04	 add	 esp, 4
  000a0	d9 5d ec	 fstp	 DWORD PTR _r$[ebp]

; 415  :     rinv    = 0.5f / r;

  000a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000ab	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _r$[ebp]
  000b0	f3 0f 11 45 e0	 movss	 DWORD PTR _rinv$[ebp], xmm0

; 416  : 
; 417  :     dest[0] = rinv * (m[1][2] - m[2][1]);

  000b5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ba	c1 e0 00	 shl	 eax, 0
  000bd	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000c0	b9 04 00 00 00	 mov	 ecx, 4
  000c5	d1 e1		 shl	 ecx, 1
  000c7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000cc	d1 e2		 shl	 edx, 1
  000ce	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000d1	be 04 00 00 00	 mov	 esi, 4
  000d6	c1 e6 00	 shl	 esi, 0
  000d9	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000de	f3 0f 5c 04 32	 subss	 xmm0, DWORD PTR [edx+esi]
  000e3	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  000e8	b8 04 00 00 00	 mov	 eax, 4
  000ed	6b c8 00	 imul	 ecx, eax, 0
  000f0	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  000f3	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 418  :     dest[1] = rinv * (m[2][0] - m[0][2]);

  000f8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000fd	d1 e0		 shl	 eax, 1
  000ff	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00102	b9 04 00 00 00	 mov	 ecx, 4
  00107	6b d1 00	 imul	 edx, ecx, 0
  0010a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0010f	6b c9 00	 imul	 ecx, ecx, 0
  00112	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00115	be 04 00 00 00	 mov	 esi, 4
  0011a	d1 e6		 shl	 esi, 1
  0011c	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00121	f3 0f 5c 04 31	 subss	 xmm0, DWORD PTR [ecx+esi]
  00126	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0012b	ba 04 00 00 00	 mov	 edx, 4
  00130	c1 e2 00	 shl	 edx, 0
  00133	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00136	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 419  :     dest[2] = rinv * (m[0][1] - m[1][0]);

  0013b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00140	6b c8 00	 imul	 ecx, eax, 0
  00143	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00146	ba 04 00 00 00	 mov	 edx, 4
  0014b	c1 e2 00	 shl	 edx, 0
  0014e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00153	c1 e0 00	 shl	 eax, 0
  00156	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00159	be 04 00 00 00	 mov	 esi, 4
  0015e	6b f6 00	 imul	 esi, esi, 0
  00161	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00166	f3 0f 5c 04 30	 subss	 xmm0, DWORD PTR [eax+esi]
  0016b	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  00170	b9 04 00 00 00	 mov	 ecx, 4
  00175	d1 e1		 shl	 ecx, 1
  00177	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0017a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 420  :     dest[3] = r    * 0.5f;

  0017f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$[ebp]
  00184	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0018c	b8 04 00 00 00	 mov	 eax, 4
  00191	6b c8 03	 imul	 ecx, eax, 3
  00194	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00197	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0
  0019c	e9 ad 04 00 00	 jmp	 $LN7@glm_mat4_q
$LN2@glm_mat4_q:

; 421  :   } else if (m[0][0] >= m[1][1] && m[0][0] >= m[2][2]) {

  001a1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001a6	6b c8 00	 imul	 ecx, eax, 0
  001a9	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  001ac	ba 04 00 00 00	 mov	 edx, 4
  001b1	6b c2 00	 imul	 eax, edx, 0
  001b4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001b9	c1 e2 00	 shl	 edx, 0
  001bc	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  001bf	be 04 00 00 00	 mov	 esi, 4
  001c4	c1 e6 00	 shl	 esi, 0
  001c7	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  001cc	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  001d0	0f 82 90 01 00
	00		 jb	 $LN4@glm_mat4_q
  001d6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001db	6b c8 00	 imul	 ecx, eax, 0
  001de	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  001e1	ba 04 00 00 00	 mov	 edx, 4
  001e6	6b c2 00	 imul	 eax, edx, 0
  001e9	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001ee	d1 e2		 shl	 edx, 1
  001f0	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  001f3	be 04 00 00 00	 mov	 esi, 4
  001f8	d1 e6		 shl	 esi, 1
  001fa	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  001ff	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  00203	0f 82 5d 01 00
	00		 jb	 $LN4@glm_mat4_q

; 422  :     r       = sqrtf(1.0f - m[1][1] - m[2][2] + m[0][0]);

  00209	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0020e	c1 e0 00	 shl	 eax, 0
  00211	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00214	b9 04 00 00 00	 mov	 ecx, 4
  00219	c1 e1 00	 shl	 ecx, 0
  0021c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00224	f3 0f 5c 04 08	 subss	 xmm0, DWORD PTR [eax+ecx]
  00229	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0022e	d1 e2		 shl	 edx, 1
  00230	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00233	b8 04 00 00 00	 mov	 eax, 4
  00238	d1 e0		 shl	 eax, 1
  0023a	f3 0f 5c 04 02	 subss	 xmm0, DWORD PTR [edx+eax]
  0023f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00244	6b d1 00	 imul	 edx, ecx, 0
  00247	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0024a	b8 04 00 00 00	 mov	 eax, 4
  0024f	6b c8 00	 imul	 ecx, eax, 0
  00252	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  00257	51		 push	 ecx
  00258	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025d	e8 00 00 00 00	 call	 _sqrtf
  00262	83 c4 04	 add	 esp, 4
  00265	d9 5d ec	 fstp	 DWORD PTR _r$[ebp]

; 423  :     rinv    = 0.5f / r;

  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00270	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _r$[ebp]
  00275	f3 0f 11 45 e0	 movss	 DWORD PTR _rinv$[ebp], xmm0

; 424  : 
; 425  :     dest[0] = r    * 0.5f;

  0027a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$[ebp]
  0027f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00287	b8 04 00 00 00	 mov	 eax, 4
  0028c	6b c8 00	 imul	 ecx, eax, 0
  0028f	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00292	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 426  :     dest[1] = rinv * (m[0][1] + m[1][0]);

  00297	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0029c	6b c8 00	 imul	 ecx, eax, 0
  0029f	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  002a2	ba 04 00 00 00	 mov	 edx, 4
  002a7	c1 e2 00	 shl	 edx, 0
  002aa	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002af	c1 e0 00	 shl	 eax, 0
  002b2	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  002b5	be 04 00 00 00	 mov	 esi, 4
  002ba	6b f6 00	 imul	 esi, esi, 0
  002bd	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  002c2	f3 0f 58 04 30	 addss	 xmm0, DWORD PTR [eax+esi]
  002c7	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  002cc	b9 04 00 00 00	 mov	 ecx, 4
  002d1	c1 e1 00	 shl	 ecx, 0
  002d4	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  002d7	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 427  :     dest[2] = rinv * (m[0][2] + m[2][0]);

  002dc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002e1	6b c8 00	 imul	 ecx, eax, 0
  002e4	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  002e7	ba 04 00 00 00	 mov	 edx, 4
  002ec	d1 e2		 shl	 edx, 1
  002ee	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002f3	d1 e0		 shl	 eax, 1
  002f5	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  002f8	be 04 00 00 00	 mov	 esi, 4
  002fd	6b f6 00	 imul	 esi, esi, 0
  00300	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00305	f3 0f 58 04 30	 addss	 xmm0, DWORD PTR [eax+esi]
  0030a	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0030f	b9 04 00 00 00	 mov	 ecx, 4
  00314	d1 e1		 shl	 ecx, 1
  00316	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00319	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 428  :     dest[3] = rinv * (m[1][2] - m[2][1]);

  0031e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00323	c1 e0 00	 shl	 eax, 0
  00326	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00329	b9 04 00 00 00	 mov	 ecx, 4
  0032e	d1 e1		 shl	 ecx, 1
  00330	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00335	d1 e2		 shl	 edx, 1
  00337	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0033a	be 04 00 00 00	 mov	 esi, 4
  0033f	c1 e6 00	 shl	 esi, 0
  00342	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00347	f3 0f 5c 04 32	 subss	 xmm0, DWORD PTR [edx+esi]
  0034c	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  00351	b8 04 00 00 00	 mov	 eax, 4
  00356	6b c8 03	 imul	 ecx, eax, 3
  00359	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0035c	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0
  00361	e9 e8 02 00 00	 jmp	 $LN7@glm_mat4_q
$LN4@glm_mat4_q:

; 429  :   } else if (m[1][1] >= m[2][2]) {

  00366	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0036b	c1 e0 00	 shl	 eax, 0
  0036e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00371	b9 04 00 00 00	 mov	 ecx, 4
  00376	c1 e1 00	 shl	 ecx, 0
  00379	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0037e	d1 e2		 shl	 edx, 1
  00380	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00383	be 04 00 00 00	 mov	 esi, 4
  00388	d1 e6		 shl	 esi, 1
  0038a	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0038f	0f 2f 04 32	 comiss	 xmm0, DWORD PTR [edx+esi]
  00393	0f 82 5d 01 00
	00		 jb	 $LN6@glm_mat4_q

; 430  :     r       = sqrtf(1.0f - m[0][0] - m[2][2] + m[1][1]);

  00399	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0039e	6b c8 00	 imul	 ecx, eax, 0
  003a1	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  003a4	ba 04 00 00 00	 mov	 edx, 4
  003a9	6b c2 00	 imul	 eax, edx, 0
  003ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003b4	f3 0f 5c 04 01	 subss	 xmm0, DWORD PTR [ecx+eax]
  003b9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003be	d1 e1		 shl	 ecx, 1
  003c0	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  003c3	ba 04 00 00 00	 mov	 edx, 4
  003c8	d1 e2		 shl	 edx, 1
  003ca	f3 0f 5c 04 11	 subss	 xmm0, DWORD PTR [ecx+edx]
  003cf	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003d4	c1 e0 00	 shl	 eax, 0
  003d7	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  003da	b9 04 00 00 00	 mov	 ecx, 4
  003df	c1 e1 00	 shl	 ecx, 0
  003e2	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  003e7	51		 push	 ecx
  003e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ed	e8 00 00 00 00	 call	 _sqrtf
  003f2	83 c4 04	 add	 esp, 4
  003f5	d9 5d ec	 fstp	 DWORD PTR _r$[ebp]

; 431  :     rinv    = 0.5f / r;

  003f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00400	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _r$[ebp]
  00405	f3 0f 11 45 e0	 movss	 DWORD PTR _rinv$[ebp], xmm0

; 432  : 
; 433  :     dest[0] = rinv * (m[0][1] + m[1][0]);

  0040a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0040f	6b c8 00	 imul	 ecx, eax, 0
  00412	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00415	ba 04 00 00 00	 mov	 edx, 4
  0041a	c1 e2 00	 shl	 edx, 0
  0041d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00422	c1 e0 00	 shl	 eax, 0
  00425	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00428	be 04 00 00 00	 mov	 esi, 4
  0042d	6b f6 00	 imul	 esi, esi, 0
  00430	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00435	f3 0f 58 04 30	 addss	 xmm0, DWORD PTR [eax+esi]
  0043a	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0043f	b9 04 00 00 00	 mov	 ecx, 4
  00444	6b d1 00	 imul	 edx, ecx, 0
  00447	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0044a	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 434  :     dest[1] = r    * 0.5f;

  0044f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$[ebp]
  00454	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0045c	b8 04 00 00 00	 mov	 eax, 4
  00461	c1 e0 00	 shl	 eax, 0
  00464	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00467	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 435  :     dest[2] = rinv * (m[1][2] + m[2][1]);

  0046c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00471	c1 e0 00	 shl	 eax, 0
  00474	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00477	b9 04 00 00 00	 mov	 ecx, 4
  0047c	d1 e1		 shl	 ecx, 1
  0047e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00483	d1 e2		 shl	 edx, 1
  00485	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00488	be 04 00 00 00	 mov	 esi, 4
  0048d	c1 e6 00	 shl	 esi, 0
  00490	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00495	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  0049a	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0049f	b8 04 00 00 00	 mov	 eax, 4
  004a4	d1 e0		 shl	 eax, 1
  004a6	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  004a9	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 436  :     dest[3] = rinv * (m[2][0] - m[0][2]);

  004ae	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004b3	d1 e0		 shl	 eax, 1
  004b5	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  004b8	b9 04 00 00 00	 mov	 ecx, 4
  004bd	6b d1 00	 imul	 edx, ecx, 0
  004c0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004c5	6b c9 00	 imul	 ecx, ecx, 0
  004c8	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  004cb	be 04 00 00 00	 mov	 esi, 4
  004d0	d1 e6		 shl	 esi, 1
  004d2	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  004d7	f3 0f 5c 04 31	 subss	 xmm0, DWORD PTR [ecx+esi]
  004dc	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  004e1	ba 04 00 00 00	 mov	 edx, 4
  004e6	6b c2 03	 imul	 eax, edx, 3
  004e9	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  004ec	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 437  :   } else {

  004f1	e9 58 01 00 00	 jmp	 $LN7@glm_mat4_q
$LN6@glm_mat4_q:

; 438  :     r       = sqrtf(1.0f - m[0][0] - m[1][1] + m[2][2]);

  004f6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004fb	6b c8 00	 imul	 ecx, eax, 0
  004fe	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00501	ba 04 00 00 00	 mov	 edx, 4
  00506	6b c2 00	 imul	 eax, edx, 0
  00509	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00511	f3 0f 5c 04 01	 subss	 xmm0, DWORD PTR [ecx+eax]
  00516	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0051b	c1 e1 00	 shl	 ecx, 0
  0051e	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00521	ba 04 00 00 00	 mov	 edx, 4
  00526	c1 e2 00	 shl	 edx, 0
  00529	f3 0f 5c 04 11	 subss	 xmm0, DWORD PTR [ecx+edx]
  0052e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00533	d1 e0		 shl	 eax, 1
  00535	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00538	b9 04 00 00 00	 mov	 ecx, 4
  0053d	d1 e1		 shl	 ecx, 1
  0053f	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  00544	51		 push	 ecx
  00545	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054a	e8 00 00 00 00	 call	 _sqrtf
  0054f	83 c4 04	 add	 esp, 4
  00552	d9 5d ec	 fstp	 DWORD PTR _r$[ebp]

; 439  :     rinv    = 0.5f / r;

  00555	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0055d	f3 0f 5e 45 ec	 divss	 xmm0, DWORD PTR _r$[ebp]
  00562	f3 0f 11 45 e0	 movss	 DWORD PTR _rinv$[ebp], xmm0

; 440  : 
; 441  :     dest[0] = rinv * (m[0][2] + m[2][0]);

  00567	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0056c	6b c8 00	 imul	 ecx, eax, 0
  0056f	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00572	ba 04 00 00 00	 mov	 edx, 4
  00577	d1 e2		 shl	 edx, 1
  00579	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0057e	d1 e0		 shl	 eax, 1
  00580	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00583	be 04 00 00 00	 mov	 esi, 4
  00588	6b f6 00	 imul	 esi, esi, 0
  0058b	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00590	f3 0f 58 04 30	 addss	 xmm0, DWORD PTR [eax+esi]
  00595	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0059a	b9 04 00 00 00	 mov	 ecx, 4
  0059f	6b d1 00	 imul	 edx, ecx, 0
  005a2	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  005a5	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 442  :     dest[1] = rinv * (m[1][2] + m[2][1]);

  005aa	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  005af	c1 e0 00	 shl	 eax, 0
  005b2	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  005b5	b9 04 00 00 00	 mov	 ecx, 4
  005ba	d1 e1		 shl	 ecx, 1
  005bc	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005c1	d1 e2		 shl	 edx, 1
  005c3	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  005c6	be 04 00 00 00	 mov	 esi, 4
  005cb	c1 e6 00	 shl	 esi, 0
  005ce	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  005d3	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  005d8	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  005dd	b8 04 00 00 00	 mov	 eax, 4
  005e2	c1 e0 00	 shl	 eax, 0
  005e5	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  005e8	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 443  :     dest[2] = r    * 0.5f;

  005ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _r$[ebp]
  005f2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	d1 e0		 shl	 eax, 1
  00601	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00604	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 444  :     dest[3] = rinv * (m[0][1] - m[1][0]);

  00609	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0060e	6b c8 00	 imul	 ecx, eax, 0
  00611	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00614	ba 04 00 00 00	 mov	 edx, 4
  00619	c1 e2 00	 shl	 edx, 0
  0061c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00621	c1 e0 00	 shl	 eax, 0
  00624	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00627	be 04 00 00 00	 mov	 esi, 4
  0062c	6b f6 00	 imul	 esi, esi, 0
  0062f	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00634	f3 0f 5c 04 30	 subss	 xmm0, DWORD PTR [eax+esi]
  00639	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _rinv$[ebp]
  0063e	b9 04 00 00 00	 mov	 ecx, 4
  00643	6b d1 03	 imul	 edx, ecx, 3
  00646	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  00649	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0
$LN7@glm_mat4_q:

; 445  :   }
; 446  : }

  0064e	5f		 pop	 edi
  0064f	5e		 pop	 esi
  00650	5b		 pop	 ebx
  00651	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00657	3b ec		 cmp	 ebp, esp
  00659	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0065e	8b e5		 mov	 esp, ebp
  00660	5d		 pop	 ebp
  00661	c3		 ret	 0
_glm_mat4_quat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_trace3
_TEXT	SEGMENT
tv87 = -196						; size = 4
_m$ = 8							; size = 4
_glm_mat4_trace3 PROC					; COMDAT

; 395  : glm_mat4_trace3(mat4 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 396  :   return m[0][0] + m[1][1] + m[2][2];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00040	c1 e2 00	 shl	 edx, 0
  00043	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	c1 e6 00	 shl	 esi, 0
  0004e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00053	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  00058	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0005d	d1 e0		 shl	 eax, 1
  0005f	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	d1 e1		 shl	 ecx, 1
  00069	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0006e	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv87[ebp], xmm0
  00076	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv87[ebp]

; 397  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_glm_mat4_trace3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_trace
_TEXT	SEGMENT
tv94 = -196						; size = 4
_m$ = 8							; size = 4
_glm_mat4_trace PROC					; COMDAT

; 382  : glm_mat4_trace(mat4 m) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 383  :   return m[0][0] + m[1][1] + m[2][2] + m[3][3];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00040	c1 e2 00	 shl	 edx, 0
  00043	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	c1 e6 00	 shl	 esi, 0
  0004e	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00053	f3 0f 58 04 32	 addss	 xmm0, DWORD PTR [edx+esi]
  00058	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0005d	d1 e0		 shl	 eax, 1
  0005f	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	d1 e1		 shl	 ecx, 1
  00069	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  0006e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00073	6b c2 03	 imul	 eax, edx, 3
  00076	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00079	b9 04 00 00 00	 mov	 ecx, 4
  0007e	6b d1 03	 imul	 edx, ecx, 3
  00081	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  00086	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv94[ebp], xmm0
  0008e	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv94[ebp]

; 384  : }

  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_glm_mat4_trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_mulv
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mulv PROC					; COMDAT

; 358  : glm_mat4_mulv(mat4 m, vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 359  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 360  :   glm_mat4_mulv_sse2(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_mulv_sse2
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 361  : #elif defined(CGLM_NEON_FP)
; 362  :   glm_mat4_mulv_neon(m, v, dest);
; 363  : #else
; 364  :   vec4 res;
; 365  :   res[0] = m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3];
; 366  :   res[1] = m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3];
; 367  :   res[2] = m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3];
; 368  :   res[3] = m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3];
; 369  :   glm_vec4_copy(res, dest);
; 370  : #endif
; 371  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glm_mat4_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_mulN
_TEXT	SEGMENT
_i$ = -8						; size = 4
_matrices$ = 8						; size = 4
_len$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mulN PROC					; COMDAT

; 336  : glm_mat4_mulN(mat4 * __restrict matrices[], uint32_t len, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 337  :   uint32_t i;
; 338  : 
; 339  : #ifdef DEBUG
; 340  :   assert(len > 1 && "there must be least 2 matrices to go!");
; 341  : #endif
; 342  : 
; 343  :   glm_mat4_mul(*matrices[0], *matrices[1], dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	b9 04 00 00 00	 mov	 ecx, 4
  00031	c1 e1 00	 shl	 ecx, 0
  00034	8b 55 08	 mov	 edx, DWORD PTR _matrices$[ebp]
  00037	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0003a	50		 push	 eax
  0003b	b9 04 00 00 00	 mov	 ecx, 4
  00040	6b d1 00	 imul	 edx, ecx, 0
  00043	8b 45 08	 mov	 eax, DWORD PTR _matrices$[ebp]
  00046	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 _glm_mat4_mul
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 344  : 
; 345  :   for (i = 2; i < len; i++)

  00052	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _i$[ebp], 2
  00059	eb 09		 jmp	 SHORT $LN4@glm_mat4_m
$LN2@glm_mat4_m:
  0005b	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_mat4_m:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00067	3b 45 0c	 cmp	 eax, DWORD PTR _len$[ebp]
  0006a	73 1c		 jae	 SHORT $LN1@glm_mat4_m

; 346  :     glm_mat4_mul(dest, *matrices[i], dest);

  0006c	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0006f	50		 push	 eax
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00073	8b 55 08	 mov	 edx, DWORD PTR _matrices$[ebp]
  00076	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00079	50		 push	 eax
  0007a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0007d	51		 push	 ecx
  0007e	e8 00 00 00 00	 call	 _glm_mat4_mul
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	eb d3		 jmp	 SHORT $LN2@glm_mat4_m
$LN1@glm_mat4_m:

; 347  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_glm_mat4_mulN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_mul
_TEXT	SEGMENT
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mul PROC					; COMDAT

; 278  : glm_mat4_mul(mat4 m1, mat4 m2, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 279  : #ifdef __AVX__
; 280  :   glm_mat4_mul_avx(m1, m2, dest);
; 281  : #elif defined( __SSE__ ) || defined( __SSE2__ )
; 282  :   glm_mat4_mul_sse2(m1, m2, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _m2$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m1$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_mul_sse2
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 283  : #elif defined(CGLM_NEON_FP)
; 284  :   glm_mat4_mul_neon(m1, m2, dest);
; 285  : #else
; 286  :   float a00 = m1[0][0], a01 = m1[0][1], a02 = m1[0][2], a03 = m1[0][3],
; 287  :         a10 = m1[1][0], a11 = m1[1][1], a12 = m1[1][2], a13 = m1[1][3],
; 288  :         a20 = m1[2][0], a21 = m1[2][1], a22 = m1[2][2], a23 = m1[2][3],
; 289  :         a30 = m1[3][0], a31 = m1[3][1], a32 = m1[3][2], a33 = m1[3][3],
; 290  : 
; 291  :         b00 = m2[0][0], b01 = m2[0][1], b02 = m2[0][2], b03 = m2[0][3],
; 292  :         b10 = m2[1][0], b11 = m2[1][1], b12 = m2[1][2], b13 = m2[1][3],
; 293  :         b20 = m2[2][0], b21 = m2[2][1], b22 = m2[2][2], b23 = m2[2][3],
; 294  :         b30 = m2[3][0], b31 = m2[3][1], b32 = m2[3][2], b33 = m2[3][3];
; 295  : 
; 296  :   dest[0][0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;
; 297  :   dest[0][1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;
; 298  :   dest[0][2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;
; 299  :   dest[0][3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;
; 300  :   dest[1][0] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;
; 301  :   dest[1][1] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;
; 302  :   dest[1][2] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;
; 303  :   dest[1][3] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;
; 304  :   dest[2][0] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;
; 305  :   dest[2][1] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;
; 306  :   dest[2][2] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;
; 307  :   dest[2][3] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;
; 308  :   dest[3][0] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;
; 309  :   dest[3][1] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;
; 310  :   dest[3][2] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;
; 311  :   dest[3][3] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;
; 312  : #endif
; 313  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glm_mat4_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_ins3
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_ins3 PROC					; COMDAT

; 248  : glm_mat4_ins3(mat3 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 249  :   dest[0][0] = mat[0][0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00051	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 250  :   dest[0][1] = mat[0][1];

  00054	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0005f	ba 04 00 00 00	 mov	 edx, 4
  00064	c1 e2 00	 shl	 edx, 0
  00067	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0006c	6b c0 00	 imul	 eax, eax, 0
  0006f	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00072	be 04 00 00 00	 mov	 esi, 4
  00077	c1 e6 00	 shl	 esi, 0
  0007a	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  0007d	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 251  :   dest[0][2] = mat[0][2];

  00080	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00085	6b c8 00	 imul	 ecx, eax, 0
  00088	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0008b	ba 04 00 00 00	 mov	 edx, 4
  00090	d1 e2		 shl	 edx, 1
  00092	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00097	6b c0 00	 imul	 eax, eax, 0
  0009a	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0009d	be 04 00 00 00	 mov	 esi, 4
  000a2	d1 e6		 shl	 esi, 1
  000a4	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  000a7	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 252  : 
; 253  :   dest[1][0] = mat[1][0];

  000aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000af	c1 e0 00	 shl	 eax, 0
  000b2	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000b5	b9 04 00 00 00	 mov	 ecx, 4
  000ba	6b d1 00	 imul	 edx, ecx, 0
  000bd	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000c2	c1 e1 00	 shl	 ecx, 0
  000c5	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  000c8	be 04 00 00 00	 mov	 esi, 4
  000cd	6b f6 00	 imul	 esi, esi, 0
  000d0	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000d3	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 254  :   dest[1][1] = mat[1][1];

  000d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000db	c1 e0 00	 shl	 eax, 0
  000de	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000e1	b9 04 00 00 00	 mov	 ecx, 4
  000e6	c1 e1 00	 shl	 ecx, 0
  000e9	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000ee	c1 e2 00	 shl	 edx, 0
  000f1	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  000f4	be 04 00 00 00	 mov	 esi, 4
  000f9	c1 e6 00	 shl	 esi, 0
  000fc	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000ff	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 255  :   dest[1][2] = mat[1][2];

  00102	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00107	c1 e0 00	 shl	 eax, 0
  0010a	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0010d	b9 04 00 00 00	 mov	 ecx, 4
  00112	d1 e1		 shl	 ecx, 1
  00114	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00119	c1 e2 00	 shl	 edx, 0
  0011c	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0011f	be 04 00 00 00	 mov	 esi, 4
  00124	d1 e6		 shl	 esi, 1
  00126	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00129	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 256  : 
; 257  :   dest[2][0] = mat[2][0];

  0012c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00131	d1 e0		 shl	 eax, 1
  00133	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00136	b9 04 00 00 00	 mov	 ecx, 4
  0013b	6b d1 00	 imul	 edx, ecx, 0
  0013e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00143	d1 e1		 shl	 ecx, 1
  00145	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00148	be 04 00 00 00	 mov	 esi, 4
  0014d	6b f6 00	 imul	 esi, esi, 0
  00150	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00153	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 258  :   dest[2][1] = mat[2][1];

  00156	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0015b	d1 e0		 shl	 eax, 1
  0015d	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00160	b9 04 00 00 00	 mov	 ecx, 4
  00165	c1 e1 00	 shl	 ecx, 0
  00168	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0016d	d1 e2		 shl	 edx, 1
  0016f	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00172	be 04 00 00 00	 mov	 esi, 4
  00177	c1 e6 00	 shl	 esi, 0
  0017a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0017d	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 259  :   dest[2][2] = mat[2][2];

  00180	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00185	d1 e0		 shl	 eax, 1
  00187	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0018a	b9 04 00 00 00	 mov	 ecx, 4
  0018f	d1 e1		 shl	 ecx, 1
  00191	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00196	d1 e2		 shl	 edx, 1
  00198	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0019b	be 04 00 00 00	 mov	 esi, 4
  001a0	d1 e6		 shl	 esi, 1
  001a2	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  001a5	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 260  : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001b1	3b ec		 cmp	 ebp, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_glm_mat4_ins3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_pick3t
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_pick3t PROC					; COMDAT

; 226  : glm_mat4_pick3t(mat4 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 227  :   dest[0][0] = mat[0][0];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00051	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 228  :   dest[0][1] = mat[1][0];

  00054	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00059	c1 e0 00	 shl	 eax, 0
  0005c	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0005f	b9 04 00 00 00	 mov	 ecx, 4
  00064	6b d1 00	 imul	 edx, ecx, 0
  00067	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0006c	6b c9 00	 imul	 ecx, ecx, 0
  0006f	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00072	be 04 00 00 00	 mov	 esi, 4
  00077	c1 e6 00	 shl	 esi, 0
  0007a	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0007d	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 229  :   dest[0][2] = mat[2][0];

  00080	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00085	d1 e0		 shl	 eax, 1
  00087	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0008a	b9 04 00 00 00	 mov	 ecx, 4
  0008f	6b d1 00	 imul	 edx, ecx, 0
  00092	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00097	6b c9 00	 imul	 ecx, ecx, 0
  0009a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0009d	be 04 00 00 00	 mov	 esi, 4
  000a2	d1 e6		 shl	 esi, 1
  000a4	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000a7	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 230  : 
; 231  :   dest[1][0] = mat[0][1];

  000aa	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000af	6b c8 00	 imul	 ecx, eax, 0
  000b2	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  000b5	ba 04 00 00 00	 mov	 edx, 4
  000ba	c1 e2 00	 shl	 edx, 0
  000bd	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c2	c1 e0 00	 shl	 eax, 0
  000c5	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  000c8	be 04 00 00 00	 mov	 esi, 4
  000cd	6b f6 00	 imul	 esi, esi, 0
  000d0	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  000d3	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 232  :   dest[1][1] = mat[1][1];

  000d6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000db	c1 e0 00	 shl	 eax, 0
  000de	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000e1	b9 04 00 00 00	 mov	 ecx, 4
  000e6	c1 e1 00	 shl	 ecx, 0
  000e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ee	c1 e2 00	 shl	 edx, 0
  000f1	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  000f4	be 04 00 00 00	 mov	 esi, 4
  000f9	c1 e6 00	 shl	 esi, 0
  000fc	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000ff	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 233  :   dest[1][2] = mat[2][1];

  00102	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00107	d1 e0		 shl	 eax, 1
  00109	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0010c	b9 04 00 00 00	 mov	 ecx, 4
  00111	c1 e1 00	 shl	 ecx, 0
  00114	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00119	c1 e2 00	 shl	 edx, 0
  0011c	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0011f	be 04 00 00 00	 mov	 esi, 4
  00124	d1 e6		 shl	 esi, 1
  00126	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00129	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 234  : 
; 235  :   dest[2][0] = mat[0][2];

  0012c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00137	ba 04 00 00 00	 mov	 edx, 4
  0013c	d1 e2		 shl	 edx, 1
  0013e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00143	d1 e0		 shl	 eax, 1
  00145	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00148	be 04 00 00 00	 mov	 esi, 4
  0014d	6b f6 00	 imul	 esi, esi, 0
  00150	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  00153	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 236  :   dest[2][1] = mat[1][2];

  00156	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0015b	c1 e0 00	 shl	 eax, 0
  0015e	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00161	b9 04 00 00 00	 mov	 ecx, 4
  00166	d1 e1		 shl	 ecx, 1
  00168	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0016d	d1 e2		 shl	 edx, 1
  0016f	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00172	be 04 00 00 00	 mov	 esi, 4
  00177	c1 e6 00	 shl	 esi, 0
  0017a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0017d	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 237  :   dest[2][2] = mat[2][2];

  00180	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00185	d1 e0		 shl	 eax, 1
  00187	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0018a	b9 04 00 00 00	 mov	 ecx, 4
  0018f	d1 e1		 shl	 ecx, 1
  00191	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00196	d1 e2		 shl	 edx, 1
  00198	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0019b	be 04 00 00 00	 mov	 esi, 4
  001a0	d1 e6		 shl	 esi, 1
  001a2	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  001a5	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 238  : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001b1	3b ec		 cmp	 ebp, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_glm_mat4_pick3t ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_pick3
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_pick3 PROC					; COMDAT

; 202  : glm_mat4_pick3(mat4 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 203  :   dest[0][0] = mat[0][0];

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00051	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 204  :   dest[0][1] = mat[0][1];

  00054	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0005f	ba 04 00 00 00	 mov	 edx, 4
  00064	c1 e2 00	 shl	 edx, 0
  00067	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006c	6b c0 00	 imul	 eax, eax, 0
  0006f	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00072	be 04 00 00 00	 mov	 esi, 4
  00077	c1 e6 00	 shl	 esi, 0
  0007a	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  0007d	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 205  :   dest[0][2] = mat[0][2];

  00080	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00085	6b c8 00	 imul	 ecx, eax, 0
  00088	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0008b	ba 04 00 00 00	 mov	 edx, 4
  00090	d1 e2		 shl	 edx, 1
  00092	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00097	6b c0 00	 imul	 eax, eax, 0
  0009a	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0009d	be 04 00 00 00	 mov	 esi, 4
  000a2	d1 e6		 shl	 esi, 1
  000a4	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  000a7	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 206  : 
; 207  :   dest[1][0] = mat[1][0];

  000aa	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000af	c1 e0 00	 shl	 eax, 0
  000b2	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000b5	b9 04 00 00 00	 mov	 ecx, 4
  000ba	6b d1 00	 imul	 edx, ecx, 0
  000bd	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000c2	c1 e1 00	 shl	 ecx, 0
  000c5	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  000c8	be 04 00 00 00	 mov	 esi, 4
  000cd	6b f6 00	 imul	 esi, esi, 0
  000d0	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000d3	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 208  :   dest[1][1] = mat[1][1];

  000d6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000db	c1 e0 00	 shl	 eax, 0
  000de	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000e1	b9 04 00 00 00	 mov	 ecx, 4
  000e6	c1 e1 00	 shl	 ecx, 0
  000e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ee	c1 e2 00	 shl	 edx, 0
  000f1	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  000f4	be 04 00 00 00	 mov	 esi, 4
  000f9	c1 e6 00	 shl	 esi, 0
  000fc	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000ff	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 209  :   dest[1][2] = mat[1][2];

  00102	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00107	c1 e0 00	 shl	 eax, 0
  0010a	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0010d	b9 04 00 00 00	 mov	 ecx, 4
  00112	d1 e1		 shl	 ecx, 1
  00114	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00119	c1 e2 00	 shl	 edx, 0
  0011c	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0011f	be 04 00 00 00	 mov	 esi, 4
  00124	d1 e6		 shl	 esi, 1
  00126	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00129	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 210  : 
; 211  :   dest[2][0] = mat[2][0];

  0012c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00131	d1 e0		 shl	 eax, 1
  00133	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00136	b9 04 00 00 00	 mov	 ecx, 4
  0013b	6b d1 00	 imul	 edx, ecx, 0
  0013e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00143	d1 e1		 shl	 ecx, 1
  00145	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00148	be 04 00 00 00	 mov	 esi, 4
  0014d	6b f6 00	 imul	 esi, esi, 0
  00150	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00153	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 212  :   dest[2][1] = mat[2][1];

  00156	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0015b	d1 e0		 shl	 eax, 1
  0015d	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00160	b9 04 00 00 00	 mov	 ecx, 4
  00165	c1 e1 00	 shl	 ecx, 0
  00168	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0016d	d1 e2		 shl	 edx, 1
  0016f	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00172	be 04 00 00 00	 mov	 esi, 4
  00177	c1 e6 00	 shl	 esi, 0
  0017a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0017d	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 213  :   dest[2][2] = mat[2][2];

  00180	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00185	d1 e0		 shl	 eax, 1
  00187	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0018a	b9 04 00 00 00	 mov	 ecx, 4
  0018f	d1 e1		 shl	 ecx, 1
  00191	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00196	d1 e2		 shl	 edx, 1
  00198	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0019b	be 04 00 00 00	 mov	 esi, 4
  001a0	d1 e6		 shl	 esi, 1
  001a2	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  001a5	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 214  : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001b1	3b ec		 cmp	 ebp, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_glm_mat4_pick3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_zero
_TEXT	SEGMENT
_t$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat4_zero PROC					; COMDAT

; 189  : glm_mat4_zero(mat4 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 190  :   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_ZERO_INIT;

  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	f3 0f 11 45 b0	 movss	 DWORD PTR _t$[ebp], xmm0
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 b4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 11 45 b8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  0005c	0f 57 c0	 xorps	 xmm0, xmm0
  0005f	f3 0f 11 45 bc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00064	0f 57 c0	 xorps	 xmm0, xmm0
  00067	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+32], xmm0
  0008c	0f 57 c0	 xorps	 xmm0, xmm0
  0008f	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+36], xmm0
  00094	0f 57 c0	 xorps	 xmm0, xmm0
  00097	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+40], xmm0
  0009c	0f 57 c0	 xorps	 xmm0, xmm0
  0009f	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+44], xmm0
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+48], xmm0
  000ac	0f 57 c0	 xorps	 xmm0, xmm0
  000af	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+52], xmm0
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+56], xmm0
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+60], xmm0

; 191  :   glm_mat4_copy(t, mat);

  000c4	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  000c7	50		 push	 eax
  000c8	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _glm_mat4_copy
  000d1	83 c4 08	 add	 esp, 8

; 192  : }

  000d4	52		 push	 edx
  000d5	8b cd		 mov	 ecx, ebp
  000d7	50		 push	 eax
  000d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_z
  000de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e3	58		 pop	 eax
  000e4	5a		 pop	 edx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	8b e3		 mov	 esp, ebx
  000f6	5b		 pop	 ebx
  000f7	c3		 ret	 0
$LN5@glm_mat4_z:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN4@glm_mat4_z
$LN4@glm_mat4_z:
  00100	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00104	40 00 00 00	 DD	 64			; 00000040H
  00108	00 00 00 00	 DD	 $LN3@glm_mat4_z
$LN3@glm_mat4_z:
  0010c	74		 DB	 116			; 00000074H
  0010d	00		 DB	 0
_glm_mat4_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_identity_array
_TEXT	SEGMENT
_i$ = -92						; size = 4
_t$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_count$ = 12						; size = 4
_glm_mat4_identity_array PROC				; COMDAT

; 173  : glm_mat4_identity_array(mat4 * __restrict mat, size_t count) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 174  :   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 b0	 movss	 DWORD PTR _t$[ebp], xmm0
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 45 b4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 b8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f3 0f 11 45 bc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00069	0f 57 c0	 xorps	 xmm0, xmm0
  0006c	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  00071	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00079	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  0008e	0f 57 c0	 xorps	 xmm0, xmm0
  00091	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+32], xmm0
  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+36], xmm0
  0009e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a6	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+40], xmm0
  000ab	0f 57 c0	 xorps	 xmm0, xmm0
  000ae	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+44], xmm0
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+48], xmm0
  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+52], xmm0
  000c3	0f 57 c0	 xorps	 xmm0, xmm0
  000c6	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+56], xmm0
  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d3	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+60], xmm0

; 175  :   size_t i;
; 176  : 
; 177  :   for (i = 0; i < count; i++) {

  000d8	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000df	eb 09		 jmp	 SHORT $LN4@glm_mat4_i
$LN2@glm_mat4_i:
  000e1	8b 45 a4	 mov	 eax, DWORD PTR _i$[ebp]
  000e4	83 c0 01	 add	 eax, 1
  000e7	89 45 a4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@glm_mat4_i:
  000ea	8b 45 a4	 mov	 eax, DWORD PTR _i$[ebp]
  000ed	3b 43 0c	 cmp	 eax, DWORD PTR _count$[ebx]
  000f0	73 18		 jae	 SHORT $LN3@glm_mat4_i

; 178  :     glm_mat4_copy(t, mat[i]);

  000f2	8b 45 a4	 mov	 eax, DWORD PTR _i$[ebp]
  000f5	c1 e0 06	 shl	 eax, 6
  000f8	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  000fb	50		 push	 eax
  000fc	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 _glm_mat4_copy
  00105	83 c4 08	 add	 esp, 8

; 179  :   }

  00108	eb d7		 jmp	 SHORT $LN2@glm_mat4_i
$LN3@glm_mat4_i:

; 180  : }

  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@glm_mat4_i
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00120	33 cd		 xor	 ecx, ebp
  00122	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	8b e3		 mov	 esp, ebx
  0012c	5b		 pop	 ebx
  0012d	c3		 ret	 0
  0012e	66 90		 npad	 2
$LN8@glm_mat4_i:
  00130	01 00 00 00	 DD	 1
  00134	00 00 00 00	 DD	 $LN7@glm_mat4_i
$LN7@glm_mat4_i:
  00138	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0013c	40 00 00 00	 DD	 64			; 00000040H
  00140	00 00 00 00	 DD	 $LN6@glm_mat4_i
$LN6@glm_mat4_i:
  00144	74		 DB	 116			; 00000074H
  00145	00		 DB	 0
_glm_mat4_identity_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_identity
_TEXT	SEGMENT
_t$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat4_identity PROC					; COMDAT

; 158  : glm_mat4_identity(mat4 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 159  :   CGLM_ALIGN_MAT mat4 t = GLM_MAT4_IDENTITY_INIT;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 b0	 movss	 DWORD PTR _t$[ebp], xmm0
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 45 b4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 b8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f3 0f 11 45 bc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00069	0f 57 c0	 xorps	 xmm0, xmm0
  0006c	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  00071	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00079	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  0008e	0f 57 c0	 xorps	 xmm0, xmm0
  00091	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+32], xmm0
  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+36], xmm0
  0009e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000a6	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+40], xmm0
  000ab	0f 57 c0	 xorps	 xmm0, xmm0
  000ae	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+44], xmm0
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+48], xmm0
  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	f3 0f 11 45 e4	 movss	 DWORD PTR _t$[ebp+52], xmm0
  000c3	0f 57 c0	 xorps	 xmm0, xmm0
  000c6	f3 0f 11 45 e8	 movss	 DWORD PTR _t$[ebp+56], xmm0
  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d3	f3 0f 11 45 ec	 movss	 DWORD PTR _t$[ebp+60], xmm0

; 160  :   glm_mat4_copy(t, mat);

  000d8	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  000db	50		 push	 eax
  000dc	8d 4d b0	 lea	 ecx, DWORD PTR _t$[ebp]
  000df	51		 push	 ecx
  000e0	e8 00 00 00 00	 call	 _glm_mat4_copy
  000e5	83 c4 08	 add	 esp, 8

; 161  : }

  000e8	52		 push	 edx
  000e9	8b cd		 mov	 ecx, ebp
  000eb	50		 push	 eax
  000ec	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat4_i
  000f2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f7	58		 pop	 eax
  000f8	5a		 pop	 edx
  000f9	5f		 pop	 edi
  000fa	5e		 pop	 esi
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fe	33 cd		 xor	 ecx, ebp
  00100	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	8b e3		 mov	 esp, ebx
  0010a	5b		 pop	 ebx
  0010b	c3		 ret	 0
$LN5@glm_mat4_i:
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN4@glm_mat4_i
$LN4@glm_mat4_i:
  00114	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00118	40 00 00 00	 DD	 64			; 00000040H
  0011c	00 00 00 00	 DD	 $LN3@glm_mat4_i
$LN3@glm_mat4_i:
  00120	74		 DB	 116			; 00000074H
  00121	00		 DB	 0
_glm_mat4_identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_copy PROC					; COMDAT

; 123  : glm_mat4_copy(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  : #ifdef __AVX__
; 125  :   glmm_store256(dest[0], glmm_load256(mat[0]));
; 126  :   glmm_store256(dest[2], glmm_load256(mat[2]));
; 127  : #elif defined( __SSE__ ) || defined( __SSE2__ )
; 128  :   glmm_store(dest[0], glmm_load(mat[0]));

  00028	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00036	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0003b	6b c2 00	 imul	 eax, edx, 0
  0003e	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00041	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 129  :   glmm_store(dest[1], glmm_load(mat[1]));

  00044	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00049	c1 e0 00	 shl	 eax, 0
  0004c	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0004f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00052	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00057	c1 e1 00	 shl	 ecx, 0
  0005a	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 130  :   glmm_store(dest[2], glmm_load(mat[2]));

  00060	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00065	d1 e0		 shl	 eax, 1
  00067	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0006a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00072	d1 e1		 shl	 ecx, 1
  00074	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00077	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 131  :   glmm_store(dest[3], glmm_load(mat[3]));

  0007a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00085	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00088	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0008d	6b c2 03	 imul	 eax, edx, 3
  00090	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00093	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 132  : #elif defined(CGLM_NEON_FP)
; 133  :   vst1q_f32(dest[0], vld1q_f32(mat[0]));
; 134  :   vst1q_f32(dest[1], vld1q_f32(mat[1]));
; 135  :   vst1q_f32(dest[2], vld1q_f32(mat[2]));
; 136  :   vst1q_f32(dest[3], vld1q_f32(mat[3]));
; 137  : #else
; 138  :   glm_mat4_ucopy(mat, dest);
; 139  : #endif
; 140  : }

  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
_glm_mat4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_inv_sse2
_TEXT	SEGMENT
_x7$ = -704						; size = 16
_x6$ = -672						; size = 16
_x5$ = -640						; size = 16
_x4$ = -608						; size = 16
_x3$ = -576						; size = 16
_x2$ = -544						; size = 16
_x1$ = -512						; size = 16
_x0$ = -480						; size = 16
_t5$ = -448						; size = 16
_t4$ = -416						; size = 16
_t3$ = -384						; size = 16
_t2$ = -352						; size = 16
_t1$ = -320						; size = 16
_t0$ = -288						; size = 16
_v3$ = -256						; size = 16
_v2$ = -224						; size = 16
_v1$ = -192						; size = 16
_v0$ = -160						; size = 16
_r3$ = -128						; size = 16
_r2$ = -96						; size = 16
_r1$ = -64						; size = 16
_r0$ = -32						; size = 16
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_inv_sse2 PROC					; COMDAT

; 282  : glm_mat4_inv_sse2(mat4 mat, mat4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 48 04 00
	00		 sub	 esp, 1096		; 00000448H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd b8 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1096]
  00024	b9 12 01 00 00	 mov	 ecx, 274		; 00000112H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 283  :   __m128 r0, r1, r2, r3,
; 284  :          v0, v1, v2, v3,
; 285  :          t0, t1, t2, t3, t4, t5,
; 286  :          x0, x1, x2, x3, x4, x5, x6, x7;
; 287  : 
; 288  :   /* 127 <- 0 */
; 289  :   r0 = glmm_load(mat[0]); /* d c b a */

  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 e0	 movaps	 XMMWORD PTR _r0$[ebp], xmm0

; 290  :   r1 = glmm_load(mat[1]); /* h g f e */

  0004c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00051	c1 e0 00	 shl	 eax, 0
  00054	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00057	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _r1$[ebp], xmm0

; 291  :   r2 = glmm_load(mat[2]); /* l k j i */

  0005e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00063	d1 e0		 shl	 eax, 1
  00065	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00068	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006b	0f 29 45 a0	 movaps	 XMMWORD PTR _r2$[ebp], xmm0

; 292  :   r3 = glmm_load(mat[3]); /* p o n m */

  0006f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00074	6b c8 03	 imul	 ecx, eax, 3
  00077	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  0007a	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0007d	0f 29 45 80	 movaps	 XMMWORD PTR _r3$[ebp], xmm0

; 293  : 
; 294  :   x0 = _mm_shuffle_ps(r2, r3, _MM_SHUFFLE(3, 2, 3, 2));  /* p o l k */

  00081	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00085	0f c6 45 80 ee	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 238 ; 000000eeH
  0008a	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 295  :   x1 = glmm_shuff1(x0, 1, 3, 3, 3);                      /* l p p p */

  00091	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00098	0f c6 85 20 fe
	ff ff 7f	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 127 ; 0000007fH
  000a0	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 296  :   x2 = glmm_shuff1(x0, 0, 2, 2, 2);                      /* k o o o */

  000a7	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000ae	0f c6 85 20 fe
	ff ff 2a	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 42 ; 0000002aH
  000b6	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 297  :   x0 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(3, 3, 3, 3));  /* h h l l */

  000bd	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000c1	0f c6 45 c0 ff	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 255 ; 000000ffH
  000c6	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 298  :   x3 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(2, 2, 2, 2));  /* g g k k */

  000cd	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000d1	0f c6 45 c0 aa	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 170 ; 000000aaH
  000d6	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 299  : 
; 300  :   /* t1[0] = k * p - o * l;
; 301  :      t1[0] = k * p - o * l;
; 302  :      t2[0] = g * p - o * h;
; 303  :      t3[0] = g * l - k * h; */
; 304  :   t0 = _mm_sub_ps(_mm_mul_ps(x3, x1), _mm_mul_ps(x2, x0));

  000dd	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  000e4	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  000eb	0f 28 8d c0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x3$[ebp]
  000f2	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  000f9	0f 5c c8	 subps	 xmm1, xmm0
  000fc	0f 29 8d e0 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm1

; 305  : 
; 306  :   x4 = _mm_shuffle_ps(r2, r3, _MM_SHUFFLE(2, 1, 2, 1)); /* o n k j */

  00103	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00107	0f c6 45 80 99	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 153 ; 00000099H
  0010c	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 307  :   x4 = glmm_shuff1(x4, 0, 2, 2, 2);                     /* j n n n */

  00113	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  0011a	0f c6 85 a0 fd
	ff ff 2a	 shufps	 xmm0, XMMWORD PTR _x4$[ebp], 42 ; 0000002aH
  00122	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 308  :   x5 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(1, 1, 1, 1)); /* f f j j */

  00129	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  0012d	0f c6 45 c0 55	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 85 ; 00000055H
  00132	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 309  : 
; 310  :   /* t1[1] = j * p - n * l;
; 311  :      t1[1] = j * p - n * l;
; 312  :      t2[1] = f * p - n * h;
; 313  :      t3[1] = f * l - j * h; */
; 314  :   t1 = _mm_sub_ps(_mm_mul_ps(x5, x1), _mm_mul_ps(x4, x0));

  00139	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00140	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  00147	0f 28 8d 80 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x5$[ebp]
  0014e	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  00155	0f 5c c8	 subps	 xmm1, xmm0
  00158	0f 29 8d c0 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm1

; 315  : 
; 316  :   /* t1[2] = j * o - n * k
; 317  :      t1[2] = j * o - n * k;
; 318  :      t2[2] = f * o - n * g;
; 319  :      t3[2] = f * k - j * g; */
; 320  :   t2 = _mm_sub_ps(_mm_mul_ps(x5, x2), _mm_mul_ps(x4, x3));

  0015f	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00166	0f 59 85 c0 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x3$[ebp]
  0016d	0f 28 8d 80 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x5$[ebp]
  00174	0f 59 8d e0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x2$[ebp]
  0017b	0f 5c c8	 subps	 xmm1, xmm0
  0017e	0f 29 8d a0 fe
	ff ff		 movaps	 XMMWORD PTR _t2$[ebp], xmm1

; 321  : 
; 322  :   x6 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(0, 0, 0, 0)); /* e e i i */

  00185	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00189	0f c6 45 c0 00	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 0
  0018e	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 323  :   x7 = glmm_shuff2(r3, r2, 0, 0, 0, 0, 2, 0, 0, 0);     /* i m m m */

  00195	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  00199	0f c6 45 a0 00	 shufps	 xmm0, XMMWORD PTR _r2$[ebp], 0
  0019e	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _r3$[ebp]
  001a2	0f c6 4d a0 00	 shufps	 xmm1, XMMWORD PTR _r2$[ebp], 0
  001a7	0f c6 c8 80	 shufps	 xmm1, xmm0, 128		; 00000080H
  001ab	0f 29 8d 40 fd
	ff ff		 movaps	 XMMWORD PTR _x7$[ebp], xmm1

; 324  : 
; 325  :   /* t1[3] = i * p - m * l;
; 326  :      t1[3] = i * p - m * l;
; 327  :      t2[3] = e * p - m * h;
; 328  :      t3[3] = e * l - i * h; */
; 329  :   t3 = _mm_sub_ps(_mm_mul_ps(x6, x1), _mm_mul_ps(x7, x0));

  001b2	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001b9	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  001c0	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  001c7	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  001ce	0f 5c c8	 subps	 xmm1, xmm0
  001d1	0f 29 8d 80 fe
	ff ff		 movaps	 XMMWORD PTR _t3$[ebp], xmm1

; 330  : 
; 331  :   /* t1[4] = i * o - m * k;
; 332  :      t1[4] = i * o - m * k;
; 333  :      t2[4] = e * o - m * g;
; 334  :      t3[4] = e * k - i * g; */
; 335  :   t4 = _mm_sub_ps(_mm_mul_ps(x6, x2), _mm_mul_ps(x7, x3));

  001d8	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001df	0f 59 85 c0 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x3$[ebp]
  001e6	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  001ed	0f 59 8d e0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x2$[ebp]
  001f4	0f 5c c8	 subps	 xmm1, xmm0
  001f7	0f 29 8d 60 fe
	ff ff		 movaps	 XMMWORD PTR _t4$[ebp], xmm1

; 336  : 
; 337  :   /* t1[5] = i * n - m * j;
; 338  :      t1[5] = i * n - m * j;
; 339  :      t2[5] = e * n - m * f;
; 340  :      t3[5] = e * j - i * f; */
; 341  :   t5 = _mm_sub_ps(_mm_mul_ps(x6, x4), _mm_mul_ps(x7, x5));

  001fe	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  00205	0f 59 85 80 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x5$[ebp]
  0020c	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  00213	0f 59 8d a0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x4$[ebp]
  0021a	0f 5c c8	 subps	 xmm1, xmm0
  0021d	0f 29 8d 40 fe
	ff ff		 movaps	 XMMWORD PTR _t5$[ebp], xmm1

; 342  : 
; 343  :   x0 = glmm_shuff2(r1, r0, 0, 0, 0, 0, 2, 2, 2, 0); /* a a a e */

  00224	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00228	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 0
  0022d	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  00231	0f c6 4d e0 00	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 0
  00236	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  0023a	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 344  :   x1 = glmm_shuff2(r1, r0, 1, 1, 1, 1, 2, 2, 2, 0); /* b b b f */

  00241	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00245	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 85 ; 00000055H
  0024a	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  0024e	0f c6 4d e0 55	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 85 ; 00000055H
  00253	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00257	0f 29 8d 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm1

; 345  :   x2 = glmm_shuff2(r1, r0, 2, 2, 2, 2, 2, 2, 2, 0); /* c c c g */

  0025e	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00262	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 170 ; 000000aaH
  00267	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  0026b	0f c6 4d e0 aa	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 170 ; 000000aaH
  00270	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00274	0f 29 8d e0 fd
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm1

; 346  :   x3 = glmm_shuff2(r1, r0, 3, 3, 3, 3, 2, 2, 2, 0); /* d d d h */

  0027b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  0027f	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 255 ; 000000ffH
  00284	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  00288	0f c6 4d e0 ff	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 255 ; 000000ffH
  0028d	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00291	0f 29 8d c0 fd
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm1

; 347  : 
; 348  :   /*
; 349  :    dest[0][0] =  f * t1[0] - g * t1[1] + h * t1[2];
; 350  :    dest[0][1] =-(b * t1[0] - c * t1[1] + d * t1[2]);
; 351  :    dest[0][2] =  b * t2[0] - c * t2[1] + d * t2[2];
; 352  :    dest[0][3] =-(b * t3[0] - c * t3[1] + d * t3[2]); */
; 353  :   v0 = _mm_add_ps(_mm_mul_ps(x3, t2),

  00298	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0029f	0f 59 85 c0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t1$[ebp]
  002a6	0f 28 8d 00 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x1$[ebp]
  002ad	0f 59 8d e0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t0$[ebp]
  002b4	0f 5c c8	 subps	 xmm1, xmm0
  002b7	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  002be	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t2$[ebp]
  002c5	0f 58 c1	 addps	 xmm0, xmm1
  002c8	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _v0$[ebp], xmm0

; 354  :                   _mm_sub_ps(_mm_mul_ps(x1, t0),
; 355  :                              _mm_mul_ps(x2, t1)));
; 356  :   v0 = _mm_xor_ps(v0, _mm_set_ps(-0.f, 0.f, -0.f, 0.f));

  002cf	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  002d6	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@80000000000000008000000000000000
  002dd	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _v0$[ebp], xmm0

; 357  : 
; 358  :   /*
; 359  :    dest[1][0] =-(e * t1[0] - g * t1[3] + h * t1[4]);
; 360  :    dest[1][1] =  a * t1[0] - c * t1[3] + d * t1[4];
; 361  :    dest[1][2] =-(a * t2[0] - c * t2[3] + d * t2[4]);
; 362  :    dest[1][3] =  a * t3[0] - c * t3[3] + d * t3[4]; */
; 363  :   v1 = _mm_add_ps(_mm_mul_ps(x3, t4),

  002e4	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  002eb	0f 59 85 80 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t3$[ebp]
  002f2	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  002f9	0f 59 8d e0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t0$[ebp]
  00300	0f 5c c8	 subps	 xmm1, xmm0
  00303	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0030a	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t4$[ebp]
  00311	0f 58 c1	 addps	 xmm0, xmm1
  00314	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _v1$[ebp], xmm0

; 364  :                   _mm_sub_ps(_mm_mul_ps(x0, t0),
; 365  :                              _mm_mul_ps(x2, t3)));
; 366  :   v1 = _mm_xor_ps(v1, _mm_set_ps(0.f, -0.f, 0.f, -0.f));

  0031b	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  00322	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@00000000800000000000000080000000
  00329	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _v1$[ebp], xmm0

; 367  : 
; 368  :   /*
; 369  :    dest[2][0] =  e * t1[1] - f * t1[3] + h * t1[5];
; 370  :    dest[2][1] =-(a * t1[1] - b * t1[3] + d * t1[5]);
; 371  :    dest[2][2] =  a * t2[1] - b * t2[3] + d * t2[5];
; 372  :    dest[2][3] =-(a * t3[1] - b * t3[3] + d * t3[5]);*/
; 373  :   v2 = _mm_add_ps(_mm_mul_ps(x3, t5),

  00330	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00337	0f 59 85 80 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t3$[ebp]
  0033e	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00345	0f 59 8d c0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t1$[ebp]
  0034c	0f 5c c8	 subps	 xmm1, xmm0
  0034f	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00356	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t5$[ebp]
  0035d	0f 58 c1	 addps	 xmm0, xmm1
  00360	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _v2$[ebp], xmm0

; 374  :                   _mm_sub_ps(_mm_mul_ps(x0, t1),
; 375  :                              _mm_mul_ps(x1, t3)));
; 376  :   v2 = _mm_xor_ps(v2, _mm_set_ps(-0.f, 0.f, -0.f, 0.f));

  00367	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  0036e	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@80000000000000008000000000000000
  00375	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _v2$[ebp], xmm0

; 377  : 
; 378  :   /*
; 379  :    dest[3][0] =-(e * t1[2] - f * t1[4] + g * t1[5]);
; 380  :    dest[3][1] =  a * t1[2] - b * t1[4] + c * t1[5];
; 381  :    dest[3][2] =-(a * t2[2] - b * t2[4] + c * t2[5]);
; 382  :    dest[3][3] =  a * t3[2] - b * t3[4] + c * t3[5]; */
; 383  :   v3 = _mm_add_ps(_mm_mul_ps(x2, t5),

  0037c	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00383	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t4$[ebp]
  0038a	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00391	0f 59 8d a0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t2$[ebp]
  00398	0f 5c c8	 subps	 xmm1, xmm0
  0039b	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  003a2	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t5$[ebp]
  003a9	0f 58 c1	 addps	 xmm0, xmm1
  003ac	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _v3$[ebp], xmm0

; 384  :                   _mm_sub_ps(_mm_mul_ps(x0, t2),
; 385  :                              _mm_mul_ps(x1, t4)));
; 386  :   v3 = _mm_xor_ps(v3, _mm_set_ps(0.f, -0.f, 0.f, -0.f));

  003b3	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v3$[ebp]
  003ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@00000000800000000000000080000000
  003c1	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _v3$[ebp], xmm0

; 387  : 
; 388  :   /* determinant */
; 389  :   x0 = _mm_shuffle_ps(v0, v1, _MM_SHUFFLE(0, 0, 0, 0));

  003c8	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  003cf	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _v1$[ebp], 0
  003d7	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 390  :   x1 = _mm_shuffle_ps(v2, v3, _MM_SHUFFLE(0, 0, 0, 0));

  003de	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  003e5	0f c6 85 00 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _v3$[ebp], 0
  003ed	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 391  :   x0 = _mm_shuffle_ps(x0, x1, _MM_SHUFFLE(2, 0, 2, 0));

  003f4	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  003fb	0f c6 85 00 fe
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _x1$[ebp], 136 ; 00000088H
  00403	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 392  : 
; 393  :   x0 = _mm_mul_ps(x0, r0);

  0040a	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00411	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _r0$[ebp]
  00415	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 394  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 0, 1, 2, 3));

  0041c	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00423	0f c6 85 20 fe
	ff ff 1b	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 27 ; 0000001bH
  0042b	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00432	0f 58 c8	 addps	 xmm1, xmm0
  00435	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 395  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 1, 0, 0, 1));

  0043c	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00443	0f c6 85 20 fe
	ff ff 41	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 65 ; 00000041H
  0044b	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00452	0f 58 c8	 addps	 xmm1, xmm0
  00455	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 396  :   x0 = _mm_div_ps(_mm_set1_ps(1.0f), x0);

  0045c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00463	0f 5e 85 20 fe
	ff ff		 divps	 xmm0, XMMWORD PTR _x0$[ebp]
  0046a	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 397  : 
; 398  :   glmm_store(dest[0], _mm_mul_ps(v0, x0));

  00471	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  00478	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  0047f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00484	6b c8 00	 imul	 ecx, eax, 0
  00487	03 4b 0c	 add	 ecx, DWORD PTR _dest$[ebx]
  0048a	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 399  :   glmm_store(dest[1], _mm_mul_ps(v1, x0));

  0048d	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  00494	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  0049b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004a0	c1 e0 00	 shl	 eax, 0
  004a3	03 43 0c	 add	 eax, DWORD PTR _dest$[ebx]
  004a6	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 400  :   glmm_store(dest[2], _mm_mul_ps(v2, x0));

  004a9	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  004b0	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  004b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004bc	d1 e0		 shl	 eax, 1
  004be	03 43 0c	 add	 eax, DWORD PTR _dest$[ebx]
  004c1	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 401  :   glmm_store(dest[3], _mm_mul_ps(v3, x0));

  004c4	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v3$[ebp]
  004cb	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  004d2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004d7	6b c8 03	 imul	 ecx, eax, 3
  004da	03 4b 0c	 add	 ecx, DWORD PTR _dest$[ebx]
  004dd	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 402  : }

  004e0	5f		 pop	 edi
  004e1	5e		 pop	 esi
  004e2	8b e5		 mov	 esp, ebp
  004e4	5d		 pop	 ebp
  004e5	8b e3		 mov	 esp, ebx
  004e7	5b		 pop	 ebx
  004e8	c3		 ret	 0
_glm_mat4_inv_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_inv_fast_sse2
_TEXT	SEGMENT
_x7$ = -704						; size = 16
_x6$ = -672						; size = 16
_x5$ = -640						; size = 16
_x4$ = -608						; size = 16
_x3$ = -576						; size = 16
_x2$ = -544						; size = 16
_x1$ = -512						; size = 16
_x0$ = -480						; size = 16
_t5$ = -448						; size = 16
_t4$ = -416						; size = 16
_t3$ = -384						; size = 16
_t2$ = -352						; size = 16
_t1$ = -320						; size = 16
_t0$ = -288						; size = 16
_v3$ = -256						; size = 16
_v2$ = -224						; size = 16
_v1$ = -192						; size = 16
_v0$ = -160						; size = 16
_r3$ = -128						; size = 16
_r2$ = -96						; size = 16
_r1$ = -64						; size = 16
_r0$ = -32						; size = 16
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_inv_fast_sse2 PROC				; COMDAT

; 158  : glm_mat4_inv_fast_sse2(mat4 mat, mat4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 48 04 00
	00		 sub	 esp, 1096		; 00000448H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd b8 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1096]
  00024	b9 12 01 00 00	 mov	 ecx, 274		; 00000112H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 159  :   __m128 r0, r1, r2, r3,
; 160  :          v0, v1, v2, v3,
; 161  :          t0, t1, t2, t3, t4, t5,
; 162  :          x0, x1, x2, x3, x4, x5, x6, x7;
; 163  : 
; 164  :   /* 127 <- 0 */
; 165  :   r0 = glmm_load(mat[0]); /* d c b a */

  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 e0	 movaps	 XMMWORD PTR _r0$[ebp], xmm0

; 166  :   r1 = glmm_load(mat[1]); /* h g f e */

  0004c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00051	c1 e0 00	 shl	 eax, 0
  00054	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00057	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _r1$[ebp], xmm0

; 167  :   r2 = glmm_load(mat[2]); /* l k j i */

  0005e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00063	d1 e0		 shl	 eax, 1
  00065	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00068	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006b	0f 29 45 a0	 movaps	 XMMWORD PTR _r2$[ebp], xmm0

; 168  :   r3 = glmm_load(mat[3]); /* p o n m */

  0006f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00074	6b c8 03	 imul	 ecx, eax, 3
  00077	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  0007a	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0007d	0f 29 45 80	 movaps	 XMMWORD PTR _r3$[ebp], xmm0

; 169  : 
; 170  :   x0 = _mm_shuffle_ps(r2, r3, _MM_SHUFFLE(3, 2, 3, 2));  /* p o l k */

  00081	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00085	0f c6 45 80 ee	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 238 ; 000000eeH
  0008a	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 171  :   x1 = glmm_shuff1(x0, 1, 3, 3, 3);                      /* l p p p */

  00091	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00098	0f c6 85 20 fe
	ff ff 7f	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 127 ; 0000007fH
  000a0	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 172  :   x2 = glmm_shuff1(x0, 0, 2, 2, 2);                      /* k o o o */

  000a7	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000ae	0f c6 85 20 fe
	ff ff 2a	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 42 ; 0000002aH
  000b6	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 173  :   x0 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(3, 3, 3, 3));  /* h h l l */

  000bd	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000c1	0f c6 45 c0 ff	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 255 ; 000000ffH
  000c6	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 174  :   x3 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(2, 2, 2, 2));  /* g g k k */

  000cd	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000d1	0f c6 45 c0 aa	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 170 ; 000000aaH
  000d6	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 175  : 
; 176  :   /* t1[0] = k * p - o * l;
; 177  :      t1[0] = k * p - o * l;
; 178  :      t2[0] = g * p - o * h;
; 179  :      t3[0] = g * l - k * h; */
; 180  :   t0 = _mm_sub_ps(_mm_mul_ps(x3, x1), _mm_mul_ps(x2, x0));

  000dd	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  000e4	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  000eb	0f 28 8d c0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x3$[ebp]
  000f2	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  000f9	0f 5c c8	 subps	 xmm1, xmm0
  000fc	0f 29 8d e0 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm1

; 181  : 
; 182  :   x4 = _mm_shuffle_ps(r2, r3, _MM_SHUFFLE(2, 1, 2, 1)); /* o n k j */

  00103	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00107	0f c6 45 80 99	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 153 ; 00000099H
  0010c	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 183  :   x4 = glmm_shuff1(x4, 0, 2, 2, 2);                     /* j n n n */

  00113	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  0011a	0f c6 85 a0 fd
	ff ff 2a	 shufps	 xmm0, XMMWORD PTR _x4$[ebp], 42 ; 0000002aH
  00122	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 184  :   x5 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(1, 1, 1, 1)); /* f f j j */

  00129	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  0012d	0f c6 45 c0 55	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 85 ; 00000055H
  00132	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 185  : 
; 186  :   /* t1[1] = j * p - n * l;
; 187  :      t1[1] = j * p - n * l;
; 188  :      t2[1] = f * p - n * h;
; 189  :      t3[1] = f * l - j * h; */
; 190  :   t1 = _mm_sub_ps(_mm_mul_ps(x5, x1), _mm_mul_ps(x4, x0));

  00139	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00140	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  00147	0f 28 8d 80 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x5$[ebp]
  0014e	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  00155	0f 5c c8	 subps	 xmm1, xmm0
  00158	0f 29 8d c0 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm1

; 191  : 
; 192  :   /* t1[2] = j * o - n * k
; 193  :      t1[2] = j * o - n * k;
; 194  :      t2[2] = f * o - n * g;
; 195  :      t3[2] = f * k - j * g; */
; 196  :   t2 = _mm_sub_ps(_mm_mul_ps(x5, x2), _mm_mul_ps(x4, x3));

  0015f	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00166	0f 59 85 c0 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x3$[ebp]
  0016d	0f 28 8d 80 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x5$[ebp]
  00174	0f 59 8d e0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x2$[ebp]
  0017b	0f 5c c8	 subps	 xmm1, xmm0
  0017e	0f 29 8d a0 fe
	ff ff		 movaps	 XMMWORD PTR _t2$[ebp], xmm1

; 197  : 
; 198  :   x6 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(0, 0, 0, 0)); /* e e i i */

  00185	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00189	0f c6 45 c0 00	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 0
  0018e	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 199  :   x7 = glmm_shuff2(r3, r2, 0, 0, 0, 0, 2, 0, 0, 0);     /* i m m m */

  00195	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  00199	0f c6 45 a0 00	 shufps	 xmm0, XMMWORD PTR _r2$[ebp], 0
  0019e	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _r3$[ebp]
  001a2	0f c6 4d a0 00	 shufps	 xmm1, XMMWORD PTR _r2$[ebp], 0
  001a7	0f c6 c8 80	 shufps	 xmm1, xmm0, 128		; 00000080H
  001ab	0f 29 8d 40 fd
	ff ff		 movaps	 XMMWORD PTR _x7$[ebp], xmm1

; 200  : 
; 201  :   /* t1[3] = i * p - m * l;
; 202  :      t1[3] = i * p - m * l;
; 203  :      t2[3] = e * p - m * h;
; 204  :      t3[3] = e * l - i * h; */
; 205  :   t3 = _mm_sub_ps(_mm_mul_ps(x6, x1), _mm_mul_ps(x7, x0));

  001b2	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001b9	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  001c0	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  001c7	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  001ce	0f 5c c8	 subps	 xmm1, xmm0
  001d1	0f 29 8d 80 fe
	ff ff		 movaps	 XMMWORD PTR _t3$[ebp], xmm1

; 206  : 
; 207  :   /* t1[4] = i * o - m * k;
; 208  :      t1[4] = i * o - m * k;
; 209  :      t2[4] = e * o - m * g;
; 210  :      t3[4] = e * k - i * g; */
; 211  :   t4 = _mm_sub_ps(_mm_mul_ps(x6, x2), _mm_mul_ps(x7, x3));

  001d8	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001df	0f 59 85 c0 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x3$[ebp]
  001e6	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  001ed	0f 59 8d e0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x2$[ebp]
  001f4	0f 5c c8	 subps	 xmm1, xmm0
  001f7	0f 29 8d 60 fe
	ff ff		 movaps	 XMMWORD PTR _t4$[ebp], xmm1

; 212  : 
; 213  :   /* t1[5] = i * n - m * j;
; 214  :      t1[5] = i * n - m * j;
; 215  :      t2[5] = e * n - m * f;
; 216  :      t3[5] = e * j - i * f; */
; 217  :   t5 = _mm_sub_ps(_mm_mul_ps(x6, x4), _mm_mul_ps(x7, x5));

  001fe	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  00205	0f 59 85 80 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x5$[ebp]
  0020c	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  00213	0f 59 8d a0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x4$[ebp]
  0021a	0f 5c c8	 subps	 xmm1, xmm0
  0021d	0f 29 8d 40 fe
	ff ff		 movaps	 XMMWORD PTR _t5$[ebp], xmm1

; 218  : 
; 219  :   x0 = glmm_shuff2(r1, r0, 0, 0, 0, 0, 2, 2, 2, 0); /* a a a e */

  00224	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00228	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 0
  0022d	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  00231	0f c6 4d e0 00	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 0
  00236	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  0023a	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 220  :   x1 = glmm_shuff2(r1, r0, 1, 1, 1, 1, 2, 2, 2, 0); /* b b b f */

  00241	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00245	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 85 ; 00000055H
  0024a	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  0024e	0f c6 4d e0 55	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 85 ; 00000055H
  00253	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00257	0f 29 8d 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm1

; 221  :   x2 = glmm_shuff2(r1, r0, 2, 2, 2, 2, 2, 2, 2, 0); /* c c c g */

  0025e	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00262	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 170 ; 000000aaH
  00267	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  0026b	0f c6 4d e0 aa	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 170 ; 000000aaH
  00270	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00274	0f 29 8d e0 fd
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm1

; 222  :   x3 = glmm_shuff2(r1, r0, 3, 3, 3, 3, 2, 2, 2, 0); /* d d d h */

  0027b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  0027f	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 255 ; 000000ffH
  00284	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  00288	0f c6 4d e0 ff	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 255 ; 000000ffH
  0028d	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00291	0f 29 8d c0 fd
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm1

; 223  : 
; 224  :   /*
; 225  :    dest[0][0] =  f * t1[0] - g * t1[1] + h * t1[2];
; 226  :    dest[0][1] =-(b * t1[0] - c * t1[1] + d * t1[2]);
; 227  :    dest[0][2] =  b * t2[0] - c * t2[1] + d * t2[2];
; 228  :    dest[0][3] =-(b * t3[0] - c * t3[1] + d * t3[2]); */
; 229  :   v0 = _mm_add_ps(_mm_mul_ps(x3, t2),

  00298	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0029f	0f 59 85 c0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t1$[ebp]
  002a6	0f 28 8d 00 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x1$[ebp]
  002ad	0f 59 8d e0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t0$[ebp]
  002b4	0f 5c c8	 subps	 xmm1, xmm0
  002b7	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  002be	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t2$[ebp]
  002c5	0f 58 c1	 addps	 xmm0, xmm1
  002c8	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _v0$[ebp], xmm0

; 230  :                   _mm_sub_ps(_mm_mul_ps(x1, t0),
; 231  :                              _mm_mul_ps(x2, t1)));
; 232  :   v0 = _mm_xor_ps(v0, _mm_set_ps(-0.f, 0.f, -0.f, 0.f));

  002cf	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  002d6	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@80000000000000008000000000000000
  002dd	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _v0$[ebp], xmm0

; 233  : 
; 234  :   /*
; 235  :    dest[1][0] =-(e * t1[0] - g * t1[3] + h * t1[4]);
; 236  :    dest[1][1] =  a * t1[0] - c * t1[3] + d * t1[4];
; 237  :    dest[1][2] =-(a * t2[0] - c * t2[3] + d * t2[4]);
; 238  :    dest[1][3] =  a * t3[0] - c * t3[3] + d * t3[4]; */
; 239  :   v1 = _mm_add_ps(_mm_mul_ps(x3, t4),

  002e4	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  002eb	0f 59 85 80 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t3$[ebp]
  002f2	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  002f9	0f 59 8d e0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t0$[ebp]
  00300	0f 5c c8	 subps	 xmm1, xmm0
  00303	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0030a	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t4$[ebp]
  00311	0f 58 c1	 addps	 xmm0, xmm1
  00314	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _v1$[ebp], xmm0

; 240  :                   _mm_sub_ps(_mm_mul_ps(x0, t0),
; 241  :                              _mm_mul_ps(x2, t3)));
; 242  :   v1 = _mm_xor_ps(v1, _mm_set_ps(0.f, -0.f, 0.f, -0.f));

  0031b	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  00322	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@00000000800000000000000080000000
  00329	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _v1$[ebp], xmm0

; 243  : 
; 244  :   /*
; 245  :    dest[2][0] =  e * t1[1] - f * t1[3] + h * t1[5];
; 246  :    dest[2][1] =-(a * t1[1] - b * t1[3] + d * t1[5]);
; 247  :    dest[2][2] =  a * t2[1] - b * t2[3] + d * t2[5];
; 248  :    dest[2][3] =-(a * t3[1] - b * t3[3] + d * t3[5]);*/
; 249  :   v2 = _mm_add_ps(_mm_mul_ps(x3, t5),

  00330	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00337	0f 59 85 80 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t3$[ebp]
  0033e	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00345	0f 59 8d c0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t1$[ebp]
  0034c	0f 5c c8	 subps	 xmm1, xmm0
  0034f	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00356	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t5$[ebp]
  0035d	0f 58 c1	 addps	 xmm0, xmm1
  00360	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _v2$[ebp], xmm0

; 250  :                   _mm_sub_ps(_mm_mul_ps(x0, t1),
; 251  :                              _mm_mul_ps(x1, t3)));
; 252  :   v2 = _mm_xor_ps(v2, _mm_set_ps(-0.f, 0.f, -0.f, 0.f));

  00367	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  0036e	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@80000000000000008000000000000000
  00375	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _v2$[ebp], xmm0

; 253  : 
; 254  :   /*
; 255  :    dest[3][0] =-(e * t1[2] - f * t1[4] + g * t1[5]);
; 256  :    dest[3][1] =  a * t1[2] - b * t1[4] + c * t1[5];
; 257  :    dest[3][2] =-(a * t2[2] - b * t2[4] + c * t2[5]);
; 258  :    dest[3][3] =  a * t3[2] - b * t3[4] + c * t3[5]; */
; 259  :   v3 = _mm_add_ps(_mm_mul_ps(x2, t5),

  0037c	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00383	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t4$[ebp]
  0038a	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00391	0f 59 8d a0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t2$[ebp]
  00398	0f 5c c8	 subps	 xmm1, xmm0
  0039b	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  003a2	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t5$[ebp]
  003a9	0f 58 c1	 addps	 xmm0, xmm1
  003ac	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _v3$[ebp], xmm0

; 260  :                   _mm_sub_ps(_mm_mul_ps(x0, t2),
; 261  :                              _mm_mul_ps(x1, t4)));
; 262  :   v3 = _mm_xor_ps(v3, _mm_set_ps(0.f, -0.f, 0.f, -0.f));

  003b3	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v3$[ebp]
  003ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@00000000800000000000000080000000
  003c1	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _v3$[ebp], xmm0

; 263  : 
; 264  :   /* determinant */
; 265  :   x0 = _mm_shuffle_ps(v0, v1, _MM_SHUFFLE(0, 0, 0, 0));

  003c8	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  003cf	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _v1$[ebp], 0
  003d7	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 266  :   x1 = _mm_shuffle_ps(v2, v3, _MM_SHUFFLE(0, 0, 0, 0));

  003de	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  003e5	0f c6 85 00 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _v3$[ebp], 0
  003ed	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 267  :   x0 = _mm_shuffle_ps(x0, x1, _MM_SHUFFLE(2, 0, 2, 0));

  003f4	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  003fb	0f c6 85 00 fe
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _x1$[ebp], 136 ; 00000088H
  00403	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 268  : 
; 269  :   x0 = _mm_mul_ps(x0, r0);

  0040a	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00411	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _r0$[ebp]
  00415	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 270  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 0, 1, 2, 3));

  0041c	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00423	0f c6 85 20 fe
	ff ff 1b	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 27 ; 0000001bH
  0042b	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00432	0f 58 c8	 addps	 xmm1, xmm0
  00435	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 271  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 1, 0, 0, 1));

  0043c	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00443	0f c6 85 20 fe
	ff ff 41	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 65 ; 00000041H
  0044b	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00452	0f 58 c8	 addps	 xmm1, xmm0
  00455	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 272  :   x0 = _mm_rcp_ps(x0);

  0045c	0f 53 85 20 fe
	ff ff		 rcpps	 xmm0, XMMWORD PTR _x0$[ebp]
  00463	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 273  : 
; 274  :   glmm_store(dest[0], _mm_mul_ps(v0, x0));

  0046a	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  00471	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  00478	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0047d	6b c8 00	 imul	 ecx, eax, 0
  00480	03 4b 0c	 add	 ecx, DWORD PTR _dest$[ebx]
  00483	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 275  :   glmm_store(dest[1], _mm_mul_ps(v1, x0));

  00486	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  0048d	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  00494	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00499	c1 e0 00	 shl	 eax, 0
  0049c	03 43 0c	 add	 eax, DWORD PTR _dest$[ebx]
  0049f	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 276  :   glmm_store(dest[2], _mm_mul_ps(v2, x0));

  004a2	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  004a9	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  004b0	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004b5	d1 e0		 shl	 eax, 1
  004b7	03 43 0c	 add	 eax, DWORD PTR _dest$[ebx]
  004ba	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 277  :   glmm_store(dest[3], _mm_mul_ps(v3, x0));

  004bd	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v3$[ebp]
  004c4	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  004cb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004d0	6b c8 03	 imul	 ecx, eax, 3
  004d3	03 4b 0c	 add	 ecx, DWORD PTR _dest$[ebx]
  004d6	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 278  : }

  004d9	5f		 pop	 edi
  004da	5e		 pop	 esi
  004db	8b e5		 mov	 esp, ebp
  004dd	5d		 pop	 ebp
  004de	8b e3		 mov	 esp, ebx
  004e0	5b		 pop	 ebx
  004e1	c3		 ret	 0
_glm_mat4_inv_fast_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_det_sse2
_TEXT	SEGMENT
tv232 = -424						; size = 4
_x2$ = -224						; size = 16
_x1$ = -192						; size = 16
_x0$ = -160						; size = 16
_r3$ = -128						; size = 16
_r2$ = -96						; size = 16
_r1$ = -64						; size = 16
_r0$ = -32						; size = 16
_mat$ = 8						; size = 4
_glm_mat4_det_sse2 PROC					; COMDAT

; 103  : glm_mat4_det_sse2(mat4 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a8 01 00
	00		 sub	 esp, 424		; 000001a8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 58 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-424]
  00024	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 104  :   __m128 r0, r1, r2, r3, x0, x1, x2;
; 105  : 
; 106  :   /* 127 <- 0, [square] det(A) = det(At) */
; 107  :   r0 = glmm_load(mat[0]); /* d c b a */

  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 e0	 movaps	 XMMWORD PTR _r0$[ebp], xmm0

; 108  :   r1 = glmm_load(mat[1]); /* h g f e */

  0004c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00051	c1 e0 00	 shl	 eax, 0
  00054	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00057	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _r1$[ebp], xmm0

; 109  :   r2 = glmm_load(mat[2]); /* l k j i */

  0005e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00063	d1 e0		 shl	 eax, 1
  00065	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00068	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006b	0f 29 45 a0	 movaps	 XMMWORD PTR _r2$[ebp], xmm0

; 110  :   r3 = glmm_load(mat[3]); /* p o n m */

  0006f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00074	6b c8 03	 imul	 ecx, eax, 3
  00077	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  0007a	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0007d	0f 29 45 80	 movaps	 XMMWORD PTR _r3$[ebp], xmm0

; 111  : 
; 112  :   /*
; 113  :    t[1] = j * p - n * l;
; 114  :    t[2] = j * o - n * k;
; 115  :    t[3] = i * p - m * l;
; 116  :    t[4] = i * o - m * k;
; 117  :    */
; 118  :   x0 = _mm_sub_ps(_mm_mul_ps(glmm_shuff1(r2, 0, 0, 1, 1),

  00081	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00085	0f c6 45 a0 bb	 shufps	 xmm0, XMMWORD PTR _r2$[ebp], 187 ; 000000bbH
  0008a	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _r3$[ebp]
  0008e	0f c6 4d 80 05	 shufps	 xmm1, XMMWORD PTR _r3$[ebp], 5
  00093	0f 59 c8	 mulps	 xmm1, xmm0
  00096	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  0009a	0f c6 45 80 bb	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 187 ; 000000bbH
  0009f	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _r2$[ebp]
  000a3	0f c6 55 a0 05	 shufps	 xmm2, XMMWORD PTR _r2$[ebp], 5
  000a8	0f 59 d0	 mulps	 xmm2, xmm0
  000ab	0f 5c d1	 subps	 xmm2, xmm1
  000ae	0f 29 95 60 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm2

; 119  :                              glmm_shuff1(r3, 2, 3, 2, 3)),
; 120  :                   _mm_mul_ps(glmm_shuff1(r3, 0, 0, 1, 1),
; 121  :                              glmm_shuff1(r2, 2, 3, 2, 3)));
; 122  :   /*
; 123  :    t[0] = k * p - o * l;
; 124  :    t[0] = k * p - o * l;
; 125  :    t[5] = i * n - m * j;
; 126  :    t[5] = i * n - m * j;
; 127  :    */
; 128  :   x1 = _mm_sub_ps(_mm_mul_ps(glmm_shuff1(r2, 0, 0, 2, 2),

  000b5	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000b9	0f c6 45 a0 5f	 shufps	 xmm0, XMMWORD PTR _r2$[ebp], 95 ; 0000005fH
  000be	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _r3$[ebp]
  000c2	0f c6 4d 80 0a	 shufps	 xmm1, XMMWORD PTR _r3$[ebp], 10 ; 0000000aH
  000c7	0f 59 c8	 mulps	 xmm1, xmm0
  000ca	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  000ce	0f c6 45 80 5f	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 95 ; 0000005fH
  000d3	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _r2$[ebp]
  000d7	0f c6 55 a0 0a	 shufps	 xmm2, XMMWORD PTR _r2$[ebp], 10 ; 0000000aH
  000dc	0f 59 d0	 mulps	 xmm2, xmm0
  000df	0f 5c d1	 subps	 xmm2, xmm1
  000e2	0f 29 95 40 ff
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm2

; 129  :                              glmm_shuff1(r3, 1, 1, 3, 3)),
; 130  :                   _mm_mul_ps(glmm_shuff1(r3, 0, 0, 2, 2),
; 131  :                              glmm_shuff1(r2, 1, 1, 3, 3)));
; 132  : 
; 133  :   /*
; 134  :      a * (f * t[0] - g * t[1] + h * t[2])
; 135  :    - b * (e * t[0] - g * t[3] + h * t[4])
; 136  :    + c * (e * t[1] - f * t[3] + h * t[5])
; 137  :    - d * (e * t[2] - f * t[4] + g * t[5])
; 138  :    */
; 139  :   x2 = _mm_sub_ps(_mm_mul_ps(glmm_shuff1(r1, 0, 0, 0, 1),

  000e9	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000f0	0f c6 85 60 ff
	ff ff e8	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 232 ; 000000e8H
  000f8	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  000fc	0f c6 4d c0 5a	 shufps	 xmm1, XMMWORD PTR _r1$[ebp], 90 ; 0000005aH
  00101	0f 59 c8	 mulps	 xmm1, xmm0
  00104	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  0010b	0f c6 85 60 ff
	ff ff 40	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 64 ; 00000040H
  00113	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _r1$[ebp]
  00117	0f c6 55 c0 01	 shufps	 xmm2, XMMWORD PTR _r1$[ebp], 1
  0011c	0f 59 d0	 mulps	 xmm2, xmm0
  0011f	0f 5c d1	 subps	 xmm2, xmm1
  00122	0f 29 95 20 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm2

; 140  :                              _mm_shuffle_ps(x1, x0, _MM_SHUFFLE(1, 0, 0, 0))),
; 141  :                   _mm_mul_ps(glmm_shuff1(r1, 1, 1, 2, 2),
; 142  :                              glmm_shuff1(x0, 3, 2, 2, 0)));
; 143  : 
; 144  :   x2 = _mm_add_ps(x2,

  00129	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00130	0f c6 85 40 ff
	ff ff ad	 shufps	 xmm0, XMMWORD PTR _x1$[ebp], 173 ; 000000adH
  00138	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  0013c	0f c6 4d c0 bf	 shufps	 xmm1, XMMWORD PTR _r1$[ebp], 191 ; 000000bfH
  00141	0f 59 c8	 mulps	 xmm1, xmm0
  00144	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0014b	0f 58 c1	 addps	 xmm0, xmm1
  0014e	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 145  :                   _mm_mul_ps(glmm_shuff1(r1, 2, 3, 3, 3),
; 146  :                              _mm_shuffle_ps(x0, x1, _MM_SHUFFLE(2, 2, 3, 1))));
; 147  :   x2 = _mm_xor_ps(x2, _mm_set_ps(-0.f, 0.f, -0.f, 0.f));

  00155	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0015c	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@80000000000000008000000000000000
  00163	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 148  : 
; 149  :   x0 = _mm_mul_ps(r0, x2);

  0016a	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  0016e	0f 59 85 20 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  00175	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 150  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 0, 1, 2, 3));

  0017c	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00183	0f c6 85 60 ff
	ff ff 1b	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 27 ; 0000001bH
  0018b	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00192	0f 58 c8	 addps	 xmm1, xmm0
  00195	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 151  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 1, 3, 3, 1));

  0019c	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  001a3	0f c6 85 60 ff
	ff ff 7d	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 125 ; 0000007dH
  001ab	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  001b2	0f 58 c8	 addps	 xmm1, xmm0
  001b5	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 152  : 
; 153  :   return _mm_cvtss_f32(x0);

  001bc	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  001c3	f3 0f 11 85 58
	fe ff ff	 movss	 DWORD PTR tv232[ebp], xmm0
  001cb	d9 85 58 fe ff
	ff		 fld	 DWORD PTR tv232[ebp]

; 154  : }

  001d1	5f		 pop	 edi
  001d2	5e		 pop	 esi
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	8b e3		 mov	 esp, ebx
  001d8	5b		 pop	 ebx
  001d9	c3		 ret	 0
_glm_mat4_det_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_mulv_sse2
_TEXT	SEGMENT
_x2$ = -96						; size = 16
_x1$ = -64						; size = 16
_x0$ = -32						; size = 16
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mulv_sse2 PROC				; COMDAT

; 88   : glm_mat4_mulv_sse2(mat4 m, vec4 v, vec4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 89   :   __m128 x0, x1, x2;
; 90   : 
; 91   :   x0 = glmm_load(v);

  0003a	8b 43 0c	 mov	 eax, DWORD PTR _v$[ebx]
  0003d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00040	0f 29 45 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 92   :   x1 = _mm_add_ps(_mm_mul_ps(glmm_load(m[0]), glmm_shuff1x(x0, 0)),

  00044	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00048	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 85 ; 00000055H
  0004d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00052	c1 e0 00	 shl	 eax, 0
  00055	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00058	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  0005b	0f 59 c8	 mulps	 xmm1, xmm0
  0005e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00062	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 0
  00067	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006c	6b d1 00	 imul	 edx, ecx, 0
  0006f	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  00072	0f 10 12	 movups	 xmm2, XMMWORD PTR [edx]
  00075	0f 59 d0	 mulps	 xmm2, xmm0
  00078	0f 58 d1	 addps	 xmm2, xmm1
  0007b	0f 29 55 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm2

; 93   :                   _mm_mul_ps(glmm_load(m[1]), glmm_shuff1x(x0, 1)));
; 94   : 
; 95   :   x2 = _mm_add_ps(_mm_mul_ps(glmm_load(m[2]), glmm_shuff1x(x0, 2)),

  0007f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00083	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 255 ; 000000ffH
  00088	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0008d	6b c8 03	 imul	 ecx, eax, 3
  00090	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  00093	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  00096	0f 59 c8	 mulps	 xmm1, xmm0
  00099	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0009d	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 170 ; 000000aaH
  000a2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000a7	d1 e2		 shl	 edx, 1
  000a9	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  000ac	0f 10 12	 movups	 xmm2, XMMWORD PTR [edx]
  000af	0f 59 d0	 mulps	 xmm2, xmm0
  000b2	0f 58 d1	 addps	 xmm2, xmm1
  000b5	0f 29 55 a0	 movaps	 XMMWORD PTR _x2$[ebp], xmm2

; 96   :                   _mm_mul_ps(glmm_load(m[3]), glmm_shuff1x(x0, 3)));
; 97   : 
; 98   :   glmm_store(dest, _mm_add_ps(x1, x2));

  000b9	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000bd	0f 58 45 a0	 addps	 xmm0, XMMWORD PTR _x2$[ebp]
  000c1	8b 43 10	 mov	 eax, DWORD PTR _dest$[ebx]
  000c4	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 99   : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	8b e3		 mov	 esp, ebx
  000ce	5b		 pop	 ebx
  000cf	c3		 ret	 0
_glm_mat4_mulv_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_mul_sse2
_TEXT	SEGMENT
_r$ = -160						; size = 16
_l3$ = -128						; size = 16
_l2$ = -96						; size = 16
_l1$ = -64						; size = 16
_l0$ = -32						; size = 16
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mul_sse2 PROC					; COMDAT

; 49   : glm_mat4_mul_sse2(mat4 m1, mat4 m2, mat4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 68 01 00
	00		 sub	 esp, 360		; 00000168H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 98 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-360]
  00024	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   /* D = R * L (Column-Major) */
; 51   : 
; 52   :   __m128 l0, l1, l2, l3, r;
; 53   : 
; 54   :   l0 = glmm_load(m1[0]);

  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _m1$[ebx]
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 e0	 movaps	 XMMWORD PTR _l0$[ebp], xmm0

; 55   :   l1 = glmm_load(m1[1]);

  0004c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00051	c1 e0 00	 shl	 eax, 0
  00054	03 43 08	 add	 eax, DWORD PTR _m1$[ebx]
  00057	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _l1$[ebp], xmm0

; 56   :   l2 = glmm_load(m1[2]);

  0005e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00063	d1 e0		 shl	 eax, 1
  00065	03 43 08	 add	 eax, DWORD PTR _m1$[ebx]
  00068	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006b	0f 29 45 a0	 movaps	 XMMWORD PTR _l2$[ebp], xmm0

; 57   :   l3 = glmm_load(m1[3]);

  0006f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00074	6b c8 03	 imul	 ecx, eax, 3
  00077	03 4b 08	 add	 ecx, DWORD PTR _m1$[ebx]
  0007a	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0007d	0f 29 45 80	 movaps	 XMMWORD PTR _l3$[ebp], xmm0

; 58   : 
; 59   :   r = glmm_load(m2[0]);

  00081	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00086	6b c8 00	 imul	 ecx, eax, 0
  00089	03 4b 0c	 add	 ecx, DWORD PTR _m2$[ebx]
  0008c	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0008f	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _r$[ebp], xmm0

; 60   :   glmm_store(dest[0],

  00096	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r$[ebp]
  0009d	0f c6 85 60 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _r$[ebp], 255 ; 000000ffH
  000a5	0f 59 45 80	 mulps	 xmm0, XMMWORD PTR _l3$[ebp]
  000a9	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _r$[ebp]
  000b0	0f c6 8d 60 ff
	ff ff aa	 shufps	 xmm1, XMMWORD PTR _r$[ebp], 170 ; 000000aaH
  000b8	0f 59 4d a0	 mulps	 xmm1, XMMWORD PTR _l2$[ebp]
  000bc	0f 58 c8	 addps	 xmm1, xmm0
  000bf	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r$[ebp]
  000c6	0f c6 85 60 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _r$[ebp], 85 ; 00000055H
  000ce	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _l1$[ebp]
  000d2	0f 28 95 60 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _r$[ebp]
  000d9	0f c6 95 60 ff
	ff ff 00	 shufps	 xmm2, XMMWORD PTR _r$[ebp], 0
  000e1	0f 59 55 e0	 mulps	 xmm2, XMMWORD PTR _l0$[ebp]
  000e5	0f 58 d0	 addps	 xmm2, xmm0
  000e8	0f 58 d1	 addps	 xmm2, xmm1
  000eb	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000f0	6b c8 00	 imul	 ecx, eax, 0
  000f3	03 4b 10	 add	 ecx, DWORD PTR _dest$[ebx]
  000f6	0f 11 11	 movups	 XMMWORD PTR [ecx], xmm2

; 61   :              _mm_add_ps(_mm_add_ps(_mm_mul_ps(glmm_shuff1x(r, 0), l0),
; 62   :                                    _mm_mul_ps(glmm_shuff1x(r, 1), l1)),
; 63   :                         _mm_add_ps(_mm_mul_ps(glmm_shuff1x(r, 2), l2),
; 64   :                                    _mm_mul_ps(glmm_shuff1x(r, 3), l3))));
; 65   :   r = glmm_load(m2[1]);

  000f9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000fe	c1 e0 00	 shl	 eax, 0
  00101	03 43 0c	 add	 eax, DWORD PTR _m2$[ebx]
  00104	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00107	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _r$[ebp], xmm0

; 66   :   glmm_store(dest[1],

  0010e	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r$[ebp]
  00115	0f c6 85 60 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _r$[ebp], 255 ; 000000ffH
  0011d	0f 59 45 80	 mulps	 xmm0, XMMWORD PTR _l3$[ebp]
  00121	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _r$[ebp]
  00128	0f c6 8d 60 ff
	ff ff aa	 shufps	 xmm1, XMMWORD PTR _r$[ebp], 170 ; 000000aaH
  00130	0f 59 4d a0	 mulps	 xmm1, XMMWORD PTR _l2$[ebp]
  00134	0f 58 c8	 addps	 xmm1, xmm0
  00137	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r$[ebp]
  0013e	0f c6 85 60 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _r$[ebp], 85 ; 00000055H
  00146	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _l1$[ebp]
  0014a	0f 28 95 60 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _r$[ebp]
  00151	0f c6 95 60 ff
	ff ff 00	 shufps	 xmm2, XMMWORD PTR _r$[ebp], 0
  00159	0f 59 55 e0	 mulps	 xmm2, XMMWORD PTR _l0$[ebp]
  0015d	0f 58 d0	 addps	 xmm2, xmm0
  00160	0f 58 d1	 addps	 xmm2, xmm1
  00163	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00168	c1 e0 00	 shl	 eax, 0
  0016b	03 43 10	 add	 eax, DWORD PTR _dest$[ebx]
  0016e	0f 11 10	 movups	 XMMWORD PTR [eax], xmm2

; 67   :              _mm_add_ps(_mm_add_ps(_mm_mul_ps(glmm_shuff1x(r, 0), l0),
; 68   :                                    _mm_mul_ps(glmm_shuff1x(r, 1), l1)),
; 69   :                         _mm_add_ps(_mm_mul_ps(glmm_shuff1x(r, 2), l2),
; 70   :                                    _mm_mul_ps(glmm_shuff1x(r, 3), l3))));
; 71   :   r = glmm_load(m2[2]);

  00171	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00176	d1 e0		 shl	 eax, 1
  00178	03 43 0c	 add	 eax, DWORD PTR _m2$[ebx]
  0017b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0017e	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _r$[ebp], xmm0

; 72   :   glmm_store(dest[2],

  00185	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r$[ebp]
  0018c	0f c6 85 60 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _r$[ebp], 255 ; 000000ffH
  00194	0f 59 45 80	 mulps	 xmm0, XMMWORD PTR _l3$[ebp]
  00198	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _r$[ebp]
  0019f	0f c6 8d 60 ff
	ff ff aa	 shufps	 xmm1, XMMWORD PTR _r$[ebp], 170 ; 000000aaH
  001a7	0f 59 4d a0	 mulps	 xmm1, XMMWORD PTR _l2$[ebp]
  001ab	0f 58 c8	 addps	 xmm1, xmm0
  001ae	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r$[ebp]
  001b5	0f c6 85 60 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _r$[ebp], 85 ; 00000055H
  001bd	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _l1$[ebp]
  001c1	0f 28 95 60 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _r$[ebp]
  001c8	0f c6 95 60 ff
	ff ff 00	 shufps	 xmm2, XMMWORD PTR _r$[ebp], 0
  001d0	0f 59 55 e0	 mulps	 xmm2, XMMWORD PTR _l0$[ebp]
  001d4	0f 58 d0	 addps	 xmm2, xmm0
  001d7	0f 58 d1	 addps	 xmm2, xmm1
  001da	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001df	d1 e0		 shl	 eax, 1
  001e1	03 43 10	 add	 eax, DWORD PTR _dest$[ebx]
  001e4	0f 11 10	 movups	 XMMWORD PTR [eax], xmm2

; 73   :              _mm_add_ps(_mm_add_ps(_mm_mul_ps(glmm_shuff1x(r, 0), l0),
; 74   :                                    _mm_mul_ps(glmm_shuff1x(r, 1), l1)),
; 75   :                         _mm_add_ps(_mm_mul_ps(glmm_shuff1x(r, 2), l2),
; 76   :                                    _mm_mul_ps(glmm_shuff1x(r, 3), l3))));
; 77   : 
; 78   :   r = glmm_load(m2[3]);

  001e7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001ec	6b c8 03	 imul	 ecx, eax, 3
  001ef	03 4b 0c	 add	 ecx, DWORD PTR _m2$[ebx]
  001f2	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  001f5	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _r$[ebp], xmm0

; 79   :   glmm_store(dest[3],

  001fc	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r$[ebp]
  00203	0f c6 85 60 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _r$[ebp], 255 ; 000000ffH
  0020b	0f 59 45 80	 mulps	 xmm0, XMMWORD PTR _l3$[ebp]
  0020f	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _r$[ebp]
  00216	0f c6 8d 60 ff
	ff ff aa	 shufps	 xmm1, XMMWORD PTR _r$[ebp], 170 ; 000000aaH
  0021e	0f 59 4d a0	 mulps	 xmm1, XMMWORD PTR _l2$[ebp]
  00222	0f 58 c8	 addps	 xmm1, xmm0
  00225	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r$[ebp]
  0022c	0f c6 85 60 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _r$[ebp], 85 ; 00000055H
  00234	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _l1$[ebp]
  00238	0f 28 95 60 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _r$[ebp]
  0023f	0f c6 95 60 ff
	ff ff 00	 shufps	 xmm2, XMMWORD PTR _r$[ebp], 0
  00247	0f 59 55 e0	 mulps	 xmm2, XMMWORD PTR _l0$[ebp]
  0024b	0f 58 d0	 addps	 xmm2, xmm0
  0024e	0f 58 d1	 addps	 xmm2, xmm1
  00251	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00256	6b c8 03	 imul	 ecx, eax, 3
  00259	03 4b 10	 add	 ecx, DWORD PTR _dest$[ebx]
  0025c	0f 11 11	 movups	 XMMWORD PTR [ecx], xmm2

; 80   :              _mm_add_ps(_mm_add_ps(_mm_mul_ps(glmm_shuff1x(r, 0), l0),
; 81   :                                    _mm_mul_ps(glmm_shuff1x(r, 1), l1)),
; 82   :                         _mm_add_ps(_mm_mul_ps(glmm_shuff1x(r, 2), l2),
; 83   :                                    _mm_mul_ps(glmm_shuff1x(r, 3), l3))));
; 84   : }

  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	8b e3		 mov	 esp, ebx
  00266	5b		 pop	 ebx
  00267	c3		 ret	 0
_glm_mat4_mul_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_transp_sse2
_TEXT	SEGMENT
__Tmp0$1 = -256						; size = 16
__Tmp1$2 = -224						; size = 16
__Tmp2$3 = -192						; size = 16
__Tmp3$4 = -160						; size = 16
_r3$ = -128						; size = 16
_r2$ = -96						; size = 16
_r1$ = -64						; size = 16
_r0$ = -32						; size = 16
_m$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_mat4_transp_sse2 PROC				; COMDAT

; 31   : glm_mat4_transp_sse2(mat4 m, mat4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c8 01 00
	00		 sub	 esp, 456		; 000001c8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 38 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-456]
  00024	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   __m128 r0, r1, r2, r3;
; 33   : 
; 34   :   r0 = glmm_load(m[0]);

  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 e0	 movaps	 XMMWORD PTR _r0$[ebp], xmm0

; 35   :   r1 = glmm_load(m[1]);

  0004c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00051	c1 e0 00	 shl	 eax, 0
  00054	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00057	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _r1$[ebp], xmm0

; 36   :   r2 = glmm_load(m[2]);

  0005e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00063	d1 e0		 shl	 eax, 1
  00065	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00068	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006b	0f 29 45 a0	 movaps	 XMMWORD PTR _r2$[ebp], xmm0

; 37   :   r3 = glmm_load(m[3]);

  0006f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00074	6b c8 03	 imul	 ecx, eax, 3
  00077	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  0007a	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0007d	0f 29 45 80	 movaps	 XMMWORD PTR _r3$[ebp], xmm0

; 38   : 
; 39   :   _MM_TRANSPOSE4_PS(r0, r1, r2, r3);

  00081	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  00085	0f c6 45 c0 44	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 68 ; 00000044H
  0008a	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR __Tmp0$1[ebp], xmm0
  00091	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  00095	0f c6 45 c0 ee	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 238 ; 000000eeH
  0009a	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR __Tmp2$3[ebp], xmm0
  000a1	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000a5	0f c6 45 80 44	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 68 ; 00000044H
  000aa	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR __Tmp1$2[ebp], xmm0
  000b1	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000b5	0f c6 45 80 ee	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 238 ; 000000eeH
  000ba	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR __Tmp3$4[ebp], xmm0
  000c1	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR __Tmp0$1[ebp]
  000c8	0f c6 85 20 ff
	ff ff 88	 shufps	 xmm0, XMMWORD PTR __Tmp1$2[ebp], 136 ; 00000088H
  000d0	0f 29 45 e0	 movaps	 XMMWORD PTR _r0$[ebp], xmm0
  000d4	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR __Tmp0$1[ebp]
  000db	0f c6 85 20 ff
	ff ff dd	 shufps	 xmm0, XMMWORD PTR __Tmp1$2[ebp], 221 ; 000000ddH
  000e3	0f 29 45 c0	 movaps	 XMMWORD PTR _r1$[ebp], xmm0
  000e7	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR __Tmp2$3[ebp]
  000ee	0f c6 85 60 ff
	ff ff 88	 shufps	 xmm0, XMMWORD PTR __Tmp3$4[ebp], 136 ; 00000088H
  000f6	0f 29 45 a0	 movaps	 XMMWORD PTR _r2$[ebp], xmm0
  000fa	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR __Tmp2$3[ebp]
  00101	0f c6 85 60 ff
	ff ff dd	 shufps	 xmm0, XMMWORD PTR __Tmp3$4[ebp], 221 ; 000000ddH
  00109	0f 29 45 80	 movaps	 XMMWORD PTR _r3$[ebp], xmm0

; 40   : 
; 41   :   glmm_store(dest[0], r0);

  0010d	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  00111	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00116	6b c8 00	 imul	 ecx, eax, 0
  00119	03 4b 0c	 add	 ecx, DWORD PTR _dest$[ebx]
  0011c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 42   :   glmm_store(dest[1], r1);

  0011f	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00123	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00128	c1 e0 00	 shl	 eax, 0
  0012b	03 43 0c	 add	 eax, DWORD PTR _dest$[ebx]
  0012e	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 43   :   glmm_store(dest[2], r2);

  00131	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00135	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0013a	d1 e0		 shl	 eax, 1
  0013c	03 43 0c	 add	 eax, DWORD PTR _dest$[ebx]
  0013f	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 44   :   glmm_store(dest[3], r3);

  00142	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  00146	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0014b	6b c8 03	 imul	 ecx, eax, 3
  0014e	03 4b 0c	 add	 ecx, DWORD PTR _dest$[ebx]
  00151	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 45   : }

  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	8b e3		 mov	 esp, ebx
  0015b	5b		 pop	 ebx
  0015c	c3		 ret	 0
_glm_mat4_transp_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_scale_sse2
_TEXT	SEGMENT
_x0$ = -32						; size = 16
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glm_mat4_scale_sse2 PROC				; COMDAT

; 19   : glm_mat4_scale_sse2(mat4 m, float s) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   __m128 x0;
; 21   :   x0 = _mm_set1_ps(s);

  0003a	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _s$[ebx]
  0003f	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00043	0f 29 45 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 22   : 
; 23   :   glmm_store(m[0], _mm_mul_ps(glmm_load(m[0]), x0));

  00047	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004c	6b c8 00	 imul	 ecx, eax, 0
  0004f	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  00052	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00055	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  00059	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0005e	6b c2 00	 imul	 eax, edx, 0
  00061	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00064	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 24   :   glmm_store(m[1], _mm_mul_ps(glmm_load(m[1]), x0));

  00067	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0006c	c1 e0 00	 shl	 eax, 0
  0006f	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00072	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00075	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  00079	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007e	c1 e1 00	 shl	 ecx, 0
  00081	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  00084	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 25   :   glmm_store(m[2], _mm_mul_ps(glmm_load(m[2]), x0));

  00087	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0008c	d1 e0		 shl	 eax, 1
  0008e	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00091	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00094	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  00098	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0009d	d1 e1		 shl	 ecx, 1
  0009f	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  000a2	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 26   :   glmm_store(m[3], _mm_mul_ps(glmm_load(m[3]), x0));

  000a5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000aa	6b c8 03	 imul	 ecx, eax, 3
  000ad	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  000b0	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000b3	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  000b7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000bc	6b c2 03	 imul	 eax, edx, 3
  000bf	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  000c2	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 27   : }

  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	8b e3		 mov	 esp, ebx
  000cc	5b		 pop	 ebx
  000cd	c3		 ret	 0
_glm_mat4_scale_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3
_TEXT	SEGMENT
_v4$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_vec3 PROC						; COMDAT

; 132  : glm_vec3(vec4 v4, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  :   dest[0] = v4[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 134  :   dest[1] = v4[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 135  :   dest[2] = v4[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 136  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_dot
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_glm_vec4_dot PROC					; COMDAT

; 219  : glm_vec4_dot(vec4 a, vec4 b) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 220  : #if defined(CGLM_SIMD)
; 221  :   return glmm_dot(glmm_load(a), glmm_load(b));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00031	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00034	e8 00 00 00 00	 call	 _glmm_dot

; 222  : #else
; 223  :   return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
; 224  : #endif
; 225  : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_glm_vec4_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_copy
_TEXT	SEGMENT
_v$ = 8							; size = 4
_dest$ = 12						; size = 4
_glm_vec4_copy PROC					; COMDAT

; 139  : glm_vec4_copy(vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 140  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 141  :   glmm_store(dest, glmm_load(v));

  00028	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _dest$[ebp]
  00031	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 142  : #elif defined(CGLM_NEON_FP)
; 143  :   vst1q_f32(dest, vld1q_f32(v));
; 144  : #else
; 145  :   dest[0] = v[0];
; 146  :   dest[1] = v[1];
; 147  :   dest[2] = v[2];
; 148  :   dest[3] = v[3];
; 149  : #endif
; 150  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_glm_vec4_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4
_TEXT	SEGMENT
_v3$ = 8						; size = 4
_last$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4 PROC						; COMDAT

; 110  : glm_vec4(vec3 v3, float last, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  :   dest[0] = v3[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 112  :   dest[1] = v3[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 113  :   dest[2] = v3[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 114  :   dest[3] = last;

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00085	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _last$[ebp]
  0008a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 115  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_glm_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_dot
_TEXT	SEGMENT
tv69 = -264						; size = 4
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_glmm_dot PROC						; COMDAT
; _a$ = xmm0
; _b$ = xmm1

; 144  : glmm_dot(__m128 a, __m128 b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 4d c0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  :   return _mm_cvtss_f32(glmm_vdots(a, b));

  00042	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _b$[ebp]
  00046	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  0004a	e8 00 00 00 00	 call	 _glmm_vdots
  0004f	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR tv69[ebp], xmm0
  00057	d9 85 f8 fe ff
	ff		 fld	 DWORD PTR tv69[ebp]

; 146  : }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	8b e3		 mov	 esp, ebx
  00064	5b		 pop	 ebx
  00065	c3		 ret	 0
_glmm_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vdots
_TEXT	SEGMENT
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_glmm_vdots PROC					; COMDAT
; _a$ = xmm0
; _b$ = xmm1

; 111  : glmm_vdots(__m128 a, __m128 b) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 4d c0	 movaps	 XMMWORD PTR _b$[ebp], xmm1
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR _a$[ebp], xmm0
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 112  : #if (defined(__SSE4_1__) || defined(__SSE4_2__)) && defined(CGLM_SSE4_DOT)
; 113  :   return _mm_dp_ps(a, b, 0xFF);
; 114  : #elif defined(__SSE3__) && defined(CGLM_SSE3_DOT)
; 115  :   __m128 x0, x1;
; 116  :   x0 = _mm_mul_ps(a, b);
; 117  :   x1 = _mm_hadd_ps(x0, x0);
; 118  :   return _mm_hadd_ps(x1, x1);
; 119  : #else
; 120  :   return glmm_vhadds(_mm_mul_ps(a, b));

  00042	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _a$[ebp]
  00046	0f 59 45 c0	 mulps	 xmm0, XMMWORD PTR _b$[ebp]
  0004a	e8 00 00 00 00	 call	 _glmm_vhadds

; 121  : #endif
; 122  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	8b e3		 mov	 esp, ebx
  00056	5b		 pop	 ebx
  00057	c3		 ret	 0
_glmm_vdots ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\x86.h
;	COMDAT _glmm_vhadds
_TEXT	SEGMENT
_sums$ = -96						; size = 16
_shuf$ = -64						; size = 16
_v$ = -32						; size = 16
_glmm_vhadds PROC					; COMDAT
; _v$ = xmm0

; 53   : glmm_vhadds(__m128 v) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 e0	 movaps	 XMMWORD PTR _v$[ebp], xmm0
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET __01CC0242_x86@h
  00039	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 54   : #if defined(__SSE3__)
; 55   :   __m128 shuf, sums;
; 56   :   shuf = _mm_movehdup_ps(v);
; 57   :   sums = _mm_add_ps(v, shuf);
; 58   :   shuf = _mm_movehl_ps(shuf, sums);
; 59   :   sums = _mm_add_ss(sums, shuf);
; 60   :   return sums;
; 61   : #else
; 62   :   __m128 shuf, sums;
; 63   :   shuf = glmm_shuff1(v, 2, 3, 0, 1);

  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  00042	0f c6 45 e0 b1	 shufps	 xmm0, XMMWORD PTR _v$[ebp], 177 ; 000000b1H
  00047	0f 29 45 c0	 movaps	 XMMWORD PTR _shuf$[ebp], xmm0

; 64   :   sums = _mm_add_ps(v, shuf);

  0004b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  0004f	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _shuf$[ebp]
  00053	0f 29 45 a0	 movaps	 XMMWORD PTR _sums$[ebp], xmm0

; 65   :   shuf = _mm_movehl_ps(shuf, sums);

  00057	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]
  0005b	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _shuf$[ebp]
  0005f	0f 12 c8	 movhlps xmm1, xmm0
  00062	0f 29 4d c0	 movaps	 XMMWORD PTR _shuf$[ebp], xmm1

; 66   :   sums = _mm_add_ss(sums, shuf);

  00066	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]
  0006a	f3 0f 58 45 c0	 addss	 xmm0, XMMWORD PTR _shuf$[ebp]
  0006f	0f 29 45 a0	 movaps	 XMMWORD PTR _sums$[ebp], xmm0

; 67   :   return sums;

  00073	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _sums$[ebp]

; 68   : #endif
; 69   : }

  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	8b e3		 mov	 esp, ebx
  0007e	5b		 pop	 ebx
  0007f	c3		 ret	 0
_glmm_vhadds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 760  :             return (float)sqrt(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sqrt
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 761  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
END
