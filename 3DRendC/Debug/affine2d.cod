; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

	TITLE	C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__D164993B_x86@h DB 01H
__51BD2C42_util@h DB 01H
__34F2E310_vec2-ext@h DB 01H
__83360300_vec2@h DB 01H
__9285E8A4_vec3-ext@h DB 01H
__5722D62A_vec4-ext@h DB 01H
__87BB7FB2_vec4@h DB 01H
__82F46937_vec3@h DB 01H
__6C51F661_mat4@h DB 01H
__D6E4440C_mat4@h DB 01H
__691EE0E4_mat3@h DB 01H
__D3AB5289_mat3@h DB 01H
__68DC8AD3_mat2@h DB 01H
__D26938BE_mat2@h DB 01H
__EF0FC99D_affine@h DB 01H
__8C09B87C_affine-mat@h DB 01H
__1A33B462_affine@h DB 01H
__26C2D243_plane@h DB 01H
__B1B2DC28_cam@h DB 01H
__26922CBA_frustum@h DB 01H
__9A782FAE_quat@h DB 01H
__20CD9DC3_quat@h DB 01H
__0105C43C_euler@h DB 01H
__76E0E330_box@h DB 01H
__AF25309F_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__98FD395E_io@h DB 01H
__253AA91C_project@h DB 01H
__C5964F96_sphere@h DB 01H
__CA1EBA5F_ease@h DB 01H
__E6C09561_curve@h DB 01H
__1F285908_bezier@h DB 01H
__F71D69B6_ray@h DB 01H
__C07C9586_affine2d@h DB 01H
__3F8BA224_vec3@h DB 01H
__3AC4B4A1_vec4@h DB 01H
__C910494F_affine2d@c DB 01H
msvcjmc	ENDS
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_glm_mat3_copy
PUBLIC	_glm_mat3_identity
PUBLIC	_glm_translate2d
PUBLIC	_glm_translate2d_to
PUBLIC	_glm_translate2d_x
PUBLIC	_glm_translate2d_y
PUBLIC	_glm_translate2d_make
PUBLIC	_glm_scale2d_to
PUBLIC	_glm_scale2d_make
PUBLIC	_glm_scale2d
PUBLIC	_glm_scale2d_uni
PUBLIC	_glm_rotate2d_make
PUBLIC	_glm_rotate2d
PUBLIC	_glm_rotate2d_to
PUBLIC	_glmc_translate2d_make
PUBLIC	_glmc_translate2d_to
PUBLIC	_glmc_translate2d
PUBLIC	_glmc_translate2d_x
PUBLIC	_glmc_translate2d_y
PUBLIC	_glmc_scale2d_to
PUBLIC	_glmc_scale2d_make
PUBLIC	_glmc_scale2d
PUBLIC	_glmc_scale2d_uni
PUBLIC	_glmc_rotate2d_make
PUBLIC	_glmc_rotate2d
PUBLIC	_glmc_rotate2d_to
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_rotate2d_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_angle$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_rotate2d_to PROC					; COMDAT

; 79   : glmc_rotate2d_to(mat3 m, float angle, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   :   glm_rotate2d_to(m, angle, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _glm_rotate2d_to
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 81   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_glmc_rotate2d_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_rotate2d
_TEXT	SEGMENT
_m$ = 8							; size = 4
_angle$ = 12						; size = 4
_glmc_rotate2d PROC					; COMDAT

; 73   : glmc_rotate2d(mat3 m, float angle) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :   glm_rotate2d(m, angle);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_rotate2d
  0003c	83 c4 08	 add	 esp, 8

; 75   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_rotate2d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_rotate2d_make
_TEXT	SEGMENT
_m$ = 8							; size = 4
_angle$ = 12						; size = 4
_glmc_rotate2d_make PROC				; COMDAT

; 67   : glmc_rotate2d_make(mat3 m, float angle) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 68   :   glm_rotate2d_make(m, angle);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_rotate2d_make
  0003c	83 c4 08	 add	 esp, 8

; 69   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_rotate2d_make ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_scale2d_uni
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glmc_scale2d_uni PROC					; COMDAT

; 61   : glmc_scale2d_uni(mat3 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 62   :   glm_scale2d_uni(m, s);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_scale2d_uni
  0003c	83 c4 08	 add	 esp, 8

; 63   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_scale2d_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_scale2d
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_glmc_scale2d PROC					; COMDAT

; 55   : glmc_scale2d(mat3 m, vec2 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :   glm_scale2d(m, v);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_scale2d
  00035	83 c4 08	 add	 esp, 8

; 57   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_scale2d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_scale2d_make
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_glmc_scale2d_make PROC					; COMDAT

; 49   : glmc_scale2d_make(mat3 m, vec2 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   :   glm_scale2d_make(m, v);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_scale2d_make
  00035	83 c4 08	 add	 esp, 8

; 51   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_scale2d_make ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_scale2d_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_scale2d_to PROC					; COMDAT

; 43   : glmc_scale2d_to(mat3 m, vec2 v, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 44   :   glm_scale2d_to(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_scale2d_to
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 45   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_scale2d_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_translate2d_y
_TEXT	SEGMENT
_m$ = 8							; size = 4
_to$ = 12						; size = 4
_glmc_translate2d_y PROC				; COMDAT

; 37   : glmc_translate2d_y(mat3 m, float to) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :   glm_translate2d_y(m, to);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _to$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_translate2d_y
  0003c	83 c4 08	 add	 esp, 8

; 39   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_translate2d_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_translate2d_x
_TEXT	SEGMENT
_m$ = 8							; size = 4
_to$ = 12						; size = 4
_glmc_translate2d_x PROC				; COMDAT

; 31   : glmc_translate2d_x(mat3 m, float to) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   :   glm_translate2d_x(m, to);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _to$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _glm_translate2d_x
  0003c	83 c4 08	 add	 esp, 8

; 33   : }

  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_glmc_translate2d_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_translate2d
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_glmc_translate2d PROC					; COMDAT

; 25   : glmc_translate2d(mat3 m, vec2 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_translate2d(m, v);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_translate2d
  00035	83 c4 08	 add	 esp, 8

; 27   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_translate2d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_translate2d_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glmc_translate2d_to PROC				; COMDAT

; 19   : glmc_translate2d_to(mat3 m, vec2 v, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_translate2d_to(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_translate2d_to
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 21   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glmc_translate2d_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\glmc\affine2d.c
;	COMDAT _glmc_translate2d_make
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_glmc_translate2d_make PROC				; COMDAT

; 13   : glmc_translate2d_make(mat3 m, vec2 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C910494F_affine2d@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_translate2d_make(m, v);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_translate2d_make
  00035	83 c4 08	 add	 esp, 8

; 15   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glmc_translate2d_make ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_rotate2d_to
_TEXT	SEGMENT
_s$ = -92						; size = 4
_c$ = -80						; size = 4
_m12$ = -68						; size = 4
_m02$ = -56						; size = 4
_m11$ = -44						; size = 4
_m01$ = -32						; size = 4
_m10$ = -20						; size = 4
_m00$ = -8						; size = 4
_m$ = 8							; size = 4
_angle$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_rotate2d_to PROC					; COMDAT

; 246  : glm_rotate2d_to(mat3 m, float angle, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00012	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 247  :   float m00 = m[0][0],  m10 = m[1][0],

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _m00$[ebp], xmm0
  00045	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	6b d1 00	 imul	 edx, ecx, 0
  00058	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0005d	f3 0f 11 45 ec	 movss	 DWORD PTR _m10$[ebp], xmm0

; 248  :         m01 = m[0][1],  m11 = m[1][1],

  00062	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0006d	ba 04 00 00 00	 mov	 edx, 4
  00072	c1 e2 00	 shl	 edx, 0
  00075	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0007a	f3 0f 11 45 e0	 movss	 DWORD PTR _m01$[ebp], xmm0
  0007f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00084	c1 e0 00	 shl	 eax, 0
  00087	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0008a	b9 04 00 00 00	 mov	 ecx, 4
  0008f	c1 e1 00	 shl	 ecx, 0
  00092	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00097	f3 0f 11 45 d4	 movss	 DWORD PTR _m11$[ebp], xmm0

; 249  :         m02 = m[0][2],  m12 = m[1][2];

  0009c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000a1	6b c8 00	 imul	 ecx, eax, 0
  000a4	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000a7	ba 04 00 00 00	 mov	 edx, 4
  000ac	d1 e2		 shl	 edx, 1
  000ae	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000b3	f3 0f 11 45 c8	 movss	 DWORD PTR _m02$[ebp], xmm0
  000b8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000bd	c1 e0 00	 shl	 eax, 0
  000c0	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000c3	b9 04 00 00 00	 mov	 ecx, 4
  000c8	d1 e1		 shl	 ecx, 1
  000ca	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000cf	f3 0f 11 45 bc	 movss	 DWORD PTR _m12$[ebp], xmm0

; 250  :   float c, s;
; 251  : 
; 252  :   s = sinf(angle);

  000d4	51		 push	 ecx
  000d5	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	e8 00 00 00 00	 call	 _sinf
  000e4	83 c4 04	 add	 esp, 4
  000e7	d9 5d a4	 fstp	 DWORD PTR _s$[ebp]

; 253  :   c = cosf(angle);

  000ea	51		 push	 ecx
  000eb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	e8 00 00 00 00	 call	 _cosf
  000fa	83 c4 04	 add	 esp, 4
  000fd	d9 5d b0	 fstp	 DWORD PTR _c$[ebp]

; 254  :   
; 255  :   dest[0][0] = m00 * c + m10 * s;

  00100	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _m00$[ebp]
  00105	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _c$[ebp]
  0010a	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _m10$[ebp]
  0010f	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _s$[ebp]
  00114	f3 0f 58 c1	 addss	 xmm0, xmm1
  00118	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0011d	6b c8 00	 imul	 ecx, eax, 0
  00120	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00123	ba 04 00 00 00	 mov	 edx, 4
  00128	6b c2 00	 imul	 eax, edx, 0
  0012b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 256  :   dest[0][1] = m01 * c + m11 * s;

  00130	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _m01$[ebp]
  00135	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _c$[ebp]
  0013a	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _m11$[ebp]
  0013f	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _s$[ebp]
  00144	f3 0f 58 c1	 addss	 xmm0, xmm1
  00148	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0014d	6b c8 00	 imul	 ecx, eax, 0
  00150	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00153	ba 04 00 00 00	 mov	 edx, 4
  00158	c1 e2 00	 shl	 edx, 0
  0015b	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 257  :   dest[0][2] = m02 * c + m12 * s;

  00160	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _m02$[ebp]
  00165	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _c$[ebp]
  0016a	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _m12$[ebp]
  0016f	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _s$[ebp]
  00174	f3 0f 58 c1	 addss	 xmm0, xmm1
  00178	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  00183	ba 04 00 00 00	 mov	 edx, 4
  00188	d1 e2		 shl	 edx, 1
  0018a	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 258  : 
; 259  :   dest[1][0] = m00 * -s + m10 * c;

  0018f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _s$[ebp]
  00194	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0019b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _m00$[ebp]
  001a0	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _m10$[ebp]
  001a5	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _c$[ebp]
  001aa	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ae	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001b3	c1 e0 00	 shl	 eax, 0
  001b6	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  001b9	b9 04 00 00 00	 mov	 ecx, 4
  001be	6b d1 00	 imul	 edx, ecx, 0
  001c1	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 260  :   dest[1][1] = m01 * -s + m11 * c;

  001c6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _s$[ebp]
  001cb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001d2	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _m01$[ebp]
  001d7	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _m11$[ebp]
  001dc	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _c$[ebp]
  001e1	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ea	c1 e0 00	 shl	 eax, 0
  001ed	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  001f0	b9 04 00 00 00	 mov	 ecx, 4
  001f5	c1 e1 00	 shl	 ecx, 0
  001f8	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 261  :   dest[1][2] = m02 * -s + m12 * c;

  001fd	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _s$[ebp]
  00202	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00209	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _m02$[ebp]
  0020e	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _m12$[ebp]
  00213	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _c$[ebp]
  00218	f3 0f 58 c1	 addss	 xmm0, xmm1
  0021c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00221	c1 e0 00	 shl	 eax, 0
  00224	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00227	b9 04 00 00 00	 mov	 ecx, 4
  0022c	d1 e1		 shl	 ecx, 1
  0022e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 262  :   
; 263  :   dest[2][0] = m[2][0];

  00233	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00238	d1 e0		 shl	 eax, 1
  0023a	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0023d	b9 04 00 00 00	 mov	 ecx, 4
  00242	6b d1 00	 imul	 edx, ecx, 0
  00245	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0024a	d1 e1		 shl	 ecx, 1
  0024c	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0024f	be 04 00 00 00	 mov	 esi, 4
  00254	6b f6 00	 imul	 esi, esi, 0
  00257	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0025a	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 264  :   dest[2][1] = m[2][1];

  0025d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00262	d1 e0		 shl	 eax, 1
  00264	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00267	b9 04 00 00 00	 mov	 ecx, 4
  0026c	c1 e1 00	 shl	 ecx, 0
  0026f	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00274	d1 e2		 shl	 edx, 1
  00276	03 55 10	 add	 edx, DWORD PTR _dest$[ebp]
  00279	be 04 00 00 00	 mov	 esi, 4
  0027e	c1 e6 00	 shl	 esi, 0
  00281	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00284	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 265  :   dest[2][2] = m[2][2];

  00287	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0028c	d1 e0		 shl	 eax, 1
  0028e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00291	b9 04 00 00 00	 mov	 ecx, 4
  00296	d1 e1		 shl	 ecx, 1
  00298	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0029d	d1 e2		 shl	 edx, 1
  0029f	03 55 10	 add	 edx, DWORD PTR _dest$[ebp]
  002a2	be 04 00 00 00	 mov	 esi, 4
  002a7	d1 e6		 shl	 esi, 1
  002a9	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  002ac	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 266  : }

  002af	5f		 pop	 edi
  002b0	5e		 pop	 esi
  002b1	5b		 pop	 ebx
  002b2	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  002b8	3b ec		 cmp	 ebp, esp
  002ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002bf	8b e5		 mov	 esp, ebp
  002c1	5d		 pop	 ebp
  002c2	c3		 ret	 0
_glm_rotate2d_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_rotate2d
_TEXT	SEGMENT
_s$ = -92						; size = 4
_c$ = -80						; size = 4
_m12$ = -68						; size = 4
_m02$ = -56						; size = 4
_m11$ = -44						; size = 4
_m01$ = -32						; size = 4
_m10$ = -20						; size = 4
_m00$ = -8						; size = 4
_m$ = 8							; size = 4
_angle$ = 12						; size = 4
_glm_rotate2d PROC					; COMDAT

; 218  : glm_rotate2d(mat3 m, float angle) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00012	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 219  :   float m00 = m[0][0],  m10 = m[1][0],

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 11 45 f8	 movss	 DWORD PTR _m00$[ebp], xmm0
  00045	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004a	c1 e0 00	 shl	 eax, 0
  0004d	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00050	b9 04 00 00 00	 mov	 ecx, 4
  00055	6b d1 00	 imul	 edx, ecx, 0
  00058	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  0005d	f3 0f 11 45 ec	 movss	 DWORD PTR _m10$[ebp], xmm0

; 220  :         m01 = m[0][1],  m11 = m[1][1],

  00062	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00067	6b c8 00	 imul	 ecx, eax, 0
  0006a	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0006d	ba 04 00 00 00	 mov	 edx, 4
  00072	c1 e2 00	 shl	 edx, 0
  00075	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0007a	f3 0f 11 45 e0	 movss	 DWORD PTR _m01$[ebp], xmm0
  0007f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00084	c1 e0 00	 shl	 eax, 0
  00087	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0008a	b9 04 00 00 00	 mov	 ecx, 4
  0008f	c1 e1 00	 shl	 ecx, 0
  00092	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00097	f3 0f 11 45 d4	 movss	 DWORD PTR _m11$[ebp], xmm0

; 221  :         m02 = m[0][2],  m12 = m[1][2];

  0009c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000a1	6b c8 00	 imul	 ecx, eax, 0
  000a4	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000a7	ba 04 00 00 00	 mov	 edx, 4
  000ac	d1 e2		 shl	 edx, 1
  000ae	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000b3	f3 0f 11 45 c8	 movss	 DWORD PTR _m02$[ebp], xmm0
  000b8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000bd	c1 e0 00	 shl	 eax, 0
  000c0	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000c3	b9 04 00 00 00	 mov	 ecx, 4
  000c8	d1 e1		 shl	 ecx, 1
  000ca	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000cf	f3 0f 11 45 bc	 movss	 DWORD PTR _m12$[ebp], xmm0

; 222  :   float c, s;
; 223  : 
; 224  :   s = sinf(angle);

  000d4	51		 push	 ecx
  000d5	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000df	e8 00 00 00 00	 call	 _sinf
  000e4	83 c4 04	 add	 esp, 4
  000e7	d9 5d a4	 fstp	 DWORD PTR _s$[ebp]

; 225  :   c = cosf(angle);

  000ea	51		 push	 ecx
  000eb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	e8 00 00 00 00	 call	 _cosf
  000fa	83 c4 04	 add	 esp, 4
  000fd	d9 5d b0	 fstp	 DWORD PTR _c$[ebp]

; 226  :   
; 227  :   m[0][0] = m00 * c + m10 * s;

  00100	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _m00$[ebp]
  00105	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _c$[ebp]
  0010a	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _m10$[ebp]
  0010f	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _s$[ebp]
  00114	f3 0f 58 c1	 addss	 xmm0, xmm1
  00118	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0011d	6b c8 00	 imul	 ecx, eax, 0
  00120	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00123	ba 04 00 00 00	 mov	 edx, 4
  00128	6b c2 00	 imul	 eax, edx, 0
  0012b	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 228  :   m[0][1] = m01 * c + m11 * s;

  00130	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _m01$[ebp]
  00135	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _c$[ebp]
  0013a	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _m11$[ebp]
  0013f	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _s$[ebp]
  00144	f3 0f 58 c1	 addss	 xmm0, xmm1
  00148	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0014d	6b c8 00	 imul	 ecx, eax, 0
  00150	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00153	ba 04 00 00 00	 mov	 edx, 4
  00158	c1 e2 00	 shl	 edx, 0
  0015b	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 229  :   m[0][2] = m02 * c + m12 * s;

  00160	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _m02$[ebp]
  00165	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _c$[ebp]
  0016a	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _m12$[ebp]
  0016f	f3 0f 59 4d a4	 mulss	 xmm1, DWORD PTR _s$[ebp]
  00174	f3 0f 58 c1	 addss	 xmm0, xmm1
  00178	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00183	ba 04 00 00 00	 mov	 edx, 4
  00188	d1 e2		 shl	 edx, 1
  0018a	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 230  : 
; 231  :   m[1][0] = m00 * -s + m10 * c;

  0018f	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _s$[ebp]
  00194	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0019b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _m00$[ebp]
  001a0	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _m10$[ebp]
  001a5	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _c$[ebp]
  001aa	f3 0f 58 c1	 addss	 xmm0, xmm1
  001ae	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001b3	c1 e0 00	 shl	 eax, 0
  001b6	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001b9	b9 04 00 00 00	 mov	 ecx, 4
  001be	6b d1 00	 imul	 edx, ecx, 0
  001c1	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 232  :   m[1][1] = m01 * -s + m11 * c;

  001c6	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _s$[ebp]
  001cb	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001d2	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _m01$[ebp]
  001d7	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _m11$[ebp]
  001dc	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _c$[ebp]
  001e1	f3 0f 58 c1	 addss	 xmm0, xmm1
  001e5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001ea	c1 e0 00	 shl	 eax, 0
  001ed	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001f0	b9 04 00 00 00	 mov	 ecx, 4
  001f5	c1 e1 00	 shl	 ecx, 0
  001f8	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 233  :   m[1][2] = m02 * -s + m12 * c;

  001fd	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _s$[ebp]
  00202	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00209	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _m02$[ebp]
  0020e	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _m12$[ebp]
  00213	f3 0f 59 4d b0	 mulss	 xmm1, DWORD PTR _c$[ebp]
  00218	f3 0f 58 c1	 addss	 xmm0, xmm1
  0021c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00221	c1 e0 00	 shl	 eax, 0
  00224	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00227	b9 04 00 00 00	 mov	 ecx, 4
  0022c	d1 e1		 shl	 ecx, 1
  0022e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 234  : }

  00233	5f		 pop	 edi
  00234	5e		 pop	 esi
  00235	5b		 pop	 ebx
  00236	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  0023c	3b ec		 cmp	 ebp, esp
  0023e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00243	8b e5		 mov	 esp, ebp
  00245	5d		 pop	 ebp
  00246	c3		 ret	 0
_glm_rotate2d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_rotate2d_make
_TEXT	SEGMENT
_s$ = -20						; size = 4
_c$ = -8						; size = 4
_m$ = 8							; size = 4
_angle$ = 12						; size = 4
_glm_rotate2d_make PROC					; COMDAT

; 190  : glm_rotate2d_make(mat3 m, float angle) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 191  :   float c, s;
; 192  : 
; 193  :   s = sinf(angle);

  00028	51		 push	 ecx
  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	e8 00 00 00 00	 call	 _sinf
  00038	83 c4 04	 add	 esp, 4
  0003b	d9 5d ec	 fstp	 DWORD PTR _s$[ebp]

; 194  :   c = cosf(angle);

  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _angle$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 _cosf
  0004e	83 c4 04	 add	 esp, 4
  00051	d9 5d f8	 fstp	 DWORD PTR _c$[ebp]

; 195  :   
; 196  :   m[0][0] = c;

  00054	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0005f	ba 04 00 00 00	 mov	 edx, 4
  00064	6b c2 00	 imul	 eax, edx, 0
  00067	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _c$[ebp]
  0006c	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 197  :   m[0][1] = s;

  00071	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00076	6b c8 00	 imul	 ecx, eax, 0
  00079	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0007c	ba 04 00 00 00	 mov	 edx, 4
  00081	c1 e2 00	 shl	 edx, 0
  00084	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _s$[ebp]
  00089	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 198  :   m[0][2] = 0;

  0008e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00093	6b c8 00	 imul	 ecx, eax, 0
  00096	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00099	ba 04 00 00 00	 mov	 edx, 4
  0009e	d1 e2		 shl	 edx, 1
  000a0	0f 57 c0	 xorps	 xmm0, xmm0
  000a3	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 199  : 
; 200  :   m[1][0] = -s;

  000a8	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _s$[ebp]
  000ad	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000b4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000b9	c1 e0 00	 shl	 eax, 0
  000bc	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000bf	b9 04 00 00 00	 mov	 ecx, 4
  000c4	6b d1 00	 imul	 edx, ecx, 0
  000c7	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 201  :   m[1][1] = c;

  000cc	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000d1	c1 e0 00	 shl	 eax, 0
  000d4	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000d7	b9 04 00 00 00	 mov	 ecx, 4
  000dc	c1 e1 00	 shl	 ecx, 0
  000df	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _c$[ebp]
  000e4	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 202  :   m[1][2] = 0;

  000e9	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ee	c1 e0 00	 shl	 eax, 0
  000f1	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000f4	b9 04 00 00 00	 mov	 ecx, 4
  000f9	d1 e1		 shl	 ecx, 1
  000fb	0f 57 c0	 xorps	 xmm0, xmm0
  000fe	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 203  :   
; 204  :   m[2][0] = 0.0f;

  00103	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00108	d1 e0		 shl	 eax, 1
  0010a	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0010d	b9 04 00 00 00	 mov	 ecx, 4
  00112	6b d1 00	 imul	 edx, ecx, 0
  00115	0f 57 c0	 xorps	 xmm0, xmm0
  00118	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 205  :   m[2][1] = 0.0f;

  0011d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00122	d1 e0		 shl	 eax, 1
  00124	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00127	b9 04 00 00 00	 mov	 ecx, 4
  0012c	c1 e1 00	 shl	 ecx, 0
  0012f	0f 57 c0	 xorps	 xmm0, xmm0
  00132	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 206  :   m[2][2] = 1.0f;

  00137	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013c	d1 e0		 shl	 eax, 1
  0013e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00141	b9 04 00 00 00	 mov	 ecx, 4
  00146	d1 e1		 shl	 ecx, 1
  00148	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00150	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 207  : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	5b		 pop	 ebx
  00158	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0015e	3b ec		 cmp	 ebp, esp
  00160	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00165	8b e5		 mov	 esp, ebp
  00167	5d		 pop	 ebp
  00168	c3		 ret	 0
_glm_rotate2d_make ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_scale2d_uni
_TEXT	SEGMENT
_m$ = 8							; size = 4
_s$ = 12						; size = 4
_glm_scale2d_uni PROC					; COMDAT

; 172  : glm_scale2d_uni(mat3 m, float s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 173  :   m[0][0] = m[0][0] * s;

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00045	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0004a	6b d1 00	 imul	 edx, ecx, 0
  0004d	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00050	b8 04 00 00 00	 mov	 eax, 4
  00055	6b c8 00	 imul	 ecx, eax, 0
  00058	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 174  :   m[0][1] = m[0][1] * s;

  0005d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00062	6b c8 00	 imul	 ecx, eax, 0
  00065	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00068	ba 04 00 00 00	 mov	 edx, 4
  0006d	c1 e2 00	 shl	 edx, 0
  00070	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  00075	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0007a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0007f	6b c8 00	 imul	 ecx, eax, 0
  00082	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00085	ba 04 00 00 00	 mov	 edx, 4
  0008a	c1 e2 00	 shl	 edx, 0
  0008d	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 175  :   m[0][2] = m[0][2] * s;

  00092	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00097	6b c8 00	 imul	 ecx, eax, 0
  0009a	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	d1 e2		 shl	 edx, 1
  000a4	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000a9	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  000ae	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000b3	6b c8 00	 imul	 ecx, eax, 0
  000b6	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000b9	ba 04 00 00 00	 mov	 edx, 4
  000be	d1 e2		 shl	 edx, 1
  000c0	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 176  : 
; 177  :   m[1][0] = m[1][0] * s;

  000c5	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ca	c1 e0 00	 shl	 eax, 0
  000cd	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000d0	b9 04 00 00 00	 mov	 ecx, 4
  000d5	6b d1 00	 imul	 edx, ecx, 0
  000d8	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  000dd	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  000e2	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000e7	c1 e0 00	 shl	 eax, 0
  000ea	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000ed	b9 04 00 00 00	 mov	 ecx, 4
  000f2	6b d1 00	 imul	 edx, ecx, 0
  000f5	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 178  :   m[1][1] = m[1][1] * s;

  000fa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ff	c1 e0 00	 shl	 eax, 0
  00102	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00105	b9 04 00 00 00	 mov	 ecx, 4
  0010a	c1 e1 00	 shl	 ecx, 0
  0010d	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00112	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  00117	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0011c	c1 e2 00	 shl	 edx, 0
  0011f	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00122	b8 04 00 00 00	 mov	 eax, 4
  00127	c1 e0 00	 shl	 eax, 0
  0012a	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 179  :   m[1][2] = m[1][2] * s;

  0012f	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00134	c1 e0 00	 shl	 eax, 0
  00137	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0013a	b9 04 00 00 00	 mov	 ecx, 4
  0013f	d1 e1		 shl	 ecx, 1
  00141	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00146	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _s$[ebp]
  0014b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00150	c1 e2 00	 shl	 edx, 0
  00153	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00156	b8 04 00 00 00	 mov	 eax, 4
  0015b	d1 e0		 shl	 eax, 1
  0015d	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 180  : }

  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	5b		 pop	 ebx
  00165	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0016b	3b ec		 cmp	 ebp, esp
  0016d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
_glm_scale2d_uni ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_scale2d
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_glm_scale2d PROC					; COMDAT

; 153  : glm_scale2d(mat3 m, vec2 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 154  :   m[0][0] = m[0][0] * v[0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 04 00 00 00	 mov	 edx, 4
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00046	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0004b	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  00050	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00055	6b c8 00	 imul	 ecx, eax, 0
  00058	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0005b	ba 04 00 00 00	 mov	 edx, 4
  00060	6b c2 00	 imul	 eax, edx, 0
  00063	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 155  :   m[0][1] = m[0][1] * v[0];

  00068	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006d	6b c8 00	 imul	 ecx, eax, 0
  00070	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00073	ba 04 00 00 00	 mov	 edx, 4
  00078	c1 e2 00	 shl	 edx, 0
  0007b	b8 04 00 00 00	 mov	 eax, 4
  00080	6b c0 00	 imul	 eax, eax, 0
  00083	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00086	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0008b	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00090	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00095	6b d1 00	 imul	 edx, ecx, 0
  00098	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0009b	b8 04 00 00 00	 mov	 eax, 4
  000a0	c1 e0 00	 shl	 eax, 0
  000a3	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 156  :   m[0][2] = m[0][2] * v[0];

  000a8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ad	6b c8 00	 imul	 ecx, eax, 0
  000b0	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000b3	ba 04 00 00 00	 mov	 edx, 4
  000b8	d1 e2		 shl	 edx, 1
  000ba	b8 04 00 00 00	 mov	 eax, 4
  000bf	6b c0 00	 imul	 eax, eax, 0
  000c2	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000c5	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000ca	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  000cf	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000d4	6b d1 00	 imul	 edx, ecx, 0
  000d7	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000da	b8 04 00 00 00	 mov	 eax, 4
  000df	d1 e0		 shl	 eax, 1
  000e1	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 157  : 
; 158  :   m[1][0] = m[1][0] * v[1];

  000e6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000eb	c1 e0 00	 shl	 eax, 0
  000ee	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000f1	b9 04 00 00 00	 mov	 ecx, 4
  000f6	6b d1 00	 imul	 edx, ecx, 0
  000f9	b9 04 00 00 00	 mov	 ecx, 4
  000fe	c1 e1 00	 shl	 ecx, 0
  00101	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00104	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00109	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  0010e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00113	c1 e2 00	 shl	 edx, 0
  00116	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00119	b8 04 00 00 00	 mov	 eax, 4
  0011e	6b c8 00	 imul	 ecx, eax, 0
  00121	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 159  :   m[1][1] = m[1][1] * v[1];

  00126	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0012b	c1 e0 00	 shl	 eax, 0
  0012e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00131	b9 04 00 00 00	 mov	 ecx, 4
  00136	c1 e1 00	 shl	 ecx, 0
  00139	ba 04 00 00 00	 mov	 edx, 4
  0013e	c1 e2 00	 shl	 edx, 0
  00141	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00144	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00149	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  0014e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00153	c1 e0 00	 shl	 eax, 0
  00156	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00159	b9 04 00 00 00	 mov	 ecx, 4
  0015e	c1 e1 00	 shl	 ecx, 0
  00161	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 160  :   m[1][2] = m[1][2] * v[1];

  00166	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0016b	c1 e0 00	 shl	 eax, 0
  0016e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00171	b9 04 00 00 00	 mov	 ecx, 4
  00176	d1 e1		 shl	 ecx, 1
  00178	ba 04 00 00 00	 mov	 edx, 4
  0017d	c1 e2 00	 shl	 edx, 0
  00180	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00183	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00188	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  0018d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00192	c1 e0 00	 shl	 eax, 0
  00195	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00198	b9 04 00 00 00	 mov	 ecx, 4
  0019d	d1 e1		 shl	 ecx, 1
  0019f	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 161  : }

  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	5b		 pop	 ebx
  001a7	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001ad	3b ec		 cmp	 ebp, esp
  001af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b4	8b e5		 mov	 esp, ebp
  001b6	5d		 pop	 ebp
  001b7	c3		 ret	 0
_glm_scale2d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_scale2d_make
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_glm_scale2d_make PROC					; COMDAT

; 138  : glm_scale2d_make(mat3 m, vec2 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 139  :   glm_mat3_identity(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat3_identity
  00031	83 c4 04	 add	 esp, 4

; 140  :   m[0][0] = v[0];

  00034	b8 04 00 00 00	 mov	 eax, 4
  00039	6b c8 00	 imul	 ecx, eax, 0
  0003c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00041	6b c2 00	 imul	 eax, edx, 0
  00044	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	6b d2 00	 imul	 edx, edx, 0
  0004f	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00052	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00055	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 141  :   m[1][1] = v[1];

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	c1 e0 00	 shl	 eax, 0
  00060	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00065	c1 e1 00	 shl	 ecx, 0
  00068	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0006b	ba 04 00 00 00	 mov	 edx, 4
  00070	c1 e2 00	 shl	 edx, 0
  00073	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00076	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00079	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 142  : }

  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
_glm_scale2d_make ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_scale2d_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_scale2d_to PROC					; COMDAT

; 116  : glm_scale2d_to(mat3 m, vec2 v, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 117  :   dest[0][0] = m[0][0] * v[0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 04 00 00 00	 mov	 edx, 4
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00046	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0004b	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  00050	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00055	6b c8 00	 imul	 ecx, eax, 0
  00058	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  0005b	ba 04 00 00 00	 mov	 edx, 4
  00060	6b c2 00	 imul	 eax, edx, 0
  00063	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 118  :   dest[0][1] = m[0][1] * v[0];

  00068	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006d	6b c8 00	 imul	 ecx, eax, 0
  00070	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00073	ba 04 00 00 00	 mov	 edx, 4
  00078	c1 e2 00	 shl	 edx, 0
  0007b	b8 04 00 00 00	 mov	 eax, 4
  00080	6b c0 00	 imul	 eax, eax, 0
  00083	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00086	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0008b	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00090	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00095	6b d1 00	 imul	 edx, ecx, 0
  00098	03 55 10	 add	 edx, DWORD PTR _dest$[ebp]
  0009b	b8 04 00 00 00	 mov	 eax, 4
  000a0	c1 e0 00	 shl	 eax, 0
  000a3	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 119  :   dest[0][2] = m[0][2] * v[0];

  000a8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000ad	6b c8 00	 imul	 ecx, eax, 0
  000b0	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000b3	ba 04 00 00 00	 mov	 edx, 4
  000b8	d1 e2		 shl	 edx, 1
  000ba	b8 04 00 00 00	 mov	 eax, 4
  000bf	6b c0 00	 imul	 eax, eax, 0
  000c2	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000c5	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000ca	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  000cf	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000d4	6b d1 00	 imul	 edx, ecx, 0
  000d7	03 55 10	 add	 edx, DWORD PTR _dest$[ebp]
  000da	b8 04 00 00 00	 mov	 eax, 4
  000df	d1 e0		 shl	 eax, 1
  000e1	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 120  :   
; 121  :   dest[1][0] = m[1][0] * v[1];

  000e6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000eb	c1 e0 00	 shl	 eax, 0
  000ee	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000f1	b9 04 00 00 00	 mov	 ecx, 4
  000f6	6b d1 00	 imul	 edx, ecx, 0
  000f9	b9 04 00 00 00	 mov	 ecx, 4
  000fe	c1 e1 00	 shl	 ecx, 0
  00101	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00104	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00109	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  0010e	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00113	c1 e2 00	 shl	 edx, 0
  00116	03 55 10	 add	 edx, DWORD PTR _dest$[ebp]
  00119	b8 04 00 00 00	 mov	 eax, 4
  0011e	6b c8 00	 imul	 ecx, eax, 0
  00121	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 122  :   dest[1][1] = m[1][1] * v[1];

  00126	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0012b	c1 e0 00	 shl	 eax, 0
  0012e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00131	b9 04 00 00 00	 mov	 ecx, 4
  00136	c1 e1 00	 shl	 ecx, 0
  00139	ba 04 00 00 00	 mov	 edx, 4
  0013e	c1 e2 00	 shl	 edx, 0
  00141	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00144	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00149	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  0014e	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00153	c1 e0 00	 shl	 eax, 0
  00156	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00159	b9 04 00 00 00	 mov	 ecx, 4
  0015e	c1 e1 00	 shl	 ecx, 0
  00161	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 123  :   dest[1][2] = m[1][2] * v[1];

  00166	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0016b	c1 e0 00	 shl	 eax, 0
  0016e	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00171	b9 04 00 00 00	 mov	 ecx, 4
  00176	d1 e1		 shl	 ecx, 1
  00178	ba 04 00 00 00	 mov	 edx, 4
  0017d	c1 e2 00	 shl	 edx, 0
  00180	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00183	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  00188	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  0018d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00192	c1 e0 00	 shl	 eax, 0
  00195	03 45 10	 add	 eax, DWORD PTR _dest$[ebp]
  00198	b9 04 00 00 00	 mov	 ecx, 4
  0019d	d1 e1		 shl	 ecx, 1
  0019f	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 124  :   
; 125  :   dest[2][0] = m[2][0];

  001a4	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001a9	d1 e0		 shl	 eax, 1
  001ab	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001ae	b9 04 00 00 00	 mov	 ecx, 4
  001b3	6b d1 00	 imul	 edx, ecx, 0
  001b6	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001bb	d1 e1		 shl	 ecx, 1
  001bd	03 4d 10	 add	 ecx, DWORD PTR _dest$[ebp]
  001c0	be 04 00 00 00	 mov	 esi, 4
  001c5	6b f6 00	 imul	 esi, esi, 0
  001c8	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  001cb	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 126  :   dest[2][1] = m[2][1];

  001ce	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001d3	d1 e0		 shl	 eax, 1
  001d5	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  001d8	b9 04 00 00 00	 mov	 ecx, 4
  001dd	c1 e1 00	 shl	 ecx, 0
  001e0	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  001e5	d1 e2		 shl	 edx, 1
  001e7	03 55 10	 add	 edx, DWORD PTR _dest$[ebp]
  001ea	be 04 00 00 00	 mov	 esi, 4
  001ef	c1 e6 00	 shl	 esi, 0
  001f2	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  001f5	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 127  :   dest[2][2] = m[2][2];

  001f8	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  001fd	d1 e0		 shl	 eax, 1
  001ff	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00202	b9 04 00 00 00	 mov	 ecx, 4
  00207	d1 e1		 shl	 ecx, 1
  00209	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0020e	d1 e2		 shl	 edx, 1
  00210	03 55 10	 add	 edx, DWORD PTR _dest$[ebp]
  00213	be 04 00 00 00	 mov	 esi, 4
  00218	d1 e6		 shl	 esi, 1
  0021a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0021d	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 128  : }

  00220	5f		 pop	 edi
  00221	5e		 pop	 esi
  00222	5b		 pop	 ebx
  00223	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00229	3b ec		 cmp	 ebp, esp
  0022b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00230	8b e5		 mov	 esp, ebp
  00232	5d		 pop	 ebp
  00233	c3		 ret	 0
_glm_scale2d_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_translate2d_make
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_glm_translate2d_make PROC				; COMDAT

; 100  : glm_translate2d_make(mat3 m, vec2 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 101  :   glm_mat3_identity(m);

  00028	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _glm_mat3_identity
  00031	83 c4 04	 add	 esp, 4

; 102  :   m[2][0] = v[0];

  00034	b8 04 00 00 00	 mov	 eax, 4
  00039	6b c8 00	 imul	 ecx, eax, 0
  0003c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00041	d1 e2		 shl	 edx, 1
  00043	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	6b c0 00	 imul	 eax, eax, 0
  0004e	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00051	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00054	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 103  :   m[2][1] = v[1];

  00057	b8 04 00 00 00	 mov	 eax, 4
  0005c	c1 e0 00	 shl	 eax, 0
  0005f	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00064	d1 e1		 shl	 ecx, 1
  00066	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00069	ba 04 00 00 00	 mov	 edx, 4
  0006e	c1 e2 00	 shl	 edx, 0
  00071	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 104  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_translate2d_make ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_translate2d_y
_TEXT	SEGMENT
_m$ = 8							; size = 4
_y$ = 12						; size = 4
_glm_translate2d_y PROC					; COMDAT

; 86   : glm_translate2d_y(mat3 m, float y) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :   m[2][0] = m[1][0] * y + m[2][0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	c1 e0 00	 shl	 eax, 0
  00030	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00033	b9 04 00 00 00	 mov	 ecx, 4
  00038	6b d1 00	 imul	 edx, ecx, 0
  0003b	f3 0f 10 04 10	 movss	 xmm0, DWORD PTR [eax+edx]
  00040	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _y$[ebp]
  00045	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004a	d1 e0		 shl	 eax, 1
  0004c	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0004f	b9 04 00 00 00	 mov	 ecx, 4
  00054	6b d1 00	 imul	 edx, ecx, 0
  00057	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  0005c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00061	d1 e0		 shl	 eax, 1
  00063	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  00066	b9 04 00 00 00	 mov	 ecx, 4
  0006b	6b d1 00	 imul	 edx, ecx, 0
  0006e	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 88   :   m[2][1] = m[1][1] * y + m[2][1];

  00073	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00078	c1 e0 00	 shl	 eax, 0
  0007b	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0007e	b9 04 00 00 00	 mov	 ecx, 4
  00083	c1 e1 00	 shl	 ecx, 0
  00086	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  0008b	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _y$[ebp]
  00090	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00095	d1 e2		 shl	 edx, 1
  00097	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0009a	b8 04 00 00 00	 mov	 eax, 4
  0009f	c1 e0 00	 shl	 eax, 0
  000a2	f3 0f 58 04 02	 addss	 xmm0, DWORD PTR [edx+eax]
  000a7	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000ac	d1 e1		 shl	 ecx, 1
  000ae	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000b1	ba 04 00 00 00	 mov	 edx, 4
  000b6	c1 e2 00	 shl	 edx, 0
  000b9	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 89   :   m[2][2] = m[1][2] * y + m[2][2];

  000be	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c3	c1 e0 00	 shl	 eax, 0
  000c6	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000c9	b9 04 00 00 00	 mov	 ecx, 4
  000ce	d1 e1		 shl	 ecx, 1
  000d0	f3 0f 10 04 08	 movss	 xmm0, DWORD PTR [eax+ecx]
  000d5	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _y$[ebp]
  000da	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000df	d1 e2		 shl	 edx, 1
  000e1	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000e4	b8 04 00 00 00	 mov	 eax, 4
  000e9	d1 e0		 shl	 eax, 1
  000eb	f3 0f 58 04 02	 addss	 xmm0, DWORD PTR [edx+eax]
  000f0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000f5	d1 e1		 shl	 ecx, 1
  000f7	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000fa	ba 04 00 00 00	 mov	 edx, 4
  000ff	d1 e2		 shl	 edx, 1
  00101	f3 0f 11 04 11	 movss	 DWORD PTR [ecx+edx], xmm0

; 90   : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0010f	3b ec		 cmp	 ebp, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
_glm_translate2d_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_translate2d_x
_TEXT	SEGMENT
_m$ = 8							; size = 4
_x$ = 12						; size = 4
_glm_translate2d_x PROC					; COMDAT

; 72   : glm_translate2d_x(mat3 m, float x) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 73   :   m[2][0] = m[0][0] * x + m[2][0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  00040	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00045	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0004a	d1 e1		 shl	 ecx, 1
  0004c	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0004f	ba 04 00 00 00	 mov	 edx, 4
  00054	6b c2 00	 imul	 eax, edx, 0
  00057	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  0005c	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00061	d1 e1		 shl	 ecx, 1
  00063	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00066	ba 04 00 00 00	 mov	 edx, 4
  0006b	6b c2 00	 imul	 eax, edx, 0
  0006e	f3 0f 11 04 01	 movss	 DWORD PTR [ecx+eax], xmm0

; 74   :   m[2][1] = m[0][1] * x + m[2][1];

  00073	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00078	6b c8 00	 imul	 ecx, eax, 0
  0007b	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0007e	ba 04 00 00 00	 mov	 edx, 4
  00083	c1 e2 00	 shl	 edx, 0
  00086	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0008b	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _x$[ebp]
  00090	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00095	d1 e0		 shl	 eax, 1
  00097	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0009a	b9 04 00 00 00	 mov	 ecx, 4
  0009f	c1 e1 00	 shl	 ecx, 0
  000a2	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  000a7	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ac	d1 e2		 shl	 edx, 1
  000ae	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000b1	b8 04 00 00 00	 mov	 eax, 4
  000b6	c1 e0 00	 shl	 eax, 0
  000b9	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 75   :   m[2][2] = m[0][2] * x + m[2][2];

  000be	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000c3	6b c8 00	 imul	 ecx, eax, 0
  000c6	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000c9	ba 04 00 00 00	 mov	 edx, 4
  000ce	d1 e2		 shl	 edx, 1
  000d0	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000d5	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _x$[ebp]
  000da	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000df	d1 e0		 shl	 eax, 1
  000e1	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  000e4	b9 04 00 00 00	 mov	 ecx, 4
  000e9	d1 e1		 shl	 ecx, 1
  000eb	f3 0f 58 04 08	 addss	 xmm0, DWORD PTR [eax+ecx]
  000f0	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000f5	d1 e2		 shl	 edx, 1
  000f7	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  000fa	b8 04 00 00 00	 mov	 eax, 4
  000ff	d1 e0		 shl	 eax, 1
  00101	f3 0f 11 04 02	 movss	 DWORD PTR [edx+eax], xmm0

; 76   : }

  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0010f	3b ec		 cmp	 ebp, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
_glm_translate2d_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_translate2d_to
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_translate2d_to PROC				; COMDAT

; 59   : glm_translate2d_to(mat3 m, vec2 v, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 60   :   glm_mat3_copy(m, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat3_copy
  00035	83 c4 08	 add	 esp, 8

; 61   :   glm_translate2d(dest, v);

  00038	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _glm_translate2d
  00045	83 c4 08	 add	 esp, 8

; 62   : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
_glm_translate2d_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\affine2d.h
;	COMDAT _glm_translate2d
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_glm_translate2d PROC					; COMDAT

; 41   : glm_translate2d(mat3 m, vec2 v) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C07C9586_affine2d@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 42   :   m[2][0] = m[0][0] * v[0] + m[1][0] * v[1] + m[2][0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 04 00 00 00	 mov	 edx, 4
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00046	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0004b	f3 0f 59 04 16	 mulss	 xmm0, DWORD PTR [esi+edx]
  00050	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00055	c1 e0 00	 shl	 eax, 0
  00058	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0005b	b9 04 00 00 00	 mov	 ecx, 4
  00060	6b d1 00	 imul	 edx, ecx, 0
  00063	b9 04 00 00 00	 mov	 ecx, 4
  00068	c1 e1 00	 shl	 ecx, 0
  0006b	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  0006e	f3 0f 10 0c 10	 movss	 xmm1, DWORD PTR [eax+edx]
  00073	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00078	f3 0f 58 c1	 addss	 xmm0, xmm1
  0007c	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00081	d1 e2		 shl	 edx, 1
  00083	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	6b c8 00	 imul	 ecx, eax, 0
  0008e	f3 0f 58 04 0a	 addss	 xmm0, DWORD PTR [edx+ecx]
  00093	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00098	d1 e2		 shl	 edx, 1
  0009a	03 55 08	 add	 edx, DWORD PTR _m$[ebp]
  0009d	b8 04 00 00 00	 mov	 eax, 4
  000a2	6b c8 00	 imul	 ecx, eax, 0
  000a5	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 43   :   m[2][1] = m[0][1] * v[0] + m[1][1] * v[1] + m[2][1];

  000aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000af	6b c8 00	 imul	 ecx, eax, 0
  000b2	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000b5	ba 04 00 00 00	 mov	 edx, 4
  000ba	c1 e2 00	 shl	 edx, 0
  000bd	b8 04 00 00 00	 mov	 eax, 4
  000c2	6b c0 00	 imul	 eax, eax, 0
  000c5	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000c8	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  000cd	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  000d2	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000d7	c1 e1 00	 shl	 ecx, 0
  000da	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  000dd	ba 04 00 00 00	 mov	 edx, 4
  000e2	c1 e2 00	 shl	 edx, 0
  000e5	b8 04 00 00 00	 mov	 eax, 4
  000ea	c1 e0 00	 shl	 eax, 0
  000ed	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  000f0	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  000f5	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  000fa	f3 0f 58 c1	 addss	 xmm0, xmm1
  000fe	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00103	d1 e1		 shl	 ecx, 1
  00105	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00108	ba 04 00 00 00	 mov	 edx, 4
  0010d	c1 e2 00	 shl	 edx, 0
  00110	f3 0f 58 04 11	 addss	 xmm0, DWORD PTR [ecx+edx]
  00115	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0011a	d1 e0		 shl	 eax, 1
  0011c	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0011f	b9 04 00 00 00	 mov	 ecx, 4
  00124	c1 e1 00	 shl	 ecx, 0
  00127	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 44   :   m[2][2] = m[0][2] * v[0] + m[1][2] * v[1] + m[2][2];

  0012c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00131	6b c8 00	 imul	 ecx, eax, 0
  00134	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00137	ba 04 00 00 00	 mov	 edx, 4
  0013c	d1 e2		 shl	 edx, 1
  0013e	b8 04 00 00 00	 mov	 eax, 4
  00143	6b c0 00	 imul	 eax, eax, 0
  00146	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00149	f3 0f 10 04 11	 movss	 xmm0, DWORD PTR [ecx+edx]
  0014e	f3 0f 59 04 06	 mulss	 xmm0, DWORD PTR [esi+eax]
  00153	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00158	c1 e1 00	 shl	 ecx, 0
  0015b	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  0015e	ba 04 00 00 00	 mov	 edx, 4
  00163	d1 e2		 shl	 edx, 1
  00165	b8 04 00 00 00	 mov	 eax, 4
  0016a	c1 e0 00	 shl	 eax, 0
  0016d	8b 75 0c	 mov	 esi, DWORD PTR _v$[ebp]
  00170	f3 0f 10 0c 11	 movss	 xmm1, DWORD PTR [ecx+edx]
  00175	f3 0f 59 0c 06	 mulss	 xmm1, DWORD PTR [esi+eax]
  0017a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0017e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00183	d1 e1		 shl	 ecx, 1
  00185	03 4d 08	 add	 ecx, DWORD PTR _m$[ebp]
  00188	ba 04 00 00 00	 mov	 edx, 4
  0018d	d1 e2		 shl	 edx, 1
  0018f	f3 0f 58 04 11	 addss	 xmm0, DWORD PTR [ecx+edx]
  00194	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00199	d1 e0		 shl	 eax, 1
  0019b	03 45 08	 add	 eax, DWORD PTR _m$[ebp]
  0019e	b9 04 00 00 00	 mov	 ecx, 4
  001a3	d1 e1		 shl	 ecx, 1
  001a5	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 45   : }

  001aa	5f		 pop	 edi
  001ab	5e		 pop	 esi
  001ac	5b		 pop	 ebx
  001ad	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001b3	3b ec		 cmp	 ebp, esp
  001b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ba	8b e5		 mov	 esp, ebp
  001bc	5d		 pop	 ebp
  001bd	c3		 ret	 0
_glm_translate2d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat3.h
;	COMDAT _glm_mat3_identity
_TEXT	SEGMENT
_t$ = -64						; size = 36
__$ArrayPad$ = -4					; size = 4
_mat$ = 8						; size = 4
_glm_mat3_identity PROC					; COMDAT

; 98   : glm_mat3_identity(mat3 mat) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __D3AB5289_mat3@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 99   :   CGLM_ALIGN_MAT mat3 t = GLM_MAT3_IDENTITY_INIT;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 c0	 movss	 DWORD PTR _t$[ebp], xmm0
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 45 c4	 movss	 DWORD PTR _t$[ebp+4], xmm0
  00059	0f 57 c0	 xorps	 xmm0, xmm0
  0005c	f3 0f 11 45 c8	 movss	 DWORD PTR _t$[ebp+8], xmm0
  00061	0f 57 c0	 xorps	 xmm0, xmm0
  00064	f3 0f 11 45 cc	 movss	 DWORD PTR _t$[ebp+12], xmm0
  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00071	f3 0f 11 45 d0	 movss	 DWORD PTR _t$[ebp+16], xmm0
  00076	0f 57 c0	 xorps	 xmm0, xmm0
  00079	f3 0f 11 45 d4	 movss	 DWORD PTR _t$[ebp+20], xmm0
  0007e	0f 57 c0	 xorps	 xmm0, xmm0
  00081	f3 0f 11 45 d8	 movss	 DWORD PTR _t$[ebp+24], xmm0
  00086	0f 57 c0	 xorps	 xmm0, xmm0
  00089	f3 0f 11 45 dc	 movss	 DWORD PTR _t$[ebp+28], xmm0
  0008e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00096	f3 0f 11 45 e0	 movss	 DWORD PTR _t$[ebp+32], xmm0

; 100  :   glm_mat3_copy(t, mat);

  0009b	8b 43 08	 mov	 eax, DWORD PTR _mat$[ebx]
  0009e	50		 push	 eax
  0009f	8d 4d c0	 lea	 ecx, DWORD PTR _t$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 _glm_mat3_copy
  000a8	83 c4 08	 add	 esp, 8

; 101  : }

  000ab	52		 push	 edx
  000ac	8b cd		 mov	 ecx, ebp
  000ae	50		 push	 eax
  000af	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_mat3_i
  000b5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ba	58		 pop	 eax
  000bb	5a		 pop	 edx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c1	33 cd		 xor	 ecx, ebp
  000c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	8b e3		 mov	 esp, ebx
  000cd	5b		 pop	 ebx
  000ce	c3		 ret	 0
  000cf	90		 npad	 1
$LN5@glm_mat3_i:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@glm_mat3_i
$LN4@glm_mat3_i:
  000d8	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000dc	24 00 00 00	 DD	 36			; 00000024H
  000e0	00 00 00 00	 DD	 $LN3@glm_mat3_i
$LN3@glm_mat3_i:
  000e4	74		 DB	 116			; 00000074H
  000e5	00		 DB	 0
_glm_mat3_identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\3DRendC\include\mat3.h
;	COMDAT _glm_mat3_copy
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat3_copy PROC					; COMDAT

; 68   : glm_mat3_copy(mat3 mat, mat3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D3AB5289_mat3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 69   :   dest[0][0] = mat[0][0];

  00028	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  00033	ba 04 00 00 00	 mov	 edx, 4
  00038	6b c2 00	 imul	 eax, edx, 0
  0003b	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00040	6b d2 00	 imul	 edx, edx, 0
  00043	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00046	be 04 00 00 00	 mov	 esi, 4
  0004b	6b f6 00	 imul	 esi, esi, 0
  0004e	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00051	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 70   :   dest[0][1] = mat[0][1];

  00054	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00059	6b c8 00	 imul	 ecx, eax, 0
  0005c	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0005f	ba 04 00 00 00	 mov	 edx, 4
  00064	c1 e2 00	 shl	 edx, 0
  00067	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0006c	6b c0 00	 imul	 eax, eax, 0
  0006f	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  00072	be 04 00 00 00	 mov	 esi, 4
  00077	c1 e6 00	 shl	 esi, 0
  0007a	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  0007d	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 71   :   dest[0][2] = mat[0][2];

  00080	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00085	6b c8 00	 imul	 ecx, eax, 0
  00088	03 4d 08	 add	 ecx, DWORD PTR _mat$[ebp]
  0008b	ba 04 00 00 00	 mov	 edx, 4
  00090	d1 e2		 shl	 edx, 1
  00092	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00097	6b c0 00	 imul	 eax, eax, 0
  0009a	03 45 0c	 add	 eax, DWORD PTR _dest$[ebp]
  0009d	be 04 00 00 00	 mov	 esi, 4
  000a2	d1 e6		 shl	 esi, 1
  000a4	8b 0c 11	 mov	 ecx, DWORD PTR [ecx+edx]
  000a7	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 72   : 
; 73   :   dest[1][0] = mat[1][0];

  000aa	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000af	c1 e0 00	 shl	 eax, 0
  000b2	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000b5	b9 04 00 00 00	 mov	 ecx, 4
  000ba	6b d1 00	 imul	 edx, ecx, 0
  000bd	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  000c2	c1 e1 00	 shl	 ecx, 0
  000c5	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  000c8	be 04 00 00 00	 mov	 esi, 4
  000cd	6b f6 00	 imul	 esi, esi, 0
  000d0	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000d3	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 74   :   dest[1][1] = mat[1][1];

  000d6	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  000db	c1 e0 00	 shl	 eax, 0
  000de	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  000e1	b9 04 00 00 00	 mov	 ecx, 4
  000e6	c1 e1 00	 shl	 ecx, 0
  000e9	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  000ee	c1 e2 00	 shl	 edx, 0
  000f1	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  000f4	be 04 00 00 00	 mov	 esi, 4
  000f9	c1 e6 00	 shl	 esi, 0
  000fc	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  000ff	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 75   :   dest[1][2] = mat[1][2];

  00102	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00107	c1 e0 00	 shl	 eax, 0
  0010a	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0010d	b9 04 00 00 00	 mov	 ecx, 4
  00112	d1 e1		 shl	 ecx, 1
  00114	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00119	c1 e2 00	 shl	 edx, 0
  0011c	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0011f	be 04 00 00 00	 mov	 esi, 4
  00124	d1 e6		 shl	 esi, 1
  00126	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  00129	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 76   : 
; 77   :   dest[2][0] = mat[2][0];

  0012c	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00131	d1 e0		 shl	 eax, 1
  00133	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00136	b9 04 00 00 00	 mov	 ecx, 4
  0013b	6b d1 00	 imul	 edx, ecx, 0
  0013e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00143	d1 e1		 shl	 ecx, 1
  00145	03 4d 0c	 add	 ecx, DWORD PTR _dest$[ebp]
  00148	be 04 00 00 00	 mov	 esi, 4
  0014d	6b f6 00	 imul	 esi, esi, 0
  00150	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00153	89 14 31	 mov	 DWORD PTR [ecx+esi], edx

; 78   :   dest[2][1] = mat[2][1];

  00156	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0015b	d1 e0		 shl	 eax, 1
  0015d	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  00160	b9 04 00 00 00	 mov	 ecx, 4
  00165	c1 e1 00	 shl	 ecx, 0
  00168	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0016d	d1 e2		 shl	 edx, 1
  0016f	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  00172	be 04 00 00 00	 mov	 esi, 4
  00177	c1 e6 00	 shl	 esi, 0
  0017a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  0017d	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 79   :   dest[2][2] = mat[2][2];

  00180	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  00185	d1 e0		 shl	 eax, 1
  00187	03 45 08	 add	 eax, DWORD PTR _mat$[ebp]
  0018a	b9 04 00 00 00	 mov	 ecx, 4
  0018f	d1 e1		 shl	 ecx, 1
  00191	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00196	d1 e2		 shl	 edx, 1
  00198	03 55 0c	 add	 edx, DWORD PTR _dest$[ebp]
  0019b	be 04 00 00 00	 mov	 esi, 4
  001a0	d1 e6		 shl	 esi, 1
  001a2	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]
  001a5	89 04 32	 mov	 DWORD PTR [edx+esi], eax

; 80   : }

  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  001b1	3b ec		 cmp	 ebp, esp
  001b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	c3		 ret	 0
_glm_mat3_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 750  :             return (float)sin(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sin
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 751  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __09340588_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 649  :             return (float)cos(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _cos
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 650  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
END
