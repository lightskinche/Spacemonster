; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\project.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__AF08451A_xmmintrin@h DB 01H
__01CC0242_x86@h DB 01H
__8B2C0229_util@h DB 01H
__E45A7869_vec2-ext@h DB 01H
__59A72D6B_vec2@h DB 01H
__422D73DD_vec3-ext@h DB 01H
__878A4D53_vec4-ext@h DB 01H
__5D2A51D9_vec4@h DB 01H
__5865475C_vec3@h DB 01H
__E3FCB8B3_mat4@h DB 01H
__0C756A67_mat4@h DB 01H
__E6B3AE36_mat3@h DB 01H
__093A7CE2_mat3@h DB 01H
__E771C401_mat2@h DB 01H
__08F816D5_mat2@h DB 01H
__CD658D3A_affine@h DB 01H
__1529E0A7_affine-mat@h DB 01H
__40ECD150_affine@h DB 01H
__FC78FBBD_plane@h DB 01H
__40246743_cam@h DB 01H
__EE1FA25F_frustum@h DB 01H
__15D5617C_quat@h DB 01H
__FA5CB3A8_quat@h DB 01H
__DBBFEDC2_euler@h DB 01H
__8776585B_box@h DB 01H
__759F1961_color@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__DAA4108F_io@h DB 01H
__EDB727F9_project@h DB 01H
__9F492AA4_sphere@h DB 01H
__108F9434_ease@h DB 01H
__3C7ABC9F_curve@h DB 01H
__45F73C3A_bezier@h DB 01H
__068BD2DD_ray@h DB 01H
__10D40EFF_affine2d@h DB 01H
__1682C327_vec3@h DB 01H
__13CDD5A2_vec4@h DB 01H
__B2E9BCF8_project@c DB 01H
msvcjmc	ENDS
PUBLIC	_glm_vec4
PUBLIC	_glm_vec4_add
PUBLIC	_glm_vec4_scale
PUBLIC	_glm_vec3
PUBLIC	_glm_mat4_mulv_sse2
PUBLIC	_glm_mat4_inv_sse2
PUBLIC	_glm_mat4_mulv
PUBLIC	_glm_mat4_inv
PUBLIC	_glm_unprojecti
PUBLIC	_glm_unproject
PUBLIC	_glm_project
PUBLIC	_glmc_unprojecti
PUBLIC	_glmc_unproject
PUBLIC	_glmc_project
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__xmm@00000000800000000000000080000000
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@00000000800000000000000080000000
CONST	SEGMENT
__xmm@00000000800000000000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\project.c
;	COMDAT _glmc_project
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_m$ = 12						; size = 4
_vp$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_project PROC					; COMDAT

; 25   : glmc_project(vec3 pos, mat4 m, vec4 vp, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B2E9BCF8_project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 26   :   glm_project(pos, m, vp, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _vp$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _glm_project
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 27   : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glmc_project ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\project.c
;	COMDAT _glmc_unproject
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_m$ = 12						; size = 4
_vp$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_unproject PROC					; COMDAT

; 19   : glmc_unproject(vec3 pos, mat4 m, vec4 vp, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B2E9BCF8_project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 20   :   glm_unproject(pos, m, vp, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _vp$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _glm_unproject
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 21   : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glmc_unproject ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\glmc\project.c
;	COMDAT _glmc_unprojecti
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_invMat$ = 12						; size = 4
_vp$ = 16						; size = 4
_dest$ = 20						; size = 4
_glmc_unprojecti PROC					; COMDAT

; 13   : glmc_unprojecti(vec3 pos, mat4 invMat, vec4 vp, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B2E9BCF8_project@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   :   glm_unprojecti(pos, invMat, vp, dest);

  00028	8b 45 14	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR _vp$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR _invMat$[ebp]
  00033	52		 push	 edx
  00034	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _glm_unprojecti
  0003d	83 c4 10	 add	 esp, 16			; 00000010H

; 15   : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glmc_unprojecti ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\project.h
;	COMDAT _glm_project
_TEXT	SEGMENT
_vone$ = -64						; size = 16
_pos4$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_m$ = 12						; size = 4
_vp$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_project PROC					; COMDAT

; 103  : glm_project(vec3 pos, mat4 m, vec4 vp, vec3 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00024	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __EDB727F9_project@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 104  :   CGLM_ALIGN(16) vec4 pos4, vone = GLM_VEC4_ONE_INIT;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 c0	 movss	 DWORD PTR _vone$[ebp], xmm0
  00051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00059	f3 0f 11 45 c4	 movss	 DWORD PTR _vone$[ebp+4], xmm0
  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00066	f3 0f 11 45 c8	 movss	 DWORD PTR _vone$[ebp+8], xmm0
  0006b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00073	f3 0f 11 45 cc	 movss	 DWORD PTR _vone$[ebp+12], xmm0

; 105  : 
; 106  :   glm_vec4(pos, 1.0f, pos4);

  00078	8d 45 e0	 lea	 eax, DWORD PTR _pos4$[ebp]
  0007b	50		 push	 eax
  0007c	51		 push	 ecx
  0007d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	8b 4b 08	 mov	 ecx, DWORD PTR _pos$[ebx]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 _glm_vec4
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH

; 107  : 
; 108  :   glm_mat4_mulv(m, pos4, pos4);

  00096	8d 45 e0	 lea	 eax, DWORD PTR _pos4$[ebp]
  00099	50		 push	 eax
  0009a	8d 4d e0	 lea	 ecx, DWORD PTR _pos4$[ebp]
  0009d	51		 push	 ecx
  0009e	8b 53 0c	 mov	 edx, DWORD PTR _m$[ebx]
  000a1	52		 push	 edx
  000a2	e8 00 00 00 00	 call	 _glm_mat4_mulv
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 109  :   glm_vec4_scale(pos4, 1.0f / pos4[3], pos4); /* pos = pos / pos.w */

  000aa	8d 45 e0	 lea	 eax, DWORD PTR _pos4$[ebp]
  000ad	50		 push	 eax
  000ae	b9 04 00 00 00	 mov	 ecx, 4
  000b3	6b d1 03	 imul	 edx, ecx, 3
  000b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000be	f3 0f 5e 44 15
	e0		 divss	 xmm0, DWORD PTR _pos4$[ebp+edx]
  000c4	51		 push	 ecx
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	8d 45 e0	 lea	 eax, DWORD PTR _pos4$[ebp]
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 _glm_vec4_scale
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 110  :   glm_vec4_add(pos4, vone, pos4);

  000d6	8d 45 e0	 lea	 eax, DWORD PTR _pos4$[ebp]
  000d9	50		 push	 eax
  000da	8d 4d c0	 lea	 ecx, DWORD PTR _vone$[ebp]
  000dd	51		 push	 ecx
  000de	8d 55 e0	 lea	 edx, DWORD PTR _pos4$[ebp]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 _glm_vec4_add
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  :   glm_vec4_scale(pos4, 0.5f, pos4);

  000ea	8d 45 e0	 lea	 eax, DWORD PTR _pos4$[ebp]
  000ed	50		 push	 eax
  000ee	51		 push	 ecx
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	8d 4d e0	 lea	 ecx, DWORD PTR _pos4$[ebp]
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 _glm_vec4_scale
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH

; 112  : 
; 113  :   dest[0] = pos4[0] * vp[2] + vp[0];

  00108	b8 04 00 00 00	 mov	 eax, 4
  0010d	6b c8 00	 imul	 ecx, eax, 0
  00110	ba 04 00 00 00	 mov	 edx, 4
  00115	d1 e2		 shl	 edx, 1
  00117	8b 43 10	 mov	 eax, DWORD PTR _vp$[ebx]
  0011a	f3 0f 10 44 0d
	e0		 movss	 xmm0, DWORD PTR _pos4$[ebp+ecx]
  00120	f3 0f 59 04 10	 mulss	 xmm0, DWORD PTR [eax+edx]
  00125	b9 04 00 00 00	 mov	 ecx, 4
  0012a	6b d1 00	 imul	 edx, ecx, 0
  0012d	8b 43 10	 mov	 eax, DWORD PTR _vp$[ebx]
  00130	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  00135	b9 04 00 00 00	 mov	 ecx, 4
  0013a	6b d1 00	 imul	 edx, ecx, 0
  0013d	8b 43 14	 mov	 eax, DWORD PTR _dest$[ebx]
  00140	f3 0f 11 04 10	 movss	 DWORD PTR [eax+edx], xmm0

; 114  :   dest[1] = pos4[1] * vp[3] + vp[1];

  00145	b8 04 00 00 00	 mov	 eax, 4
  0014a	c1 e0 00	 shl	 eax, 0
  0014d	b9 04 00 00 00	 mov	 ecx, 4
  00152	6b d1 03	 imul	 edx, ecx, 3
  00155	8b 4b 10	 mov	 ecx, DWORD PTR _vp$[ebx]
  00158	f3 0f 10 44 05
	e0		 movss	 xmm0, DWORD PTR _pos4$[ebp+eax]
  0015e	f3 0f 59 04 11	 mulss	 xmm0, DWORD PTR [ecx+edx]
  00163	ba 04 00 00 00	 mov	 edx, 4
  00168	c1 e2 00	 shl	 edx, 0
  0016b	8b 43 10	 mov	 eax, DWORD PTR _vp$[ebx]
  0016e	f3 0f 58 04 10	 addss	 xmm0, DWORD PTR [eax+edx]
  00173	b9 04 00 00 00	 mov	 ecx, 4
  00178	c1 e1 00	 shl	 ecx, 0
  0017b	8b 53 14	 mov	 edx, DWORD PTR _dest$[ebx]
  0017e	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 115  :   dest[2] = pos4[2];

  00183	b8 04 00 00 00	 mov	 eax, 4
  00188	d1 e0		 shl	 eax, 1
  0018a	b9 04 00 00 00	 mov	 ecx, 4
  0018f	d1 e1		 shl	 ecx, 1
  00191	8b 53 14	 mov	 edx, DWORD PTR _dest$[ebx]
  00194	8b 44 05 e0	 mov	 eax, DWORD PTR _pos4$[ebp+eax]
  00198	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 116  : }

  0019b	52		 push	 edx
  0019c	8b cd		 mov	 ecx, ebp
  0019e	50		 push	 eax
  0019f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@glm_projec
  001a5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001aa	58		 pop	 eax
  001ab	5a		 pop	 edx
  001ac	5f		 pop	 edi
  001ad	5e		 pop	 esi
  001ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b1	33 cd		 xor	 ecx, ebp
  001b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b8	8b e5		 mov	 esp, ebp
  001ba	5d		 pop	 ebp
  001bb	8b e3		 mov	 esp, ebx
  001bd	5b		 pop	 ebx
  001be	c3		 ret	 0
  001bf	90		 npad	 1
$LN6@glm_projec:
  001c0	02 00 00 00	 DD	 2
  001c4	00 00 00 00	 DD	 $LN5@glm_projec
$LN5@glm_projec:
  001c8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001cc	10 00 00 00	 DD	 16			; 00000010H
  001d0	00 00 00 00	 DD	 $LN3@glm_projec
  001d4	c0 ff ff ff	 DD	 -64			; ffffffc0H
  001d8	10 00 00 00	 DD	 16			; 00000010H
  001dc	00 00 00 00	 DD	 $LN4@glm_projec
$LN4@glm_projec:
  001e0	76		 DB	 118			; 00000076H
  001e1	6f		 DB	 111			; 0000006fH
  001e2	6e		 DB	 110			; 0000006eH
  001e3	65		 DB	 101			; 00000065H
  001e4	00		 DB	 0
$LN3@glm_projec:
  001e5	70		 DB	 112			; 00000070H
  001e6	6f		 DB	 111			; 0000006fH
  001e7	73		 DB	 115			; 00000073H
  001e8	34		 DB	 52			; 00000034H
  001e9	00		 DB	 0
_glm_project ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\project.h
;	COMDAT _glm_unproject
_TEXT	SEGMENT
_inv$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_m$ = 12						; size = 4
_vp$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_unproject PROC					; COMDAT

; 83   : glm_unproject(vec3 pos, mat4 m, vec4 vp, vec3 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __EDB727F9_project@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 84   :   mat4 inv;
; 85   :   glm_mat4_inv(m, inv);

  00044	8d 45 b0	 lea	 eax, DWORD PTR _inv$[ebp]
  00047	50		 push	 eax
  00048	8b 4b 0c	 mov	 ecx, DWORD PTR _m$[ebx]
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _glm_mat4_inv
  00051	83 c4 08	 add	 esp, 8

; 86   :   glm_unprojecti(pos, inv, vp, dest);

  00054	8b 43 14	 mov	 eax, DWORD PTR _dest$[ebx]
  00057	50		 push	 eax
  00058	8b 4b 10	 mov	 ecx, DWORD PTR _vp$[ebx]
  0005b	51		 push	 ecx
  0005c	8d 55 b0	 lea	 edx, DWORD PTR _inv$[ebp]
  0005f	52		 push	 edx
  00060	8b 43 08	 mov	 eax, DWORD PTR _pos$[ebx]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _glm_unprojecti
  00069	83 c4 10	 add	 esp, 16			; 00000010H

; 87   : }

  0006c	52		 push	 edx
  0006d	8b cd		 mov	 ecx, ebp
  0006f	50		 push	 eax
  00070	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_unproj
  00076	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007b	58		 pop	 eax
  0007c	5a		 pop	 edx
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	33 cd		 xor	 ecx, ebp
  00084	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	8b e3		 mov	 esp, ebx
  0008e	5b		 pop	 ebx
  0008f	c3		 ret	 0
$LN5@glm_unproj:
  00090	01 00 00 00	 DD	 1
  00094	00 00 00 00	 DD	 $LN4@glm_unproj
$LN4@glm_unproj:
  00098	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0009c	40 00 00 00	 DD	 64			; 00000040H
  000a0	00 00 00 00	 DD	 $LN3@glm_unproj
$LN3@glm_unproj:
  000a4	69		 DB	 105			; 00000069H
  000a5	6e		 DB	 110			; 0000006eH
  000a6	76		 DB	 118			; 00000076H
  000a7	00		 DB	 0
_glm_unproject ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\project.h
;	COMDAT _glm_unprojecti
_TEXT	SEGMENT
_v$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_invMat$ = 12						; size = 4
_vp$ = 16						; size = 4
_dest$ = 20						; size = 4
_glm_unprojecti PROC					; COMDAT

; 44   : glm_unprojecti(vec3 pos, mat4 invMat, vec4 vp, vec3 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00024	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __EDB727F9_project@h
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 45   :   vec4 v;
; 46   : 
; 47   :   v[0] = 2.0f * (pos[0] - vp[0]) / vp[2] - 1.0f;

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	6b c8 00	 imul	 ecx, eax, 0
  0004c	ba 04 00 00 00	 mov	 edx, 4
  00051	6b c2 00	 imul	 eax, edx, 0
  00054	8b 53 08	 mov	 edx, DWORD PTR _pos$[ebx]
  00057	8b 73 10	 mov	 esi, DWORD PTR _vp$[ebx]
  0005a	f3 0f 10 04 0a	 movss	 xmm0, DWORD PTR [edx+ecx]
  0005f	f3 0f 5c 04 06	 subss	 xmm0, DWORD PTR [esi+eax]
  00064	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	d1 e0		 shl	 eax, 1
  00073	8b 4b 10	 mov	 ecx, DWORD PTR _vp$[ebx]
  00076	f3 0f 5e 04 01	 divss	 xmm0, DWORD PTR [ecx+eax]
  0007b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00083	ba 04 00 00 00	 mov	 edx, 4
  00088	6b c2 00	 imul	 eax, edx, 0
  0008b	f3 0f 11 44 05
	e0		 movss	 DWORD PTR _v$[ebp+eax], xmm0

; 48   :   v[1] = 2.0f * (pos[1] - vp[1]) / vp[3] - 1.0f;

  00091	b8 04 00 00 00	 mov	 eax, 4
  00096	c1 e0 00	 shl	 eax, 0
  00099	b9 04 00 00 00	 mov	 ecx, 4
  0009e	c1 e1 00	 shl	 ecx, 0
  000a1	8b 53 08	 mov	 edx, DWORD PTR _pos$[ebx]
  000a4	8b 73 10	 mov	 esi, DWORD PTR _vp$[ebx]
  000a7	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  000ac	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
  000b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  000b9	b8 04 00 00 00	 mov	 eax, 4
  000be	6b c8 03	 imul	 ecx, eax, 3
  000c1	8b 53 10	 mov	 edx, DWORD PTR _vp$[ebx]
  000c4	f3 0f 5e 04 0a	 divss	 xmm0, DWORD PTR [edx+ecx]
  000c9	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000d1	b8 04 00 00 00	 mov	 eax, 4
  000d6	c1 e0 00	 shl	 eax, 0
  000d9	f3 0f 11 44 05
	e0		 movss	 DWORD PTR _v$[ebp+eax], xmm0

; 49   :   v[2] = 2.0f *  pos[2]                  - 1.0f;

  000df	b8 04 00 00 00	 mov	 eax, 4
  000e4	d1 e0		 shl	 eax, 1
  000e6	8b 4b 08	 mov	 ecx, DWORD PTR _pos$[ebx]
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000f1	f3 0f 59 04 01	 mulss	 xmm0, DWORD PTR [ecx+eax]
  000f6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000fe	ba 04 00 00 00	 mov	 edx, 4
  00103	d1 e2		 shl	 edx, 1
  00105	f3 0f 11 44 15
	e0		 movss	 DWORD PTR _v$[ebp+edx], xmm0

; 50   :   v[3] = 1.0f;

  0010b	b8 04 00 00 00	 mov	 eax, 4
  00110	6b c8 03	 imul	 ecx, eax, 3
  00113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011b	f3 0f 11 44 0d
	e0		 movss	 DWORD PTR _v$[ebp+ecx], xmm0

; 51   : 
; 52   :   glm_mat4_mulv(invMat, v, v);

  00121	8d 45 e0	 lea	 eax, DWORD PTR _v$[ebp]
  00124	50		 push	 eax
  00125	8d 4d e0	 lea	 ecx, DWORD PTR _v$[ebp]
  00128	51		 push	 ecx
  00129	8b 53 0c	 mov	 edx, DWORD PTR _invMat$[ebx]
  0012c	52		 push	 edx
  0012d	e8 00 00 00 00	 call	 _glm_mat4_mulv
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH

; 53   :   glm_vec4_scale(v, 1.0f / v[3], v);

  00135	8d 45 e0	 lea	 eax, DWORD PTR _v$[ebp]
  00138	50		 push	 eax
  00139	b9 04 00 00 00	 mov	 ecx, 4
  0013e	6b d1 03	 imul	 edx, ecx, 3
  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00149	f3 0f 5e 44 15
	e0		 divss	 xmm0, DWORD PTR _v$[ebp+edx]
  0014f	51		 push	 ecx
  00150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00155	8d 45 e0	 lea	 eax, DWORD PTR _v$[ebp]
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 _glm_vec4_scale
  0015e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 54   :   glm_vec3(v, dest);

  00161	8b 43 14	 mov	 eax, DWORD PTR _dest$[ebx]
  00164	50		 push	 eax
  00165	8d 4d e0	 lea	 ecx, DWORD PTR _v$[ebp]
  00168	51		 push	 ecx
  00169	e8 00 00 00 00	 call	 _glm_vec3
  0016e	83 c4 08	 add	 esp, 8

; 55   : }

  00171	52		 push	 edx
  00172	8b cd		 mov	 ecx, ebp
  00174	50		 push	 eax
  00175	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@glm_unproj
  0017b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00180	58		 pop	 eax
  00181	5a		 pop	 edx
  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00187	33 cd		 xor	 ecx, ebp
  00189	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	8b e3		 mov	 esp, ebx
  00193	5b		 pop	 ebx
  00194	c3		 ret	 0
  00195	0f 1f 00	 npad	 3
$LN5@glm_unproj:
  00198	01 00 00 00	 DD	 1
  0019c	00 00 00 00	 DD	 $LN4@glm_unproj
$LN4@glm_unproj:
  001a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001a4	10 00 00 00	 DD	 16			; 00000010H
  001a8	00 00 00 00	 DD	 $LN3@glm_unproj
$LN3@glm_unproj:
  001ac	76		 DB	 118			; 00000076H
  001ad	00		 DB	 0
_glm_unprojecti ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_inv
_TEXT	SEGMENT
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_inv PROC					; COMDAT

; 593  : glm_mat4_inv(mat4 mat, mat4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 594  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 595  :   glm_mat4_inv_sse2(mat, dest);

  00028	8b 45 0c	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _mat$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 _glm_mat4_inv_sse2
  00035	83 c4 08	 add	 esp, 8

; 596  : #else
; 597  :   float t[6];
; 598  :   float det;
; 599  :   float a = mat[0][0], b = mat[0][1], c = mat[0][2], d = mat[0][3],
; 600  :         e = mat[1][0], f = mat[1][1], g = mat[1][2], h = mat[1][3],
; 601  :         i = mat[2][0], j = mat[2][1], k = mat[2][2], l = mat[2][3],
; 602  :         m = mat[3][0], n = mat[3][1], o = mat[3][2], p = mat[3][3];
; 603  : 
; 604  :   t[0] = k * p - o * l; t[1] = j * p - n * l; t[2] = j * o - n * k;
; 605  :   t[3] = i * p - m * l; t[4] = i * o - m * k; t[5] = i * n - m * j;
; 606  : 
; 607  :   dest[0][0] =  f * t[0] - g * t[1] + h * t[2];
; 608  :   dest[1][0] =-(e * t[0] - g * t[3] + h * t[4]);
; 609  :   dest[2][0] =  e * t[1] - f * t[3] + h * t[5];
; 610  :   dest[3][0] =-(e * t[2] - f * t[4] + g * t[5]);
; 611  : 
; 612  :   dest[0][1] =-(b * t[0] - c * t[1] + d * t[2]);
; 613  :   dest[1][1] =  a * t[0] - c * t[3] + d * t[4];
; 614  :   dest[2][1] =-(a * t[1] - b * t[3] + d * t[5]);
; 615  :   dest[3][1] =  a * t[2] - b * t[4] + c * t[5];
; 616  : 
; 617  :   t[0] = g * p - o * h; t[1] = f * p - n * h; t[2] = f * o - n * g;
; 618  :   t[3] = e * p - m * h; t[4] = e * o - m * g; t[5] = e * n - m * f;
; 619  : 
; 620  :   dest[0][2] =  b * t[0] - c * t[1] + d * t[2];
; 621  :   dest[1][2] =-(a * t[0] - c * t[3] + d * t[4]);
; 622  :   dest[2][2] =  a * t[1] - b * t[3] + d * t[5];
; 623  :   dest[3][2] =-(a * t[2] - b * t[4] + c * t[5]);
; 624  : 
; 625  :   t[0] = g * l - k * h; t[1] = f * l - j * h; t[2] = f * k - j * g;
; 626  :   t[3] = e * l - i * h; t[4] = e * k - i * g; t[5] = e * j - i * f;
; 627  : 
; 628  :   dest[0][3] =-(b * t[0] - c * t[1] + d * t[2]);
; 629  :   dest[1][3] =  a * t[0] - c * t[3] + d * t[4];
; 630  :   dest[2][3] =-(a * t[1] - b * t[3] + d * t[5]);
; 631  :   dest[3][3] =  a * t[2] - b * t[4] + c * t[5];
; 632  : 
; 633  :   det = 1.0f / (a * dest[0][0] + b * dest[1][0]
; 634  :               + c * dest[2][0] + d * dest[3][0]);
; 635  : 
; 636  :   glm_mat4_scale_p(dest, det);
; 637  : #endif
; 638  : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_glm_mat4_inv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\mat4.h
;	COMDAT _glm_mat4_mulv
_TEXT	SEGMENT
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mulv PROC					; COMDAT

; 358  : glm_mat4_mulv(mat4 m, vec4 v, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __0C756A67_mat4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 359  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 360  :   glm_mat4_mulv_sse2(m, v, dest);

  00028	8b 45 10	 mov	 eax, DWORD PTR _dest$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 _glm_mat4_mulv_sse2
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 361  : #elif defined(CGLM_NEON_FP)
; 362  :   glm_mat4_mulv_neon(m, v, dest);
; 363  : #else
; 364  :   vec4 res;
; 365  :   res[0] = m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3];
; 366  :   res[1] = m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3];
; 367  :   res[2] = m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3];
; 368  :   res[3] = m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3];
; 369  :   glm_vec4_copy(res, dest);
; 370  : #endif
; 371  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_glm_mat4_mulv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_inv_sse2
_TEXT	SEGMENT
_x7$ = -704						; size = 16
_x6$ = -672						; size = 16
_x5$ = -640						; size = 16
_x4$ = -608						; size = 16
_x3$ = -576						; size = 16
_x2$ = -544						; size = 16
_x1$ = -512						; size = 16
_x0$ = -480						; size = 16
_t5$ = -448						; size = 16
_t4$ = -416						; size = 16
_t3$ = -384						; size = 16
_t2$ = -352						; size = 16
_t1$ = -320						; size = 16
_t0$ = -288						; size = 16
_v3$ = -256						; size = 16
_v2$ = -224						; size = 16
_v1$ = -192						; size = 16
_v0$ = -160						; size = 16
_r3$ = -128						; size = 16
_r2$ = -96						; size = 16
_r1$ = -64						; size = 16
_r0$ = -32						; size = 16
_mat$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_mat4_inv_sse2 PROC					; COMDAT

; 282  : glm_mat4_inv_sse2(mat4 mat, mat4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 48 04 00
	00		 sub	 esp, 1096		; 00000448H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd b8 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1096]
  00024	b9 12 01 00 00	 mov	 ecx, 274		; 00000112H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 283  :   __m128 r0, r1, r2, r3,
; 284  :          v0, v1, v2, v3,
; 285  :          t0, t1, t2, t3, t4, t5,
; 286  :          x0, x1, x2, x3, x4, x5, x6, x7;
; 287  : 
; 288  :   /* 127 <- 0 */
; 289  :   r0 = glmm_load(mat[0]); /* d c b a */

  0003a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  00045	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00048	0f 29 45 e0	 movaps	 XMMWORD PTR _r0$[ebp], xmm0

; 290  :   r1 = glmm_load(mat[1]); /* h g f e */

  0004c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00051	c1 e0 00	 shl	 eax, 0
  00054	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00057	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _r1$[ebp], xmm0

; 291  :   r2 = glmm_load(mat[2]); /* l k j i */

  0005e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00063	d1 e0		 shl	 eax, 1
  00065	03 43 08	 add	 eax, DWORD PTR _mat$[ebx]
  00068	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006b	0f 29 45 a0	 movaps	 XMMWORD PTR _r2$[ebp], xmm0

; 292  :   r3 = glmm_load(mat[3]); /* p o n m */

  0006f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00074	6b c8 03	 imul	 ecx, eax, 3
  00077	03 4b 08	 add	 ecx, DWORD PTR _mat$[ebx]
  0007a	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0007d	0f 29 45 80	 movaps	 XMMWORD PTR _r3$[ebp], xmm0

; 293  : 
; 294  :   x0 = _mm_shuffle_ps(r2, r3, _MM_SHUFFLE(3, 2, 3, 2));  /* p o l k */

  00081	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00085	0f c6 45 80 ee	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 238 ; 000000eeH
  0008a	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 295  :   x1 = glmm_shuff1(x0, 1, 3, 3, 3);                      /* l p p p */

  00091	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00098	0f c6 85 20 fe
	ff ff 7f	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 127 ; 0000007fH
  000a0	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 296  :   x2 = glmm_shuff1(x0, 0, 2, 2, 2);                      /* k o o o */

  000a7	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  000ae	0f c6 85 20 fe
	ff ff 2a	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 42 ; 0000002aH
  000b6	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0

; 297  :   x0 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(3, 3, 3, 3));  /* h h l l */

  000bd	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000c1	0f c6 45 c0 ff	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 255 ; 000000ffH
  000c6	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 298  :   x3 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(2, 2, 2, 2));  /* g g k k */

  000cd	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000d1	0f c6 45 c0 aa	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 170 ; 000000aaH
  000d6	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm0

; 299  : 
; 300  :   /* t1[0] = k * p - o * l;
; 301  :      t1[0] = k * p - o * l;
; 302  :      t2[0] = g * p - o * h;
; 303  :      t3[0] = g * l - k * h; */
; 304  :   t0 = _mm_sub_ps(_mm_mul_ps(x3, x1), _mm_mul_ps(x2, x0));

  000dd	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  000e4	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  000eb	0f 28 8d c0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x3$[ebp]
  000f2	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  000f9	0f 5c c8	 subps	 xmm1, xmm0
  000fc	0f 29 8d e0 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm1

; 305  : 
; 306  :   x4 = _mm_shuffle_ps(r2, r3, _MM_SHUFFLE(2, 1, 2, 1)); /* o n k j */

  00103	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00107	0f c6 45 80 99	 shufps	 xmm0, XMMWORD PTR _r3$[ebp], 153 ; 00000099H
  0010c	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 307  :   x4 = glmm_shuff1(x4, 0, 2, 2, 2);                     /* j n n n */

  00113	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  0011a	0f c6 85 a0 fd
	ff ff 2a	 shufps	 xmm0, XMMWORD PTR _x4$[ebp], 42 ; 0000002aH
  00122	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x4$[ebp], xmm0

; 308  :   x5 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(1, 1, 1, 1)); /* f f j j */

  00129	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  0012d	0f c6 45 c0 55	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 85 ; 00000055H
  00132	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR _x5$[ebp], xmm0

; 309  : 
; 310  :   /* t1[1] = j * p - n * l;
; 311  :      t1[1] = j * p - n * l;
; 312  :      t2[1] = f * p - n * h;
; 313  :      t3[1] = f * l - j * h; */
; 314  :   t1 = _mm_sub_ps(_mm_mul_ps(x5, x1), _mm_mul_ps(x4, x0));

  00139	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00140	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  00147	0f 28 8d 80 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x5$[ebp]
  0014e	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  00155	0f 5c c8	 subps	 xmm1, xmm0
  00158	0f 29 8d c0 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm1

; 315  : 
; 316  :   /* t1[2] = j * o - n * k
; 317  :      t1[2] = j * o - n * k;
; 318  :      t2[2] = f * o - n * g;
; 319  :      t3[2] = f * k - j * g; */
; 320  :   t2 = _mm_sub_ps(_mm_mul_ps(x5, x2), _mm_mul_ps(x4, x3));

  0015f	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x4$[ebp]
  00166	0f 59 85 c0 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x3$[ebp]
  0016d	0f 28 8d 80 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x5$[ebp]
  00174	0f 59 8d e0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x2$[ebp]
  0017b	0f 5c c8	 subps	 xmm1, xmm0
  0017e	0f 29 8d a0 fe
	ff ff		 movaps	 XMMWORD PTR _t2$[ebp], xmm1

; 321  : 
; 322  :   x6 = _mm_shuffle_ps(r2, r1, _MM_SHUFFLE(0, 0, 0, 0)); /* e e i i */

  00185	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00189	0f c6 45 c0 00	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 0
  0018e	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR _x6$[ebp], xmm0

; 323  :   x7 = glmm_shuff2(r3, r2, 0, 0, 0, 0, 2, 0, 0, 0);     /* i m m m */

  00195	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  00199	0f c6 45 a0 00	 shufps	 xmm0, XMMWORD PTR _r2$[ebp], 0
  0019e	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _r3$[ebp]
  001a2	0f c6 4d a0 00	 shufps	 xmm1, XMMWORD PTR _r2$[ebp], 0
  001a7	0f c6 c8 80	 shufps	 xmm1, xmm0, 128		; 00000080H
  001ab	0f 29 8d 40 fd
	ff ff		 movaps	 XMMWORD PTR _x7$[ebp], xmm1

; 324  : 
; 325  :   /* t1[3] = i * p - m * l;
; 326  :      t1[3] = i * p - m * l;
; 327  :      t2[3] = e * p - m * h;
; 328  :      t3[3] = e * l - i * h; */
; 329  :   t3 = _mm_sub_ps(_mm_mul_ps(x6, x1), _mm_mul_ps(x7, x0));

  001b2	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001b9	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  001c0	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  001c7	0f 59 8d 00 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _x1$[ebp]
  001ce	0f 5c c8	 subps	 xmm1, xmm0
  001d1	0f 29 8d 80 fe
	ff ff		 movaps	 XMMWORD PTR _t3$[ebp], xmm1

; 330  : 
; 331  :   /* t1[4] = i * o - m * k;
; 332  :      t1[4] = i * o - m * k;
; 333  :      t2[4] = e * o - m * g;
; 334  :      t3[4] = e * k - i * g; */
; 335  :   t4 = _mm_sub_ps(_mm_mul_ps(x6, x2), _mm_mul_ps(x7, x3));

  001d8	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  001df	0f 59 85 c0 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x3$[ebp]
  001e6	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  001ed	0f 59 8d e0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x2$[ebp]
  001f4	0f 5c c8	 subps	 xmm1, xmm0
  001f7	0f 29 8d 60 fe
	ff ff		 movaps	 XMMWORD PTR _t4$[ebp], xmm1

; 336  : 
; 337  :   /* t1[5] = i * n - m * j;
; 338  :      t1[5] = i * n - m * j;
; 339  :      t2[5] = e * n - m * f;
; 340  :      t3[5] = e * j - i * f; */
; 341  :   t5 = _mm_sub_ps(_mm_mul_ps(x6, x4), _mm_mul_ps(x7, x5));

  001fe	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x7$[ebp]
  00205	0f 59 85 80 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR _x5$[ebp]
  0020c	0f 28 8d 60 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x6$[ebp]
  00213	0f 59 8d a0 fd
	ff ff		 mulps	 xmm1, XMMWORD PTR _x4$[ebp]
  0021a	0f 5c c8	 subps	 xmm1, xmm0
  0021d	0f 29 8d 40 fe
	ff ff		 movaps	 XMMWORD PTR _t5$[ebp], xmm1

; 342  : 
; 343  :   x0 = glmm_shuff2(r1, r0, 0, 0, 0, 0, 2, 2, 2, 0); /* a a a e */

  00224	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00228	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 0
  0022d	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  00231	0f c6 4d e0 00	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 0
  00236	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  0023a	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 344  :   x1 = glmm_shuff2(r1, r0, 1, 1, 1, 1, 2, 2, 2, 0); /* b b b f */

  00241	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00245	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 85 ; 00000055H
  0024a	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  0024e	0f c6 4d e0 55	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 85 ; 00000055H
  00253	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00257	0f 29 8d 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm1

; 345  :   x2 = glmm_shuff2(r1, r0, 2, 2, 2, 2, 2, 2, 2, 0); /* c c c g */

  0025e	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00262	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 170 ; 000000aaH
  00267	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  0026b	0f c6 4d e0 aa	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 170 ; 000000aaH
  00270	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00274	0f 29 8d e0 fd
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm1

; 346  :   x3 = glmm_shuff2(r1, r0, 3, 3, 3, 3, 2, 2, 2, 0); /* d d d h */

  0027b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  0027f	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 255 ; 000000ffH
  00284	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r1$[ebp]
  00288	0f c6 4d e0 ff	 shufps	 xmm1, XMMWORD PTR _r0$[ebp], 255 ; 000000ffH
  0028d	0f c6 c8 a8	 shufps	 xmm1, xmm0, 168		; 000000a8H
  00291	0f 29 8d c0 fd
	ff ff		 movaps	 XMMWORD PTR _x3$[ebp], xmm1

; 347  : 
; 348  :   /*
; 349  :    dest[0][0] =  f * t1[0] - g * t1[1] + h * t1[2];
; 350  :    dest[0][1] =-(b * t1[0] - c * t1[1] + d * t1[2]);
; 351  :    dest[0][2] =  b * t2[0] - c * t2[1] + d * t2[2];
; 352  :    dest[0][3] =-(b * t3[0] - c * t3[1] + d * t3[2]); */
; 353  :   v0 = _mm_add_ps(_mm_mul_ps(x3, t2),

  00298	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  0029f	0f 59 85 c0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t1$[ebp]
  002a6	0f 28 8d 00 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x1$[ebp]
  002ad	0f 59 8d e0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t0$[ebp]
  002b4	0f 5c c8	 subps	 xmm1, xmm0
  002b7	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  002be	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t2$[ebp]
  002c5	0f 58 c1	 addps	 xmm0, xmm1
  002c8	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _v0$[ebp], xmm0

; 354  :                   _mm_sub_ps(_mm_mul_ps(x1, t0),
; 355  :                              _mm_mul_ps(x2, t1)));
; 356  :   v0 = _mm_xor_ps(v0, _mm_set_ps(-0.f, 0.f, -0.f, 0.f));

  002cf	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  002d6	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@80000000000000008000000000000000
  002dd	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _v0$[ebp], xmm0

; 357  : 
; 358  :   /*
; 359  :    dest[1][0] =-(e * t1[0] - g * t1[3] + h * t1[4]);
; 360  :    dest[1][1] =  a * t1[0] - c * t1[3] + d * t1[4];
; 361  :    dest[1][2] =-(a * t2[0] - c * t2[3] + d * t2[4]);
; 362  :    dest[1][3] =  a * t3[0] - c * t3[3] + d * t3[4]; */
; 363  :   v1 = _mm_add_ps(_mm_mul_ps(x3, t4),

  002e4	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  002eb	0f 59 85 80 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t3$[ebp]
  002f2	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  002f9	0f 59 8d e0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t0$[ebp]
  00300	0f 5c c8	 subps	 xmm1, xmm0
  00303	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  0030a	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t4$[ebp]
  00311	0f 58 c1	 addps	 xmm0, xmm1
  00314	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _v1$[ebp], xmm0

; 364  :                   _mm_sub_ps(_mm_mul_ps(x0, t0),
; 365  :                              _mm_mul_ps(x2, t3)));
; 366  :   v1 = _mm_xor_ps(v1, _mm_set_ps(0.f, -0.f, 0.f, -0.f));

  0031b	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  00322	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@00000000800000000000000080000000
  00329	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _v1$[ebp], xmm0

; 367  : 
; 368  :   /*
; 369  :    dest[2][0] =  e * t1[1] - f * t1[3] + h * t1[5];
; 370  :    dest[2][1] =-(a * t1[1] - b * t1[3] + d * t1[5]);
; 371  :    dest[2][2] =  a * t2[1] - b * t2[3] + d * t2[5];
; 372  :    dest[2][3] =-(a * t3[1] - b * t3[3] + d * t3[5]);*/
; 373  :   v2 = _mm_add_ps(_mm_mul_ps(x3, t5),

  00330	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00337	0f 59 85 80 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t3$[ebp]
  0033e	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00345	0f 59 8d c0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t1$[ebp]
  0034c	0f 5c c8	 subps	 xmm1, xmm0
  0034f	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x3$[ebp]
  00356	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t5$[ebp]
  0035d	0f 58 c1	 addps	 xmm0, xmm1
  00360	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _v2$[ebp], xmm0

; 374  :                   _mm_sub_ps(_mm_mul_ps(x0, t1),
; 375  :                              _mm_mul_ps(x1, t3)));
; 376  :   v2 = _mm_xor_ps(v2, _mm_set_ps(-0.f, 0.f, -0.f, 0.f));

  00367	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  0036e	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@80000000000000008000000000000000
  00375	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _v2$[ebp], xmm0

; 377  : 
; 378  :   /*
; 379  :    dest[3][0] =-(e * t1[2] - f * t1[4] + g * t1[5]);
; 380  :    dest[3][1] =  a * t1[2] - b * t1[4] + c * t1[5];
; 381  :    dest[3][2] =-(a * t2[2] - b * t2[4] + c * t2[5]);
; 382  :    dest[3][3] =  a * t3[2] - b * t3[4] + c * t3[5]; */
; 383  :   v3 = _mm_add_ps(_mm_mul_ps(x2, t5),

  0037c	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  00383	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t4$[ebp]
  0038a	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00391	0f 59 8d a0 fe
	ff ff		 mulps	 xmm1, XMMWORD PTR _t2$[ebp]
  00398	0f 5c c8	 subps	 xmm1, xmm0
  0039b	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2$[ebp]
  003a2	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _t5$[ebp]
  003a9	0f 58 c1	 addps	 xmm0, xmm1
  003ac	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _v3$[ebp], xmm0

; 384  :                   _mm_sub_ps(_mm_mul_ps(x0, t2),
; 385  :                              _mm_mul_ps(x1, t4)));
; 386  :   v3 = _mm_xor_ps(v3, _mm_set_ps(0.f, -0.f, 0.f, -0.f));

  003b3	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v3$[ebp]
  003ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR __xmm@00000000800000000000000080000000
  003c1	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _v3$[ebp], xmm0

; 387  : 
; 388  :   /* determinant */
; 389  :   x0 = _mm_shuffle_ps(v0, v1, _MM_SHUFFLE(0, 0, 0, 0));

  003c8	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  003cf	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _v1$[ebp], 0
  003d7	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 390  :   x1 = _mm_shuffle_ps(v2, v3, _MM_SHUFFLE(0, 0, 0, 0));

  003de	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  003e5	0f c6 85 00 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _v3$[ebp], 0
  003ed	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _x1$[ebp], xmm0

; 391  :   x0 = _mm_shuffle_ps(x0, x1, _MM_SHUFFLE(2, 0, 2, 0));

  003f4	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  003fb	0f c6 85 00 fe
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _x1$[ebp], 136 ; 00000088H
  00403	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 392  : 
; 393  :   x0 = _mm_mul_ps(x0, r0);

  0040a	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00411	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _r0$[ebp]
  00415	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 394  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 0, 1, 2, 3));

  0041c	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00423	0f c6 85 20 fe
	ff ff 1b	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 27 ; 0000001bH
  0042b	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00432	0f 58 c8	 addps	 xmm1, xmm0
  00435	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 395  :   x0 = _mm_add_ps(x0, glmm_shuff1(x0, 1, 0, 0, 1));

  0043c	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00443	0f c6 85 20 fe
	ff ff 41	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 65 ; 00000041H
  0044b	0f 28 8d 20 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _x0$[ebp]
  00452	0f 58 c8	 addps	 xmm1, xmm0
  00455	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm1

; 396  :   x0 = _mm_div_ps(_mm_set1_ps(1.0f), x0);

  0045c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00463	0f 5e 85 20 fe
	ff ff		 divps	 xmm0, XMMWORD PTR _x0$[ebp]
  0046a	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 397  : 
; 398  :   glmm_store(dest[0], _mm_mul_ps(v0, x0));

  00471	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v0$[ebp]
  00478	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  0047f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00484	6b c8 00	 imul	 ecx, eax, 0
  00487	03 4b 0c	 add	 ecx, DWORD PTR _dest$[ebx]
  0048a	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 399  :   glmm_store(dest[1], _mm_mul_ps(v1, x0));

  0048d	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  00494	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  0049b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004a0	c1 e0 00	 shl	 eax, 0
  004a3	03 43 0c	 add	 eax, DWORD PTR _dest$[ebx]
  004a6	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 400  :   glmm_store(dest[2], _mm_mul_ps(v2, x0));

  004a9	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  004b0	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  004b7	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004bc	d1 e0		 shl	 eax, 1
  004be	03 43 0c	 add	 eax, DWORD PTR _dest$[ebx]
  004c1	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 401  :   glmm_store(dest[3], _mm_mul_ps(v3, x0));

  004c4	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _v3$[ebp]
  004cb	0f 59 85 20 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x0$[ebp]
  004d2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004d7	6b c8 03	 imul	 ecx, eax, 3
  004da	03 4b 0c	 add	 ecx, DWORD PTR _dest$[ebx]
  004dd	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 402  : }

  004e0	5f		 pop	 edi
  004e1	5e		 pop	 esi
  004e2	8b e5		 mov	 esp, ebp
  004e4	5d		 pop	 ebp
  004e5	8b e3		 mov	 esp, ebx
  004e7	5b		 pop	 ebx
  004e8	c3		 ret	 0
_glm_mat4_inv_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\simd\sse2\mat4.h
;	COMDAT _glm_mat4_mulv_sse2
_TEXT	SEGMENT
_x2$ = -96						; size = 16
_x1$ = -64						; size = 16
_x0$ = -32						; size = 16
_m$ = 8							; size = 4
_v$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_mat4_mulv_sse2 PROC				; COMDAT

; 88   : glm_mat4_mulv_sse2(mat4 m, vec4 v, vec4 dest) {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-296]
  00024	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET __E3FCB8B3_mat4@h
  00035	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 89   :   __m128 x0, x1, x2;
; 90   : 
; 91   :   x0 = glmm_load(v);

  0003a	8b 43 0c	 mov	 eax, DWORD PTR _v$[ebx]
  0003d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00040	0f 29 45 e0	 movaps	 XMMWORD PTR _x0$[ebp], xmm0

; 92   :   x1 = _mm_add_ps(_mm_mul_ps(glmm_load(m[0]), glmm_shuff1x(x0, 0)),

  00044	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00048	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 85 ; 00000055H
  0004d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00052	c1 e0 00	 shl	 eax, 0
  00055	03 43 08	 add	 eax, DWORD PTR _m$[ebx]
  00058	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  0005b	0f 59 c8	 mulps	 xmm1, xmm0
  0005e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00062	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 0
  00067	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006c	6b d1 00	 imul	 edx, ecx, 0
  0006f	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  00072	0f 10 12	 movups	 xmm2, XMMWORD PTR [edx]
  00075	0f 59 d0	 mulps	 xmm2, xmm0
  00078	0f 58 d1	 addps	 xmm2, xmm1
  0007b	0f 29 55 c0	 movaps	 XMMWORD PTR _x1$[ebp], xmm2

; 93   :                   _mm_mul_ps(glmm_load(m[1]), glmm_shuff1x(x0, 1)));
; 94   : 
; 95   :   x2 = _mm_add_ps(_mm_mul_ps(glmm_load(m[2]), glmm_shuff1x(x0, 2)),

  0007f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  00083	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 255 ; 000000ffH
  00088	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0008d	6b c8 03	 imul	 ecx, eax, 3
  00090	03 4b 08	 add	 ecx, DWORD PTR _m$[ebx]
  00093	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  00096	0f 59 c8	 mulps	 xmm1, xmm0
  00099	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x0$[ebp]
  0009d	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _x0$[ebp], 170 ; 000000aaH
  000a2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000a7	d1 e2		 shl	 edx, 1
  000a9	03 53 08	 add	 edx, DWORD PTR _m$[ebx]
  000ac	0f 10 12	 movups	 xmm2, XMMWORD PTR [edx]
  000af	0f 59 d0	 mulps	 xmm2, xmm0
  000b2	0f 58 d1	 addps	 xmm2, xmm1
  000b5	0f 29 55 a0	 movaps	 XMMWORD PTR _x2$[ebp], xmm2

; 96   :                   _mm_mul_ps(glmm_load(m[3]), glmm_shuff1x(x0, 3)));
; 97   : 
; 98   :   glmm_store(dest, _mm_add_ps(x1, x2));

  000b9	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _x1$[ebp]
  000bd	0f 58 45 a0	 addps	 xmm0, XMMWORD PTR _x2$[ebp]
  000c1	8b 43 10	 mov	 eax, DWORD PTR _dest$[ebx]
  000c4	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 99   : }

  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	8b e3		 mov	 esp, ebx
  000ce	5b		 pop	 ebx
  000cf	c3		 ret	 0
_glm_mat4_mulv_sse2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec3.h
;	COMDAT _glm_vec3
_TEXT	SEGMENT
_v4$ = 8						; size = 4
_dest$ = 12						; size = 4
_glm_vec3 PROC						; COMDAT

; 132  : glm_vec3(vec4 v4, vec3 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5865475C_vec3@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  :   dest[0] = v4[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 134  :   dest[1] = v4[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 135  :   dest[2] = v4[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 0c	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v4$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 136  : }

  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_glm_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_scale
_TEXT	SEGMENT
_v$ = 8							; size = 4
_s$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_scale PROC					; COMDAT

; 432  : glm_vec4_scale(vec4 v, float s, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 433  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 434  :   glmm_store(dest, _mm_mul_ps(glmm_load(v), _mm_set1_ps(s)));

  00028	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0002d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00031	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00034	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00037	0f 59 c8	 mulps	 xmm1, xmm0
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR _dest$[ebp]
  0003d	0f 11 09	 movups	 XMMWORD PTR [ecx], xmm1

; 435  : #elif defined(CGLM_NEON_FP)
; 436  :   vst1q_f32(dest, vmulq_f32(vld1q_f32(v), vdupq_n_f32(s)));
; 437  : #else
; 438  :   dest[0] = v[0] * s;
; 439  :   dest[1] = v[1] * s;
; 440  :   dest[2] = v[2] * s;
; 441  :   dest[3] = v[3] * s;
; 442  : #endif
; 443  : }

  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00049	3b ec		 cmp	 ebp, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_glm_vec4_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4_add
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4_add PROC					; COMDAT

; 322  : glm_vec4_add(vec4 a, vec4 b, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 323  : #if defined( __SSE__ ) || defined( __SSE2__ )
; 324  :   glmm_store(dest, _mm_add_ps(glmm_load(a), glmm_load(b)));

  00028	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0002e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00031	0f 58 00	 addps	 xmm0, XMMWORD PTR [eax]
  00034	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00037	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 325  : #elif defined(CGLM_NEON_FP)
; 326  :   vst1q_f32(dest, vaddq_f32(vld1q_f32(a), vld1q_f32(b)));
; 327  : #else
; 328  :   dest[0] = a[0] + b[0];
; 329  :   dest[1] = a[1] + b[1];
; 330  :   dest[2] = a[2] + b[2];
; 331  :   dest[3] = a[3] + b[3];
; 332  : #endif
; 333  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_glm_vec4_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Light\source\repos\Spacemonster\Spacemonster-code\include\vec4.h
;	COMDAT _glm_vec4
_TEXT	SEGMENT
_v3$ = 8						; size = 4
_last$ = 12						; size = 4
_dest$ = 16						; size = 4
_glm_vec4 PROC						; COMDAT

; 110  : glm_vec4(vec3 v3, float last, vec4 dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __5D2A51D9_vec4@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  :   dest[0] = v3[0];

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	ba 04 00 00 00	 mov	 edx, 4
  00035	6b c2 00	 imul	 eax, edx, 0
  00038	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  0003b	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  0003e	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  00041	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 112  :   dest[1] = v3[1];

  00044	b8 04 00 00 00	 mov	 eax, 4
  00049	c1 e0 00	 shl	 eax, 0
  0004c	b9 04 00 00 00	 mov	 ecx, 4
  00051	c1 e1 00	 shl	 ecx, 0
  00054	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00057	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  0005a	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 113  :   dest[2] = v3[2];

  00060	b8 04 00 00 00	 mov	 eax, 4
  00065	d1 e0		 shl	 eax, 1
  00067	b9 04 00 00 00	 mov	 ecx, 4
  0006c	d1 e1		 shl	 ecx, 1
  0006e	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00071	8b 75 08	 mov	 esi, DWORD PTR _v3$[ebp]
  00074	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00077	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 114  :   dest[3] = last;

  0007a	b8 04 00 00 00	 mov	 eax, 4
  0007f	6b c8 03	 imul	 ecx, eax, 3
  00082	8b 55 10	 mov	 edx, DWORD PTR _dest$[ebp]
  00085	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _last$[ebp]
  0008a	f3 0f 11 04 0a	 movss	 DWORD PTR [edx+ecx], xmm0

; 115  : }

  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx
  00092	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00098	3b ec		 cmp	 ebp, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
_glm_vec4 ENDP
_TEXT	ENDS
END
